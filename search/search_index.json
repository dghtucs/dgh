{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5de5\u5177\u94fe\u63a5 \u8fd9\u91cc\u4fdd\u5b58\u6211\u7ecf\u5e38\u7528\u7684\u4e00\u4e9b\u7f51\u7ad9 \u7f16\u8bd1 \u6570\u8bba \u6570\u636e\u7ed3\u6784 \u8ba1\u7b97\u673a\u7f51\u7edc \u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 \u6bd5\u4e1a&\u91cf\u5316 \u56fe\u5f62\u5b66 oi \u91cf\u5316 \u6253\u5361 Roger \u529b\u6263 \u6d1b\u8c37 habitica tradingview \u4eba\u5de5\u667a\u80fd\u52a9\u624b chatgpt deepseek grok \u6e05\u534eds \u8c46\u5305 \u5b66\u4e60 \u6211\u7684 \u6821\u5185 \u7b14\u8bb01\u5728gitlab\u4e0a \u7b14\u8bb02 \u6e05\u534e\u4e91\u76d8 \u7b14\u8bb03 github\u4e0a \u5916\u754c\u81ea\u5b66\u8d44\u6e90 csdiy oiwiki stackoverflow roadmap quora \u6e05\u534e\u5de5\u5177\u7f51\u7ad9 \u7f51\u7edc\u5b66\u5802 \u6e05\u534einfo \u6e05\u534e\u90ae\u7bb1 \u8fc2\u9614\u5510 \u56fe\u4e66\u9986 \u6e05\u534e\u804c\u4e1a\u53d1\u5c55\u4e2d\u5fc3 \u6559\u53c2\u5e73\u53f0 \u6e05\u534egit \u8ba1\u7b97\u673a \u4ee3\u7801 github latex markdown\u4e2d\u4f7f\u7528 mathjax \u6765\u8868\u793a\u516c\u5f0f \u6570\u5b66 \u6280\u80fd \u77e5\u8bc6 \u68a6\u60f3 \u6bd5\u4e1a\u65c5\u884c \u7f8e\u4e3d\u7684\u5730\u65b9 \u6e05\u534e\u76f8\u5173 \u6211\u6700\u521d\u6765\u5230\u6e05\u534e\u6691\u6821\uff0c\u662f\u4e0b\u9762\u7684\u51e0\u4e2a\u94fe\u63a5\u8ba9\u6211\u5bf9\u8fd9\u7247\u5723\u5730\u5145\u6ee1\u4e86\u5411\u5f80\uff0c\u4e4b\u540e\u4e5f\u901a\u8fc7\u81ea\u5df1\u7684\u52aa\u529b\u6765\u5230\u4e86\u8fd9\u91cc \u6e05\u534e\u5ef6\u65f6\u6444\u5f71 \u6211\u613f\u79f0\u4e4b\u4e3a\u6c38\u8fdc\u7684\u795e \u6e05\u534e\u7248\u6210\u90fd \u6211\u8bb0\u5f97\u5f53\u65f6\u8fd8\u7ed9\u81ea\u5df1\u7684\u9ad8\u4e2d\u4e5f\u5199\u4e86\u4e00\u7248\u6b4c\u8bcd\uff0c\u4ea4\u7ed9\u4f9d\u66fc\u5b66\u59d0\u70b9\u8bc4\u54c8\u54c8\u54c8\uff0c\u5b66\u59d0\u8868\u626c\u4e86\u6211\uff0c\u8ba9\u6211\u6ce8\u610f\u62bc\u97f5 \u4e00\u5343\u79d2\u8ba1\u5212 \u8fd9\u662f\u4e00\u4e2a\u4f18\u9177\u65f6\u4ee3\u7684\u53e4\u65e9\u89c6\u9891\u4e86\uff0c\u5e94\u8be5\u548c\u4e07\u4e07\u6ca1\u60f3\u5230\u662f\u540c\u4e00\u4e2a\u65f6\u4ee3\u7684\uff0c\u6211\u662f\u9ad8\u4e2d\u770b\u4e86\u8fd9\u4e2a\u89c6\u9891 daily","title":"\u4e2a\u4eba\u9996\u9875"},{"location":"#_1","text":"\u8fd9\u91cc\u4fdd\u5b58\u6211\u7ecf\u5e38\u7528\u7684\u4e00\u4e9b\u7f51\u7ad9 \u7f16\u8bd1 \u6570\u8bba \u6570\u636e\u7ed3\u6784 \u8ba1\u7b97\u673a\u7f51\u7edc \u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 \u6bd5\u4e1a&\u91cf\u5316 \u56fe\u5f62\u5b66 oi \u91cf\u5316","title":"\u5de5\u5177\u94fe\u63a5"},{"location":"#_2","text":"Roger \u529b\u6263 \u6d1b\u8c37 habitica tradingview","title":"\u6253\u5361"},{"location":"#_3","text":"chatgpt deepseek grok \u6e05\u534eds \u8c46\u5305","title":"\u4eba\u5de5\u667a\u80fd\u52a9\u624b"},{"location":"#_4","text":"\u6211\u7684","title":"\u5b66\u4e60"},{"location":"#_5","text":"\u7b14\u8bb01\u5728gitlab\u4e0a \u7b14\u8bb02 \u6e05\u534e\u4e91\u76d8 \u7b14\u8bb03 github\u4e0a","title":"\u6821\u5185"},{"location":"#_6","text":"csdiy oiwiki stackoverflow roadmap quora","title":"\u5916\u754c\u81ea\u5b66\u8d44\u6e90"},{"location":"#_7","text":"\u7f51\u7edc\u5b66\u5802 \u6e05\u534einfo \u6e05\u534e\u90ae\u7bb1 \u8fc2\u9614\u5510 \u56fe\u4e66\u9986 \u6e05\u534e\u804c\u4e1a\u53d1\u5c55\u4e2d\u5fc3 \u6559\u53c2\u5e73\u53f0 \u6e05\u534egit","title":"\u6e05\u534e\u5de5\u5177\u7f51\u7ad9"},{"location":"#_8","text":"","title":"\u8ba1\u7b97\u673a"},{"location":"#_9","text":"github","title":"\u4ee3\u7801"},{"location":"#latex","text":"markdown\u4e2d\u4f7f\u7528 mathjax \u6765\u8868\u793a\u516c\u5f0f","title":"latex"},{"location":"#_10","text":"","title":"\u6570\u5b66"},{"location":"#_11","text":"","title":"\u6280\u80fd"},{"location":"#_12","text":"","title":"\u77e5\u8bc6"},{"location":"#_13","text":"","title":"\u68a6\u60f3"},{"location":"#_14","text":"\u7f8e\u4e3d\u7684\u5730\u65b9","title":"\u6bd5\u4e1a\u65c5\u884c"},{"location":"#_15","text":"\u6211\u6700\u521d\u6765\u5230\u6e05\u534e\u6691\u6821\uff0c\u662f\u4e0b\u9762\u7684\u51e0\u4e2a\u94fe\u63a5\u8ba9\u6211\u5bf9\u8fd9\u7247\u5723\u5730\u5145\u6ee1\u4e86\u5411\u5f80\uff0c\u4e4b\u540e\u4e5f\u901a\u8fc7\u81ea\u5df1\u7684\u52aa\u529b\u6765\u5230\u4e86\u8fd9\u91cc \u6e05\u534e\u5ef6\u65f6\u6444\u5f71 \u6211\u613f\u79f0\u4e4b\u4e3a\u6c38\u8fdc\u7684\u795e \u6e05\u534e\u7248\u6210\u90fd \u6211\u8bb0\u5f97\u5f53\u65f6\u8fd8\u7ed9\u81ea\u5df1\u7684\u9ad8\u4e2d\u4e5f\u5199\u4e86\u4e00\u7248\u6b4c\u8bcd\uff0c\u4ea4\u7ed9\u4f9d\u66fc\u5b66\u59d0\u70b9\u8bc4\u54c8\u54c8\u54c8\uff0c\u5b66\u59d0\u8868\u626c\u4e86\u6211\uff0c\u8ba9\u6211\u6ce8\u610f\u62bc\u97f5 \u4e00\u5343\u79d2\u8ba1\u5212 \u8fd9\u662f\u4e00\u4e2a\u4f18\u9177\u65f6\u4ee3\u7684\u53e4\u65e9\u89c6\u9891\u4e86\uff0c\u5e94\u8be5\u548c\u4e07\u4e07\u6ca1\u60f3\u5230\u662f\u540c\u4e00\u4e2a\u65f6\u4ee3\u7684\uff0c\u6211\u662f\u9ad8\u4e2d\u770b\u4e86\u8fd9\u4e2a\u89c6\u9891 daily","title":"\u6e05\u534e\u76f8\u5173"},{"location":"about/","text":"\u5de5\u5177\u94fe\u63a5 \u8fd9\u91cc\u4fdd\u5b58\u6211\u7ecf\u5e38\u7528\u7684\u4e00\u4e9b\u7f51\u7ad9 \u6253\u5361 Roger \u529b\u6263 \u6d1b\u8c37 habitica \u4eba\u5de5\u667a\u80fd\u52a9\u624b chatgpt deepseek grok \u6e05\u534eds \u8c46\u5305 \u5b66\u4e60 \u6211\u7684 \u6821\u5185 \u7b14\u8bb01\u5728gitlab\u4e0a \u7b14\u8bb02 \u6e05\u534e\u4e91\u76d8 \u7b14\u8bb03 github\u4e0a \u5916\u754c\u81ea\u5b66\u8d44\u6e90 csdiy oiwiki stackoverflow roadmap quora \u6e05\u534e\u5de5\u5177\u7f51\u7ad9 \u7f51\u7edc\u5b66\u5802 \u6e05\u534einfo \u6e05\u534e\u90ae\u7bb1 \u8fc2\u9614\u5510 \u56fe\u4e66\u9986 \u6e05\u534e\u804c\u4e1a\u53d1\u5c55\u4e2d\u5fc3 \u6559\u53c2\u5e73\u53f0 \u6e05\u534egit \u8ba1\u7b97\u673a \u4ee3\u7801 github latex markdown\u4e2d\u4f7f\u7528 mathjax \u6765\u8868\u793a\u516c\u5f0f \u6570\u5b66 \u6280\u80fd \u77e5\u8bc6 \u68a6\u60f3 \u6bd5\u4e1a\u65c5\u884c \u7f8e\u4e3d\u7684\u5730\u65b9 \u6e05\u534e\u76f8\u5173 \u6211\u6700\u521d\u6765\u5230\u6e05\u534e\u6691\u6821\uff0c\u662f\u4e0b\u9762\u7684\u51e0\u4e2a\u94fe\u63a5\u8ba9\u6211\u5bf9\u8fd9\u7247\u5723\u5730\u5145\u6ee1\u4e86\u5411\u5f80\uff0c\u4e4b\u540e\u4e5f\u901a\u8fc7\u81ea\u5df1\u7684\u52aa\u529b\u6765\u5230\u4e86\u8fd9\u91cc \u6e05\u534e\u5ef6\u65f6\u6444\u5f71 \u6211\u613f\u79f0\u4e4b\u4e3a\u6c38\u8fdc\u7684\u795e \u6e05\u534e\u7248\u6210\u90fd \u6211\u8bb0\u5f97\u5f53\u65f6\u8fd8\u7ed9\u81ea\u5df1\u7684\u9ad8\u4e2d\u4e5f\u5199\u4e86\u4e00\u7248\u6b4c\u8bcd\uff0c\u4ea4\u7ed9\u4f9d\u66fc\u5b66\u59d0\u70b9\u8bc4\u54c8\u54c8\u54c8\uff0c\u5b66\u59d0\u8868\u626c\u4e86\u6211\uff0c\u8ba9\u6211\u6ce8\u610f\u62bc\u97f5 \u4e00\u5343\u79d2\u8ba1\u5212 \u8fd9\u662f\u4e00\u4e2a\u4f18\u9177\u65f6\u4ee3\u7684\u53e4\u65e9\u89c6\u9891\u4e86\uff0c\u5e94\u8be5\u548c\u4e07\u4e07\u6ca1\u60f3\u5230\u662f\u540c\u4e00\u4e2a\u65f6\u4ee3\u7684\uff0c\u6211\u662f\u9ad8\u4e2d\u770b\u4e86\u8fd9\u4e2a\u89c6\u9891","title":"\u5de5\u5177\u94fe\u63a5\u7f51\u5740"},{"location":"about/#_1","text":"\u8fd9\u91cc\u4fdd\u5b58\u6211\u7ecf\u5e38\u7528\u7684\u4e00\u4e9b\u7f51\u7ad9","title":"\u5de5\u5177\u94fe\u63a5"},{"location":"about/#_2","text":"Roger \u529b\u6263 \u6d1b\u8c37 habitica","title":"\u6253\u5361"},{"location":"about/#_3","text":"chatgpt deepseek grok \u6e05\u534eds \u8c46\u5305","title":"\u4eba\u5de5\u667a\u80fd\u52a9\u624b"},{"location":"about/#_4","text":"\u6211\u7684","title":"\u5b66\u4e60"},{"location":"about/#_5","text":"\u7b14\u8bb01\u5728gitlab\u4e0a \u7b14\u8bb02 \u6e05\u534e\u4e91\u76d8 \u7b14\u8bb03 github\u4e0a","title":"\u6821\u5185"},{"location":"about/#_6","text":"csdiy oiwiki stackoverflow roadmap quora","title":"\u5916\u754c\u81ea\u5b66\u8d44\u6e90"},{"location":"about/#_7","text":"\u7f51\u7edc\u5b66\u5802 \u6e05\u534einfo \u6e05\u534e\u90ae\u7bb1 \u8fc2\u9614\u5510 \u56fe\u4e66\u9986 \u6e05\u534e\u804c\u4e1a\u53d1\u5c55\u4e2d\u5fc3 \u6559\u53c2\u5e73\u53f0 \u6e05\u534egit","title":"\u6e05\u534e\u5de5\u5177\u7f51\u7ad9"},{"location":"about/#_8","text":"","title":"\u8ba1\u7b97\u673a"},{"location":"about/#_9","text":"github","title":"\u4ee3\u7801"},{"location":"about/#latex","text":"markdown\u4e2d\u4f7f\u7528 mathjax \u6765\u8868\u793a\u516c\u5f0f","title":"latex"},{"location":"about/#_10","text":"","title":"\u6570\u5b66"},{"location":"about/#_11","text":"","title":"\u6280\u80fd"},{"location":"about/#_12","text":"","title":"\u77e5\u8bc6"},{"location":"about/#_13","text":"","title":"\u68a6\u60f3"},{"location":"about/#_14","text":"\u7f8e\u4e3d\u7684\u5730\u65b9","title":"\u6bd5\u4e1a\u65c5\u884c"},{"location":"about/#_15","text":"\u6211\u6700\u521d\u6765\u5230\u6e05\u534e\u6691\u6821\uff0c\u662f\u4e0b\u9762\u7684\u51e0\u4e2a\u94fe\u63a5\u8ba9\u6211\u5bf9\u8fd9\u7247\u5723\u5730\u5145\u6ee1\u4e86\u5411\u5f80\uff0c\u4e4b\u540e\u4e5f\u901a\u8fc7\u81ea\u5df1\u7684\u52aa\u529b\u6765\u5230\u4e86\u8fd9\u91cc \u6e05\u534e\u5ef6\u65f6\u6444\u5f71 \u6211\u613f\u79f0\u4e4b\u4e3a\u6c38\u8fdc\u7684\u795e \u6e05\u534e\u7248\u6210\u90fd \u6211\u8bb0\u5f97\u5f53\u65f6\u8fd8\u7ed9\u81ea\u5df1\u7684\u9ad8\u4e2d\u4e5f\u5199\u4e86\u4e00\u7248\u6b4c\u8bcd\uff0c\u4ea4\u7ed9\u4f9d\u66fc\u5b66\u59d0\u70b9\u8bc4\u54c8\u54c8\u54c8\uff0c\u5b66\u59d0\u8868\u626c\u4e86\u6211\uff0c\u8ba9\u6211\u6ce8\u610f\u62bc\u97f5 \u4e00\u5343\u79d2\u8ba1\u5212 \u8fd9\u662f\u4e00\u4e2a\u4f18\u9177\u65f6\u4ee3\u7684\u53e4\u65e9\u89c6\u9891\u4e86\uff0c\u5e94\u8be5\u548c\u4e07\u4e07\u6ca1\u60f3\u5230\u662f\u540c\u4e00\u4e2a\u65f6\u4ee3\u7684\uff0c\u6211\u662f\u9ad8\u4e2d\u770b\u4e86\u8fd9\u4e2a\u89c6\u9891","title":"\u6e05\u534e\u76f8\u5173"},{"location":"art/art/","text":"\u4e00\u76f4\u6709\u4e2a\u6587\u5b66\u827a\u672f\u7684\u68a6\u60f3\uff0c\u60f3\u5199\u4e00\u672c\u5c0f\u8bf4\uff0c\u62cd\u4e00\u90e8\u7535\u5f71\uff0c\u7559\u4f5c\u4ee5\u540e\u5427","title":"\u6587\u5b66"},{"location":"art/music/","text":"\u97f3\u4e50","title":"\u97f3\u4e50"},{"location":"art/English/english/","text":"\u82f1\u8bed\u662f\u6700\u91cd\u8981\u7684\uff0c\u5c31\u50cf\u519c\u6c11\u88ab\u571f\u5730\u9650\u5236\uff0c\u6211\u4eec\u4e0d\u80fd\u88ab\u82f1\u8bed\u9650\u5236\u4f4f \u5355\u8bcd vocabulary \u8bed\u6cd5 \u5f71\u89c6 \u7535\u5f71 TV\u7535\u89c6\u5267 bigbang \u97f3\u4e50 \u4e66\u7c4d","title":"\u82f1\u8bed"},{"location":"art/English/english/#_1","text":"vocabulary","title":"\u5355\u8bcd"},{"location":"art/English/english/#_2","text":"","title":"\u8bed\u6cd5"},{"location":"art/English/english/#_3","text":"","title":"\u5f71\u89c6"},{"location":"art/English/english/#_4","text":"","title":"\u7535\u5f71"},{"location":"art/English/english/#tv","text":"bigbang","title":"TV\u7535\u89c6\u5267"},{"location":"art/English/english/#_5","text":"","title":"\u97f3\u4e50"},{"location":"art/English/english/#_6","text":"","title":"\u4e66\u7c4d"},{"location":"art/English/tv/bigbang/bigbang/","text":"\u7b2c\u4e00\u5b63 \u7b2c1\u96c6 \u7b2c2\u96c6 \u7b2c3\u96c6 \u7b2c4\u96c6 \u7b2c5\u96c6 \u7b2c6\u96c6 \u7b2c7\u96c6","title":"\u7b2c\u4e00\u5b63"},{"location":"art/English/tv/bigbang/bigbang/#_1","text":"\u7b2c1\u96c6 \u7b2c2\u96c6 \u7b2c3\u96c6 \u7b2c4\u96c6 \u7b2c5\u96c6 \u7b2c6\u96c6 \u7b2c7\u96c6","title":"\u7b2c\u4e00\u5b63"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/","text":"\u53f0\u8bcd \u624b\u6253\u53f0\u8bcd \u751f\u8bcd laxative \u8c22\u9080 colon \u5927\u80a0\uff1b\u5192\u53f7 masturbate \u81ea\u6478 doodle \u4e71\u6d82 lactose-intolerant \u4e73\u7cd6\u4e0d\u8010 shampoo \u6d17\u53d1\u6c34 conditioner \u62a4\u53d1\u7d20 is there a trick to getting it to switch from tub to shower? trick \u65cb\u94ae it's a sentiment i can say in 6 languages sentiment \u60c5\u7eea\uff1b\u795d\u8bcd \u53e5\u5b50 Should we have invited her for lunch? \u8fd9\u91cc\u7684have invited\u8868\u793aa past possibility or missed opportunity\uff0c\u8fd9\u91cc\u5f3a\u8c03Leonerd\u6709\u70b9\u61ca\u6094\u521a\u624d\u6ca1\u6709\u9080\u8bf7Penny\u6765\u5403\u996d \"Should we invite her for lunch?\" \u2192 This is asking about a present or future action. \"Should we have invited her for lunch?\" \u2192 This is asking about whether inviting her in the past would have been the right decision. \u540c\u6837\u7684\u4f8b\u5b50\u8fd8\u6709 \"We should have studied more for the test.\" \u2192 We didn\u2019t study enough, and now we regret it. \"Should I have told her the truth?\" \u2192 I'm wondering if telling her the truth in the past was the right choice. In this context, \"commentary\" refers to audio commentary, which is an additional feature included in DVDs or Blu-rays where the creators, directors, actors, or other involved people discuss the episode while it plays. the phrase \"might want to\" is a polite or indirect way of giving advice or making a suggestion. Meaning of \"might want to\" It means \"should\" or \"it would be better if you\", but in a softer, less direct way. It implies that it is advisable or a good idea to do something, without sounding too forceful. Rewriting the Sentence for Clarity Direct version: \"Leonard, don\u2019t mention bowel movements when inviting someone to lunch.\" Polite version: \"Leonard, you might want to avoid mentioning bowel movements when inviting someone to lunch.\" In the phrase \"Here I sit, broken-hearted\", \"Here I sit\" is a way of describing one's current state or situation. Context and Meaning: This phrase is actually a reference to a common joke or piece of restroom graffiti: \"Here I sit, broken-hearted, Tried to poop but only farted.\" This is a humorous and well-known rhyme often found scribbled in public restrooms. Breaking It Down: \"Here I sit\" \u2192 Means \"I am sitting here\", usually referring to sitting on a toilet. \"Broken-hearted\" \u2192 A humorous exaggeration of disappointment, in this case, about an unsuccessful bathroom trip. In the context of The Big Bang Theory, the character is joking that the differential equation being referenced is as common and trivial as this famous piece of restroom graffiti. i'm a sagittarius which probably tells you way more than you need to know yes,it tells us that you participate in the mass cultural delusion that the sun's apparent position ralative to arbitrarily defined constellations at the time of your birth somehow affects your personality \u8fd9\u53c8\u662f\u4e00\u4e2a\u957f\u96be\u53e5 \"The sun's apparent position\" refers to the position of the sun relative to certain constellations in the sky at the time of your birth. \"Arbitrarily defined constellations\" points out that the constellations are subjectively defined and don't have a universal meaning across all cultures or throughout history. The speaker is poking fun at the idea that this position can somehow influence or determine someone's personality. The speaker is mocking astrology by suggesting that claiming one's astrological sign (e.g., Sagittarius) is a way of participating in an unfounded, widespread belief that the position of celestial bodies at birth can influence personality. The sarcasm implies that astrology is unscientific and not a reliable way to understand a person\u2019s character. \u65e2\u7136\u8c08\u5230\u4e86\u661f\u5ea7\uff0c\u6269\u5c55\u4e00\u4e0b Here\u2019s a list of all 12 zodiac signs, their English names, Chinese names, birth date ranges, and general personality traits: 1. Aries (\u767d\u7f8a\u5ea7) Date: March 21 - April 19 Personality Traits: Aries are known for being energetic , confident , and determined . They are natural leaders who often take initiative, but can sometimes be impulsive and impatient . 2. Taurus (\u91d1\u725b\u5ea7) Date: April 20 - May 20 Personality Traits: Tauruses are practical , patient , and loyal . They value stability and security, and are often seen as reliable and persistent , though they can also be stubborn . 3. Gemini (\u53cc\u5b50\u5ea7) Date: May 21 - June 20 Personality Traits: Geminis are curious , adaptable , and intelligent . They are often seen as sociable and expressive , but can be perceived as inconsistent or indecisive . 4. Cancer (\u5de8\u87f9\u5ea7) Date: June 21 - July 22 Personality Traits: Cancers are sensitive , empathetic , and protective . They deeply care about their loved ones and value home life, but can also be moody and easily hurt . 5. Leo (\u72ee\u5b50\u5ea7) Date: July 23 - August 22 Personality Traits: Leos are charismatic , confident , and generous . They often love being the center of attention and are natural leaders, though they can sometimes be seen as arrogant or proud . 6. Virgo (\u5904\u5973\u5ea7) Date: August 23 - September 22 Personality Traits: Virgos are practical , analytical , and detail-oriented . They are often perfectionists, valuing cleanliness and order, but can be overly critical or worry-prone . 7. Libra (\u5929\u79e4\u5ea7) Date: September 23 - October 22 Personality Traits: Libras are charming , diplomatic , and fair-minded . They value harmony and balance in relationships, but can sometimes be indecisive and have difficulty with confrontation. 8. Scorpio (\u5929\u874e\u5ea7) Date: October 23 - November 21 Personality Traits: Scorpios are passionate , determined , and resourceful . They are known for their intensity and loyalty, but can also be secretive , jealous , and possessive . 9. Sagittarius (\u5c04\u624b\u5ea7) Date: November 22 - December 21 Personality Traits: Sagittarians are adventurous , optimistic , and independent . They are often curious and love exploring new ideas, but can be restless and impatient . 10. Capricorn (\u6469\u7faf\u5ea7) Date: December 22 - January 19 Personality Traits: Capricorns are disciplined , responsible , and ambitious . They are hardworking and goal-oriented, though they can sometimes be seen as cold or pessimistic . 11. Aquarius (\u6c34\u74f6\u5ea7) Date: January 20 - February 18 Personality Traits: Aquarians are innovative , independent , and idealistic . They are often visionaries who enjoy thinking outside the box, but can be detached or eccentric . 12. Pisces (\u53cc\u9c7c\u5ea7) Date: February 19 - March 20 Personality Traits: Pisceans are compassionate , artistic , and intuitive . They are highly empathetic and sensitive, but can sometimes be overly idealistic or escapist . Summary: Fire signs : Aries, Leo, Sagittarius Earth signs : Taurus, Virgo, Capricorn Air signs : Gemini, Libra, Aquarius Water signs : Cancer, Scorpio, Pisces Each sign has its own unique blend of strengths and weaknesses, and astrology enthusiasts often use these personality traits to better understand themselves or others. Anyways,im also writing a screenplay It;s about a sensitive girl who comes to la from lincoln nebraska tobe a actress and winds up at the cheesecake factory so it's based on your life no im from Omaha If that was movie,i would go see it \u6700\u540e\u4e00\u53e5\u4e3a\u4ec0\u4e48\u7528\u8fc7\u53bb\u5f0f The last sentence \"If that was a movie, I would go see it\" uses the past tense \"was\" in a hypothetical situation, which is a common structure in English when talking about imaginary or unreal scenarios. \u201cHate someone\u2019s guts\u201d\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u82f1\u8bed\u4e60\u8bed\uff0c\u5c24\u5176\u5728\u53e3\u8bed\u4e2d\u7528\u6765\u8868\u8fbe\u5f3a\u70c8\u7684\u538c\u6076\u60c5\u7eea\u3002\u5b83\u8d77\u6e90\u4e8e\u201cguts\u201d\u4f5c\u4e3a\u4eba\u4f53\u6838\u5fc3\u90e8\u4f4d\u7684\u9690\u55bb\uff0c\u9010\u6e10\u6f14\u53d8\u4e3a\u8868\u793a\u4e00\u4e2a\u4eba\u7684\u5185\u5728\u672c\u8d28\u3002\u8fd9\u79cd\u7528\u6cd5\u5728\u82f1\u8bed\u56fd\u5bb6\u975e\u5e38\u81ea\u7136\uff0c\u7279\u522b\u662f\u5728\u975e\u6b63\u5f0f\u573a\u5408\u3002 \u8fd9\u4e2a\u77ed\u8bed\u5e38\u7528\u4e8e\u8868\u8fbe\u8d1f\u62c5\u3001\u60ca\u8bb6\u6216\u60c5\u7eea\u7684\u53e0\u52a0\u3002\u4f8b\u5982\uff1a \u201cI have so much work to do, and now, on top of everything else, my computer crashed.\u201d \uff08\u6211\u5df2\u7ecf\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\u4e86\uff0c\u73b0\u5728\u9664\u4e86\u5176\u4ed6\u4e00\u5207\u4e4b\u5916\uff0c\u6211\u7684\u7535\u8111\u8fd8\u574f\u4e86\u3002\uff09 \u201cShe\u2019s rude, selfish, and, on top of everything else, she never apologizes.\u201d \uff08\u5979\u5f88\u7c97\u9c81\uff0c\u5f88\u81ea\u79c1\uff0c\u800c\u4e14\u5728\u6240\u6709\u8fd9\u4e9b\u4e4b\u4e0a\uff0c\u5979\u4ece\u4e0d\u9053\u6b49\u3002\uff09 Really?would it be totally weird if i used it? \u201cWould\u201d\u662f\u52a9\u52a8\u8bcd\u201cwill\u201d\u7684\u8fc7\u53bb\u5f0f\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u4e00\u79cd\u5047\u8bbe\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u5b9e\u3002\u8fd9\u662f\u4e00\u79cd\u865a\u62df\u8bed\u6c14\u7684\u6807\u5fd7\uff0c\u7528\u4e8e\u8ba8\u8bba\u53ef\u80fd\u6027\u6216\u60f3\u8c61\u4e2d\u7684\u60c5\u666f\u3002 \u201cPoint taken\u201d \u662f\u4e00\u4e2a\u82f1\u8bed\u77ed\u8bed\uff0c\u610f\u601d\u662f\u201c\u6211\u660e\u767d\u4e86\u4f60\u7684\u610f\u601d\u201d\u6216\u201c\u4f60\u7684\u89c2\u70b9\u6211\u63a5\u53d7\u4e86\u201d\u3002\u5b83\u901a\u5e38\u7528\u5728\u5bf9\u8bdd\u4e2d\uff0c\u8868\u793a\u8bf4\u8bdd\u8005\u8ba4\u53ef\u5bf9\u65b9\u63d0\u51fa\u7684\u770b\u6cd5\u3001\u8bba\u70b9\u6216\u7ea0\u6b63\uff0c\u5e76\u4e14\u613f\u610f\u6839\u636e\u8fd9\u4e2a\u89c2\u70b9\u8c03\u6574\u81ea\u5df1\u7684\u8bf4\u6cd5\u6216\u7acb\u573a\u3002\u8bed\u6c14\u4e0a\uff0c\u5b83\u5f80\u5f80\u662f\u7b80\u6d01\u4e14\u7565\u5e26\u8ba9\u6b65\u7684\uff0c\u65e2\u627f\u8ba4\u5bf9\u65b9\u7684\u610f\u89c1\uff0c\u53c8\u4e0d\u5c55\u5f00\u8fc7\u591a\u4e89\u8fa9\u3002 do you think this posibility will be helped or hindered when she discovers your luke skywalker no-more-tears shampoo I\u2019d say it could go either way\u2014helped or hindered\u2014depending on her sense of humor! If she\u2019s a Star Wars fan and appreciates a good laugh, discovering a \u201cLuke Skywalker no-more-tears shampoo\u201d might help the possibility. I mean, who wouldn\u2019t be charmed by a guy with Jedi-themed grooming products that promise no crying? It\u2019s quirky and endearing\u2014might even make her stick around longer, clothes or no clothes! But if she\u2019s not into sci-fi puns or thinks it\u2019s too weird, it could hinder things. She might raise an eyebrow and wonder what kind of nerd she\u2019s dealing with\u2014maybe even bolt for the door! So, I guess it hinges on whether she\u2019d say, \u201cUse the Force, that\u2019s hilarious!\u201d or \u201cI\u2019ve got a bad feeling about this\u2026\u201d hang on ,there really is a lady here? and you want us out because youre anticipating coitus? so she's available for coitus? \u201cCoitus interruptus\u201d\u662f\u4e00\u4e2a\u62c9\u4e01\u8bcd\uff0c\u76f4\u8bd1\u662f\u201c\u4e2d\u65ad\u7684\u6027\u4ea4\u201d\uff0c\u6307\u7684\u662f\u6027\u884c\u4e3a\u4e2d\u9014\u505c\u6b62\uff08\u901a\u5e38\u662f\u4e3a\u4e86\u907f\u5b55\uff0c\u7537\u6027\u5728\u9ad8\u6f6e\u524d\u9000\u51fa\uff09\u3002 \u5728\u8fd9\u91cc\uff0c\u8bf4\u8bdd\u8005\u7528\u8fd9\u4e2a\u8bcd\u5236\u9020\u4e86\u4e00\u4e2a\u53cc\u5173\u8bed\uff08pun\uff09\uff1a \u524d\u4e00\u53e5\u662f\u201c\u80fd\u4e0d\u80fd\u522b\u8001\u8bf4coitus\u201d\uff0c\u610f\u601d\u662f\u60f3\u505c\u6b62\u4f7f\u7528\u8fd9\u4e2a\u8bcd\u3002 \u6700\u540e\u4e00\u53e5\u63a5\u832c\u8bf4\u201c\u5982\u679c\u505c\u4e0b\u6765\uff0c\u90a3\u5c31\u662fcoitus interruptus\u201d\uff0c\u628a\u201c\u505c\u6b62\u8bf4coitus\u201d\u548c\u201c\u6027\u4ea4\u4e2d\u9014\u505c\u6b62\u201d\u8054\u7cfb\u8d77\u6765\uff0c\u73a9\u4e86\u4e2a\u6587\u5b57\u6e38\u620f\u3002 \u5e7d\u9ed8\u70b9\uff1a\u8fd9\u53e5\u6545\u610f\u7528\u4e86\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u672f\u8bed\uff08coitus interruptus\uff09\u6765\u56de\u5e94\u201c\u522b\u8bf4coitus\u201d\u7684\u8bf7\u6c42\uff0c\u65e2\u6ca1\u505c\u7528\u201ccoitus\u201d\uff0c\u8fd8\u5347\u7ea7\u4e86\u7b11\u70b9\uff0c\u663e\u5f97\u5f88\u673a\u667a\u53c8\u6709\u70b9\u8c03\u76ae\u3002 i really think we should examine the chain of causality here must we? event A a beautiful woman stand naked in our shower event B we drive halfway across town to retrieve a television set from the aforementioned woman's ex-boyfriend \u5728\u201cwe drive halfway across town\u201d\u4e2d\uff1a \u5b57\u9762\u610f\u601d\uff1a\u201cHalfway\u201d \u662f\u201c\u534a\u8def\u201d\u6216\u201c\u4e00\u534a\u201d\u7684\u610f\u601d\uff0c\u6307\u7684\u662f\u8ddd\u79bb\u4e0a\u7684\u4e00\u534a\u3002 \u5177\u4f53\u542b\u4e49\uff1a \u201cAcross town\u201d \u8868\u793a\u201c\u7a7f\u8fc7\u9547\u5b50\u201d\u6216\u201c\u5230\u9547\u5b50\u7684\u53e6\u4e00\u8fb9\u201d\uff0c\u901a\u5e38\u6307\u4ece\u4e00\u4e2a\u5730\u65b9\u5230\u9547\u5b50\u7684\u5bf9\u4fa7\uff08\u53ef\u80fd\u662f\u6574\u4e2a\u9547\u5b50\u7684\u5bbd\u5ea6\u6216\u957f\u5ea6\uff09\u3002 \u201cHalfway across town\u201d \u5c31\u662f\u201c\u7a7f\u8fc7\u9547\u5b50\u4e00\u534a\u7684\u8ddd\u79bb\u201d\u6216\u201c\u5230\u9547\u5b50\u4e2d\u95f4\u201d\u3002 \u6240\u4ee5\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u4ed6\u4eec\u5f00\u8f66\u8d70\u4e86\u9547\u5b50\u4e00\u534a\u7684\u8def\u7a0b\uff0c\u53bb\u53d6\u7535\u89c6\u673a\uff0c\u4f46\u5e76\u6ca1\u6709\u8d70\u5b8c\u5168\u7a0b\uff08\u5230\u5bf9\u4fa7\uff09\u3002 \u7ffb\u8bd1\uff1a\u201c\u6211\u4eec\u5f00\u8f66\u5230\u9547\u5b50\u4e00\u534a\u7684\u5730\u65b9\u201d \u6216 \u201c\u6211\u4eec\u5f00\u4e86\u534a\u4e2a\u9547\u7684\u8def\u201d\u3002 Query,on what plane of existance is there even a semi-rational link between these events \"semi-rational link\" \u53ef\u8bd1\u4e3a\"\u52c9\u5f3a\u5408\u7406\u7684\u5173\u8054\"\u4ee5\u4fdd\u7559\u539f\u6587\u7684\u8bbd\u523a\u8bed\u6c14 There's some kind of dispute between Penny and her ex boyfriend as to who gets custody of the tv \"as to\" \u5728\u8fd9\u91cc\u76f8\u5f53\u4e8e \"regarding\"\uff08\u5173\u4e8e\uff09 \u6216 \"concerning\"\uff08\u6d89\u53ca\uff09\uff0c\u5f3a\u8c03\u4e89\u8bba\u7684\u7126\u70b9\u3002 \u7c7b\u4f3c\u7528\u6cd5\u4e3e\u4f8b\uff1a \"There was a debate as to whether the plan would work.\" \uff08\u5173\u4e8e\u8fd9\u4e2a\u8ba1\u5212\u662f\u5426\u53ef\u884c\uff0c\u5b58\u5728\u4e89\u8bba\u3002\uff09 \"He was uncertain as to what to do next.\" \uff08\u4ed6\u5bf9\u4e8e\u4e0b\u4e00\u6b65\u8be5\u505a\u4ec0\u4e48\u4e0d\u592a\u786e\u5b9a\u3002\uff09 she just wanted to avoid having a scene with him \"avoid having a scene\" \"scene\" \u5728\u8fd9\u91cc\u6307 \"\u516c\u5f00\u4e89\u5435\u3001\u96be\u582a\u7684\u573a\u9762\"\uff08\u7c7b\u4f3c\u4e2d\u6587\u7684 \"\u95f9\u5267\u3001\u5f53\u4f17\u51fa\u4e11\"\uff09\u3002 \u6240\u4ee5 \"avoid having a scene\" \u2248 \"\u907f\u514d\u5f53\u4f17\u5435\u67b6/\u95f9\u5f97\u96be\u770b\"\u3002 \u4f8b\u53e5\u5bf9\u6bd4\uff1a \u82f1\u6587\uff1a\"She made a scene at the restaurant.\" \u4e2d\u6587\uff1a\"\u5979\u5728\u9910\u5385\u5927\u5435\u5927\u95f9/\u5f53\u4f17\u51fa\u4e11\u3002\" \u82f1\u6587\uff1a\"I don\u2019t want to cause a scene.\" \u4e2d\u6587\uff1a\"\u6211\u4e0d\u60f3\u641e\u5f97\u5927\u5bb6\u96be\u582a\u3002\" we're here to pick up penny's tv get lost \"Get lost.\" \u5b57\u9762\u610f\u601d\uff1a\"\u8ff7\u8def\u53bb\u5427\"\uff08\u4f46\u5b9e\u9645\u662f\u5f3a\u70c8\u8981\u6c42\u5bf9\u65b9\u79bb\u5f00\uff09 \u4e2d\u6587\u5bf9\u5e94\uff1a\"\u6eda\u5f00\"\uff08\u5f3a\u786c\uff09\u3001\"\u4e00\u8fb9\u53bb\"\uff08\u7a0d\u7f13\u548c\uff09\u3001\"\u522b\u788d\u4e8b\"\uff08\u5e26\u4e0d\u8010\u70e6\uff09 \u6839\u636e\u8bed\u5883\uff0c\u8fd9\u91cc\u9002\u5408\u7528 \"\u6eda\u5f00\" \uff08\u56e0\u6d89\u53ca\u4e89\u6267\uff0c\u8bed\u6c14\u8f83\u51b2\uff09 l,the tv's in the building we've been denied access to the building,ergo,we are done \"Ergo, we are done.\" \"Ergo\"\uff08\u62c9\u4e01\u8bed\uff09= \"\u56e0\u6b64\"\uff0c\u8fd9\u91cc\u5e26\u70b9\u6b63\u5f0f/\u8bbd\u523a\u8bed\u6c14\uff0c\u53ef\u8bd1\u4e3a \"\u6240\u4ee5\" \u6216\u62c9\u957f\u8bed\u8c03 \"\u6240\u4ee5\u2014\u2014\"\u3002 \"we are done\" = \"\u6211\u4eec\u5b8c\u4e86/\u6ca1\u620f\u4e86/\u641e\u4e0d\u5b9a\u4e86\"\uff0c\u4e2d\u6587\u4e60\u60ef\u8bf4 \"\u8fd9\u4e8b\u9ec4\u4e86\" \u6216 \"\u5230\u6b64\u4e3a\u6b62\u5427\"\u3002 exccuse me ,if i were to give up on the first little hitch i never would have identified the fingerprints of string theory in the aftermath of the big bang \"first little hitch\" \"hitch\"=\u969c\u788d\uff0c\u7528\"\u5c0f\u632b\u6298\"\u66f4\u7b26\u5408\u4e2d\u6587\"\u5c0f\u56f0\u96be\"\u7684\u8f7b\u63cf\u6de1\u5199\u611f\u3002 \"fingerprints of string theory\" \u76f4\u8bd1\"\u5f26\u7406\u8bba\u7684\u6307\u7eb9\"\u4fdd\u7559\u539f\u6587\u8bd7\u610f\u7684\u9690\u55bb\uff08\u7406\u8bba\u5b58\u5728\u7684\u8bc1\u636e\uff09\u3002 \"in the aftermath of the big bang\" \"aftermath\"\u672c\u6307\u707e\u96be\u540e\u679c\uff0c\u4f46\"\u4f59\u8f89\"\u65e2\u7b26\u5408\u7269\u7406\u8bed\u5883\uff08\u5b87\u5b99\u5fae\u6ce2\u80cc\u666f\u8f90\u5c04\uff09\uff0c\u53c8\u6dfb\u6587\u5b66\u7f8e\u611f\u3002 sheldon,im sos sorry i dragged you through this it's ok,it's not my first pantsing and it wont be my last \"pantsing\"\u5e76\u4e0d\u662f\u6307\u88e4\u5b50 \u5b57\u9762\u6307\"\u88ab\u6252\u88e4\u5b50\"\uff0c\u5728\u6821\u56ed\u6587\u5316\u4e2d\u662f\u4e00\u79cd\u6076\u4f5c\u5267\u5f0f\u7684\u516c\u5f00\u7f9e\u8fb1 \u4e2d\u6587\u91c7\u7528\"\u5f53\u4f17\u51fa\u4e11\"\u65e2\u4fdd\u7559\u539f\u610f\uff0c\u53c8\u7b26\u5408\u53e3\u8bed\u573a\u666f \u82e5\u4fdd\u7559\u7f8e\u5f0f\u5e7d\u9ed8\u53ef\u8bd1\u4e3a\uff1a\"\u53c8\u4e0d\u662f\u7b2c\u4e00\u6b21\u88ab\u4eba\u5f53\u4f17\u6252\u88e4\u8869\u4e86\"\uff08\u9700\u770b\u53d7\u4f17\u63a5\u53d7\u5ea6\uff09 \"dragged you through this\" \"\u5377\u8fdb\u8fd9\u79cd\u7834\u4e8b\"\u6bd4\u76f4\u8bd1\"\u62d6\u4f60\u7ecf\u5386\u8fd9\u4e2a\"\u66f4\u7b26\u5408\u4e2d\u6587\u62b1\u6028\u8bed\u6c14 anyway,i've learned my lesson she's out of my league,i'm done with her \"out of my league\" \u5b57\u9762\u610f\u601d\u662f\"\u4e0d\u5728\u6211\u7684\u8054\u8d5b\u7ea7\u522b\"\uff0c\u4e2d\u6587\u91c7\u7528\"\u4e0d\u662f\u4e00\u4e2a\u4e16\u754c\u7684\u4eba\" \u5176\u4ed6\u53ef\u9009\u8bd1\u6cd5\uff1a\"\u6211\u9ad8\u6500\u4e0d\u8d77\"/\"\u5979\u6863\u6b21\u592a\u9ad8\"\uff08\u66f4\u5177\u81ea\u5632\u6027\uff09 \"I'm done with her\" \u6839\u636e\u4e0a\u4e0b\u6587\u60c5\u7eea\u8bd1\u4e3a\"\u5230\u6b64\u4e3a\u6b62\"\u6bd4\u76f4\u8bd1\"\u6211\u5b8c\u4e8b\u4e86\"\u66f4\u51c6\u786e \u4e5f\u53ef\u8bd1\u4e3a\"\u5f7b\u5e95\u7ffb\u7bc7\u4e86\"\uff08\u66f4\u51b3\u7edd\uff09 this is one of my favorite places to kick back after a quest \"kick back\" \u672c\u610f\"\u8e22\u56de\u53bb\"\uff0c\u4fda\u8bed\u6307\"\u5f7b\u5e95\u653e\u677e\" \u8bd1\u4e3a\"\u762b\u7740\"\u6bd4\"\u4f11\u606f\"\u66f4\u4f20\u795e\uff0c\u4f53\u73b0\u6175\u61d2\u611f \u4e5f\u53ef\u7528\"\u8eba\u5e73\"/\"\u653e\u7a7a\"\uff08\u6839\u636e\u89d2\u8272\u6027\u683c\u8c03\u6574\uff09 \"after a quest\" \u6e38\u620f\u672f\u8bed\"\u4efb\u52a1\"\u76f4\u63a5\u4fdd\u7559\uff0c\u7b26\u5408\u5e74\u8f7b\u7fa4\u4f53\u7528\u8bed \u82e5\u9762\u5411\u975e\u73a9\u5bb6\u53ef\u8bd1\"\u5b8c\u4e8b\u513f\u540e\" it would be gastronnomically redundant \u4ece\u98df\u7269\u5316\u5b66\u89d2\u5ea6\u770b\uff0c\u8fd9\u79cd\u642d\u914d\u4f1a\u4ea7\u751f\u5473\u89c9\u5197\u4f59 i can see we're going to spell out everything for this girl \"spell out\" \u5b57\u9762\u610f\u601d\u662f\"\u62fc\u5199\"\uff0c\u5b9e\u9645\u6307\"\u8be6\u7ec6\u89e3\u91ca\" \u4e2d\u6587\u7528\"\u63b0\u5f00\u63c9\u788e\"\u8fd9\u4e2a\u70f9\u996a\u6bd4\u55bb\uff0c\u65e2\u5f62\u8c61\u53c8\u7b26\u5408\u53e3\u8bed\u4e60\u60ef \u4e5f\u53ef\u8bd1\u4e3a\"\u624b\u628a\u624b\u6559\"\uff08\u66f4\u6e29\u548c\uff09\u6216\"\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u89e3\u91ca\"\uff08\u66f4\u8d2c\u4e49\uff09 i dont know what the odds are in the world as a whole, but as far as the population of this car goes you\u2019re a veritable Mack Daddy. \"veritable Mack Daddy\" \"Mack Daddy\"\uff1a90\u5e74\u4ee3\u9ed1\u4eba\u4fda\u8bed\uff0c\u6307\"\u6781\u5177\u9b45\u529b\u7684\u7537\u6027\"\uff08\u8bcd\u6e90\u4e0e\u9ea6\u5f53\u52b3\u65e0\u5173\uff09 \u4e2d\u6587\u9009\u7528\uff1a \u2022 \"\u771f\u00b7\u4e07\u4eba\u8ff7\"\uff08\u7f51\u7edc\u5316\u8868\u8fbe+\u4fdd\u7559\u5e74\u4ee3\u611f\uff09 \u2022 \u5907\u9009\uff1a\"\u60c5\u5723\u672c\u5723\"\uff08\u66f4\u620f\u8c11\uff09/ \"\u6d3b\u4f53\u8377\u5c14\u8499\"\uff08\u66f4\u5938\u5f20\uff09 \"as far as the population of this car goes\" \u76f4\u8bd1\"\u5c31\u672c\u8f66\u4eba\u53e3\u800c\u8a00\"\u592a\u751f\u786c \u8bd1\u4e3a\"\u8fd9\u8f86\u8f66\u91cc\u7684\u4eba\u53e3\u7edf\u8ba1\"\u65e2\u4fdd\u7559\u5b66\u672f\u5e7d\u9ed8\uff0c\u53c8\u5e26\u620f\u8c11\u611f","title":"S01e01"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#_1","text":"laxative \u8c22\u9080 colon \u5927\u80a0\uff1b\u5192\u53f7 masturbate \u81ea\u6478 doodle \u4e71\u6d82 lactose-intolerant \u4e73\u7cd6\u4e0d\u8010 shampoo \u6d17\u53d1\u6c34 conditioner \u62a4\u53d1\u7d20 is there a trick to getting it to switch from tub to shower? trick \u65cb\u94ae it's a sentiment i can say in 6 languages sentiment \u60c5\u7eea\uff1b\u795d\u8bcd","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#_2","text":"Should we have invited her for lunch? \u8fd9\u91cc\u7684have invited\u8868\u793aa past possibility or missed opportunity\uff0c\u8fd9\u91cc\u5f3a\u8c03Leonerd\u6709\u70b9\u61ca\u6094\u521a\u624d\u6ca1\u6709\u9080\u8bf7Penny\u6765\u5403\u996d \"Should we invite her for lunch?\" \u2192 This is asking about a present or future action. \"Should we have invited her for lunch?\" \u2192 This is asking about whether inviting her in the past would have been the right decision. \u540c\u6837\u7684\u4f8b\u5b50\u8fd8\u6709 \"We should have studied more for the test.\" \u2192 We didn\u2019t study enough, and now we regret it. \"Should I have told her the truth?\" \u2192 I'm wondering if telling her the truth in the past was the right choice. In this context, \"commentary\" refers to audio commentary, which is an additional feature included in DVDs or Blu-rays where the creators, directors, actors, or other involved people discuss the episode while it plays. the phrase \"might want to\" is a polite or indirect way of giving advice or making a suggestion. Meaning of \"might want to\" It means \"should\" or \"it would be better if you\", but in a softer, less direct way. It implies that it is advisable or a good idea to do something, without sounding too forceful. Rewriting the Sentence for Clarity Direct version: \"Leonard, don\u2019t mention bowel movements when inviting someone to lunch.\" Polite version: \"Leonard, you might want to avoid mentioning bowel movements when inviting someone to lunch.\" In the phrase \"Here I sit, broken-hearted\", \"Here I sit\" is a way of describing one's current state or situation. Context and Meaning: This phrase is actually a reference to a common joke or piece of restroom graffiti: \"Here I sit, broken-hearted, Tried to poop but only farted.\" This is a humorous and well-known rhyme often found scribbled in public restrooms. Breaking It Down: \"Here I sit\" \u2192 Means \"I am sitting here\", usually referring to sitting on a toilet. \"Broken-hearted\" \u2192 A humorous exaggeration of disappointment, in this case, about an unsuccessful bathroom trip. In the context of The Big Bang Theory, the character is joking that the differential equation being referenced is as common and trivial as this famous piece of restroom graffiti. i'm a sagittarius which probably tells you way more than you need to know yes,it tells us that you participate in the mass cultural delusion that the sun's apparent position ralative to arbitrarily defined constellations at the time of your birth somehow affects your personality \u8fd9\u53c8\u662f\u4e00\u4e2a\u957f\u96be\u53e5 \"The sun's apparent position\" refers to the position of the sun relative to certain constellations in the sky at the time of your birth. \"Arbitrarily defined constellations\" points out that the constellations are subjectively defined and don't have a universal meaning across all cultures or throughout history. The speaker is poking fun at the idea that this position can somehow influence or determine someone's personality. The speaker is mocking astrology by suggesting that claiming one's astrological sign (e.g., Sagittarius) is a way of participating in an unfounded, widespread belief that the position of celestial bodies at birth can influence personality. The sarcasm implies that astrology is unscientific and not a reliable way to understand a person\u2019s character. \u65e2\u7136\u8c08\u5230\u4e86\u661f\u5ea7\uff0c\u6269\u5c55\u4e00\u4e0b Here\u2019s a list of all 12 zodiac signs, their English names, Chinese names, birth date ranges, and general personality traits:","title":"\u53e5\u5b50"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#1-aries","text":"Date: March 21 - April 19 Personality Traits: Aries are known for being energetic , confident , and determined . They are natural leaders who often take initiative, but can sometimes be impulsive and impatient .","title":"1. Aries (\u767d\u7f8a\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#2-taurus","text":"Date: April 20 - May 20 Personality Traits: Tauruses are practical , patient , and loyal . They value stability and security, and are often seen as reliable and persistent , though they can also be stubborn .","title":"2. Taurus (\u91d1\u725b\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#3-gemini","text":"Date: May 21 - June 20 Personality Traits: Geminis are curious , adaptable , and intelligent . They are often seen as sociable and expressive , but can be perceived as inconsistent or indecisive .","title":"3. Gemini (\u53cc\u5b50\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#4-cancer","text":"Date: June 21 - July 22 Personality Traits: Cancers are sensitive , empathetic , and protective . They deeply care about their loved ones and value home life, but can also be moody and easily hurt .","title":"4. Cancer (\u5de8\u87f9\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#5-leo","text":"Date: July 23 - August 22 Personality Traits: Leos are charismatic , confident , and generous . They often love being the center of attention and are natural leaders, though they can sometimes be seen as arrogant or proud .","title":"5. Leo (\u72ee\u5b50\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#6-virgo","text":"Date: August 23 - September 22 Personality Traits: Virgos are practical , analytical , and detail-oriented . They are often perfectionists, valuing cleanliness and order, but can be overly critical or worry-prone .","title":"6. Virgo (\u5904\u5973\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#7-libra","text":"Date: September 23 - October 22 Personality Traits: Libras are charming , diplomatic , and fair-minded . They value harmony and balance in relationships, but can sometimes be indecisive and have difficulty with confrontation.","title":"7. Libra (\u5929\u79e4\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#8-scorpio","text":"Date: October 23 - November 21 Personality Traits: Scorpios are passionate , determined , and resourceful . They are known for their intensity and loyalty, but can also be secretive , jealous , and possessive .","title":"8. Scorpio (\u5929\u874e\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#9-sagittarius","text":"Date: November 22 - December 21 Personality Traits: Sagittarians are adventurous , optimistic , and independent . They are often curious and love exploring new ideas, but can be restless and impatient .","title":"9. Sagittarius (\u5c04\u624b\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#10-capricorn","text":"Date: December 22 - January 19 Personality Traits: Capricorns are disciplined , responsible , and ambitious . They are hardworking and goal-oriented, though they can sometimes be seen as cold or pessimistic .","title":"10. Capricorn (\u6469\u7faf\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#11-aquarius","text":"Date: January 20 - February 18 Personality Traits: Aquarians are innovative , independent , and idealistic . They are often visionaries who enjoy thinking outside the box, but can be detached or eccentric .","title":"11. Aquarius (\u6c34\u74f6\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#12-pisces","text":"Date: February 19 - March 20 Personality Traits: Pisceans are compassionate , artistic , and intuitive . They are highly empathetic and sensitive, but can sometimes be overly idealistic or escapist .","title":"12. Pisces (\u53cc\u9c7c\u5ea7)"},{"location":"art/English/tv/bigbang/s01/e01/s01e01/#summary","text":"Fire signs : Aries, Leo, Sagittarius Earth signs : Taurus, Virgo, Capricorn Air signs : Gemini, Libra, Aquarius Water signs : Cancer, Scorpio, Pisces Each sign has its own unique blend of strengths and weaknesses, and astrology enthusiasts often use these personality traits to better understand themselves or others. Anyways,im also writing a screenplay It;s about a sensitive girl who comes to la from lincoln nebraska tobe a actress and winds up at the cheesecake factory so it's based on your life no im from Omaha If that was movie,i would go see it \u6700\u540e\u4e00\u53e5\u4e3a\u4ec0\u4e48\u7528\u8fc7\u53bb\u5f0f The last sentence \"If that was a movie, I would go see it\" uses the past tense \"was\" in a hypothetical situation, which is a common structure in English when talking about imaginary or unreal scenarios. \u201cHate someone\u2019s guts\u201d\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u82f1\u8bed\u4e60\u8bed\uff0c\u5c24\u5176\u5728\u53e3\u8bed\u4e2d\u7528\u6765\u8868\u8fbe\u5f3a\u70c8\u7684\u538c\u6076\u60c5\u7eea\u3002\u5b83\u8d77\u6e90\u4e8e\u201cguts\u201d\u4f5c\u4e3a\u4eba\u4f53\u6838\u5fc3\u90e8\u4f4d\u7684\u9690\u55bb\uff0c\u9010\u6e10\u6f14\u53d8\u4e3a\u8868\u793a\u4e00\u4e2a\u4eba\u7684\u5185\u5728\u672c\u8d28\u3002\u8fd9\u79cd\u7528\u6cd5\u5728\u82f1\u8bed\u56fd\u5bb6\u975e\u5e38\u81ea\u7136\uff0c\u7279\u522b\u662f\u5728\u975e\u6b63\u5f0f\u573a\u5408\u3002 \u8fd9\u4e2a\u77ed\u8bed\u5e38\u7528\u4e8e\u8868\u8fbe\u8d1f\u62c5\u3001\u60ca\u8bb6\u6216\u60c5\u7eea\u7684\u53e0\u52a0\u3002\u4f8b\u5982\uff1a \u201cI have so much work to do, and now, on top of everything else, my computer crashed.\u201d \uff08\u6211\u5df2\u7ecf\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\u4e86\uff0c\u73b0\u5728\u9664\u4e86\u5176\u4ed6\u4e00\u5207\u4e4b\u5916\uff0c\u6211\u7684\u7535\u8111\u8fd8\u574f\u4e86\u3002\uff09 \u201cShe\u2019s rude, selfish, and, on top of everything else, she never apologizes.\u201d \uff08\u5979\u5f88\u7c97\u9c81\uff0c\u5f88\u81ea\u79c1\uff0c\u800c\u4e14\u5728\u6240\u6709\u8fd9\u4e9b\u4e4b\u4e0a\uff0c\u5979\u4ece\u4e0d\u9053\u6b49\u3002\uff09 Really?would it be totally weird if i used it? \u201cWould\u201d\u662f\u52a9\u52a8\u8bcd\u201cwill\u201d\u7684\u8fc7\u53bb\u5f0f\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u4e00\u79cd\u5047\u8bbe\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u5b9e\u3002\u8fd9\u662f\u4e00\u79cd\u865a\u62df\u8bed\u6c14\u7684\u6807\u5fd7\uff0c\u7528\u4e8e\u8ba8\u8bba\u53ef\u80fd\u6027\u6216\u60f3\u8c61\u4e2d\u7684\u60c5\u666f\u3002 \u201cPoint taken\u201d \u662f\u4e00\u4e2a\u82f1\u8bed\u77ed\u8bed\uff0c\u610f\u601d\u662f\u201c\u6211\u660e\u767d\u4e86\u4f60\u7684\u610f\u601d\u201d\u6216\u201c\u4f60\u7684\u89c2\u70b9\u6211\u63a5\u53d7\u4e86\u201d\u3002\u5b83\u901a\u5e38\u7528\u5728\u5bf9\u8bdd\u4e2d\uff0c\u8868\u793a\u8bf4\u8bdd\u8005\u8ba4\u53ef\u5bf9\u65b9\u63d0\u51fa\u7684\u770b\u6cd5\u3001\u8bba\u70b9\u6216\u7ea0\u6b63\uff0c\u5e76\u4e14\u613f\u610f\u6839\u636e\u8fd9\u4e2a\u89c2\u70b9\u8c03\u6574\u81ea\u5df1\u7684\u8bf4\u6cd5\u6216\u7acb\u573a\u3002\u8bed\u6c14\u4e0a\uff0c\u5b83\u5f80\u5f80\u662f\u7b80\u6d01\u4e14\u7565\u5e26\u8ba9\u6b65\u7684\uff0c\u65e2\u627f\u8ba4\u5bf9\u65b9\u7684\u610f\u89c1\uff0c\u53c8\u4e0d\u5c55\u5f00\u8fc7\u591a\u4e89\u8fa9\u3002 do you think this posibility will be helped or hindered when she discovers your luke skywalker no-more-tears shampoo I\u2019d say it could go either way\u2014helped or hindered\u2014depending on her sense of humor! If she\u2019s a Star Wars fan and appreciates a good laugh, discovering a \u201cLuke Skywalker no-more-tears shampoo\u201d might help the possibility. I mean, who wouldn\u2019t be charmed by a guy with Jedi-themed grooming products that promise no crying? It\u2019s quirky and endearing\u2014might even make her stick around longer, clothes or no clothes! But if she\u2019s not into sci-fi puns or thinks it\u2019s too weird, it could hinder things. She might raise an eyebrow and wonder what kind of nerd she\u2019s dealing with\u2014maybe even bolt for the door! So, I guess it hinges on whether she\u2019d say, \u201cUse the Force, that\u2019s hilarious!\u201d or \u201cI\u2019ve got a bad feeling about this\u2026\u201d hang on ,there really is a lady here? and you want us out because youre anticipating coitus? so she's available for coitus? \u201cCoitus interruptus\u201d\u662f\u4e00\u4e2a\u62c9\u4e01\u8bcd\uff0c\u76f4\u8bd1\u662f\u201c\u4e2d\u65ad\u7684\u6027\u4ea4\u201d\uff0c\u6307\u7684\u662f\u6027\u884c\u4e3a\u4e2d\u9014\u505c\u6b62\uff08\u901a\u5e38\u662f\u4e3a\u4e86\u907f\u5b55\uff0c\u7537\u6027\u5728\u9ad8\u6f6e\u524d\u9000\u51fa\uff09\u3002 \u5728\u8fd9\u91cc\uff0c\u8bf4\u8bdd\u8005\u7528\u8fd9\u4e2a\u8bcd\u5236\u9020\u4e86\u4e00\u4e2a\u53cc\u5173\u8bed\uff08pun\uff09\uff1a \u524d\u4e00\u53e5\u662f\u201c\u80fd\u4e0d\u80fd\u522b\u8001\u8bf4coitus\u201d\uff0c\u610f\u601d\u662f\u60f3\u505c\u6b62\u4f7f\u7528\u8fd9\u4e2a\u8bcd\u3002 \u6700\u540e\u4e00\u53e5\u63a5\u832c\u8bf4\u201c\u5982\u679c\u505c\u4e0b\u6765\uff0c\u90a3\u5c31\u662fcoitus interruptus\u201d\uff0c\u628a\u201c\u505c\u6b62\u8bf4coitus\u201d\u548c\u201c\u6027\u4ea4\u4e2d\u9014\u505c\u6b62\u201d\u8054\u7cfb\u8d77\u6765\uff0c\u73a9\u4e86\u4e2a\u6587\u5b57\u6e38\u620f\u3002 \u5e7d\u9ed8\u70b9\uff1a\u8fd9\u53e5\u6545\u610f\u7528\u4e86\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u672f\u8bed\uff08coitus interruptus\uff09\u6765\u56de\u5e94\u201c\u522b\u8bf4coitus\u201d\u7684\u8bf7\u6c42\uff0c\u65e2\u6ca1\u505c\u7528\u201ccoitus\u201d\uff0c\u8fd8\u5347\u7ea7\u4e86\u7b11\u70b9\uff0c\u663e\u5f97\u5f88\u673a\u667a\u53c8\u6709\u70b9\u8c03\u76ae\u3002 i really think we should examine the chain of causality here must we? event A a beautiful woman stand naked in our shower event B we drive halfway across town to retrieve a television set from the aforementioned woman's ex-boyfriend \u5728\u201cwe drive halfway across town\u201d\u4e2d\uff1a \u5b57\u9762\u610f\u601d\uff1a\u201cHalfway\u201d \u662f\u201c\u534a\u8def\u201d\u6216\u201c\u4e00\u534a\u201d\u7684\u610f\u601d\uff0c\u6307\u7684\u662f\u8ddd\u79bb\u4e0a\u7684\u4e00\u534a\u3002 \u5177\u4f53\u542b\u4e49\uff1a \u201cAcross town\u201d \u8868\u793a\u201c\u7a7f\u8fc7\u9547\u5b50\u201d\u6216\u201c\u5230\u9547\u5b50\u7684\u53e6\u4e00\u8fb9\u201d\uff0c\u901a\u5e38\u6307\u4ece\u4e00\u4e2a\u5730\u65b9\u5230\u9547\u5b50\u7684\u5bf9\u4fa7\uff08\u53ef\u80fd\u662f\u6574\u4e2a\u9547\u5b50\u7684\u5bbd\u5ea6\u6216\u957f\u5ea6\uff09\u3002 \u201cHalfway across town\u201d \u5c31\u662f\u201c\u7a7f\u8fc7\u9547\u5b50\u4e00\u534a\u7684\u8ddd\u79bb\u201d\u6216\u201c\u5230\u9547\u5b50\u4e2d\u95f4\u201d\u3002 \u6240\u4ee5\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u4ed6\u4eec\u5f00\u8f66\u8d70\u4e86\u9547\u5b50\u4e00\u534a\u7684\u8def\u7a0b\uff0c\u53bb\u53d6\u7535\u89c6\u673a\uff0c\u4f46\u5e76\u6ca1\u6709\u8d70\u5b8c\u5168\u7a0b\uff08\u5230\u5bf9\u4fa7\uff09\u3002 \u7ffb\u8bd1\uff1a\u201c\u6211\u4eec\u5f00\u8f66\u5230\u9547\u5b50\u4e00\u534a\u7684\u5730\u65b9\u201d \u6216 \u201c\u6211\u4eec\u5f00\u4e86\u534a\u4e2a\u9547\u7684\u8def\u201d\u3002 Query,on what plane of existance is there even a semi-rational link between these events \"semi-rational link\" \u53ef\u8bd1\u4e3a\"\u52c9\u5f3a\u5408\u7406\u7684\u5173\u8054\"\u4ee5\u4fdd\u7559\u539f\u6587\u7684\u8bbd\u523a\u8bed\u6c14 There's some kind of dispute between Penny and her ex boyfriend as to who gets custody of the tv \"as to\" \u5728\u8fd9\u91cc\u76f8\u5f53\u4e8e \"regarding\"\uff08\u5173\u4e8e\uff09 \u6216 \"concerning\"\uff08\u6d89\u53ca\uff09\uff0c\u5f3a\u8c03\u4e89\u8bba\u7684\u7126\u70b9\u3002 \u7c7b\u4f3c\u7528\u6cd5\u4e3e\u4f8b\uff1a \"There was a debate as to whether the plan would work.\" \uff08\u5173\u4e8e\u8fd9\u4e2a\u8ba1\u5212\u662f\u5426\u53ef\u884c\uff0c\u5b58\u5728\u4e89\u8bba\u3002\uff09 \"He was uncertain as to what to do next.\" \uff08\u4ed6\u5bf9\u4e8e\u4e0b\u4e00\u6b65\u8be5\u505a\u4ec0\u4e48\u4e0d\u592a\u786e\u5b9a\u3002\uff09 she just wanted to avoid having a scene with him \"avoid having a scene\" \"scene\" \u5728\u8fd9\u91cc\u6307 \"\u516c\u5f00\u4e89\u5435\u3001\u96be\u582a\u7684\u573a\u9762\"\uff08\u7c7b\u4f3c\u4e2d\u6587\u7684 \"\u95f9\u5267\u3001\u5f53\u4f17\u51fa\u4e11\"\uff09\u3002 \u6240\u4ee5 \"avoid having a scene\" \u2248 \"\u907f\u514d\u5f53\u4f17\u5435\u67b6/\u95f9\u5f97\u96be\u770b\"\u3002 \u4f8b\u53e5\u5bf9\u6bd4\uff1a \u82f1\u6587\uff1a\"She made a scene at the restaurant.\" \u4e2d\u6587\uff1a\"\u5979\u5728\u9910\u5385\u5927\u5435\u5927\u95f9/\u5f53\u4f17\u51fa\u4e11\u3002\" \u82f1\u6587\uff1a\"I don\u2019t want to cause a scene.\" \u4e2d\u6587\uff1a\"\u6211\u4e0d\u60f3\u641e\u5f97\u5927\u5bb6\u96be\u582a\u3002\" we're here to pick up penny's tv get lost \"Get lost.\" \u5b57\u9762\u610f\u601d\uff1a\"\u8ff7\u8def\u53bb\u5427\"\uff08\u4f46\u5b9e\u9645\u662f\u5f3a\u70c8\u8981\u6c42\u5bf9\u65b9\u79bb\u5f00\uff09 \u4e2d\u6587\u5bf9\u5e94\uff1a\"\u6eda\u5f00\"\uff08\u5f3a\u786c\uff09\u3001\"\u4e00\u8fb9\u53bb\"\uff08\u7a0d\u7f13\u548c\uff09\u3001\"\u522b\u788d\u4e8b\"\uff08\u5e26\u4e0d\u8010\u70e6\uff09 \u6839\u636e\u8bed\u5883\uff0c\u8fd9\u91cc\u9002\u5408\u7528 \"\u6eda\u5f00\" \uff08\u56e0\u6d89\u53ca\u4e89\u6267\uff0c\u8bed\u6c14\u8f83\u51b2\uff09 l,the tv's in the building we've been denied access to the building,ergo,we are done \"Ergo, we are done.\" \"Ergo\"\uff08\u62c9\u4e01\u8bed\uff09= \"\u56e0\u6b64\"\uff0c\u8fd9\u91cc\u5e26\u70b9\u6b63\u5f0f/\u8bbd\u523a\u8bed\u6c14\uff0c\u53ef\u8bd1\u4e3a \"\u6240\u4ee5\" \u6216\u62c9\u957f\u8bed\u8c03 \"\u6240\u4ee5\u2014\u2014\"\u3002 \"we are done\" = \"\u6211\u4eec\u5b8c\u4e86/\u6ca1\u620f\u4e86/\u641e\u4e0d\u5b9a\u4e86\"\uff0c\u4e2d\u6587\u4e60\u60ef\u8bf4 \"\u8fd9\u4e8b\u9ec4\u4e86\" \u6216 \"\u5230\u6b64\u4e3a\u6b62\u5427\"\u3002 exccuse me ,if i were to give up on the first little hitch i never would have identified the fingerprints of string theory in the aftermath of the big bang \"first little hitch\" \"hitch\"=\u969c\u788d\uff0c\u7528\"\u5c0f\u632b\u6298\"\u66f4\u7b26\u5408\u4e2d\u6587\"\u5c0f\u56f0\u96be\"\u7684\u8f7b\u63cf\u6de1\u5199\u611f\u3002 \"fingerprints of string theory\" \u76f4\u8bd1\"\u5f26\u7406\u8bba\u7684\u6307\u7eb9\"\u4fdd\u7559\u539f\u6587\u8bd7\u610f\u7684\u9690\u55bb\uff08\u7406\u8bba\u5b58\u5728\u7684\u8bc1\u636e\uff09\u3002 \"in the aftermath of the big bang\" \"aftermath\"\u672c\u6307\u707e\u96be\u540e\u679c\uff0c\u4f46\"\u4f59\u8f89\"\u65e2\u7b26\u5408\u7269\u7406\u8bed\u5883\uff08\u5b87\u5b99\u5fae\u6ce2\u80cc\u666f\u8f90\u5c04\uff09\uff0c\u53c8\u6dfb\u6587\u5b66\u7f8e\u611f\u3002 sheldon,im sos sorry i dragged you through this it's ok,it's not my first pantsing and it wont be my last \"pantsing\"\u5e76\u4e0d\u662f\u6307\u88e4\u5b50 \u5b57\u9762\u6307\"\u88ab\u6252\u88e4\u5b50\"\uff0c\u5728\u6821\u56ed\u6587\u5316\u4e2d\u662f\u4e00\u79cd\u6076\u4f5c\u5267\u5f0f\u7684\u516c\u5f00\u7f9e\u8fb1 \u4e2d\u6587\u91c7\u7528\"\u5f53\u4f17\u51fa\u4e11\"\u65e2\u4fdd\u7559\u539f\u610f\uff0c\u53c8\u7b26\u5408\u53e3\u8bed\u573a\u666f \u82e5\u4fdd\u7559\u7f8e\u5f0f\u5e7d\u9ed8\u53ef\u8bd1\u4e3a\uff1a\"\u53c8\u4e0d\u662f\u7b2c\u4e00\u6b21\u88ab\u4eba\u5f53\u4f17\u6252\u88e4\u8869\u4e86\"\uff08\u9700\u770b\u53d7\u4f17\u63a5\u53d7\u5ea6\uff09 \"dragged you through this\" \"\u5377\u8fdb\u8fd9\u79cd\u7834\u4e8b\"\u6bd4\u76f4\u8bd1\"\u62d6\u4f60\u7ecf\u5386\u8fd9\u4e2a\"\u66f4\u7b26\u5408\u4e2d\u6587\u62b1\u6028\u8bed\u6c14 anyway,i've learned my lesson she's out of my league,i'm done with her \"out of my league\" \u5b57\u9762\u610f\u601d\u662f\"\u4e0d\u5728\u6211\u7684\u8054\u8d5b\u7ea7\u522b\"\uff0c\u4e2d\u6587\u91c7\u7528\"\u4e0d\u662f\u4e00\u4e2a\u4e16\u754c\u7684\u4eba\" \u5176\u4ed6\u53ef\u9009\u8bd1\u6cd5\uff1a\"\u6211\u9ad8\u6500\u4e0d\u8d77\"/\"\u5979\u6863\u6b21\u592a\u9ad8\"\uff08\u66f4\u5177\u81ea\u5632\u6027\uff09 \"I'm done with her\" \u6839\u636e\u4e0a\u4e0b\u6587\u60c5\u7eea\u8bd1\u4e3a\"\u5230\u6b64\u4e3a\u6b62\"\u6bd4\u76f4\u8bd1\"\u6211\u5b8c\u4e8b\u4e86\"\u66f4\u51c6\u786e \u4e5f\u53ef\u8bd1\u4e3a\"\u5f7b\u5e95\u7ffb\u7bc7\u4e86\"\uff08\u66f4\u51b3\u7edd\uff09 this is one of my favorite places to kick back after a quest \"kick back\" \u672c\u610f\"\u8e22\u56de\u53bb\"\uff0c\u4fda\u8bed\u6307\"\u5f7b\u5e95\u653e\u677e\" \u8bd1\u4e3a\"\u762b\u7740\"\u6bd4\"\u4f11\u606f\"\u66f4\u4f20\u795e\uff0c\u4f53\u73b0\u6175\u61d2\u611f \u4e5f\u53ef\u7528\"\u8eba\u5e73\"/\"\u653e\u7a7a\"\uff08\u6839\u636e\u89d2\u8272\u6027\u683c\u8c03\u6574\uff09 \"after a quest\" \u6e38\u620f\u672f\u8bed\"\u4efb\u52a1\"\u76f4\u63a5\u4fdd\u7559\uff0c\u7b26\u5408\u5e74\u8f7b\u7fa4\u4f53\u7528\u8bed \u82e5\u9762\u5411\u975e\u73a9\u5bb6\u53ef\u8bd1\"\u5b8c\u4e8b\u513f\u540e\" it would be gastronnomically redundant \u4ece\u98df\u7269\u5316\u5b66\u89d2\u5ea6\u770b\uff0c\u8fd9\u79cd\u642d\u914d\u4f1a\u4ea7\u751f\u5473\u89c9\u5197\u4f59 i can see we're going to spell out everything for this girl \"spell out\" \u5b57\u9762\u610f\u601d\u662f\"\u62fc\u5199\"\uff0c\u5b9e\u9645\u6307\"\u8be6\u7ec6\u89e3\u91ca\" \u4e2d\u6587\u7528\"\u63b0\u5f00\u63c9\u788e\"\u8fd9\u4e2a\u70f9\u996a\u6bd4\u55bb\uff0c\u65e2\u5f62\u8c61\u53c8\u7b26\u5408\u53e3\u8bed\u4e60\u60ef \u4e5f\u53ef\u8bd1\u4e3a\"\u624b\u628a\u624b\u6559\"\uff08\u66f4\u6e29\u548c\uff09\u6216\"\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u89e3\u91ca\"\uff08\u66f4\u8d2c\u4e49\uff09 i dont know what the odds are in the world as a whole, but as far as the population of this car goes you\u2019re a veritable Mack Daddy. \"veritable Mack Daddy\" \"Mack Daddy\"\uff1a90\u5e74\u4ee3\u9ed1\u4eba\u4fda\u8bed\uff0c\u6307\"\u6781\u5177\u9b45\u529b\u7684\u7537\u6027\"\uff08\u8bcd\u6e90\u4e0e\u9ea6\u5f53\u52b3\u65e0\u5173\uff09 \u4e2d\u6587\u9009\u7528\uff1a \u2022 \"\u771f\u00b7\u4e07\u4eba\u8ff7\"\uff08\u7f51\u7edc\u5316\u8868\u8fbe+\u4fdd\u7559\u5e74\u4ee3\u611f\uff09 \u2022 \u5907\u9009\uff1a\"\u60c5\u5723\u672c\u5723\"\uff08\u66f4\u620f\u8c11\uff09/ \"\u6d3b\u4f53\u8377\u5c14\u8499\"\uff08\u66f4\u5938\u5f20\uff09 \"as far as the population of this car goes\" \u76f4\u8bd1\"\u5c31\u672c\u8f66\u4eba\u53e3\u800c\u8a00\"\u592a\u751f\u786c \u8bd1\u4e3a\"\u8fd9\u8f86\u8f66\u91cc\u7684\u4eba\u53e3\u7edf\u8ba1\"\u65e2\u4fdd\u7559\u5b66\u672f\u5e7d\u9ed8\uff0c\u53c8\u5e26\u620f\u8c11\u611f","title":"Summary:"},{"location":"art/English/tv/bigbang/s01/e01/s01e02/","text":"\u53f0\u8bcd \u624b\u6253\u53f0\u8bcd \u751f\u8bcd predicated \u4f7f\u57fa\u4e8e dolly \u624b\u63a8\u8f66 fulcrum \u652f\u70b9 lever \u6760\u6746 immaculate \u6574\u6d01\u7684 \u822a\u7a7a\u7ea7\u94dd\u5408\u91d1(aircraft grade aluminum) \u53e5\u5b50 Accelerating at an initial rate of 32 feet per second per second\" \u7684\u610f\u601d\u662f\uff1a \u521d\u59cb\u52a0\u901f\u5ea6\u4e3a\u6bcf\u79d232\u82f1\u5c3a\u6bcf\u79d2\u3002 \u8fd9\u662f\u7f8e\u5236\u5355\u4f4d\u4e0b\u7684\u52a0\u901f\u5ea6\uff0c32 ft/s\u00b2 \u6070\u597d\u662f\u5730\u7403\u5f15\u529b\u52a0\u901f\u5ea6\u7684\u8fd1\u4f3c\u503c\uff08\u5728\u82f1\u5236\u5355\u4f4d\u4e2d\uff09\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u56fd\u9645\u5355\u4f4d\u5236\u4e2d\u5e38\u7528\u7684 9.8 m/s\u00b2\u3002 Superman's flight\uff08\u8d85\u4eba\u7684\u98de\u884c\uff09\uff1a\u6307\u7684\u662f\u8d85\u4eba\u80fd\u5728\u7a7a\u4e2d\u98de\u884c\u7684\u80fd\u529b\u3002 feat of strength\uff08\u529b\u91cf\u7684\u58ee\u4e3e\uff09\uff1a feat \u6307\u7684\u662f\u975e\u51e1\u7684\u6280\u80fd\u6216\u82f1\u52c7\u884c\u4e3a\uff0c\u5e38\u5e38\u662f\u67d0\u79cd\u4e86\u4e0d\u8d77\u7684\u6210\u5c31\u3002 strength \u8fd9\u91cc\u6307\u7684\u662f\u4f53\u529b\u3001\u529b\u91cf\u3001\u80fd\u529b\u3002 \u5728DC\u6f2b\u753b\u5b87\u5b99\u7684\u8bbe\u5b9a\u4e2d\uff0c\u8d85\u4eba\u6765\u81ea\u6c2a\u661f\uff08Krypton\uff09\uff0c\u90a3\u91cc\u7684\u592a\u9633\u662f\u7ea2\u8272\u7684\uff0c\u800c\u5730\u7403\u7684\u9ec4\u8272\u592a\u9633\u4f1a\u6fc0\u53d1\u4ed6\u4f53\u5185\u7684\u7ec6\u80de\uff0c\u4f7f\u4ed6\u83b7\u5f97\u8d85\u4eba\u7684\u80fd\u529b\uff0c\u6bd4\u5982\u98de\u884c\u3001\u8d85\u7ea7\u529b\u91cf\u3001\u6fc0\u5149\u773c\u7b49\u3002 \u6240\u4ee5yellow sun\u5e76\u4e0d\u662f\u82f1\u8bed\u91cc\u7684\u642d\u914d\uff0c\u800c\u662fDC\u5b87\u5b99\u7684\u8bbe\u5b9a Yeah, and you don\u2019t have a problem with that, how does he fly at night? and you don\u2019t have a problem with that \u2014\u2014\u201c\u4f60\u5bf9\u8fd9\u90fd\u6ca1\u610f\u89c1\u554a\uff1f\u201d \ud83d\udc49 \u542b\u6709\u8d28\u7591\u8bed\u6c14\uff0c\u6697\u793a\u201c\u8fd9\u542c\u8d77\u6765\u5c31\u5f88\u4e0d\u5408\u7406\uff0c\u4f60\u5c45\u7136\u8fd8\u80fd\u63a5\u53d7\uff1f\u201d \u201c\u54c8\uff1f\u4f60\u5c45\u7136\u89c9\u5f97\u8fd9\u6ca1\u95ee\u9898\uff1f\u90a3\u4ed6\u665a\u4e0a\u662f\u600e\u4e48\u98de\u7684\uff1f\u201d \"so you're just gonna be done?\" you're just gonna be done? \u76f4\u8bd1\u6709\u70b9\u96be\u61c2\uff0c\u4f46\u5176\u5b9e\u8fd9\u53e5\u8bdd\u662f\u5e26\u6709\u4e00\u70b9\u8bbd\u523a\u6216\u8d28\u7591\u7684\u8bed\u6c14\u3002 be done \u8fd9\u91cc\u610f\u601d\u662f\u201c\u4f60\u5c31\u6253\u7b97\u4e0d\u505a\u4e86\uff1f\u201d\u3001\u201c\u4f60\u5c31\u653e\u5f03\u4e86\uff1f\u201d \u76f8\u5f53\u4e8e\u5728\u8bf4\uff1a \u201c\u6240\u4ee5\u4f60\u5c31\u6253\u7b97\u4e0d\u7ba1\u4e86\uff1f\u201d \u201c\u6240\u4ee5\u4f60\u5c31\u4e0d\u613f\u610f\u4e0a\u697c\u4e86\uff1f\u201d \ud83d\udd39 \u8fd9\u53e5\u8bdd\u901a\u5e38\u662f\u5728\u9762\u5bf9\u5bf9\u65b9\u534a\u9014\u800c\u5e9f\u3001\u4e0d\u613f\u610f\u5403\u82e6\u65f6\u8bf4\u7684\u3002 \"Okay, cool, thanks.\" Okay = \u597d\u5427 cool = \u597d\u7684\uff0c\u884c\uff08\u8bed\u6c14\u53ef\u80fd\u5e26\u70b9\u51b7\u6de1\uff09 thanks = \u8c22\u8c22 \u27a1\ufe0f \u8fd9\u4e09\u8bcd\u8fde\u5728\u4e00\u8d77\uff0c\u8bf4\u8bdd\u4eba\u901a\u5e38\u5e26\u70b9 \u8bbd\u523a \u6216 \u4e0d\u592a\u9ad8\u5174 \u7684\u8bed\u6c14\uff0c\u6bd4\u5982\uff1a \u201c\u54e6\uff0c\u597d\u554a\uff0c\u77e5\u9053\u4e86\uff0c\u8c22\u8c22\u4f60\u554a\uff5e\u201d \"I hardly think so.\" hardly = \u51e0\u4e4e\u4e0d\uff0c\u6839\u672c\u4e0d think so = \u8ba4\u4e3a\u662f\u90a3\u6837 \ud83d\udd39 \u6574\u53e5\u610f\u601d\uff1a \u201c\u6211\u624d\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\u3002\u201d \u201c\u6211\u4e00\u70b9\u4e5f\u4e0d\u89c9\u5f97\u884c\u3002\u201d a dolly \ud83d\udc49 \u6307\u642c\u8fd0\u5927\u4ef6\u7269\u54c1\u7528\u7684\u5c0f\u63a8\u8f66\uff0c\u901a\u5e38\u662f\u5e26\u8f6e\u5b50\u7684\u5e73\u677f\u8f66\uff0c\u642c\u51b0\u7bb1\u3001\u6c99\u53d1\u5e38\u7528\u3002 \ud83d\udd39 \u4e2d\u6587\uff1a\u5c0f\u63a8\u8f66 / \u642c\u8fd0\u8f66 lifting belts \ud83d\udc49 \u4e3e\u91cd\u65f6\u7528\u7684\u4fdd\u62a4\u8170\u90e8\u7684\u201c\u8170\u5e26\u201d\uff0c\u642c\u91cd\u7269\u65f6\u4e5f\u53ef\u7528\uff0c\u4fdd\u62a4\u4e0d\u626d\u4f24\u3002 \ud83d\udd39 \u4e2d\u6587\uff1a\u4e3e\u91cd\u5e26 / \u642c\u8fd0\u8170\u5e26 any measurable upper-body strength \ud83d\udc49 \u201c\u4efb\u4f55\u53ef\u4ee5\u6d4b\u5f97\u7684\u4e0a\u534a\u8eab\u529b\u91cf\u201d \ud83d\udd39 \u5373\u5938\u5f20\u5730\u8bf4\u201c\u6211\u4eec\u5b8c\u5168\u6ca1\u529b\u6c14\u201d \ud83d\udd38 measurable\uff08\u53ef\u6d4b\u91cf\u7684\uff09+ upper-body strength\uff08\u4e0a\u534a\u8eab\u529b\u91cf\uff09= \u4e00\u672c\u6b63\u7ecf\u5730\u641e\u7b11\uff01 \"I don't have this.\"\uff08\u6211\u505a\u4e0d\u5230/\u6211\u4e0d\u884c\uff09 do you have any ideas yes but they all involve a green lantern and a power ring Green Lantern\uff08\u7eff\u706f\u4fa0\uff09 \u662f DC \u6f2b\u753b\u4e2d\u7684\u8d85\u7ea7\u82f1\u96c4\u3002 \u4ed6\u9760\u4e00\u679a \u80fd\u91cf\u6212\u6307\uff08power ring\uff09 \u65bd\u5c55\u5404\u79cd\u8d85\u80fd\u529b\uff0c\u8fd9\u679a\u6212\u6307\u53ef\u4ee5\u6839\u636e\u4f69\u6234\u8005\u7684\u610f\u5fd7\u529b\u548c\u60f3\u8c61\u529b\u521b\u9020\u51fa\u4efb\u4f55\u4e1c\u897f\uff08\u6b66\u5668\u3001\u5de5\u5177\u3001\u98de\u8239\u3001\u62a4\u76fe\u7b49\uff09\u3002 \u8fd9\u679a\u6212\u6307\u51e0\u4e4e\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898\u2014\u2014\u4f46\u5b83\u662f\u865a\u6784\u7684\u3002 \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50 \"Sure, there's a way \u2014 as long as I have Doraemon's magic pocket.\" daw\u00b7ray\u00b7maan\u54c6\u5566A\u68a6 \"Call it 30 degrees, so about half.\" \u2705 \u201cCall it...\u201d \u7684\u610f\u601d\u662f\uff1a \u5728\u53e3\u8bed\u4e2d\uff0c\u201cCall it\u201d\u7684\u610f\u601d\u662f\uff1a \u201c\u5c31\u7b97\u4f5c\u662f...\u201d / \u201c\u6211\u4eec\u5c31\u5f53\u5b83\u662f...\u201d / \u201c\u59d1\u4e14\u8ba4\u4e3a...\u201d \u5b83\u5e76\u4e0d\u662f\u771f\u8981\u201c\u6253\u7535\u8bdd\u201d\uff0c\u800c\u662f\u4e00\u79cd\u975e\u6b63\u5f0f\u4f30\u7b97\u6216\u7b80\u5316\u7684\u8bf4\u6cd5\u3002 \u7c7b\u4f3c\u4f8b\u5b50\uff1a Call it 5 bucks. \u2192 \u201c\u5c31\u7b975\u5757\u94b1\u5427\u3002\u201d\uff08\u5373\u4f7f\u4e0d\u786e\u5b9a\uff0c\u4e5f\u5148\u6309\u8fd9\u4e2a\u6765\u4f30\u7b97\uff09 Call it even. \u2192 \u201c\u54b1\u4eec\u5c31\u7b97\u626f\u5e73\u4e86\u3002\u201d Let\u2019s call it a day. \u2192 \u201c\u4eca\u5929\u5c31\u5230\u8fd9\u513f\u5427\u3002\u201d\uff08\u5e38\u7528\u4e8e\u5de5\u4f5c\u7ed3\u675f\uff09 Ah\uff1a\u8868\u793a\u611f\u53f9\uff0c\u201c\u554a\u201d\u3002 gravity\uff1a\u91cd\u529b\uff0c\u5f15\u529b\u3002 thou art\uff1a\u6587\u8a00\u5f0f\u82f1\u8bed\uff0c\u201c\u4f60\u662f\u201d\uff08\u73b0\u4ee3\u82f1\u8bed\u662f you are\uff09\u3002 a heartless bitch\uff1a\u76f4\u8bd1\u662f\u201c\u4e00\u4e2a\u65e0\u60c5\u7684\u8d31\u4eba\u201d\uff0c\u7528\u6765\u5f62\u5bb9\u67d0\u4e8b\u4ee4\u4eba\u8ba8\u538c\u3001\u9ebb\u70e6\u3002 \"thou art\" \u662f\u4eff\u7167\u838e\u58eb\u6bd4\u4e9a\u5f0f\u82f1\u8bed\uff0c\u8425\u9020\u4e00\u79cd\u620f\u5267\u6548\u679c\u3002Sheldon \u8bf4\u8bdd\u5e38\u5e38\u5f15\u7ecf\u636e\u5178\uff0c\u5e26\u6709\u4e00\u70b9\u201c\u620f\u7cbe\u201d\u6c14\u8d28\u3002 you do understand that our efforts here will in no way increase the odds of you having sexual congress with this woman \u6b63\u5f0f\u7528\u8bed\"sexual congress\"\uff08\u6027\u4ea4\u7684\u6587\u96c5\u8bf4\u6cd5\uff09 you do understand that our efforts here will in no way increase the odds of you having sexual congress with this woman Men do things for woman without expecting sex,Those would be men who just had sex i'm doing this to be a good neighbor in any case, there's no way it could lower the odds \u53cd\u6b63\uff0c\u8fd9\u603b\u4e0d\u4f1a\u8ba9\u673a\u4f1a\u53d8\u5f97\u66f4\u4f4e\u5427\u3002 \"Great Caesar's ghost\" \u7684\u8d77\u6e90\u4e0e\u542b\u4e49 \u8fd9\u662f\u4e00\u4e2a\u53e4\u8001\u7684\u7f8e\u5f0f\u611f\u53f9\u8bed\uff0c\u6e90\u81ea19\u4e16\u7eaa\uff0c\u53ef\u80fd\u53d7\u838e\u58eb\u6bd4\u4e9a\u620f\u5267\uff08\u5982\u300a\u5c24\u5229\u4e4c\u65af\u00b7\u51ef\u6492\u300b\uff09\u5f71\u54cd\u3002 \u5b57\u9762\u610f\u601d\u662f\u201c\u4f1f\u5927\u7684\u51ef\u6492\u7684\u9b3c\u9b42\u554a\uff01\u201d\uff0c\u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u8001\u5929\u7237\uff01\u201d\u201c\u6211\u7684\u5929\uff01\u201d \u572820\u4e16\u7eaa\u4e2d\u671f\u540e\u9010\u6e10\u8fc7\u65f6\uff0c\u4f46\u4ecd\u5728\u6000\u65e7\u6216\u620f\u5267\u5316\u8bed\u5883\u4e2d\u4f7f\u7528\uff0c\u6bd4\u5982\u300a\u8d85\u4eba\u300b\u6f2b\u753b\u4e2d\u4f69\u91cc\u00b7\u6000\u7279\uff08Perry White\uff09\u5e38\u558a\u8fd9\u53e5\u8bdd\u3002 https://baike.baidu.com/item/%E6%9B%BC%E5%BE%B7%E5%8B%83%E7%BD%97%E9%9B%86/4888291 \"Hard as it may be for you to believe\" \u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\u201c\u5c3d\u7ba1\u4f60\u53ef\u80fd\u5f88\u96be\u76f8\u4fe1\u201d \"What are you doing? I'm straightening up.\" \u7ffb\u8bd1\uff1a \u201c\u4f60\u5728\u5e72\u561b\u5462\uff1f\u201d \u201c\u6211\u5728\u6536\u62fe\u4e1c\u897f\u3002\u201d \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Straightening up\" \u7684\u65e5\u5e38\u542b\u4e49 \u76f4\u8bd1\u662f\u201c\u5f04\u76f4\u201d\uff0c\u4f46\u5728\u53e3\u8bed\u4e2d\u5e38\u8868\u793a\uff1a \u6574\u7406\u623f\u95f4\uff08\u6bd4\u5982\u628a\u4e71\u653e\u7684\u4e1c\u897f\u5f52\u4f4d\uff09 \u5feb\u901f\u6e05\u6d01\uff08\u4e34\u65f6\u6709\u5ba2\u4eba\u6765\u8bbf\u65f6\u7684\u7d27\u6025\u6536\u62fe\uff09 \u8ba9\u81ea\u5df1\u770b\u8d77\u6765\u4f53\u9762\uff08\u6574\u7406\u8863\u670d\u3001\u5934\u53d1\u7b49\uff09 \u201cRun cable\u201d \u7684\u6280\u672f\u542b\u4e49 Run \u5728\u8fd9\u91cc\u6307\u201c\u94fa\u8bbe/\u5b89\u88c5\u7ebf\u8def\u201d\uff08\u5982\u7f51\u7ebf\u3001\u7535\u6e90\u7ebf\uff09\uff0c\u662fIT/\u5de5\u7a0b\u9886\u57df\u7684\u5e38\u89c1\u672f\u8bed\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u5e03\u7ebf\u201d\uff08\u4e13\u4e1a\uff09\u6216\u201c\u62c9\u7ebf\u201d\uff08\u53e3\u8bed\uff09\u3002 Web cam \u7684\u8bed\u5883 \u53ef\u80fd\u662f\u4e3a\u4e86\u89c6\u9891\u4f1a\u8bae\u3001\u76f4\u64ad\u3001\u5b89\u9632\u76d1\u63a7\u7b49\u7528\u9014\uff0c\u53cd\u6620\u73b0\u4ee3\u8fdc\u7a0b\u529e\u516c\u6216\u667a\u80fd\u5bb6\u5c45\u7684\u9700\u6c42\u3002 \u4e2d\u6587\u4e60\u60ef\u8bf4\u201c\u7f51\u7edc\u6444\u50cf\u5934\u201d\uff0c\u4f46\u5e74\u8f7b\u4eba\u4e5f\u53ef\u80fd\u76f4\u63a5\u8bf4\u201c\u6444\u50cf\u5934\u201d\uff08\u9ed8\u8ba4\u662f\u8054\u7f51\u7684\uff09\u3002 \u201cGet out of your hair\u201d \u7684\u8d77\u6e90\u4e0e\u542b\u4e49 \u5b57\u9762\u610f\u601d\u662f\u201c\u4ece\u4f60\u7684\u5934\u53d1\u91cc\u51fa\u6765\u201d\uff0c\u5b9e\u9645\u6e90\u81ea20\u4e16\u7eaa\u4e2d\u671f\u53e3\u8bed\uff0c\u6bd4\u55bb\u201c\u4e0d\u518d\u7ea0\u7f20\u67d0\u4eba\u201d\u6216\u201c\u7ed3\u675f\u6253\u6270\u201d\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u4e0d\u788d\u4f60\u4e8b\u4e86\u201d\u6216\u201c\u4e0d\u70e6\u4f60\u4e86\u201d\uff0c\u5e26\u6709\u8f7b\u677e\u3001\u975e\u6b63\u5f0f\u7684\u8bed\u6c14\u3002 \u4f7f\u7528\u573a\u666f \u670b\u53cb/\u540c\u4e8b\u95f4\uff1a\u5f53\u5bf9\u65b9\u660e\u663e\u5fd9\u788c\u6216\u60f3\u7ed3\u675f\u5bf9\u8bdd\u65f6\uff0c\u7528\u8fd9\u53e5\u8bdd\u793c\u8c8c\u9000\u51fa\u3002 \u4f8b\uff1a A: \u201c\u6211\u8fd8\u6709\u4e2a\u4f1a\u8981\u5f00\u2026\u201d B: \u201cOK, we\u2019ll get out of your hair!\u201d \uff08\u201c\u597d\uff0c\u4f60\u5148\u5fd9\uff01\u201d\uff09 \u670d\u52a1\u884c\u4e1a\uff1a\u5de5\u4f5c\u4eba\u5458\u5b8c\u6210\u670d\u52a1\u540e\u53ef\u80fd\u8bf4\u8fd9\u53e5\u8bdd\uff0c\u8868\u793a\u201c\u4e0d\u7ee7\u7eed\u5360\u7528\u60a8\u65f6\u95f4\u201d\u3002 A: \u201cWhy did the scarecrow win an award?\u201d \uff08\u7a3b\u8349\u4eba\u4e3a\u4ec0\u4e48\u5f97\u5956\uff1f\uff09 B: \u201cI don\u2019t know\u2026\u201d A: \u201cBecause he was outstanding in his field!\u201d\uff08\u8c10\u97f3\u6897\uff1a\u7530\u5730\u91cc\u7ad9\u7740\u7684/\u6770\u51fa\u7684\uff09 B: \u201c\u2026It\u2019s a joke? I don\u2019t get it.\u201d \uff08\u201c\u8fd9\u2026\u7b97\u7b11\u8bdd\uff1f\u6211\u6ca1\u61c2\u3002\u201d\uff09 \u8868\u793a \"\u5173\u4e8e\" (about, regarding) \u7528\u4e8e\u6b63\u5f0f\u8bed\u5883\uff0c\u5f15\u51fa\u8ba8\u8bba\u7684\u4e3b\u9898\u6216\u5bf9\u8c61\u3002 \u4f8b\u53e5\uff1a There is no agreement as to the best method. \uff08\u5173\u4e8e\u6700\u4f73\u65b9\u6cd5\uff0c\u76ee\u524d\u6ca1\u6709\u5171\u8bc6\u3002\uff09 He was uncertain as to which path to take. \uff08\u4ed6\u5bf9\u8be5\u9009\u54ea\u6761\u8def\u72b9\u8c6b\u4e0d\u51b3\u3002\uff09 \u8868\u793a \"\u81f3\u4e8e\" (concerning, when it comes to) \u5f3a\u8c03\u8bdd\u9898\u7684\u8f6c\u5411\u6216\u5bf9\u6bd4\u3002 \u4f8b\u53e5\uff1a The data is clear; as to the interpretation, opinions vary. \uff08\u6570\u636e\u5f88\u660e\u786e\uff0c\u81f3\u4e8e\u5982\u4f55\u89e3\u8bfb\uff0c\u4f17\u8bf4\u7eb7\u7ead\u3002\uff09 \u8868\u793a \"\u6839\u636e\" (according to) \u8f83\u5c11\u89c1\uff0c\u591a\u7528\u4e8e\u6cd5\u5f8b\u6216\u6b63\u5f0f\u6587\u672c\u3002 \u4f8b\u53e5\uff1a The items are sorted as to size. \uff08\u7269\u54c1\u6309\u5c3a\u5bf8\u5206\u7c7b\u3002\uff09 \"Jury of your peers\" \u7684\u6cd5\u5f8b\u542b\u4e49 \u8fd9\u662f\u82f1\u7f8e\u6cd5\u7cfb\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u6307\u7531\u4e0e\u88ab\u544a\u793e\u4f1a\u5730\u4f4d\u76f8\u4f3c\u7684\u666e\u901a\u516c\u6c11\u7ec4\u6210\u7684\u966a\u5ba1\u56e2\uff08\u800c\u975e\u6cd5\u5b98\u6216\u7cbe\u82f1\u7fa4\u4f53\uff09\u3002 \u6e90\u81ea\u300a\u5927\u5baa\u7ae0\u300b\"trial by one's peers\"\uff08\u540c\u8f88\u5ba1\u5224\uff09\uff0c\u4f53\u73b0\u53f8\u6cd5\u516c\u6b63\u6027\u3002 \u4e2d\u6587\u65e0\u76f4\u63a5\u5bf9\u5e94\u672f\u8bed\uff0c\u9700\u610f\u8bd1\uff0c\u5982\u201c\u5e73\u6c11\u966a\u5ba1\u56e2\u201d\u6216\u201c\u4e0e\u4f60\u540c\u7b49\u8eab\u4efd\u7684\u966a\u5ba1\u5458\u201d\u3002 \"Reasonableness\" \u7684\u53f8\u6cd5\u8bed\u5883 \u6cd5\u5f8b\u4e2d\u5e38\u8bc4\u4f30\u67d0\u884c\u4e3a\u662f\u5426\u5c5e\u4e8e\"a reasonable person\"\uff08\u7406\u6027\u4eba\uff09\u7684\u6807\u51c6\u3002 \u4f8b\u5982\uff1a\u81ea\u536b\u662f\u5426\u5408\u7406\uff08reasonable self-defense\uff09\u3001\u5408\u540c\u6761\u6b3e\u662f\u5426\u516c\u5e73\u7b49\u3002 \u5178\u578b\u4f7f\u7528\u573a\u666f \u5211\u4e8b\u5ba1\u5224\uff1a \u6cd5\u5b98\u5bf9\u88ab\u544a\u8bf4\uff1a\"Whether your actions were justified will be decided by a jury of your peers.\" \uff08\u201c\u4f60\u7684\u884c\u4e3a\u662f\u5426\u6b63\u5f53\uff0c\u5c06\u7531\u966a\u5ba1\u56e2\u88c1\u51b3\u3002\u201d\uff09 \u8bbd\u523a\u7528\u6cd5\uff1a \u540c\u4e8b\u4e89\u8bba\u65f6\u5f00\u73a9\u7b11\uff1a\"Fine, let\u2019s take a vote\u2014a jury of your peers!\" \uff08\u201c\u884c\u554a\uff0c\u54b1\u4eec\u6295\u7968\u8868\u51b3\u2014\u2014\u8ba9\u4f60\u7684\u2018\u966a\u5ba1\u56e2\u2019\u6765\u8bc4\u7406\uff01\u201d\uff09 \"might want to\" \u901a\u5e38\u7ffb\u8bd1\u4e3a \"\u6700\u597d\u2026\u2026\"\u3001\"\u5efa\u8bae\u2026\u2026\" \u6216 \"\u6216\u8bb8\u8be5\u2026\u2026\"\uff0c\u8868\u793a\u4e00\u79cd\u59d4\u5a49\u7684\u5efa\u8bae\u6216\u63d0\u9192\uff0c\u5e26\u6709\u201c\u8fd9\u6837\u505a\u66f4\u660e\u667a/\u66f4\u5b89\u5168\u201d\u7684\u9690\u542b\u610f\u4e49\u3002 \"Lower register\" \u7684\u5177\u4f53\u542b\u4e49 \u97f3\u4e50/\u58f0\u5b66\u672f\u8bed\uff1a\u6307\u201c\u8f83\u4f4e\u7684\u58f0\u533a\u201d\uff08\u5982\u7537\u4f4e\u97f3 vs \u5973\u9ad8\u97f3\uff09\u3002 \u65e5\u5e38\u5f15\u7533\u4e49\uff1a \u97f3\u91cf\uff1a\u964d\u4f4e\u58f0\u97f3\u54cd\u5ea6\uff08\u907f\u514d\u6253\u6270\u4ed6\u4eba\uff09\u3002 \u97f3\u8c03\uff1a\u907f\u514d\u5c16\u9510/\u6fc0\u52a8\u7684\u8bed\u8c03\uff08\u663e\u5f97\u66f4\u6c89\u7a33\uff09\u3002 \u4fee\u8f9e\u5c42\u7ea7\uff1a\u4f7f\u7528\u66f4\u7b80\u5355/\u6734\u5b9e\u7684\u8bcd\u6c47\uff08\u907f\u514d\u9ad8\u9ad8\u5728\u4e0a\uff09\u3002 \u4f7f\u7528\u573a\u666f\u4e0e\u6f5c\u53f0\u8bcd \u793c\u8c8c\u63d0\u9192\uff1a \u5bf9\u65b9\u58f0\u97f3\u592a\u5927\u65f6\uff08\u56fe\u4e66\u9986\u3001\u4f1a\u8bae\u5ba4\uff09\uff1a \"Could you speak in a lower register? The acoustics here carry.\" \uff08\u201c\u80fd\u5c0f\u58f0\u4e9b\u5417\uff1f\u8fd9\u91cc\u56de\u58f0\u5f88\u5927\u3002\u201d\uff09 \u793e\u4ea4\u6697\u793a\uff1a \u5bf9\u65b9\u56e0\u6fc0\u52a8\u800c\u8bed\u8c03\u5c16\u9510\u65f6\uff0c\u59d4\u5a49\u5efa\u8bae\u51b7\u9759\uff1a \"A lower register might help your argument.\" \uff08\u201c\u8bed\u6c14\u5e73\u548c\u70b9\uff0c\u66f4\u5bb9\u6613\u8bf4\u670d\u4eba\u3002\u201d\uff09 \"Granted\" \u7684\u8ba9\u6b65\u8bed\u6c14 \u627f\u8ba4\u67d0\u4e2a\u4e8b\u5b9e\uff08\u901a\u5e38\u662f\u4e0d\u5b8c\u7f8e\u7684\u90e8\u5206\uff09\uff0c\u518d\u8f6c\u6298\u5f3a\u8c03\u79ef\u6781\u9762\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u867d\u8bf4/\u56fa\u7136\u2026\u2026\u4f46\u2026\u2026\u201d\u7ed3\u6784\u3002 \"Not long, but deeply and well\" \u7684\u6f5c\u53f0\u8bcd \u5e38\u7528\u4e8e\u63cf\u8ff0\u77ed\u6682\u4f46\u9ad8\u8d28\u91cf\u7684\u5173\u7cfb\u6216\u7ecf\u5386\uff0c\u6bd4\u5982\uff1a \u4e00\u6bb5\u604b\u60c5 \u4e00\u6b21\u5408\u4f5c \u4eba\u751f\u67d0\u4e2a\u9636\u6bb5 \u9690\u542b\u4ef7\u503c\u89c2\uff1a\u8d28\u91cf\u91cd\u4e8e\u65f6\u957f\uff08\u897f\u65b9\u6587\u5316\u4e2d\u5e38\u89c1\u5bf9\u201c\u6df1\u5ea6\u4f53\u9a8c\u201d\u7684\u63a8\u5d07\uff09\u3002 \u63cf\u8ff0\u604b\u60c5 \"We were together for only a month\u2014granted, not long, but just deeply and well.\" \uff08\u201c\u6211\u4eec\u53ea\u5728\u4e00\u8d77\u4e00\u4e2a\u6708\u2014\u2014\u8bda\u7136\u77ed\u6682\uff0c\u4f46\u5374\u6df1\u523b\u800c\u7f8e\u597d\u3002\u201d\uff09 \u8bc4\u4ef7\u9879\u76ee\u7ecf\u9a8c \"The internship was short\u2014granted, not long, but I learned deeply and well.\" \uff08\u201c\u5b9e\u4e60\u671f\u5f88\u77ed\uff0c\u4f46\u5b66\u5230\u7684\u4e1c\u897f\u5374\u624e\u5b9e\u6709\u7528\u3002\u201d\uff09 \u751f\u6d3b\u611f\u609f \"Life in that town? Granted, not long, but deeply and well lived.\" \u201c\u5728\u90a3\u5c0f\u9547\u7684\u65e5\u5b50\uff1f\u867d\u4e0d\u4e45\u9a7b\uff0c\u5374\u6d3b\u5f97\u771f\u5207\u3002\u201d\uff09 \"Folk cure\" \u7684\u6df1\u5c42\u542b\u4e49 \u6307\u4ee3\u4ee3\u76f8\u4f20\u7684\u975e\u6b63\u89c4\u7597\u6cd5\uff0c\u901a\u5e38\u5305\u542b\uff1a \u4f20\u7edf\u8349\u836f\uff08\u5982\u85b0\u8863\u8349\u3001\u6d0b\u7518\u83ca\uff09 \u884c\u4e3a\u4eea\u5f0f\uff08\u5982\u6570\u7f8a\u3001\u7761\u524d\u559d\u70ed\u725b\u5976\uff09 \u7384\u5b66\u64cd\u4f5c\uff08\u5982\u6795\u5934\u4e0b\u653e\u6c34\u6676\uff09 \u4e2d\u6587\u5bf9\u5e94\u6982\u5ff5\uff1a\u201c\u571f\u65b9\u5b50\u201d\uff08\u5e26\u4eb2\u6c11\u611f\uff09\u6216\u201c\u504f\u65b9\u201d\uff08\u4e2d\u6027\u5b66\u672f\u8bcd\uff09\u3002 \"per se\" \u901a\u5e38\u8bd1\u4e3a \"\u672c\u8eab\"\u3001\"\u672c\u8d28\u4e0a\" \u6216 \"\u5c31\u5176\u672c\u8eab\u800c\u8a00\"\uff0c\u5f3a\u8c03\u4e8b\u7269\u72ec\u7acb\u4e8e\u5176\u4ed6\u56e0\u7d20\u7684\u56fa\u6709\u5c5e\u6027\u3002 \u62c9\u4e01\u8bed\u6e90 \u76f4\u8bd1\u4e3a \"by itself\"\uff08\u9760\u81ea\u8eab\uff09\uff0c\u7528\u4e8e\u6392\u9664\u5916\u90e8\u5e72\u6270\u56e0\u7d20\u7684\u5206\u6790\u3002 \u6b63\u5f0f\u8bed\u5883 \u5b66\u672f/\u6cd5\u5f8b\u6587\u672c\u4e2d\u7cbe\u786e\u754c\u5b9a\u6982\u5ff5\uff1a The law is not unjust per se, but its application may be. \uff08\u6cd5\u5f8b\u672c\u8eab\u5e76\u975e\u4e0d\u516c\uff0c\u4f46\u6267\u884c\u53ef\u80fd\u4e0d\u516c\u3002\uff09 \u4e2d\u6587\u5bf9\u5e94\uff1a\"\u4ece\u672c\u8d28\u4e0a\u8bf4\" / \"\u4e25\u683c\u6765\u8bb2\" \u65e5\u5e38\u4f7f\u7528 \u7ea0\u6b63\u8fc7\u5ea6\u89e3\u8bfb\u65f6\uff1a I don't hate the movie per se, just its pacing. \uff08\u6211\u4e0d\u8ba8\u538c\u7535\u5f71\u672c\u8eab\uff0c\u53ea\u662f\u8282\u594f\u6709\u95ee\u9898\u3002\uff09 \u4e2d\u6587\u7c7b\u4f3c\uff1a\"\u5012\u4e0d\u662f\u8bf4\u2026\u2026\u800c\u662f\u2026\u2026\" \u201c\u90a3\u5f97\u662f\u54ea\u79cd\u533b\u751f\u624d\u8d1f\u8d23\u628a\u978b\u5b50\u4ece\u522b\u4eba\u5c41\u80a1\u91cc\u62ff\u51fa\u6765\uff1f\u201d \u8fd9\u662f\u4e00\u79cd\u5938\u5f20\u7684\u5e7d\u9ed8\u8868\u8fbe\u65b9\u5f0f\uff0c\u901a\u5e38\u7528\u6765\u8bbd\u523a\u5bf9\u65b9\u8bf4\u8bdd\u592a\u8352\u5510\u3001\u505a\u6cd5\u592a\u8fc7\u5206\uff0c\u6216\u8005\u62ff\u67d0\u79cd\u201c\u533b\u751f\u201d\u8fd9\u4e2a\u8eab\u4efd\u5f00\u73a9\u7b11\uff0c\u6697\u793a\u5bf9\u65b9\u4e0d\u61c2\u4e13\u4e1a\uff0c\u8fd8\u80e1\u4e71\u5e72\u9884\u522b\u4eba\u7684\u4e8b\u3002 Boy, you are all over the place this morning.\" \u7ffb\u8bd1\uff1a \u201c\u8001\u5144\uff0c\u4f60\u4eca\u5929\u65e9\u4e0a\u771f\u662f\u4e1c\u4e00\u6994\u5934\u897f\u4e00\u68d2\u69cc\u554a\uff01\u201d \"Color your opinion\" \u7684\u9690\u55bb \u6e90\u81ea\u7ed8\u753b\u4e2d\u201c\u8272\u5f69\u5f71\u54cd\u6574\u4f53\u753b\u9762\u201d\u7684\u6982\u5ff5\uff0c\u6307\u67d0\u4ef6\u4e8b\u4f1a\u6f5c\u79fb\u9ed8\u5316\u5730\u6539\u53d8\u5224\u65ad\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a \u201c\u5e26\u4e0a\u6709\u8272\u773c\u955c\u201d\uff08\u9884\u8bbe\u7acb\u573a\uff09 \u201c\u7559\u4e0b\u6c61\u70b9\u201d\uff08\u7279\u6307\u8d1f\u9762\u5370\u8c61\uff09 \u4f7f\u7528\u573a\u666f \u66ff\u4eba\u89e3\u91ca\u65f6\uff1a \"He was stressed that day\u2014I hope it won\u2019t color your opinion of him.\" \uff08\u201c\u4ed6\u90a3\u5929\u538b\u529b\u5927\uff0c\u5e0c\u671b\u4f60\u522b\u56e0\u6b64\u5426\u5b9a\u4ed6\u3002\u201d\uff09 \u63d0\u524d\u9884\u9632\u504f\u89c1\uff1a \"This rumor is false, so don\u2019t let it color your view.\" \uff08\u201c\u8c23\u8a00\u522b\u5f53\u771f\uff0c\u522b\u8ba9\u5b83\u5f71\u54cd\u4f60\u3002\u201d\uff09 \"Gentle\" \u7684\u53cc\u91cd\u542b\u4e49 \u884c\u4e3a\u5c42\u9762\uff1a\u52a8\u4f5c\u8f7b\u67d4\uff0c\u907f\u514d\u7c97\u66b4\uff08physical tenderness\uff09 \u60c5\u611f\u5c42\u9762\uff1a\u5c0a\u91cd\u5bf9\u65b9\u611f\u53d7\uff08emotional attentiveness\uff09 \"Thorough\" \u7684\u7279\u6b8a\u6697\u793a \u5e76\u975e\u5b57\u9762\u201c\u5f7b\u5e95\u201d\uff0c\u800c\u662f\u5f3a\u8c03\uff1a \u7ec6\u81f4\u5165\u5fae\u7684\u89c2\u5bdf\u529b\uff08\u5bdf\u89c9\u4f34\u4fa3\u672a\u8a00\u660e\u7684\u9700\u6c42\uff09 \u5168\u65b9\u4f4d\u7684\u6295\u5165\uff08\u524d\u620f-\u8fc7\u7a0b-\u540e\u620f\u7684\u5b8c\u6574\u5173\u6000\uff09 \u4e2d\u6587\u5bf9\u5e94\u8bcd\uff1a\u201c\u5468\u5168\u201d/\u201c\u7ec6\u817b\u5165\u5fae\u201d \"Let themselves in\" \u7684\u6f5c\u53f0\u8bcd \u8868\u9762\u610f\u601d\u662f\u201c\u81ea\u5df1\u8fdb\u6765\u201d\uff0c\u4f46\u9690\u542b \u201c\u672a\u7ecf\u5141\u8bb8\u64c5\u81ea\u8fdb\u5165\u201d\uff0c\u53ef\u80fd\u662f\uff1a \u7528\u94a5\u5319/\u5bc6\u7801\uff08\u6709\u6743\u9650\u4f46\u6ee5\u7528\uff0c\u6bd4\u5982\u5ba4\u53cb\u5e26\u4eba\u8fdb\u6765\uff09 \u64ac\u9501/\u7834\u95e8\uff08\u975e\u6cd5\u95ef\u5165\uff0c\u66f4\u4e25\u91cd\uff09 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u4e0d\u8bf7\u81ea\u6765\u201d / \u201c\u64c5\u95ef\u201d \"My place\" \u7684\u8bed\u5883 \u975e\u6b63\u5f0f\u8bf4\u6cd5\uff0c\u6307 \u201c\u6211\u5bb6\u201d \u6216 \u201c\u6211\u4f4f\u5904\u201d\uff08\u516c\u5bd3\u3001\u623f\u95f4\u7b49\uff09\u3002 \u548c \"my house\" \u7684\u533a\u522b\uff1a \"My place\" \u2192 \u6cdb\u6307\u4f4f\u6240\uff08\u79df\u623f\u3001\u81ea\u5df1\u5bb6\u90fd\u884c\uff09 \"My house\" \u2192 \u7279\u6307\u81ea\u5df1\u62e5\u6709\u7684\u623f\u5b50 \u53ef\u80fd\u7684\u573a\u666f \u670b\u53cb\u8d8a\u754c\uff1a \"I gave him a key for emergencies, but he just let himself in!\" \uff08\u201c\u6211\u7ed9\u4ed6\u94a5\u5319\u662f\u5e94\u6025\u7528\u7684\uff0c\u7ed3\u679c\u4ed6\u968f\u4fbf\u8fdb\u51fa\uff01\u201d\uff09 \"Better off\" \u7684\u9690\u542b\u5bf9\u6bd4 \u6697\u793a \u201c\u6bd4\u73b0\u72b6/\u5176\u4ed6\u9009\u62e9\u66f4\u6709\u5229\u201d\uff0c\u53ef\u80fd\u6d89\u53ca\uff1a \u6587\u5316\u517c\u5bb9\u6027\uff08\u5982\u5bb6\u5ead\u89c2\u5ff5\u76f8\u4f3c\uff09 \u4e2a\u4eba\u504f\u597d\uff08\u5982\u6b23\u8d4f\u67d0\u79cd\u6027\u683c\u7279\u8d28\uff09 \u73b0\u5b9e\u8003\u91cf\uff08\u5982\u8bed\u8a00/\u751f\u6d3b\u4e60\u60ef\u66f4\u5951\u5408\uff09 \"Doll\" \u7684\u6bd4\u55bb\u542b\u4e49 \u672c\u4e49\u662f\u201c\u6d0b\u5a03\u5a03\u201d\uff0c\u5728\u53e3\u8bed\u4e2d\u55bb\u6307\uff1a \u751c\u7f8e\u53ef\u7231\u7684\u4eba\uff08\u5c24\u5176\u5938\u5973\u6027/\u5c0f\u5b69\uff09 \u8d34\u5fc3\u5468\u5230\u7684\u4eba\uff08\u5982\u4e3b\u52a8\u5e2e\u5fd9\u65f6\u88ab\u5938\uff09 \u7c7b\u4f3c\u4e2d\u6587\u7528\u201c\u751c\u5fc3\u201d\u201c\u5b9d\u8d1d\u201d\u8868\u8fbe\u4eb2\u6635 \u4f7f\u7528\u573a\u666f \u5938\u8d5e\u5916\u8868\uff1a \"That dress suits you! You\u2019re such a doll.\" \uff08\u201c\u8fd9\u88d9\u5b50\u771f\u914d\u4f60\uff01\u7f8e\u5f97\u50cf\u6d0b\u5a03\u5a03\u3002\u201d\uff09 \u611f\u8c22\u5e2e\u52a9\uff1a \"You brought me coffee? You\u2019re a doll!\" \uff08\u201c\u4f60\u8fd8\u7ed9\u6211\u5e26\u5496\u5561\uff1f\u592a\u8d34\u5fc3\u4e86\uff01\u201d\uff09 \"You just got served\" \u7684\u8d77\u6e90 \u6e90\u81ea80\u5e74\u4ee3\u9ed1\u4eba\u8857\u5934\u6587\u5316\uff0c\u6700\u521d\u5728\u7bee\u7403\u6597\u725b\uff081v1\uff09\u4e2d\u4f7f\u7528\uff0c\u610f\u4e3a\u201c\u4f60\u88ab\u5f7b\u5e95\u51fb\u8d25/\u7f9e\u8fb1\u4e86\u201d\u3002 \u540e\u56e02004\u5e74\u7535\u5f71\u300aYou Got Served\u300b\uff08\u8857\u821e\u72c2\u6f6e\uff09\u666e\u53ca\uff0c\u5ef6\u4f38\u81f3\u821e\u8e48Battle\u3001\u8bf4\u5531\u5bf9\u51b3\u7b49\u573a\u666f\u3002 \"Grab a napkin\" \u7684\u9690\u55bb \u5b57\u9762\u662f\u201c\u62ff\u7eb8\u5dfe\u201d\uff0c\u5b9e\u9645\u6697\u793a\uff1a \u64e6\u6c57\uff08\u56e0\u88ab\u78be\u538b\u800c\u72fc\u72c8\uff09 \u64e6\u8840\uff08\u50cf\u62f3\u51fb\u8d5b\u4e2d\u88ab\u6253\u5012\u540e\u5904\u7406\u4f24\u53e3\uff09 \u7c7b\u4f3c\u4e2d\u6587\u6897\uff1a\u201c\u5feb\u62ff\u51b0\u888b\u6577\u6577\u8138\uff0c\u90fd\u88ab\u6253\u80bf\u4e86\uff01\u201d \"Homie\" \u7684\u8bed\u5883 \u9ed1\u4eba\u4fda\u8bed\u4e2d\u5bf9\u597d\u53cb\u7684\u79f0\u547c\uff08=\u5144\u5f1f/\u8001\u94c1\uff09\uff0c\u7528\u5728\u8fd9\u91cc\u524a\u5f31\u653b\u51fb\u6027\uff0c\u589e\u52a0\u620f\u8c11\u611f\u3002 \"Been there\" \u7684\u6f5c\u53f0\u8bcd \u8868\u9762\u610f\u601d\u662f\u201c\u53bb\u8fc7\u90a3\u91cc\u201d\uff0c\u5b9e\u9645\u8868\u8fbe\uff1a \u611f\u540c\u8eab\u53d7\uff08\u5bf9\u4ed6\u4eba\u906d\u9047\u8868\u793a\u7406\u89e3\uff09 \u89c1\u602a\u4e0d\u602a\uff08\u5bf9\u67d0\u79cd\u60c5\u51b5\u4e60\u4ee5\u4e3a\u5e38\uff09 \u5e38\u63a5\u4e0b\u534a\u53e5\uff1a \"Been there, done that.\"\uff08\u201c\u65e9\u7ecf\u5386\u8fc7\u4e86\uff0c\u6ca1\u5565\u65b0\u9c9c\u3002\u201d\uff09 \"Been there, got the T-shirt.\"\uff08\u5e7d\u9ed8\u7248\uff0c\u6697\u6307\u201c\u7ecf\u9a8c\u4e30\u5bcc\u5230\u80fd\u51fa\u7eaa\u5ff5T\u6064\u201d\uff09 \u4f7f\u7528\u573a\u666f \u5b89\u6170\u4ed6\u4eba\uff1a A: \"I failed my driver's test twice...\" B: \"Been there. You'll get it next time!\" \uff08\u201c\u8003\u9a7e\u7167\u6302\u4e24\u6b21\uff1f\u6211\u4e5f\u4e00\u6837\uff01\u4e0b\u6b21\u5fc5\u8fc7\u3002\u201d\uff09 \u8c03\u4f83\u81ea\u5df1\uff1a \"All-nighters in college? Been there, survived on ramen.\" \uff08\u201c\u5927\u5b66\u901a\u5bb5\uff1f\u8fc7\u6765\u4eba\u4e86\uff0c\u9760\u6ce1\u9762\u7eed\u547d\u7684\u3002\u201d\uff09 \u5176\u5b9e\uff0c\u4e0e\u5176\u8bf4\u6211\u662f\u95f2\u804a\u8005\uff0c\u4e0d\u5982\u8bf4\u662f\u88ab\u95f2\u804a\u7684\u5bf9\u8c61 \"less...than...\" \u5728\u8fd9\u91cc\u8868\u793a \u201c\u4e0e\u5176\u8bf4\u662f\u2026\u2026\u4e0d\u5982\u8bf4\u662f\u2026\u2026\u201d\uff0c\u5f3a\u8c03\u4e24\u8005\u5bf9\u6bd4\u4e2d\u66f4\u7b26\u5408\u540e\u8005\u7684\u7279\u8d28\u3002 \u5426\u5b9a\u524d\u8005\uff0c\u80af\u5b9a\u540e\u8005 \u7ed3\u6784\uff1aless A than B = \u201c\u4e0d\u662fA\uff0c\u800c\u662fB\u201d / \u201cA\u7684\u6210\u5206\u5c11\uff0cB\u7684\u6210\u5206\u591a\u201d \u4f8b\u53e5\uff1a He's less a teacher than a performer. \uff08\u4ed6\u4e0e\u5176\u8bf4\u662f\u8001\u5e08\uff0c\u4e0d\u5982\u8bf4\u662f\u8868\u6f14\u8005\u3002\uff09 It was less a debate than a shouting match. \uff08\u90a3\u6839\u672c\u4e0d\u662f\u8fa9\u8bba\uff0c\u7eaf\u5c5e\u5435\u67b6\u3002\uff09 \"Chatter\" vs. \"Chatee\" \u7684\u6587\u5b57\u6e38\u620f Chatter\uff1a\u4e3b\u52a8\u95f2\u804a\u7684\u4eba\uff08\u7c7b\u4f3c\u201c\u8bdd\u75e8\u201d\uff09 Chatee\uff1a\u751f\u9020\u8bcd\uff0c\u4eff\u7167 employee\uff08\u96c7\u5458\uff09/interviewee\uff08\u53d7\u8bbf\u8005\uff09 \u7684\u6784\u8bcd\u6cd5\uff0c\u6307\u201c\u88ab\u95f2\u804a\u7684\u5bf9\u8c61\u201d \u5e7d\u9ed8\u6548\u679c\u6765\u81ea\uff1a \u7528\u6b63\u5f0f\u540e\u7f00 -ee \u642d\u914d\u4e0d\u6b63\u5f0f\u7684\u8bcd\u6839 chat\uff08\u5f62\u6210\u53cd\u5dee\u840c\uff09 \u6697\u793a\u81ea\u5df1\u88ab\u52a8\u5377\u5165\u516b\u5366\uff08\u7c7b\u4f3c\u4e2d\u6587\u201c\u5403\u74dc\u5403\u5230\u81ea\u5df1\u5934\u4e0a\u201d\uff09 \u4f7f\u7528\u573a\u666f \u6f84\u6e05\u8bef\u4f1a\u65f6\uff1a A: \"You love gossiping!\" B: \"Actually, I was less the chatter than the chatee.\" \uff08\u201c\u51a4\u6789\u554a\uff0c\u6211\u624d\u662f\u88ab\u516b\u5366\u7684\u90a3\u4e2a\uff01\u201d\uff09 \u81ea\u5632\u88ab\u8ba8\u8bba\uff1a \"In high school? Oh, I wasn\u2019t popular\u2014just the chatee in locker room talk.\" \uff08\u201c\u9ad8\u4e2d\u65f6\u6211\u53ef\u4e0d\u53d7\u6b22\u8fce\uff0c\u53ea\u662f\u66f4\u8863\u5ba4\u8bdd\u9898\u7684\u7d20\u6750\u5e93\u3002\u201d\uff09 \u8bcd\u6e90\u4e0e\u53cc\u91cd\u542b\u4e49 \u6e90\u81ea\u62c9\u4e01\u8bed toxicum\uff08\u6bd2\u836f\uff09\uff0c\u539f\u6307\u9152\u7cbe\u6216\u6bd2\u7269\u7684\u81f4\u9189\u6548\u679c\uff0c\u540e\u5f15\u7533\u4e3a\uff1a \u751f\u7406\u9676\u9189\uff08\u5982\u9152\u996e\u3001\u9999\u6c14\uff09 \u7cbe\u795e\u6c89\u8ff7\uff08\u5982\u7231\u60c5\u3001\u97f3\u4e50\uff09 \u4e2d\u6587\u5bf9\u5e94\u201c\u9189\u4eba\u201d\u4e00\u8bcd\u540c\u6837\u517c\u5177\u9152\u7cbe\u4e0e\u9690\u55bb\u7528\u6cd5\uff08\u5982\u201c\u9189\u4eba\u7684\u591c\u8272\u201d\uff09\u3002 \u4f7f\u7528\u573a\u666f \u611f\u5b98\u63cf\u8ff0\uff1a \"The intoxicating scent of jasmine filled the room.\" \uff08\u201c\u8309\u8389\u82b1\u9999\u5f25\u6f2b\u623f\u95f4\uff0c\u4ee4\u4eba\u6c89\u9189\u3002\u201d\uff09 \u60c5\u611f\u8868\u8fbe\uff1a \"Her laugh was intoxicating.\" \uff08\u201c\u5979\u7684\u7b11\u58f0\u8ba9\u4eba\u5fc3\u8361\u795e\u9a70\u3002\u201d\uff09 \u5371\u9669\u8b66\u793a\uff1a \"Power can be intoxicating.\" \uff08\u201c\u6743\u529b\u4ee4\u4eba\u8ff7\u5931\u3002\u201d\uff09 A Bomb\uff08Atomic Bomb\uff0c\u539f\u5b50\u5f39\uff09 H Bomb\uff08Hydrogen Bomb\uff0c\u6c22\u5f39\uff09 \u539f\u6587\uff1a \"If water's involved, we're gonna have to ground the crap out of the thing.\" \u7ffb\u8bd1\uff1a \u201c\u5982\u679c\u6cbe\u6c34\u4e86\uff0c\u6211\u4eec\u5c31\u5f97\u628a\u8fd9\u73a9\u610f\u513f\u5f80\u6b7b\u91cc\u63a5\u5730\uff01\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u4f46\u51e1\u8ddf\u6c34\u6709\u5173\uff0c\u8fd9\u4e1c\u897f\u4e0d\u63a5\u5730\u7ebf\u63a5\u51fa\u706b\u661f\u5b50\u4e0d\u7b97\u5b8c\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Ground the crap out of\" \u7684\u66b4\u529b\u7f8e\u5b66 Ground\uff08\u63a5\u5730\uff09\uff1a\u7535\u5de5\u672f\u8bed\uff0c\u6307\u7528\u5bfc\u7ebf\u5c06\u8bbe\u5907\u4e0e\u5927\u5730\u8fde\u63a5\u4ee5\u9632\u89e6\u7535\u3002 The crap out of\uff1a\u7f8e\u5f0f\u4fda\u8bed\uff0c\u8868\u201c\u6781\u7aef\u7a0b\u5ea6\u201d\uff08\u7c7b\u4f3c\u4e2d\u6587\u201c\u5f80\u6b7b\u91cc\u2026\u2026\u201d\uff09\u3002 \u7ec4\u5408\u6548\u679c\uff1a\u7528\u7c97\u4fd7\u8868\u8fbe\u5f3a\u8c03\u5b89\u5168\u63aa\u65bd\u7684\u7d27\u8feb\u6027\u3002 \"Water's involved\" \u7684\u6f5c\u53f0\u8bcd \u6c34\u662f\u7535\u7684\u826f\u5bfc\u4f53\uff0c\u6d89\u53ca\u6c34\u7684\u7535\u5668\u6545\u969c\u53ef\u80fd\u5f15\u53d1\uff1a \u77ed\u8def\uff08short circuit\uff09 \u6f0f\u7535\uff08electric leakage\uff09 \u4e2d\u6587\u7c7b\u4f3c\u9884\u8b66\uff1a\u201c\u4e00\u6cbe\u6c34\uff0c\u5fc5\u4f5c\u5996\u201d\u3002 \u5178\u578b\u4f7f\u7528\u573a\u666f \u5bb6\u7535\u7ef4\u4fee\uff1a A: \"The hairdryer fell in the sink!\" B: \"If water's involved, we're gonna have to ground the crap out of it before testing.\" \uff08\u201c\u5439\u98ce\u673a\u6389\u6c34\u6c60\u4e86\uff1f\u60f3\u8bd5\u673a\u5148\u5f80\u6b7b\u91cc\u63a5\u5730\u7ebf\uff01\u201d\uff09 \u5de5\u4e1a\u5b89\u5168\uff1a \"With this flooded server room, we\u2019ll be grounding the crap out of everything.\" \uff08\u201c\u673a\u623f\u6df9\u6210\u8fd9\u6837\uff0c\u6240\u6709\u8bbe\u5907\u90fd\u5f97\u52a0\u63a5\u5730\u5230\u5192\u70df\u3002\u201d\uff09","title":"S01e02"},{"location":"art/English/tv/bigbang/s01/e01/s01e02/#_1","text":"predicated \u4f7f\u57fa\u4e8e dolly \u624b\u63a8\u8f66 fulcrum \u652f\u70b9 lever \u6760\u6746 immaculate \u6574\u6d01\u7684 \u822a\u7a7a\u7ea7\u94dd\u5408\u91d1(aircraft grade aluminum)","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e01/s01e02/#_2","text":"Accelerating at an initial rate of 32 feet per second per second\" \u7684\u610f\u601d\u662f\uff1a \u521d\u59cb\u52a0\u901f\u5ea6\u4e3a\u6bcf\u79d232\u82f1\u5c3a\u6bcf\u79d2\u3002 \u8fd9\u662f\u7f8e\u5236\u5355\u4f4d\u4e0b\u7684\u52a0\u901f\u5ea6\uff0c32 ft/s\u00b2 \u6070\u597d\u662f\u5730\u7403\u5f15\u529b\u52a0\u901f\u5ea6\u7684\u8fd1\u4f3c\u503c\uff08\u5728\u82f1\u5236\u5355\u4f4d\u4e2d\uff09\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u56fd\u9645\u5355\u4f4d\u5236\u4e2d\u5e38\u7528\u7684 9.8 m/s\u00b2\u3002 Superman's flight\uff08\u8d85\u4eba\u7684\u98de\u884c\uff09\uff1a\u6307\u7684\u662f\u8d85\u4eba\u80fd\u5728\u7a7a\u4e2d\u98de\u884c\u7684\u80fd\u529b\u3002 feat of strength\uff08\u529b\u91cf\u7684\u58ee\u4e3e\uff09\uff1a feat \u6307\u7684\u662f\u975e\u51e1\u7684\u6280\u80fd\u6216\u82f1\u52c7\u884c\u4e3a\uff0c\u5e38\u5e38\u662f\u67d0\u79cd\u4e86\u4e0d\u8d77\u7684\u6210\u5c31\u3002 strength \u8fd9\u91cc\u6307\u7684\u662f\u4f53\u529b\u3001\u529b\u91cf\u3001\u80fd\u529b\u3002 \u5728DC\u6f2b\u753b\u5b87\u5b99\u7684\u8bbe\u5b9a\u4e2d\uff0c\u8d85\u4eba\u6765\u81ea\u6c2a\u661f\uff08Krypton\uff09\uff0c\u90a3\u91cc\u7684\u592a\u9633\u662f\u7ea2\u8272\u7684\uff0c\u800c\u5730\u7403\u7684\u9ec4\u8272\u592a\u9633\u4f1a\u6fc0\u53d1\u4ed6\u4f53\u5185\u7684\u7ec6\u80de\uff0c\u4f7f\u4ed6\u83b7\u5f97\u8d85\u4eba\u7684\u80fd\u529b\uff0c\u6bd4\u5982\u98de\u884c\u3001\u8d85\u7ea7\u529b\u91cf\u3001\u6fc0\u5149\u773c\u7b49\u3002 \u6240\u4ee5yellow sun\u5e76\u4e0d\u662f\u82f1\u8bed\u91cc\u7684\u642d\u914d\uff0c\u800c\u662fDC\u5b87\u5b99\u7684\u8bbe\u5b9a Yeah, and you don\u2019t have a problem with that, how does he fly at night? and you don\u2019t have a problem with that \u2014\u2014\u201c\u4f60\u5bf9\u8fd9\u90fd\u6ca1\u610f\u89c1\u554a\uff1f\u201d \ud83d\udc49 \u542b\u6709\u8d28\u7591\u8bed\u6c14\uff0c\u6697\u793a\u201c\u8fd9\u542c\u8d77\u6765\u5c31\u5f88\u4e0d\u5408\u7406\uff0c\u4f60\u5c45\u7136\u8fd8\u80fd\u63a5\u53d7\uff1f\u201d \u201c\u54c8\uff1f\u4f60\u5c45\u7136\u89c9\u5f97\u8fd9\u6ca1\u95ee\u9898\uff1f\u90a3\u4ed6\u665a\u4e0a\u662f\u600e\u4e48\u98de\u7684\uff1f\u201d \"so you're just gonna be done?\" you're just gonna be done? \u76f4\u8bd1\u6709\u70b9\u96be\u61c2\uff0c\u4f46\u5176\u5b9e\u8fd9\u53e5\u8bdd\u662f\u5e26\u6709\u4e00\u70b9\u8bbd\u523a\u6216\u8d28\u7591\u7684\u8bed\u6c14\u3002 be done \u8fd9\u91cc\u610f\u601d\u662f\u201c\u4f60\u5c31\u6253\u7b97\u4e0d\u505a\u4e86\uff1f\u201d\u3001\u201c\u4f60\u5c31\u653e\u5f03\u4e86\uff1f\u201d \u76f8\u5f53\u4e8e\u5728\u8bf4\uff1a \u201c\u6240\u4ee5\u4f60\u5c31\u6253\u7b97\u4e0d\u7ba1\u4e86\uff1f\u201d \u201c\u6240\u4ee5\u4f60\u5c31\u4e0d\u613f\u610f\u4e0a\u697c\u4e86\uff1f\u201d \ud83d\udd39 \u8fd9\u53e5\u8bdd\u901a\u5e38\u662f\u5728\u9762\u5bf9\u5bf9\u65b9\u534a\u9014\u800c\u5e9f\u3001\u4e0d\u613f\u610f\u5403\u82e6\u65f6\u8bf4\u7684\u3002 \"Okay, cool, thanks.\" Okay = \u597d\u5427 cool = \u597d\u7684\uff0c\u884c\uff08\u8bed\u6c14\u53ef\u80fd\u5e26\u70b9\u51b7\u6de1\uff09 thanks = \u8c22\u8c22 \u27a1\ufe0f \u8fd9\u4e09\u8bcd\u8fde\u5728\u4e00\u8d77\uff0c\u8bf4\u8bdd\u4eba\u901a\u5e38\u5e26\u70b9 \u8bbd\u523a \u6216 \u4e0d\u592a\u9ad8\u5174 \u7684\u8bed\u6c14\uff0c\u6bd4\u5982\uff1a \u201c\u54e6\uff0c\u597d\u554a\uff0c\u77e5\u9053\u4e86\uff0c\u8c22\u8c22\u4f60\u554a\uff5e\u201d \"I hardly think so.\" hardly = \u51e0\u4e4e\u4e0d\uff0c\u6839\u672c\u4e0d think so = \u8ba4\u4e3a\u662f\u90a3\u6837 \ud83d\udd39 \u6574\u53e5\u610f\u601d\uff1a \u201c\u6211\u624d\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\u3002\u201d \u201c\u6211\u4e00\u70b9\u4e5f\u4e0d\u89c9\u5f97\u884c\u3002\u201d a dolly \ud83d\udc49 \u6307\u642c\u8fd0\u5927\u4ef6\u7269\u54c1\u7528\u7684\u5c0f\u63a8\u8f66\uff0c\u901a\u5e38\u662f\u5e26\u8f6e\u5b50\u7684\u5e73\u677f\u8f66\uff0c\u642c\u51b0\u7bb1\u3001\u6c99\u53d1\u5e38\u7528\u3002 \ud83d\udd39 \u4e2d\u6587\uff1a\u5c0f\u63a8\u8f66 / \u642c\u8fd0\u8f66 lifting belts \ud83d\udc49 \u4e3e\u91cd\u65f6\u7528\u7684\u4fdd\u62a4\u8170\u90e8\u7684\u201c\u8170\u5e26\u201d\uff0c\u642c\u91cd\u7269\u65f6\u4e5f\u53ef\u7528\uff0c\u4fdd\u62a4\u4e0d\u626d\u4f24\u3002 \ud83d\udd39 \u4e2d\u6587\uff1a\u4e3e\u91cd\u5e26 / \u642c\u8fd0\u8170\u5e26 any measurable upper-body strength \ud83d\udc49 \u201c\u4efb\u4f55\u53ef\u4ee5\u6d4b\u5f97\u7684\u4e0a\u534a\u8eab\u529b\u91cf\u201d \ud83d\udd39 \u5373\u5938\u5f20\u5730\u8bf4\u201c\u6211\u4eec\u5b8c\u5168\u6ca1\u529b\u6c14\u201d \ud83d\udd38 measurable\uff08\u53ef\u6d4b\u91cf\u7684\uff09+ upper-body strength\uff08\u4e0a\u534a\u8eab\u529b\u91cf\uff09= \u4e00\u672c\u6b63\u7ecf\u5730\u641e\u7b11\uff01 \"I don't have this.\"\uff08\u6211\u505a\u4e0d\u5230/\u6211\u4e0d\u884c\uff09 do you have any ideas yes but they all involve a green lantern and a power ring Green Lantern\uff08\u7eff\u706f\u4fa0\uff09 \u662f DC \u6f2b\u753b\u4e2d\u7684\u8d85\u7ea7\u82f1\u96c4\u3002 \u4ed6\u9760\u4e00\u679a \u80fd\u91cf\u6212\u6307\uff08power ring\uff09 \u65bd\u5c55\u5404\u79cd\u8d85\u80fd\u529b\uff0c\u8fd9\u679a\u6212\u6307\u53ef\u4ee5\u6839\u636e\u4f69\u6234\u8005\u7684\u610f\u5fd7\u529b\u548c\u60f3\u8c61\u529b\u521b\u9020\u51fa\u4efb\u4f55\u4e1c\u897f\uff08\u6b66\u5668\u3001\u5de5\u5177\u3001\u98de\u8239\u3001\u62a4\u76fe\u7b49\uff09\u3002 \u8fd9\u679a\u6212\u6307\u51e0\u4e4e\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898\u2014\u2014\u4f46\u5b83\u662f\u865a\u6784\u7684\u3002 \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50 \"Sure, there's a way \u2014 as long as I have Doraemon's magic pocket.\" daw\u00b7ray\u00b7maan\u54c6\u5566A\u68a6 \"Call it 30 degrees, so about half.\" \u2705 \u201cCall it...\u201d \u7684\u610f\u601d\u662f\uff1a \u5728\u53e3\u8bed\u4e2d\uff0c\u201cCall it\u201d\u7684\u610f\u601d\u662f\uff1a \u201c\u5c31\u7b97\u4f5c\u662f...\u201d / \u201c\u6211\u4eec\u5c31\u5f53\u5b83\u662f...\u201d / \u201c\u59d1\u4e14\u8ba4\u4e3a...\u201d \u5b83\u5e76\u4e0d\u662f\u771f\u8981\u201c\u6253\u7535\u8bdd\u201d\uff0c\u800c\u662f\u4e00\u79cd\u975e\u6b63\u5f0f\u4f30\u7b97\u6216\u7b80\u5316\u7684\u8bf4\u6cd5\u3002 \u7c7b\u4f3c\u4f8b\u5b50\uff1a Call it 5 bucks. \u2192 \u201c\u5c31\u7b975\u5757\u94b1\u5427\u3002\u201d\uff08\u5373\u4f7f\u4e0d\u786e\u5b9a\uff0c\u4e5f\u5148\u6309\u8fd9\u4e2a\u6765\u4f30\u7b97\uff09 Call it even. \u2192 \u201c\u54b1\u4eec\u5c31\u7b97\u626f\u5e73\u4e86\u3002\u201d Let\u2019s call it a day. \u2192 \u201c\u4eca\u5929\u5c31\u5230\u8fd9\u513f\u5427\u3002\u201d\uff08\u5e38\u7528\u4e8e\u5de5\u4f5c\u7ed3\u675f\uff09 Ah\uff1a\u8868\u793a\u611f\u53f9\uff0c\u201c\u554a\u201d\u3002 gravity\uff1a\u91cd\u529b\uff0c\u5f15\u529b\u3002 thou art\uff1a\u6587\u8a00\u5f0f\u82f1\u8bed\uff0c\u201c\u4f60\u662f\u201d\uff08\u73b0\u4ee3\u82f1\u8bed\u662f you are\uff09\u3002 a heartless bitch\uff1a\u76f4\u8bd1\u662f\u201c\u4e00\u4e2a\u65e0\u60c5\u7684\u8d31\u4eba\u201d\uff0c\u7528\u6765\u5f62\u5bb9\u67d0\u4e8b\u4ee4\u4eba\u8ba8\u538c\u3001\u9ebb\u70e6\u3002 \"thou art\" \u662f\u4eff\u7167\u838e\u58eb\u6bd4\u4e9a\u5f0f\u82f1\u8bed\uff0c\u8425\u9020\u4e00\u79cd\u620f\u5267\u6548\u679c\u3002Sheldon \u8bf4\u8bdd\u5e38\u5e38\u5f15\u7ecf\u636e\u5178\uff0c\u5e26\u6709\u4e00\u70b9\u201c\u620f\u7cbe\u201d\u6c14\u8d28\u3002 you do understand that our efforts here will in no way increase the odds of you having sexual congress with this woman \u6b63\u5f0f\u7528\u8bed\"sexual congress\"\uff08\u6027\u4ea4\u7684\u6587\u96c5\u8bf4\u6cd5\uff09 you do understand that our efforts here will in no way increase the odds of you having sexual congress with this woman Men do things for woman without expecting sex,Those would be men who just had sex i'm doing this to be a good neighbor in any case, there's no way it could lower the odds \u53cd\u6b63\uff0c\u8fd9\u603b\u4e0d\u4f1a\u8ba9\u673a\u4f1a\u53d8\u5f97\u66f4\u4f4e\u5427\u3002 \"Great Caesar's ghost\" \u7684\u8d77\u6e90\u4e0e\u542b\u4e49 \u8fd9\u662f\u4e00\u4e2a\u53e4\u8001\u7684\u7f8e\u5f0f\u611f\u53f9\u8bed\uff0c\u6e90\u81ea19\u4e16\u7eaa\uff0c\u53ef\u80fd\u53d7\u838e\u58eb\u6bd4\u4e9a\u620f\u5267\uff08\u5982\u300a\u5c24\u5229\u4e4c\u65af\u00b7\u51ef\u6492\u300b\uff09\u5f71\u54cd\u3002 \u5b57\u9762\u610f\u601d\u662f\u201c\u4f1f\u5927\u7684\u51ef\u6492\u7684\u9b3c\u9b42\u554a\uff01\u201d\uff0c\u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u8001\u5929\u7237\uff01\u201d\u201c\u6211\u7684\u5929\uff01\u201d \u572820\u4e16\u7eaa\u4e2d\u671f\u540e\u9010\u6e10\u8fc7\u65f6\uff0c\u4f46\u4ecd\u5728\u6000\u65e7\u6216\u620f\u5267\u5316\u8bed\u5883\u4e2d\u4f7f\u7528\uff0c\u6bd4\u5982\u300a\u8d85\u4eba\u300b\u6f2b\u753b\u4e2d\u4f69\u91cc\u00b7\u6000\u7279\uff08Perry White\uff09\u5e38\u558a\u8fd9\u53e5\u8bdd\u3002 https://baike.baidu.com/item/%E6%9B%BC%E5%BE%B7%E5%8B%83%E7%BD%97%E9%9B%86/4888291 \"Hard as it may be for you to believe\" \u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\u201c\u5c3d\u7ba1\u4f60\u53ef\u80fd\u5f88\u96be\u76f8\u4fe1\u201d \"What are you doing? I'm straightening up.\" \u7ffb\u8bd1\uff1a \u201c\u4f60\u5728\u5e72\u561b\u5462\uff1f\u201d \u201c\u6211\u5728\u6536\u62fe\u4e1c\u897f\u3002\u201d \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Straightening up\" \u7684\u65e5\u5e38\u542b\u4e49 \u76f4\u8bd1\u662f\u201c\u5f04\u76f4\u201d\uff0c\u4f46\u5728\u53e3\u8bed\u4e2d\u5e38\u8868\u793a\uff1a \u6574\u7406\u623f\u95f4\uff08\u6bd4\u5982\u628a\u4e71\u653e\u7684\u4e1c\u897f\u5f52\u4f4d\uff09 \u5feb\u901f\u6e05\u6d01\uff08\u4e34\u65f6\u6709\u5ba2\u4eba\u6765\u8bbf\u65f6\u7684\u7d27\u6025\u6536\u62fe\uff09 \u8ba9\u81ea\u5df1\u770b\u8d77\u6765\u4f53\u9762\uff08\u6574\u7406\u8863\u670d\u3001\u5934\u53d1\u7b49\uff09 \u201cRun cable\u201d \u7684\u6280\u672f\u542b\u4e49 Run \u5728\u8fd9\u91cc\u6307\u201c\u94fa\u8bbe/\u5b89\u88c5\u7ebf\u8def\u201d\uff08\u5982\u7f51\u7ebf\u3001\u7535\u6e90\u7ebf\uff09\uff0c\u662fIT/\u5de5\u7a0b\u9886\u57df\u7684\u5e38\u89c1\u672f\u8bed\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u5e03\u7ebf\u201d\uff08\u4e13\u4e1a\uff09\u6216\u201c\u62c9\u7ebf\u201d\uff08\u53e3\u8bed\uff09\u3002 Web cam \u7684\u8bed\u5883 \u53ef\u80fd\u662f\u4e3a\u4e86\u89c6\u9891\u4f1a\u8bae\u3001\u76f4\u64ad\u3001\u5b89\u9632\u76d1\u63a7\u7b49\u7528\u9014\uff0c\u53cd\u6620\u73b0\u4ee3\u8fdc\u7a0b\u529e\u516c\u6216\u667a\u80fd\u5bb6\u5c45\u7684\u9700\u6c42\u3002 \u4e2d\u6587\u4e60\u60ef\u8bf4\u201c\u7f51\u7edc\u6444\u50cf\u5934\u201d\uff0c\u4f46\u5e74\u8f7b\u4eba\u4e5f\u53ef\u80fd\u76f4\u63a5\u8bf4\u201c\u6444\u50cf\u5934\u201d\uff08\u9ed8\u8ba4\u662f\u8054\u7f51\u7684\uff09\u3002 \u201cGet out of your hair\u201d \u7684\u8d77\u6e90\u4e0e\u542b\u4e49 \u5b57\u9762\u610f\u601d\u662f\u201c\u4ece\u4f60\u7684\u5934\u53d1\u91cc\u51fa\u6765\u201d\uff0c\u5b9e\u9645\u6e90\u81ea20\u4e16\u7eaa\u4e2d\u671f\u53e3\u8bed\uff0c\u6bd4\u55bb\u201c\u4e0d\u518d\u7ea0\u7f20\u67d0\u4eba\u201d\u6216\u201c\u7ed3\u675f\u6253\u6270\u201d\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u4e0d\u788d\u4f60\u4e8b\u4e86\u201d\u6216\u201c\u4e0d\u70e6\u4f60\u4e86\u201d\uff0c\u5e26\u6709\u8f7b\u677e\u3001\u975e\u6b63\u5f0f\u7684\u8bed\u6c14\u3002 \u4f7f\u7528\u573a\u666f \u670b\u53cb/\u540c\u4e8b\u95f4\uff1a\u5f53\u5bf9\u65b9\u660e\u663e\u5fd9\u788c\u6216\u60f3\u7ed3\u675f\u5bf9\u8bdd\u65f6\uff0c\u7528\u8fd9\u53e5\u8bdd\u793c\u8c8c\u9000\u51fa\u3002 \u4f8b\uff1a A: \u201c\u6211\u8fd8\u6709\u4e2a\u4f1a\u8981\u5f00\u2026\u201d B: \u201cOK, we\u2019ll get out of your hair!\u201d \uff08\u201c\u597d\uff0c\u4f60\u5148\u5fd9\uff01\u201d\uff09 \u670d\u52a1\u884c\u4e1a\uff1a\u5de5\u4f5c\u4eba\u5458\u5b8c\u6210\u670d\u52a1\u540e\u53ef\u80fd\u8bf4\u8fd9\u53e5\u8bdd\uff0c\u8868\u793a\u201c\u4e0d\u7ee7\u7eed\u5360\u7528\u60a8\u65f6\u95f4\u201d\u3002 A: \u201cWhy did the scarecrow win an award?\u201d \uff08\u7a3b\u8349\u4eba\u4e3a\u4ec0\u4e48\u5f97\u5956\uff1f\uff09 B: \u201cI don\u2019t know\u2026\u201d A: \u201cBecause he was outstanding in his field!\u201d\uff08\u8c10\u97f3\u6897\uff1a\u7530\u5730\u91cc\u7ad9\u7740\u7684/\u6770\u51fa\u7684\uff09 B: \u201c\u2026It\u2019s a joke? I don\u2019t get it.\u201d \uff08\u201c\u8fd9\u2026\u7b97\u7b11\u8bdd\uff1f\u6211\u6ca1\u61c2\u3002\u201d\uff09 \u8868\u793a \"\u5173\u4e8e\" (about, regarding) \u7528\u4e8e\u6b63\u5f0f\u8bed\u5883\uff0c\u5f15\u51fa\u8ba8\u8bba\u7684\u4e3b\u9898\u6216\u5bf9\u8c61\u3002 \u4f8b\u53e5\uff1a There is no agreement as to the best method. \uff08\u5173\u4e8e\u6700\u4f73\u65b9\u6cd5\uff0c\u76ee\u524d\u6ca1\u6709\u5171\u8bc6\u3002\uff09 He was uncertain as to which path to take. \uff08\u4ed6\u5bf9\u8be5\u9009\u54ea\u6761\u8def\u72b9\u8c6b\u4e0d\u51b3\u3002\uff09 \u8868\u793a \"\u81f3\u4e8e\" (concerning, when it comes to) \u5f3a\u8c03\u8bdd\u9898\u7684\u8f6c\u5411\u6216\u5bf9\u6bd4\u3002 \u4f8b\u53e5\uff1a The data is clear; as to the interpretation, opinions vary. \uff08\u6570\u636e\u5f88\u660e\u786e\uff0c\u81f3\u4e8e\u5982\u4f55\u89e3\u8bfb\uff0c\u4f17\u8bf4\u7eb7\u7ead\u3002\uff09 \u8868\u793a \"\u6839\u636e\" (according to) \u8f83\u5c11\u89c1\uff0c\u591a\u7528\u4e8e\u6cd5\u5f8b\u6216\u6b63\u5f0f\u6587\u672c\u3002 \u4f8b\u53e5\uff1a The items are sorted as to size. \uff08\u7269\u54c1\u6309\u5c3a\u5bf8\u5206\u7c7b\u3002\uff09 \"Jury of your peers\" \u7684\u6cd5\u5f8b\u542b\u4e49 \u8fd9\u662f\u82f1\u7f8e\u6cd5\u7cfb\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u6307\u7531\u4e0e\u88ab\u544a\u793e\u4f1a\u5730\u4f4d\u76f8\u4f3c\u7684\u666e\u901a\u516c\u6c11\u7ec4\u6210\u7684\u966a\u5ba1\u56e2\uff08\u800c\u975e\u6cd5\u5b98\u6216\u7cbe\u82f1\u7fa4\u4f53\uff09\u3002 \u6e90\u81ea\u300a\u5927\u5baa\u7ae0\u300b\"trial by one's peers\"\uff08\u540c\u8f88\u5ba1\u5224\uff09\uff0c\u4f53\u73b0\u53f8\u6cd5\u516c\u6b63\u6027\u3002 \u4e2d\u6587\u65e0\u76f4\u63a5\u5bf9\u5e94\u672f\u8bed\uff0c\u9700\u610f\u8bd1\uff0c\u5982\u201c\u5e73\u6c11\u966a\u5ba1\u56e2\u201d\u6216\u201c\u4e0e\u4f60\u540c\u7b49\u8eab\u4efd\u7684\u966a\u5ba1\u5458\u201d\u3002 \"Reasonableness\" \u7684\u53f8\u6cd5\u8bed\u5883 \u6cd5\u5f8b\u4e2d\u5e38\u8bc4\u4f30\u67d0\u884c\u4e3a\u662f\u5426\u5c5e\u4e8e\"a reasonable person\"\uff08\u7406\u6027\u4eba\uff09\u7684\u6807\u51c6\u3002 \u4f8b\u5982\uff1a\u81ea\u536b\u662f\u5426\u5408\u7406\uff08reasonable self-defense\uff09\u3001\u5408\u540c\u6761\u6b3e\u662f\u5426\u516c\u5e73\u7b49\u3002 \u5178\u578b\u4f7f\u7528\u573a\u666f \u5211\u4e8b\u5ba1\u5224\uff1a \u6cd5\u5b98\u5bf9\u88ab\u544a\u8bf4\uff1a\"Whether your actions were justified will be decided by a jury of your peers.\" \uff08\u201c\u4f60\u7684\u884c\u4e3a\u662f\u5426\u6b63\u5f53\uff0c\u5c06\u7531\u966a\u5ba1\u56e2\u88c1\u51b3\u3002\u201d\uff09 \u8bbd\u523a\u7528\u6cd5\uff1a \u540c\u4e8b\u4e89\u8bba\u65f6\u5f00\u73a9\u7b11\uff1a\"Fine, let\u2019s take a vote\u2014a jury of your peers!\" \uff08\u201c\u884c\u554a\uff0c\u54b1\u4eec\u6295\u7968\u8868\u51b3\u2014\u2014\u8ba9\u4f60\u7684\u2018\u966a\u5ba1\u56e2\u2019\u6765\u8bc4\u7406\uff01\u201d\uff09 \"might want to\" \u901a\u5e38\u7ffb\u8bd1\u4e3a \"\u6700\u597d\u2026\u2026\"\u3001\"\u5efa\u8bae\u2026\u2026\" \u6216 \"\u6216\u8bb8\u8be5\u2026\u2026\"\uff0c\u8868\u793a\u4e00\u79cd\u59d4\u5a49\u7684\u5efa\u8bae\u6216\u63d0\u9192\uff0c\u5e26\u6709\u201c\u8fd9\u6837\u505a\u66f4\u660e\u667a/\u66f4\u5b89\u5168\u201d\u7684\u9690\u542b\u610f\u4e49\u3002 \"Lower register\" \u7684\u5177\u4f53\u542b\u4e49 \u97f3\u4e50/\u58f0\u5b66\u672f\u8bed\uff1a\u6307\u201c\u8f83\u4f4e\u7684\u58f0\u533a\u201d\uff08\u5982\u7537\u4f4e\u97f3 vs \u5973\u9ad8\u97f3\uff09\u3002 \u65e5\u5e38\u5f15\u7533\u4e49\uff1a \u97f3\u91cf\uff1a\u964d\u4f4e\u58f0\u97f3\u54cd\u5ea6\uff08\u907f\u514d\u6253\u6270\u4ed6\u4eba\uff09\u3002 \u97f3\u8c03\uff1a\u907f\u514d\u5c16\u9510/\u6fc0\u52a8\u7684\u8bed\u8c03\uff08\u663e\u5f97\u66f4\u6c89\u7a33\uff09\u3002 \u4fee\u8f9e\u5c42\u7ea7\uff1a\u4f7f\u7528\u66f4\u7b80\u5355/\u6734\u5b9e\u7684\u8bcd\u6c47\uff08\u907f\u514d\u9ad8\u9ad8\u5728\u4e0a\uff09\u3002 \u4f7f\u7528\u573a\u666f\u4e0e\u6f5c\u53f0\u8bcd \u793c\u8c8c\u63d0\u9192\uff1a \u5bf9\u65b9\u58f0\u97f3\u592a\u5927\u65f6\uff08\u56fe\u4e66\u9986\u3001\u4f1a\u8bae\u5ba4\uff09\uff1a \"Could you speak in a lower register? The acoustics here carry.\" \uff08\u201c\u80fd\u5c0f\u58f0\u4e9b\u5417\uff1f\u8fd9\u91cc\u56de\u58f0\u5f88\u5927\u3002\u201d\uff09 \u793e\u4ea4\u6697\u793a\uff1a \u5bf9\u65b9\u56e0\u6fc0\u52a8\u800c\u8bed\u8c03\u5c16\u9510\u65f6\uff0c\u59d4\u5a49\u5efa\u8bae\u51b7\u9759\uff1a \"A lower register might help your argument.\" \uff08\u201c\u8bed\u6c14\u5e73\u548c\u70b9\uff0c\u66f4\u5bb9\u6613\u8bf4\u670d\u4eba\u3002\u201d\uff09 \"Granted\" \u7684\u8ba9\u6b65\u8bed\u6c14 \u627f\u8ba4\u67d0\u4e2a\u4e8b\u5b9e\uff08\u901a\u5e38\u662f\u4e0d\u5b8c\u7f8e\u7684\u90e8\u5206\uff09\uff0c\u518d\u8f6c\u6298\u5f3a\u8c03\u79ef\u6781\u9762\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u867d\u8bf4/\u56fa\u7136\u2026\u2026\u4f46\u2026\u2026\u201d\u7ed3\u6784\u3002 \"Not long, but deeply and well\" \u7684\u6f5c\u53f0\u8bcd \u5e38\u7528\u4e8e\u63cf\u8ff0\u77ed\u6682\u4f46\u9ad8\u8d28\u91cf\u7684\u5173\u7cfb\u6216\u7ecf\u5386\uff0c\u6bd4\u5982\uff1a \u4e00\u6bb5\u604b\u60c5 \u4e00\u6b21\u5408\u4f5c \u4eba\u751f\u67d0\u4e2a\u9636\u6bb5 \u9690\u542b\u4ef7\u503c\u89c2\uff1a\u8d28\u91cf\u91cd\u4e8e\u65f6\u957f\uff08\u897f\u65b9\u6587\u5316\u4e2d\u5e38\u89c1\u5bf9\u201c\u6df1\u5ea6\u4f53\u9a8c\u201d\u7684\u63a8\u5d07\uff09\u3002 \u63cf\u8ff0\u604b\u60c5 \"We were together for only a month\u2014granted, not long, but just deeply and well.\" \uff08\u201c\u6211\u4eec\u53ea\u5728\u4e00\u8d77\u4e00\u4e2a\u6708\u2014\u2014\u8bda\u7136\u77ed\u6682\uff0c\u4f46\u5374\u6df1\u523b\u800c\u7f8e\u597d\u3002\u201d\uff09 \u8bc4\u4ef7\u9879\u76ee\u7ecf\u9a8c \"The internship was short\u2014granted, not long, but I learned deeply and well.\" \uff08\u201c\u5b9e\u4e60\u671f\u5f88\u77ed\uff0c\u4f46\u5b66\u5230\u7684\u4e1c\u897f\u5374\u624e\u5b9e\u6709\u7528\u3002\u201d\uff09 \u751f\u6d3b\u611f\u609f \"Life in that town? Granted, not long, but deeply and well lived.\" \u201c\u5728\u90a3\u5c0f\u9547\u7684\u65e5\u5b50\uff1f\u867d\u4e0d\u4e45\u9a7b\uff0c\u5374\u6d3b\u5f97\u771f\u5207\u3002\u201d\uff09 \"Folk cure\" \u7684\u6df1\u5c42\u542b\u4e49 \u6307\u4ee3\u4ee3\u76f8\u4f20\u7684\u975e\u6b63\u89c4\u7597\u6cd5\uff0c\u901a\u5e38\u5305\u542b\uff1a \u4f20\u7edf\u8349\u836f\uff08\u5982\u85b0\u8863\u8349\u3001\u6d0b\u7518\u83ca\uff09 \u884c\u4e3a\u4eea\u5f0f\uff08\u5982\u6570\u7f8a\u3001\u7761\u524d\u559d\u70ed\u725b\u5976\uff09 \u7384\u5b66\u64cd\u4f5c\uff08\u5982\u6795\u5934\u4e0b\u653e\u6c34\u6676\uff09 \u4e2d\u6587\u5bf9\u5e94\u6982\u5ff5\uff1a\u201c\u571f\u65b9\u5b50\u201d\uff08\u5e26\u4eb2\u6c11\u611f\uff09\u6216\u201c\u504f\u65b9\u201d\uff08\u4e2d\u6027\u5b66\u672f\u8bcd\uff09\u3002 \"per se\" \u901a\u5e38\u8bd1\u4e3a \"\u672c\u8eab\"\u3001\"\u672c\u8d28\u4e0a\" \u6216 \"\u5c31\u5176\u672c\u8eab\u800c\u8a00\"\uff0c\u5f3a\u8c03\u4e8b\u7269\u72ec\u7acb\u4e8e\u5176\u4ed6\u56e0\u7d20\u7684\u56fa\u6709\u5c5e\u6027\u3002 \u62c9\u4e01\u8bed\u6e90 \u76f4\u8bd1\u4e3a \"by itself\"\uff08\u9760\u81ea\u8eab\uff09\uff0c\u7528\u4e8e\u6392\u9664\u5916\u90e8\u5e72\u6270\u56e0\u7d20\u7684\u5206\u6790\u3002 \u6b63\u5f0f\u8bed\u5883 \u5b66\u672f/\u6cd5\u5f8b\u6587\u672c\u4e2d\u7cbe\u786e\u754c\u5b9a\u6982\u5ff5\uff1a The law is not unjust per se, but its application may be. \uff08\u6cd5\u5f8b\u672c\u8eab\u5e76\u975e\u4e0d\u516c\uff0c\u4f46\u6267\u884c\u53ef\u80fd\u4e0d\u516c\u3002\uff09 \u4e2d\u6587\u5bf9\u5e94\uff1a\"\u4ece\u672c\u8d28\u4e0a\u8bf4\" / \"\u4e25\u683c\u6765\u8bb2\" \u65e5\u5e38\u4f7f\u7528 \u7ea0\u6b63\u8fc7\u5ea6\u89e3\u8bfb\u65f6\uff1a I don't hate the movie per se, just its pacing. \uff08\u6211\u4e0d\u8ba8\u538c\u7535\u5f71\u672c\u8eab\uff0c\u53ea\u662f\u8282\u594f\u6709\u95ee\u9898\u3002\uff09 \u4e2d\u6587\u7c7b\u4f3c\uff1a\"\u5012\u4e0d\u662f\u8bf4\u2026\u2026\u800c\u662f\u2026\u2026\" \u201c\u90a3\u5f97\u662f\u54ea\u79cd\u533b\u751f\u624d\u8d1f\u8d23\u628a\u978b\u5b50\u4ece\u522b\u4eba\u5c41\u80a1\u91cc\u62ff\u51fa\u6765\uff1f\u201d \u8fd9\u662f\u4e00\u79cd\u5938\u5f20\u7684\u5e7d\u9ed8\u8868\u8fbe\u65b9\u5f0f\uff0c\u901a\u5e38\u7528\u6765\u8bbd\u523a\u5bf9\u65b9\u8bf4\u8bdd\u592a\u8352\u5510\u3001\u505a\u6cd5\u592a\u8fc7\u5206\uff0c\u6216\u8005\u62ff\u67d0\u79cd\u201c\u533b\u751f\u201d\u8fd9\u4e2a\u8eab\u4efd\u5f00\u73a9\u7b11\uff0c\u6697\u793a\u5bf9\u65b9\u4e0d\u61c2\u4e13\u4e1a\uff0c\u8fd8\u80e1\u4e71\u5e72\u9884\u522b\u4eba\u7684\u4e8b\u3002 Boy, you are all over the place this morning.\" \u7ffb\u8bd1\uff1a \u201c\u8001\u5144\uff0c\u4f60\u4eca\u5929\u65e9\u4e0a\u771f\u662f\u4e1c\u4e00\u6994\u5934\u897f\u4e00\u68d2\u69cc\u554a\uff01\u201d \"Color your opinion\" \u7684\u9690\u55bb \u6e90\u81ea\u7ed8\u753b\u4e2d\u201c\u8272\u5f69\u5f71\u54cd\u6574\u4f53\u753b\u9762\u201d\u7684\u6982\u5ff5\uff0c\u6307\u67d0\u4ef6\u4e8b\u4f1a\u6f5c\u79fb\u9ed8\u5316\u5730\u6539\u53d8\u5224\u65ad\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a \u201c\u5e26\u4e0a\u6709\u8272\u773c\u955c\u201d\uff08\u9884\u8bbe\u7acb\u573a\uff09 \u201c\u7559\u4e0b\u6c61\u70b9\u201d\uff08\u7279\u6307\u8d1f\u9762\u5370\u8c61\uff09 \u4f7f\u7528\u573a\u666f \u66ff\u4eba\u89e3\u91ca\u65f6\uff1a \"He was stressed that day\u2014I hope it won\u2019t color your opinion of him.\" \uff08\u201c\u4ed6\u90a3\u5929\u538b\u529b\u5927\uff0c\u5e0c\u671b\u4f60\u522b\u56e0\u6b64\u5426\u5b9a\u4ed6\u3002\u201d\uff09 \u63d0\u524d\u9884\u9632\u504f\u89c1\uff1a \"This rumor is false, so don\u2019t let it color your view.\" \uff08\u201c\u8c23\u8a00\u522b\u5f53\u771f\uff0c\u522b\u8ba9\u5b83\u5f71\u54cd\u4f60\u3002\u201d\uff09 \"Gentle\" \u7684\u53cc\u91cd\u542b\u4e49 \u884c\u4e3a\u5c42\u9762\uff1a\u52a8\u4f5c\u8f7b\u67d4\uff0c\u907f\u514d\u7c97\u66b4\uff08physical tenderness\uff09 \u60c5\u611f\u5c42\u9762\uff1a\u5c0a\u91cd\u5bf9\u65b9\u611f\u53d7\uff08emotional attentiveness\uff09 \"Thorough\" \u7684\u7279\u6b8a\u6697\u793a \u5e76\u975e\u5b57\u9762\u201c\u5f7b\u5e95\u201d\uff0c\u800c\u662f\u5f3a\u8c03\uff1a \u7ec6\u81f4\u5165\u5fae\u7684\u89c2\u5bdf\u529b\uff08\u5bdf\u89c9\u4f34\u4fa3\u672a\u8a00\u660e\u7684\u9700\u6c42\uff09 \u5168\u65b9\u4f4d\u7684\u6295\u5165\uff08\u524d\u620f-\u8fc7\u7a0b-\u540e\u620f\u7684\u5b8c\u6574\u5173\u6000\uff09 \u4e2d\u6587\u5bf9\u5e94\u8bcd\uff1a\u201c\u5468\u5168\u201d/\u201c\u7ec6\u817b\u5165\u5fae\u201d \"Let themselves in\" \u7684\u6f5c\u53f0\u8bcd \u8868\u9762\u610f\u601d\u662f\u201c\u81ea\u5df1\u8fdb\u6765\u201d\uff0c\u4f46\u9690\u542b \u201c\u672a\u7ecf\u5141\u8bb8\u64c5\u81ea\u8fdb\u5165\u201d\uff0c\u53ef\u80fd\u662f\uff1a \u7528\u94a5\u5319/\u5bc6\u7801\uff08\u6709\u6743\u9650\u4f46\u6ee5\u7528\uff0c\u6bd4\u5982\u5ba4\u53cb\u5e26\u4eba\u8fdb\u6765\uff09 \u64ac\u9501/\u7834\u95e8\uff08\u975e\u6cd5\u95ef\u5165\uff0c\u66f4\u4e25\u91cd\uff09 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u4e0d\u8bf7\u81ea\u6765\u201d / \u201c\u64c5\u95ef\u201d \"My place\" \u7684\u8bed\u5883 \u975e\u6b63\u5f0f\u8bf4\u6cd5\uff0c\u6307 \u201c\u6211\u5bb6\u201d \u6216 \u201c\u6211\u4f4f\u5904\u201d\uff08\u516c\u5bd3\u3001\u623f\u95f4\u7b49\uff09\u3002 \u548c \"my house\" \u7684\u533a\u522b\uff1a \"My place\" \u2192 \u6cdb\u6307\u4f4f\u6240\uff08\u79df\u623f\u3001\u81ea\u5df1\u5bb6\u90fd\u884c\uff09 \"My house\" \u2192 \u7279\u6307\u81ea\u5df1\u62e5\u6709\u7684\u623f\u5b50 \u53ef\u80fd\u7684\u573a\u666f \u670b\u53cb\u8d8a\u754c\uff1a \"I gave him a key for emergencies, but he just let himself in!\" \uff08\u201c\u6211\u7ed9\u4ed6\u94a5\u5319\u662f\u5e94\u6025\u7528\u7684\uff0c\u7ed3\u679c\u4ed6\u968f\u4fbf\u8fdb\u51fa\uff01\u201d\uff09 \"Better off\" \u7684\u9690\u542b\u5bf9\u6bd4 \u6697\u793a \u201c\u6bd4\u73b0\u72b6/\u5176\u4ed6\u9009\u62e9\u66f4\u6709\u5229\u201d\uff0c\u53ef\u80fd\u6d89\u53ca\uff1a \u6587\u5316\u517c\u5bb9\u6027\uff08\u5982\u5bb6\u5ead\u89c2\u5ff5\u76f8\u4f3c\uff09 \u4e2a\u4eba\u504f\u597d\uff08\u5982\u6b23\u8d4f\u67d0\u79cd\u6027\u683c\u7279\u8d28\uff09 \u73b0\u5b9e\u8003\u91cf\uff08\u5982\u8bed\u8a00/\u751f\u6d3b\u4e60\u60ef\u66f4\u5951\u5408\uff09 \"Doll\" \u7684\u6bd4\u55bb\u542b\u4e49 \u672c\u4e49\u662f\u201c\u6d0b\u5a03\u5a03\u201d\uff0c\u5728\u53e3\u8bed\u4e2d\u55bb\u6307\uff1a \u751c\u7f8e\u53ef\u7231\u7684\u4eba\uff08\u5c24\u5176\u5938\u5973\u6027/\u5c0f\u5b69\uff09 \u8d34\u5fc3\u5468\u5230\u7684\u4eba\uff08\u5982\u4e3b\u52a8\u5e2e\u5fd9\u65f6\u88ab\u5938\uff09 \u7c7b\u4f3c\u4e2d\u6587\u7528\u201c\u751c\u5fc3\u201d\u201c\u5b9d\u8d1d\u201d\u8868\u8fbe\u4eb2\u6635 \u4f7f\u7528\u573a\u666f \u5938\u8d5e\u5916\u8868\uff1a \"That dress suits you! You\u2019re such a doll.\" \uff08\u201c\u8fd9\u88d9\u5b50\u771f\u914d\u4f60\uff01\u7f8e\u5f97\u50cf\u6d0b\u5a03\u5a03\u3002\u201d\uff09 \u611f\u8c22\u5e2e\u52a9\uff1a \"You brought me coffee? You\u2019re a doll!\" \uff08\u201c\u4f60\u8fd8\u7ed9\u6211\u5e26\u5496\u5561\uff1f\u592a\u8d34\u5fc3\u4e86\uff01\u201d\uff09 \"You just got served\" \u7684\u8d77\u6e90 \u6e90\u81ea80\u5e74\u4ee3\u9ed1\u4eba\u8857\u5934\u6587\u5316\uff0c\u6700\u521d\u5728\u7bee\u7403\u6597\u725b\uff081v1\uff09\u4e2d\u4f7f\u7528\uff0c\u610f\u4e3a\u201c\u4f60\u88ab\u5f7b\u5e95\u51fb\u8d25/\u7f9e\u8fb1\u4e86\u201d\u3002 \u540e\u56e02004\u5e74\u7535\u5f71\u300aYou Got Served\u300b\uff08\u8857\u821e\u72c2\u6f6e\uff09\u666e\u53ca\uff0c\u5ef6\u4f38\u81f3\u821e\u8e48Battle\u3001\u8bf4\u5531\u5bf9\u51b3\u7b49\u573a\u666f\u3002 \"Grab a napkin\" \u7684\u9690\u55bb \u5b57\u9762\u662f\u201c\u62ff\u7eb8\u5dfe\u201d\uff0c\u5b9e\u9645\u6697\u793a\uff1a \u64e6\u6c57\uff08\u56e0\u88ab\u78be\u538b\u800c\u72fc\u72c8\uff09 \u64e6\u8840\uff08\u50cf\u62f3\u51fb\u8d5b\u4e2d\u88ab\u6253\u5012\u540e\u5904\u7406\u4f24\u53e3\uff09 \u7c7b\u4f3c\u4e2d\u6587\u6897\uff1a\u201c\u5feb\u62ff\u51b0\u888b\u6577\u6577\u8138\uff0c\u90fd\u88ab\u6253\u80bf\u4e86\uff01\u201d \"Homie\" \u7684\u8bed\u5883 \u9ed1\u4eba\u4fda\u8bed\u4e2d\u5bf9\u597d\u53cb\u7684\u79f0\u547c\uff08=\u5144\u5f1f/\u8001\u94c1\uff09\uff0c\u7528\u5728\u8fd9\u91cc\u524a\u5f31\u653b\u51fb\u6027\uff0c\u589e\u52a0\u620f\u8c11\u611f\u3002 \"Been there\" \u7684\u6f5c\u53f0\u8bcd \u8868\u9762\u610f\u601d\u662f\u201c\u53bb\u8fc7\u90a3\u91cc\u201d\uff0c\u5b9e\u9645\u8868\u8fbe\uff1a \u611f\u540c\u8eab\u53d7\uff08\u5bf9\u4ed6\u4eba\u906d\u9047\u8868\u793a\u7406\u89e3\uff09 \u89c1\u602a\u4e0d\u602a\uff08\u5bf9\u67d0\u79cd\u60c5\u51b5\u4e60\u4ee5\u4e3a\u5e38\uff09 \u5e38\u63a5\u4e0b\u534a\u53e5\uff1a \"Been there, done that.\"\uff08\u201c\u65e9\u7ecf\u5386\u8fc7\u4e86\uff0c\u6ca1\u5565\u65b0\u9c9c\u3002\u201d\uff09 \"Been there, got the T-shirt.\"\uff08\u5e7d\u9ed8\u7248\uff0c\u6697\u6307\u201c\u7ecf\u9a8c\u4e30\u5bcc\u5230\u80fd\u51fa\u7eaa\u5ff5T\u6064\u201d\uff09 \u4f7f\u7528\u573a\u666f \u5b89\u6170\u4ed6\u4eba\uff1a A: \"I failed my driver's test twice...\" B: \"Been there. You'll get it next time!\" \uff08\u201c\u8003\u9a7e\u7167\u6302\u4e24\u6b21\uff1f\u6211\u4e5f\u4e00\u6837\uff01\u4e0b\u6b21\u5fc5\u8fc7\u3002\u201d\uff09 \u8c03\u4f83\u81ea\u5df1\uff1a \"All-nighters in college? Been there, survived on ramen.\" \uff08\u201c\u5927\u5b66\u901a\u5bb5\uff1f\u8fc7\u6765\u4eba\u4e86\uff0c\u9760\u6ce1\u9762\u7eed\u547d\u7684\u3002\u201d\uff09 \u5176\u5b9e\uff0c\u4e0e\u5176\u8bf4\u6211\u662f\u95f2\u804a\u8005\uff0c\u4e0d\u5982\u8bf4\u662f\u88ab\u95f2\u804a\u7684\u5bf9\u8c61 \"less...than...\" \u5728\u8fd9\u91cc\u8868\u793a \u201c\u4e0e\u5176\u8bf4\u662f\u2026\u2026\u4e0d\u5982\u8bf4\u662f\u2026\u2026\u201d\uff0c\u5f3a\u8c03\u4e24\u8005\u5bf9\u6bd4\u4e2d\u66f4\u7b26\u5408\u540e\u8005\u7684\u7279\u8d28\u3002 \u5426\u5b9a\u524d\u8005\uff0c\u80af\u5b9a\u540e\u8005 \u7ed3\u6784\uff1aless A than B = \u201c\u4e0d\u662fA\uff0c\u800c\u662fB\u201d / \u201cA\u7684\u6210\u5206\u5c11\uff0cB\u7684\u6210\u5206\u591a\u201d \u4f8b\u53e5\uff1a He's less a teacher than a performer. \uff08\u4ed6\u4e0e\u5176\u8bf4\u662f\u8001\u5e08\uff0c\u4e0d\u5982\u8bf4\u662f\u8868\u6f14\u8005\u3002\uff09 It was less a debate than a shouting match. \uff08\u90a3\u6839\u672c\u4e0d\u662f\u8fa9\u8bba\uff0c\u7eaf\u5c5e\u5435\u67b6\u3002\uff09 \"Chatter\" vs. \"Chatee\" \u7684\u6587\u5b57\u6e38\u620f Chatter\uff1a\u4e3b\u52a8\u95f2\u804a\u7684\u4eba\uff08\u7c7b\u4f3c\u201c\u8bdd\u75e8\u201d\uff09 Chatee\uff1a\u751f\u9020\u8bcd\uff0c\u4eff\u7167 employee\uff08\u96c7\u5458\uff09/interviewee\uff08\u53d7\u8bbf\u8005\uff09 \u7684\u6784\u8bcd\u6cd5\uff0c\u6307\u201c\u88ab\u95f2\u804a\u7684\u5bf9\u8c61\u201d \u5e7d\u9ed8\u6548\u679c\u6765\u81ea\uff1a \u7528\u6b63\u5f0f\u540e\u7f00 -ee \u642d\u914d\u4e0d\u6b63\u5f0f\u7684\u8bcd\u6839 chat\uff08\u5f62\u6210\u53cd\u5dee\u840c\uff09 \u6697\u793a\u81ea\u5df1\u88ab\u52a8\u5377\u5165\u516b\u5366\uff08\u7c7b\u4f3c\u4e2d\u6587\u201c\u5403\u74dc\u5403\u5230\u81ea\u5df1\u5934\u4e0a\u201d\uff09 \u4f7f\u7528\u573a\u666f \u6f84\u6e05\u8bef\u4f1a\u65f6\uff1a A: \"You love gossiping!\" B: \"Actually, I was less the chatter than the chatee.\" \uff08\u201c\u51a4\u6789\u554a\uff0c\u6211\u624d\u662f\u88ab\u516b\u5366\u7684\u90a3\u4e2a\uff01\u201d\uff09 \u81ea\u5632\u88ab\u8ba8\u8bba\uff1a \"In high school? Oh, I wasn\u2019t popular\u2014just the chatee in locker room talk.\" \uff08\u201c\u9ad8\u4e2d\u65f6\u6211\u53ef\u4e0d\u53d7\u6b22\u8fce\uff0c\u53ea\u662f\u66f4\u8863\u5ba4\u8bdd\u9898\u7684\u7d20\u6750\u5e93\u3002\u201d\uff09 \u8bcd\u6e90\u4e0e\u53cc\u91cd\u542b\u4e49 \u6e90\u81ea\u62c9\u4e01\u8bed toxicum\uff08\u6bd2\u836f\uff09\uff0c\u539f\u6307\u9152\u7cbe\u6216\u6bd2\u7269\u7684\u81f4\u9189\u6548\u679c\uff0c\u540e\u5f15\u7533\u4e3a\uff1a \u751f\u7406\u9676\u9189\uff08\u5982\u9152\u996e\u3001\u9999\u6c14\uff09 \u7cbe\u795e\u6c89\u8ff7\uff08\u5982\u7231\u60c5\u3001\u97f3\u4e50\uff09 \u4e2d\u6587\u5bf9\u5e94\u201c\u9189\u4eba\u201d\u4e00\u8bcd\u540c\u6837\u517c\u5177\u9152\u7cbe\u4e0e\u9690\u55bb\u7528\u6cd5\uff08\u5982\u201c\u9189\u4eba\u7684\u591c\u8272\u201d\uff09\u3002 \u4f7f\u7528\u573a\u666f \u611f\u5b98\u63cf\u8ff0\uff1a \"The intoxicating scent of jasmine filled the room.\" \uff08\u201c\u8309\u8389\u82b1\u9999\u5f25\u6f2b\u623f\u95f4\uff0c\u4ee4\u4eba\u6c89\u9189\u3002\u201d\uff09 \u60c5\u611f\u8868\u8fbe\uff1a \"Her laugh was intoxicating.\" \uff08\u201c\u5979\u7684\u7b11\u58f0\u8ba9\u4eba\u5fc3\u8361\u795e\u9a70\u3002\u201d\uff09 \u5371\u9669\u8b66\u793a\uff1a \"Power can be intoxicating.\" \uff08\u201c\u6743\u529b\u4ee4\u4eba\u8ff7\u5931\u3002\u201d\uff09 A Bomb\uff08Atomic Bomb\uff0c\u539f\u5b50\u5f39\uff09 H Bomb\uff08Hydrogen Bomb\uff0c\u6c22\u5f39\uff09 \u539f\u6587\uff1a \"If water's involved, we're gonna have to ground the crap out of the thing.\" \u7ffb\u8bd1\uff1a \u201c\u5982\u679c\u6cbe\u6c34\u4e86\uff0c\u6211\u4eec\u5c31\u5f97\u628a\u8fd9\u73a9\u610f\u513f\u5f80\u6b7b\u91cc\u63a5\u5730\uff01\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u4f46\u51e1\u8ddf\u6c34\u6709\u5173\uff0c\u8fd9\u4e1c\u897f\u4e0d\u63a5\u5730\u7ebf\u63a5\u51fa\u706b\u661f\u5b50\u4e0d\u7b97\u5b8c\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Ground the crap out of\" \u7684\u66b4\u529b\u7f8e\u5b66 Ground\uff08\u63a5\u5730\uff09\uff1a\u7535\u5de5\u672f\u8bed\uff0c\u6307\u7528\u5bfc\u7ebf\u5c06\u8bbe\u5907\u4e0e\u5927\u5730\u8fde\u63a5\u4ee5\u9632\u89e6\u7535\u3002 The crap out of\uff1a\u7f8e\u5f0f\u4fda\u8bed\uff0c\u8868\u201c\u6781\u7aef\u7a0b\u5ea6\u201d\uff08\u7c7b\u4f3c\u4e2d\u6587\u201c\u5f80\u6b7b\u91cc\u2026\u2026\u201d\uff09\u3002 \u7ec4\u5408\u6548\u679c\uff1a\u7528\u7c97\u4fd7\u8868\u8fbe\u5f3a\u8c03\u5b89\u5168\u63aa\u65bd\u7684\u7d27\u8feb\u6027\u3002 \"Water's involved\" \u7684\u6f5c\u53f0\u8bcd \u6c34\u662f\u7535\u7684\u826f\u5bfc\u4f53\uff0c\u6d89\u53ca\u6c34\u7684\u7535\u5668\u6545\u969c\u53ef\u80fd\u5f15\u53d1\uff1a \u77ed\u8def\uff08short circuit\uff09 \u6f0f\u7535\uff08electric leakage\uff09 \u4e2d\u6587\u7c7b\u4f3c\u9884\u8b66\uff1a\u201c\u4e00\u6cbe\u6c34\uff0c\u5fc5\u4f5c\u5996\u201d\u3002 \u5178\u578b\u4f7f\u7528\u573a\u666f \u5bb6\u7535\u7ef4\u4fee\uff1a A: \"The hairdryer fell in the sink!\" B: \"If water's involved, we're gonna have to ground the crap out of it before testing.\" \uff08\u201c\u5439\u98ce\u673a\u6389\u6c34\u6c60\u4e86\uff1f\u60f3\u8bd5\u673a\u5148\u5f80\u6b7b\u91cc\u63a5\u5730\u7ebf\uff01\u201d\uff09 \u5de5\u4e1a\u5b89\u5168\uff1a \"With this flooded server room, we\u2019ll be grounding the crap out of everything.\" \uff08\u201c\u673a\u623f\u6df9\u6210\u8fd9\u6837\uff0c\u6240\u6709\u8bbe\u5907\u90fd\u5f97\u52a0\u63a5\u5730\u5230\u5192\u70df\u3002\u201d\uff09","title":"\u53e5\u5b50"},{"location":"art/English/tv/bigbang/s01/e03/s01e03/","text":"\u53f0\u8bcd \u624b\u6253\u53f0\u8bcd \u751f\u8bcd unsheathe \u62d4\u51fa spice \u8c03\u5473 mead \u871c\u9152 flank \u4fa7\u9762\uff1b\u4fa7\u7ffc smouldering \u9634\u71c3 \u53e5\u5b50 \u539f\u6587\uff1a \"Blowing the gates.\" \u7ffb\u8bd1\uff1a \u201c\u70b8\u5f00\u95f8\u95e8\u201d / \u201c\u7834\u95e8\u800c\u5165\u201d \uff08\u6839\u636e\u8bed\u5883\u4e5f\u53ef\u8bd1\u4e3a\uff1a\u201c\u51b2\u7834\u9632\u7ebf\u201d\u3001\u201c\u5927\u5f00\u65b9\u4fbf\u4e4b\u95e8\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u610f\u601d Blowing\uff1a\u6307\u7528\u7206\u70b8\u7269\uff08\u5982\u70b8\u836f\uff09\u5f3a\u884c\u7834\u574f\uff0c\u519b\u4e8b/\u72af\u7f6a\u573a\u666f\u5e38\u7528\u3002 Gates\uff1a\u5e7f\u4e49\u6307\u201c\u95e8/\u95f8\u95e8\u201d\uff0c\u53ef\u5f15\u7533\u4e3a\u201c\u5173\u5361\u201d\u3001\u201c\u9650\u5236\u201d\u3002 \u76f4\u8bd1\u7ec4\u5408\uff1a\u901a\u8fc7\u66b4\u529b\u6216\u6280\u672f\u624b\u6bb5\u7a81\u7834\u7269\u7406\u5c01\u9501\u3002 \u5f15\u7533\u542b\u4e49 \u519b\u4e8b\u884c\u52a8\uff1a\u7a81\u51fb\u961f\u7206\u7834\u5165\u53e3\uff08\u5982\u300a\u4f7f\u547d\u53ec\u5524\u300b\u6e38\u620f\u573a\u666f\uff09\u3002 \u9ed1\u5ba2\u653b\u51fb\uff1a\u7834\u89e3\u7cfb\u7edf\u9632\u706b\u5899\uff08\"They\u2019re blowing the gates of the server.\"\uff09\u3002 \u4f53\u80b2\u7ade\u6280\uff1a\u5f3a\u52bf\u7a81\u7834\u9632\u5b88\uff08\u5982\u6a44\u6984\u7403\u6218\u672f\uff09\u3002 \u793e\u4f1a\u9690\u55bb\uff1a\u6253\u7834\u89c4\u5219\u675f\u7f1a\uff08\"The protest blew the gates of censorship.\"\uff09\u3002 \"Slash and move.\" \u7ffb\u8bd1\uff1a \u201c\u780d\u5b8c\u5c31\u64a4\u201d / \u201c\u5288\u780d\u8f6c\u79fb\u201d \uff08\u6218\u672f\u8bed\u5883\u4e0b\uff1a\u201c\u6253\u4e86\u5c31\u8dd1\u201d\uff1b\u56ed\u827a\u573a\u666f\uff1a\u201c\u526a\u679d\u540e\u632a\u4f4d\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u542b\u4e49 Slash\uff1a\u7528\u5229\u5668\uff08\u5200\u3001\u5251\u7b49\uff09\u5288\u780d\uff0c\u6216\u8c61\u5f81\u6027\u5feb\u901f\u7834\u574f\u3002 Move\uff1a\u7acb\u5373\u79fb\u52a8\u4f4d\u7f6e\uff0c\u907f\u514d\u88ab\u53cd\u51fb\u6216\u6ede\u7559\u98ce\u9669\u3002 \u7ec4\u5408\u6548\u679c\uff1a\u201c\u5feb\u901f\u653b\u51fb\u540e\u8fc5\u901f\u8131\u79bb\u201d\u7684\u6218\u672f\u601d\u7ef4\u3002 \u6e38\u620f\u6307\u6325\uff1a \"Slash and move! Don\u2019t let the boss agro you!\" \uff08\u201c\u780d\u5b8c\u95ea\u4eba\uff01\u522b\u62c9BOSS\u4ec7\u6068\uff01\u201d\uff09 \u804c\u573a\u6bd4\u55bb\uff1a \"Startup survival rule: Slash burn rate and move to monetization fast.\" \uff08\u201c\u521b\u4e1a\u751f\u5b58\u6cd5\u5219\uff1a\u72c2\u780d\u5f00\u652f\uff0c\u5feb\u641e\u94b1\u3002\u201d\uff09 \u4e27\u5c38\u672b\u65e5\uff1a \"Slash the zombie\u2019s neck and move\u2014they swarm fast!\" \uff08\u201c\u780d\u8116\u5b50\u901f\u6e9c\u2014\u2014\u5c38\u7fa4\u805a\u5f97\u5feb\uff01\u201d\uff09 \"Stay in formation.\" \u7ffb\u8bd1\uff1a \u201c\u4fdd\u6301\u961f\u5f62\uff01\u201d / \u201c\u522b\u4e71\u9635\u578b\uff01\u201d \uff08\u6218\u672f\u8bed\u5883\u4e0b\uff1a\u201c\u7ef4\u6301\u7f16\u961f\u201d\uff1b\u65e5\u5e38\u573a\u666f\uff1a\u201c\u522b\u6389\u961f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u519b\u4e8b/\u6218\u672f\u542b\u4e49 Formation\uff08\u961f\u5f62\uff09\uff1a\u6307\u519b\u961f\u3001\u6218\u673a\u3001\u8230\u961f\u7b49\u6309\u7279\u5b9a\u7b56\u7565\u6392\u5217\u7684\u9635\u578b\uff08\u5982\u6954\u5f62\u3001\u65b9\u9635\uff09\u3002 \u5173\u952e\u7528\u9014\uff1a \u9632\u5fa1\uff08\u5982\u7f57\u9a6c\u76fe\u5899\uff09 \u706b\u529b\u96c6\u4e2d\uff08\u5982\u6218\u673a\u7f16\u961f\u8f70\u70b8\uff09 \u8ff7\u60d1\u654c\u4eba\uff08\u5982\u9a91\u5175\u8fc2\u56de\u9635\uff09 \"On your tail\"\uff1a\u76f4\u8bd1\u4e3a\u201c\u5728\u4f60\u5c3e\u5df4\u4e0a\u201d\uff0c\u5b9e\u9645\u6307\u7d27\u8ffd\u4e0d\u820d\u7684\u8ffd\u8e2a\u8005\uff08\u5982\u654c\u4eba\u3001\u8b66\u5bdf\u3001\u7ade\u4e89\u5bf9\u624b\uff09\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u54ac\u4f4f\u4e0d\u653e\u201d\u6216\u201c\u5c3e\u968f\u201d\uff0c\u4f46\u66f4\u52a8\u6001\u5316\u3002 \u4f7f\u7528\u573a\u666f \u7a7a\u6218/\u8d5b\u8f66\uff1a \"Bandit at 6 o'clock! You got one on your tail!\" \uff08\u201c\u654c\u673a\u5728\u4f60\u6b63\u540e\u65b9\uff01\u54ac\u4f4f\u4f60\u4e86\uff01\u201d\uff09 \u52a8\u4f5c\u7247/\u9003\u4ea1\uff1a \"Don\u2019t look back, but you\u2019ve got a cop on your tail.\" \uff08\u201c\u522b\u56de\u5934\uff0c\u6709\u6761\u5b50\u76ef\u4e0a\u4f60\u4e86\u3002\u201d\uff09 \u804c\u573a\u7ade\u4e89\uff08\u5e7d\u9ed8\uff09\uff1a \"The new intern is hustling\u2014you got one on your tail for that promotion!\" \uff08\u201c\u65b0\u6765\u7684\u5b9e\u4e60\u751f\u5f88\u62fc\u554a\uff0c\u4f60\u5347\u804c\u8def\u4e0a\u6709\u5bf9\u624b\u4e86\uff01\u201d\uff09 \"My tail's prehensile, I'll swat him off.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u7684\u5c3e\u5df4\u53ef\u662f\u80fd\u6293\u63e1\u7684\uff0c\u770b\u6211\u4e0d\u628a\u4ed6\u7529\u98de\uff01\u201d \uff08\u6216\u66f4\u4fcf\u76ae\uff1a\u201c\u54b1\u8fd9\u5c3e\u5df4\u7075\u6d3b\u5f97\u5f88\uff0c\u4e00\u62bd\u4e00\u4e2a\u51c6\u513f~\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Prehensile tail\"\uff08\u53ef\u6293\u63e1\u7684\u5c3e\u5df4\uff09 \u751f\u7269\u5b66\u6982\u5ff5\uff1a\u6307\u67d0\u4e9b\u52a8\u7269\uff08\u5982\u7334\u5b50\u3001\u98df\u8681\u517d\uff09\u80fd\u50cf\u624b\u4e00\u6837\u7f20\u7ed5\u7269\u4f53\u7684\u5c3e\u5df4\u3002 \u79d1\u5e7b/\u5947\u5e7b\u8bbe\u5b9a\uff1a\u5916\u661f\u4eba\u6216\u517d\u4eba\u79cd\u65cf\u7684\u5e38\u89c1\u7279\u5f81\uff08\u5982\u300a\u963f\u51e1\u8fbe\u300b\u7684\u7eb3\u7f8e\u4eba\uff09\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u529f\u80fd\u6027\u5c3e\u5df4\u201d\uff08\u5b66\u672f\uff09/\u201c\u4e07\u80fd\u5c3e\u5df4\u201d\uff08\u4e2d\u4e8c\u7248\uff09\u3002 \"Swat off\" \u7684\u66b4\u529b\u840c\u611f Swat\uff1a\u62cd\u6253\uff08\u5982\u6253\u82cd\u8747\uff09\uff0c\u6b64\u5904\u5e26\u8f7b\u677e\u78be\u538b\u7684\u56a3\u5f20\u8bed\u6c14\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u4e00\u5c3e\u5df4\u62bd\u98de\u201d\uff08\u6b66\u4fa0\u98ce\uff09/\u201c\u7528\u5c3e\u5df4\u6559\u4ed6\u505a\u4eba\u201d\uff08\u7f51\u6587\u6897\uff09\u3002 \"Tonight I spice my mead with goblin blood.\" \u7ffb\u8bd1\uff1a \u201c\u4eca\u591c\uff0c\u6211\u7684\u871c\u9152\u4ee5\u54e5\u5e03\u6797\u4e4b\u8840\u8c03\u5473\u3002\u201d \uff08\u6216\u66f4\u4e2d\u4e8c\uff1a\u201c\u6b64\u676f\u7329\u7ea2\uff0c\u5f53\u4ee5\u5730\u7cbe\u8840\u4e3a\u5f15\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Mead\"\uff08\u871c\u9152\uff09 \u5317\u6b27/\u4e2d\u4e16\u7eaa\u4f20\u7edf\u9152\u7cbe\u996e\u54c1\uff0c\u8702\u871c\u53d1\u9175\u5236\u6210\uff0c\u7ef4\u4eac\u6218\u58eb\u548c\u5947\u5e7b\u6587\u5b66\u6807\u5fd7\u6027\u5143\u7d20\u3002 \u4e2d\u6587\u5e38\u8bd1\u201c\u8702\u871c\u9152\u201d\uff0c\u4f46\u201c\u871c\u9152\u201d\u66f4\u4fdd\u7559\u53e4\u98ce\uff08\u5982\u300a\u970d\u6bd4\u7279\u4eba\u300b\u77ee\u4eba\u72c2\u996e\u573a\u666f\uff09\u3002 \"Goblin blood\" \u7684\u8c61\u5f81 \u91ce\u86ee\u5f81\u670d\uff1a\u54e5\u5e03\u6797\uff08\u5730\u7cbe\uff09\u5728\u5947\u5e7b\u8bbe\u5b9a\u4e2d\u4e3a\u4f4e\u7b49\u9b54\u7269\uff0c\u5176\u8840\u8c61\u5f81\u5bf9\u654c\u4eba\u7684\u78be\u538b\u3002 \u9ed1\u6697\u5e7d\u9ed8\uff1a\u5982\u540c\u8bf4\u201c\u4eca\u665a\u5a01\u58eb\u5fcc\u52a0\u654c\u914b\u773c\u6cea\u201d\uff0c\u51f8\u663e\u56a3\u5f20\u59ff\u6001\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u4ee5\u654c\u796d\u9152\u201d\uff08\u6b66\u4fa0\u72e0\u8bdd\uff09/\u201c\u9b54\u8840\u8c03\u996e\u201d\uff08\u7f51\u6587\u98ce\uff09\u3002 \"Snail mail.\" \u7ffb\u8bd1\uff1a \u201c\u8717\u725b\u90ae\u4ef6\u201d / \u201c\u9f9f\u901f\u90ae\u653f\u201d \uff08\u4e2d\u6587\u4fd7\u79f0\uff1a\u201c\u5e73\u4fe1\u201d\u3001\u201c\u6162\u9012\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u8bcd\u6e90\u4e0e\u8bbd\u523a \u8bde\u751f\u4e8e1990\u5e74\u4ee3\u7535\u5b50\u90ae\u4ef6\u666e\u53ca\u540e\uff0c\u5bf9\u6bd4\u201c\u7535\u5b50\u90ae\u4ef6\u201d\uff08\u79d2\u8fbe\uff09\u548c\u201c\u4f20\u7edf\u90ae\u653f\u201d\uff08\u6570\u65e5/\u5468\uff09\u7684\u901f\u5ea6\u5dee\u5f02\u3002 \u7528\u8717\u725b\uff08snail\uff09\u6bd4\u55bb\u7f13\u6162\uff0c\u5e26\u620f\u8c11\u8272\u5f69\uff08\u7c7b\u4f3c\u4e2d\u6587\u201c\u9f9f\u901f\u201d\uff09\u3002 \u4f7f\u7528\u573a\u666f \u62b1\u6028\u90ae\u653f\uff1a \"My passport arrived by snail mail\u2014two weeks late!\" \uff08\u201c\u62a4\u7167\u8d70\u5e73\u4fe1\u5bc4\u5230\uff0c\u8fdf\u4e86\u4e24\u5468\uff01\u201d\uff09 \u6000\u65e7\u8425\u9500\uff1a \"Send love via snail mail for a vintage touch.\" \uff08\u201c\u7528\u8717\u725b\u90ae\u4ef6\u4f20\u9012\u7231\uff0c\u590d\u53e4\u53c8\u8d70\u5fc3\u3002\u201d\uff09 \u6cd5\u5f8b\u6587\u4ef6\uff1a \"The court only accepts snail-mailed applications.\" \uff08\u201c\u6cd5\u9662\u53ea\u6536\u7eb8\u8d28\u90ae\u5bc4\u7533\u8bf7\u3002\u201d\uff09 \"Civil servants have a documented propensity to snap.\" \u7ffb\u8bd1\uff1a \u201c\u516c\u52a1\u5458\u6709\u636e\u53ef\u67e5\u7684\u66b4\u813e\u6c14\u503e\u5411\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u516c\u52a1\u5458\u5bb9\u6613\u70b8\u6bdb\uff0c\u8fd9\u53ef\u662f\u6709\u8bb0\u5f55\u7684\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Civil servants\"\uff08\u516c\u52a1\u5458\uff09\u7684\u523b\u677f\u5370\u8c61 \u5728\u897f\u65b9\u8bed\u5883\u4e2d\uff0c\u516c\u52a1\u5458\u5e38\u88ab\u5410\u69fd\u4e3a\uff1a \u5b98\u50da\u4e3b\u4e49\uff08\u529e\u4e8b\u62d6\u6c93\u3001\u6b7b\u677f\uff09 \u538b\u6291\u60c5\u7eea\uff08\u957f\u671f\u9762\u5bf9\u516c\u4f17\u62b1\u6028\uff0c\u6613\u7a81\u7136\u7206\u53d1\uff09 \u4e2d\u6587\u7c7b\u4f3c\u6897\uff1a\u201c\u7a97\u53e3\u5355\u4f4d\u8138\u96be\u770b\u201d / \u201c\u4f53\u5236\u5185\u7956\u5b89\u4eba\u201d \"Documented propensity\"\uff08\u6709\u636e\u53ef\u67e5\u7684\u503e\u5411\uff09 \u7528\u5b66\u672f\u8154\u8c03\u4f83\uff0c\u6697\u793a\u201c\u516c\u52a1\u5458\u6613\u6012\u201d\u5df2\u662f\u516c\u5f00\u73b0\u8c61\uff0c\u751a\u81f3\u53ef\u80fd\u88ab\u7814\u7a76\u7edf\u8ba1\u8fc7\u3002 \u7c7b\u4f3c\u4e2d\u6587\uff1a\u201c\u6709\u8bba\u6587\u652f\u6301\u201d\uff08\u5e7d\u9ed8\u5938\u5f20\uff09 / \u201c\u5927\u6570\u636e\u663e\u793a\u201d \"Snap\" \u7684\u7cbe\u51c6\u542b\u4e49 \u4e0d\u662f\u666e\u901a\u7684\u751f\u6c14\uff0c\u800c\u662f\u957f\u671f\u538b\u6291\u540e\u7684\u7a81\u7136\u5d29\u6e83\uff08\u50cf\u76ae\u7b4b\u7ef7\u65ad\uff09\u3002 \u7ecf\u5178\u573a\u666f\uff1a \u67dc\u53f0\u516c\u52a1\u5458\u7a81\u7136\u6454\u6587\u4ef6\uff1a\u201c\u8fd9\u8868\u4f60\u81ea\u5df1\u586b\uff01\u201d \u4ea4\u8b66\u5bf9\u8fdd\u89c4\u53f8\u673a\u5486\u54ee\uff1a\u201c\u4f60\u9a7e\u7167\u662f\u6447\u53f7\u6447\u6765\u7684\u5417\uff1f\uff01\u201d \u4f7f\u7528\u573a\u666f\u4e3e\u4f8b \u540c\u4e8b\u5410\u69fd\uff1a \"Why was the DMV lady yelling?\" \"Dude, civil servants have a documented propensity to snap.\" \uff08\u201c\u4e3a\u5565\u8f66\u7ba1\u6240\u5927\u59d0\u5728\u543c\uff1f\u201d\u201c\u8001\u5144\uff0c\u516c\u52a1\u5458\u6613\u6012\u662f\u79d1\u5b66\u4e8b\u5b9e\u3002\u201d\uff09 \u793e\u4f1a\u65b0\u95fb\u8bc4\u8bba\uff1a \"A clerk threw a printer at a customer. Study confirms: civil servants snap.\" \uff08\u201c\u804c\u5458\u7528\u6253\u5370\u673a\u7838\u987e\u5ba2\u3002\u7814\u7a76\u8bc1\u5b9e\uff1a\u516c\u52a1\u5458\u4f1a\u66b4\u8d70\u3002\u201d\uff09 \u81ea\u5632\uff1a \"I\u2019m a civil servant... my therapist documents my propensity to snap.\" \uff08\u201c\u6211\u662f\u516c\u52a1\u5458\u2026\u2026\u6211\u7684\u5fc3\u7406\u533b\u751f\u5728\u8bb0\u5f55\u6211\u7684\u70b8\u6bdb\u9891\u7387\u3002\u201d\uff09 \"Penny for your thoughts.\" \u7ffb\u8bd1\uff1a \u201c\u80fd\u544a\u8bc9\u6211\u4f60\u5728\u60f3\u4ec0\u4e48\u5417\uff1f\u201d / \u201c\u4e00\u5206\u94b1\u4e70\u4f60\u7684\u5fc3\u4e8b\u3002\u201d \uff08\u4e2d\u6587\u4fd7\u8bed\uff1a\u201c\u8bf4\u8bf4\u4f60\u7684\u5fc3\u91cc\u8bdd\uff1f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u8d77\u6e90\u4e0e\u5b57\u9762\u610f\u601d \u6e90\u81ea16\u4e16\u7eaa\u82f1\u56fd\uff0c\u5b57\u9762\u610f\u601d\u662f\u201c\u7528\u4e00\u5206\u94b1\u4e70\u4f60\u7684\u60f3\u6cd5\u201d\uff0c\u662f\u4e00\u79cd\u5e7d\u9ed8\u800c\u59d4\u5a49\u7684\u8be2\u95ee\u65b9\u5f0f\uff0c\u7c7b\u4f3c\u4e8e\u4e2d\u6587\u7684\u201c\u4e70\u4f60\u4e00\u53e5\u771f\u8bdd\u201d\u3002 \u6700\u521d\u53ef\u80fd\u6307\u7528\u786c\u5e01\u6362\u53d6\u7b97\u547d\u8005\u7684\u9884\u8a00\uff0c\u540e\u6765\u6f14\u53d8\u4e3a\u5173\u5fc3\u4ed6\u4eba\u5fc3\u4e8b\u7684\u8868\u8fbe\u3002 \u4f7f\u7528\u573a\u666f \u5173\u5fc3\u670b\u53cb\uff1a\u5bf9\u65b9\u770b\u8d77\u6765\u5fc3\u4e8b\u91cd\u91cd\u65f6\uff0c\u7528\u8fd9\u53e5\u8bdd\u6e29\u67d4\u8be2\u95ee\u3002 \"You\u2019ve been quiet all day\u2014penny for your thoughts?\" \uff08\u201c\u4f60\u4e00\u6574\u5929\u6ca1\u8bf4\u8bdd\u4e86\uff0c\u80fd\u544a\u8bc9\u6211\u4f60\u5728\u60f3\u4ec0\u4e48\u5417\uff1f\u201d\uff09 \u5e7d\u9ed8\u8c03\u4f83\uff1a\u5bf9\u65b9\u53d1\u5446\u6216\u8d70\u795e\u65f6\uff0c\u7528\u8fd9\u53e5\u8bdd\u6253\u8da3\u3002 \"Penny for your thoughts? Or is it a million-dollar idea?\" \uff08\u201c\u4e00\u5206\u94b1\u4e70\u4f60\u7684\u60f3\u6cd5\uff0c\u8fd8\u662f\u8bf4\u8fd9\u662f\u4e2a\u4ef7\u503c\u767e\u4e07\u7684\u70b9\u5b50\uff1f\u201d\uff09 \"Kissing? What kind of kissing? Cheeks, lips, chase, French?\" \u7ffb\u8bd1\uff1a \u201c\u63a5\u543b\uff1f\u54ea\u79cd\u543b\uff1f\u4eb2\u8138\u988a\u3001\u5634\u5507\u3001\u8ffd\u9010\u543b\u3001\u6cd5\u5f0f\u6df1\u543b\uff1f\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u4eb2\u4eb2\uff1f\u548b\u4eb2\uff1f\u8d34\u8138\u3001\u5634\u5bf9\u5634\u3001\u4f60\u8ffd\u6211\u8eb2\u3001\u820c\u543b\uff1f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 Kissing \u7684\u7ec6\u5206\u7c7b\u578b Cheeks\uff08\u8138\u988a\u543b\uff09\uff1a\u793c\u4eea\u6027\u8f7b\u543b\uff0c\u5e38\u89c1\u4e8e\u6b27\u6d32\u95ee\u5019\uff08\u5982\u6cd5\u56fd la bise\uff09\u3002 Lips\uff08\u5507\u543b\uff09\uff1a\u6d6a\u6f2b\u4f46\u514b\u5236\u7684\u8f7b\u543b\uff0c\u5982\u7ae5\u8bdd\u4e2d\u201c\u771f\u7231\u4e4b\u543b\u201d\u3002 Chase kiss\uff08\u8ffd\u9010\u543b\uff09\uff1a\u8c03\u76ae\u8eb2\u95ea\u7684\u8c03\u60c5\u543b\uff08\u4e00\u65b9\u8eb2\uff0c\u4e00\u65b9\u8ffd\uff09\u3002 French kiss\uff08\u6cd5\u5f0f\u543b\uff09\uff1a\u820c\u543b\u7684\u4ee3\u79f0\uff0c\u56e0\u6cd5\u56fd\u4eba\u201c\u6d6a\u6f2b\u201d\u7684\u523b\u677f\u5370\u8c61\u5f97\u540d\u3002 \u6587\u5316\u5dee\u5f02 \u543b\u7c7b\u578b \u897f\u65b9\u5e38\u89c1\u573a\u666f \u4e2d\u6587\u5bf9\u5e94\u6982\u5ff5 Cheeks \u670b\u53cb\u89c1\u9762\u8d34\u9762\u793c \u201c\u8d34\u8138\u4eb2\u201d/\u201c\u78b0\u8138\u201d Lips \u60c5\u4fa3\u65e5\u5e38\u8f7b\u543b \u201c\u5575\u4e00\u4e2a\u201d Chase \u8c03\u60c5/\u5f71\u89c6\u5267\u7ecf\u5178\u6865\u6bb5 \u201c\u8eb2\u732b\u732b\u4eb2\u201d French \u6210\u4eba\u5173\u7cfb\u4eb2\u5bc6\u884c\u4e3a \u201c\u820c\u543b\u201d/\u201c\u6df1\u543b\u201d \"At least now you can retrieve the black box from the twisted smouldering wreckage that was once your fantasy of dating her, and analyse the data so that you don\u2019t crash into geek mountain again.\" \u7ffb\u8bd1\uff1a \u201c\u81f3\u5c11\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f60\u90a3\u66fe\u7ecf\u7f8e\u597d\u7684\u2018\u8ffd\u5979\u5e7b\u60f3\u2019\u7684\u6b8b\u9ab8\u4e2d\u6316\u51fa\u9ed1\u5323\u5b50\uff0c\u5206\u6790\u6570\u636e\uff0c\u4ee5\u514d\u518d\u6b21\u649e\u4e0a\u2018\u6781\u5ba2\u5c71\u2019\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u81f3\u5c11\u4f60\u80fd\u4ece\u2018\u8ffd\u5979\u68a6\u2019\u7684\u5e9f\u589f\u91cc\u7ffb\u51fa\u8bb0\u5f55\u4eea\uff0c\u7814\u7a76\u4e0b\u4e3a\u5565\u53c8\u53cc\u53d2\u6ca6\u4e3a\u5355\u8eab\u72d7\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u201cBlack box\u201d\uff08\u9ed1\u5323\u5b50\uff09\u7684\u9690\u55bb \u539f\u6307\u98de\u673a\u8bb0\u5f55\u4e8b\u6545\u6570\u636e\u7684\u8bbe\u5907\uff0c\u6b64\u5904\u6bd4\u55bb\u201c\u590d\u76d8\u604b\u7231\u5931\u8d25\u539f\u56e0\u201d\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u5403\u4e00\u5811\u957f\u4e00\u667a\u201d / \u201c\u5931\u8d25\u662f\u6210\u529f\u4e4b\u6bcd\u201d\uff08\u4f46\u66f4\u6280\u672f\u5b85\u98ce\uff09\u3002 \u201cTwisted smouldering wreckage\u201d\uff08\u626d\u66f2\u5192\u70df\u7684\u6b8b\u9ab8\uff09 \u5c06\u7834\u788e\u7684\u604b\u7231\u5e7b\u60f3\u6bd4\u4f5c\u7a7a\u96be\u73b0\u573a\uff0c\u5f3a\u8c03\u60e8\u70c8\u7a0b\u5ea6\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u6614\u65e5\u7f8e\u68a6\uff0c\u5982\u4eca\u7a00\u788e\u201d / \u201c\u7231\u60c5\u5df2\u6b7b\uff0c\u6709\u4e8b\u70e7\u7eb8\u201d\u3002 \u201cGeek mountain\u201d\uff08\u6781\u5ba2\u5c71\uff09 \u81ea\u5632\u6897\uff0c\u6307\u56e0\u6c89\u8ff7\u6280\u672f/\u5b85\u6587\u5316\uff08\u5982\u6e38\u620f\u3001\u52a8\u6f2b\u3001\u7f16\u7a0b\uff09\u800c\u5355\u8eab\u7684\u72b6\u6001\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u6ce8\u5b64\u751f\u201d / \u201c\u4e8c\u523a\u8788\u306e\u8bc5\u5492\u201d\u3002 \u4f7f\u7528\u573a\u666f\u4e3e\u4f8b \u670b\u53cb\u6bd2\u820c\u5b89\u6170\uff1a A: \"She said I care more about Python than her...\" B: \"Well, retrieve the black box from your wrecked fantasy and stop coding on dates!\" \uff08\u201c\u5979\u8bf4\u4f60\u7231Python\u80dc\u8fc7\u7231\u5979\uff1f\u8d76\u7d27\u4ece\u5e7b\u60f3\u6b8b\u9ab8\u91cc\u627e\u9ed1\u5323\u5b50\uff0c\u4e0b\u6b21\u7ea6\u4f1a\u522b\u518d\u5199\u4ee3\u7801\u4e86\uff01\u201d\uff09 \u81ea\u5632\u6587\u6848\uff1a \"My love life\u2019s crash site has enough black boxes to open a museum.\" \uff08\u201c\u6211\u7684\u60c5\u53f2\u6b8b\u9ab8\u91cc\u7684\u9ed1\u5323\u5b50\u80fd\u5f00\u535a\u7269\u9986\u4e86\u3002\u201d\uff09 \u804c\u573a\u9690\u55bb\uff1a \"After this project failed, we need to find its black box\u2014was it the budget or your Excel addiction?\" \uff08\u201c\u9879\u76ee\u9ec4\u4e86\uff0c\u5f97\u627e\u9ed1\u5323\u5b50\u2014\u2014\u662f\u9884\u7b97\u95ee\u9898\uff0c\u8fd8\u662f\u4f60Excel\u6210\u763e\uff1f\u201d\uff09 \"I don't think you have a shot there.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u89c9\u5f97\u4f60\u6ca1\u620f\u3002\u201d / \u201c\u4f60\u8fd9\u6ce2\u4f30\u8ba1\u8981\u51c9\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u522b\u60f3\u4e86\uff0c\u6839\u672c\u6ca1\u6307\u671b\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Have a shot\" \u7684\u6f5c\u53f0\u8bcd \u5b57\u9762\u610f\u601d\uff1a\u5f00\u67aa/\u5c04\u51fb \u2192 \u5f15\u7533\u4e3a\u201c\u5c1d\u8bd5\u7684\u673a\u4f1a\u201d\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u6709\u620f\u201d\u6216\u201c\u80dc\u7b97\u201d\uff0c\u4f46\u66f4\u5f3a\u8c03\u201c\u53ef\u80fd\u6027\u6781\u4f4e\u201d\u3002 \u4f7f\u7528\u573a\u666f \u604b\u7231\u8ffd\u6c42\uff1a A: \"I\u2019m gonna ask her out!\" B: \"Bro, I don\u2019t think you have a shot.\" \uff08\u201c\u5144\u5f1f\uff0c\u4f60\u8ffd\u5979\uff1f\u7b97\u4e86\u5427\u3002\u201d\uff09 \"I'm a bit of a self-taught expert.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u7b97\u662f\u81ea\u5b66\u6210\u624d\u7684\u4e13\u5bb6\u5427\u3002\u201d / \u201c\u54b1\u8fd9\u6280\u672f\uff0c\u7eaf\u5c5e\u91ce\u8def\u5b50\u51fa\u8eab\u3002\u201d \uff08\u6216\u66f4\u51e1\u5c14\u8d5b\uff1a\u201c\u7565\u61c2\uff0c\u90fd\u662f\u81ea\u5df1\u778e\u7422\u78e8\u7684\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Self-taught expert\" \u7684\u6f5c\u53f0\u8bcd \u81ea\u8c6a\u611f\uff1a\u5f3a\u8c03\u4e0d\u9760\u6b63\u89c4\u6559\u80b2\uff0c\u5168\u9760\u4e2a\u4eba\u52aa\u529b\u3002 \u8c26\u865a\u5305\u88c5\uff1a\u7528 a bit of\uff08\u4e00\u70b9\u70b9\uff09\u6de1\u5316\u70ab\u8000\u611f\uff0c\u4f46\u5b9e\u9645\u6697\u793a\u201c\u6211\u5f88\u725b\u201d\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u6c11\u95f4\u5927\u795e\u201d / \u201c\u571f\u6cd5\u70bc\u94a2\u578b\u9ad8\u624b\u201d\u3002 \"Featuring the talents of...\" \u76f4\u8bd1\uff1a \u201c\u7531\u2026\u2026\u7684\u624d\u534e\u51fa\u6f14\u201d / \u201c\u7279\u9080\u2026\u2026\u503e\u60c5\u732e\u827a\u201d \u610f\u8bd1\uff1a \u201c\u7531\u2026\u2026\u4e3b\u6f14\u201d / \u201c\u9886\u8854\u4e3b\u6f14\uff1a\u2026\u2026\u201d \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u62c6\u89e3 Feature\uff1a\u5728\u5f71\u89c6/\u97f3\u4e50\u9886\u57df\u6307\u201c\u4ee5\u2026\u2026\u4e3a\u7279\u8272\u201d\u3002 Talents\uff1a\u6b64\u5904\u6307\u201c\u660e\u661f\u6f14\u5458/\u827a\u4eba\u201d\uff0c\u800c\u975e\u5b57\u9762\u201c\u624d\u80fd\u201d\u3002 \u7ec4\u5408\u6548\u679c\uff1a\u59d4\u5a49\u8868\u8fbe\u201c\u5927\u724c\u53c2\u6f14\u201d\uff0c\u5e38\u89c1\u4e8e\u6d77\u62a5\u3001\u5ba3\u4f20\u7a3f\u3002 \u4f7f\u7528\u573a\u666f \u5f71\u89c6\u5ba3\u4f20\uff1a \"This film features the talents of Tom Hanks and Meryl Streep.\" \uff08\u201c\u672c\u7247\u7531\u6c64\u59c6\u00b7\u6c49\u514b\u65af\u4e0e\u6885\u4e3d\u5c14\u00b7\u65af\u7279\u91cc\u666e\u4e3b\u6f14\u3002\u201d\uff09 \u97f3\u4e50\u4e13\u8f91\uff1a \"The album features the talents of Jay-Z and Beyonc\u00e9.\" \uff08\u201c\u4e13\u8f91\u7279\u9080Jay-Z\u548c\u78a7\u6602\u4e1d\u732e\u58f0\u3002\u201d\uff09 \u8bbd\u523a\u8c03\u4f83\uff1a \"The school play features the \u2018talents\u2019 of my tone-deaf nephew.\" \uff08\u201c\u6821\u5267\u2018\u7279\u9080\u2019\u6211\u4e94\u97f3\u4e0d\u5168\u7684\u4f84\u5b50\u2018\u732e\u827a\u2019\u3002\u201d\uff09 \"On the plus side...\" \u7ffb\u8bd1\uff1a \u201c\u5f80\u597d\u5904\u60f3\u2026\u2026\u201d / \u201c\u6362\u4e2a\u89d2\u5ea6\u4e5f\u6709\u4f18\u70b9\u2026\u2026\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u597d\u6b79\u2026\u2026\u201d / \u201c\u9000\u4e00\u4e07\u6b65\u8bf4\u2026\u2026\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u529f\u80fd \u7528\u4e8e\u5e73\u8861\u8d1f\u9762\u60c5\u5883\uff0c\u5728\u574f\u4e8b\u4e2d\u627e\u51fa\u79ef\u6781\u56e0\u7d20\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u4e0d\u5e78\u4e2d\u7684\u4e07\u5e78\u201d\uff0c\u4f46\u66f4\u8f7b\u677e\u968f\u610f\u3002 \u4f7f\u7528\u573a\u666f \u8d1f\u9762\u60c5\u5883 On the plus side... \u7684\u79ef\u6781\u8f6c\u6298 \u4e2d\u6587\u5bf9\u5e94 \"My flight was canceled.\" \"On the plus side, I got hotel vouchers!\" \u201c\u822a\u73ed\u53d6\u6d88\uff0c\u4f46\u767d\u5ad6\u4e86\u9152\u5e97\u3002\u201d \"I failed the exam.\" \"On the plus side, now I know what to study.\" \u201c\u6302\u79d1\u4e86\uff0c\u81f3\u5c11\u77e5\u9053\u8be5\u590d\u4e60\u5565\u3002\u201d \"My date ghosted me.\" \"On the plus side, I saved $200 on dinner.\" \u201c\u88ab\u653e\u9e3d\u5b50\uff0c\u7701\u4e86\u987f\u996d\u94b1\u3002\u201d \u76f4\u63a5\u53cd\u4e49\u77ed\u8bed \u82f1\u6587 \u4e2d\u6587\u7ffb\u8bd1 \u4f7f\u7528\u573a\u666f \"On the downside...\" \u201c\u7f3a\u70b9\u662f\u2026\u2026\u201d \u5ba2\u89c2\u5217\u4e3e\u5f0a\u7aef\uff08\u4e2d\u6027\u8bed\u6c14\uff09 \"On the minus side...\" \u201c\u4e0d\u5229\u7684\u662f\u2026\u2026\u201d \u6b63\u5f0f\u62a5\u544a/\u6570\u636e\u5206\u6790 \"The bad news is...\" \u201c\u574f\u6d88\u606f\u662f\u2026\u2026\u201d \u5e7d\u9ed8\u6216\u620f\u5267\u6027\u8f6c\u6298 \"Would I be bound by Asimov's Three Laws of Robotics?\" \u7ffb\u8bd1\uff1a \u201c\u6211\u9700\u8981\u9075\u5b88\u963f\u897f\u83ab\u592b\u7684\u673a\u5668\u4eba\u4e09\u5b9a\u5f8b\u5417\uff1f\u201d \"Be bound\" \u7ffb\u8bd1\uff1a \u201c\u53d7\u7ea6\u675f\u201d / \u201c\u5fc5\u987b\u9075\u5b88\u201d \uff08\u6839\u636e\u8bed\u5883\u53ef\u8bd1\u4e3a\uff1a\u201c\u53d7\u9650\u4e8e\u201d\u3001\u201c\u6ce8\u5b9a\u201d\u3001\u201c\u7ed1\u5b9a\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u6cd5\u5f8b/\u89c4\u5219\uff1a\u6307\u88ab\u6761\u6b3e\u3001\u5408\u540c\u6216\u9053\u5fb7\u51c6\u5219\u5f3a\u5236\u7ea6\u675f\u3002 \"The contract binds us to secrecy.\" \uff08\u201c\u5408\u540c\u8981\u6c42\u6211\u4eec\u5fc5\u987b\u4fdd\u5bc6\u3002\u201d\uff09 \u7269\u7406/\u6280\u672f\uff1a\u6307\u88ab\u7269\u7406\u6027\u6346\u7ed1\u6216\u7cfb\u7edf\u5f3a\u5236\u9650\u5236\u3002 \"The data is bound to the server.\" \uff08\u201c\u6570\u636e\u88ab\u7ed1\u5b9a\u5728\u670d\u52a1\u5668\u4e0a\u3002\u201d\uff09 \u547d\u8fd0/\u5fc5\u7136\u6027\uff1a\u8868\u8fbe\u4e0d\u53ef\u907f\u514d\u7684\u7ed3\u679c\u3002 \"He was bound to fail.\" \uff08\u201c\u4ed6\u6ce8\u5b9a\u5931\u8d25\u3002\u201d\uff09 \"You're in for a treat.\" \u7ffb\u8bd1\uff1a \u201c\u4f60\u6709\u597d\u620f\u770b\u4e86\uff01\u201d / \u201c\u4f60\u8981\u8d70\u8fd0\u4e86\uff01\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u51c6\u5907\u597d\u60ca\u559c\u5427\uff01\u201d / \u201c\u4f60\u8981\u4e50\u5f00\u82b1\u5566\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u79ef\u6781\u60ca\u559c\uff1a\u6697\u793a\u5bf9\u65b9\u5373\u5c06\u4f53\u9a8c\u8d85\u9884\u671f\u7684\u597d\u4e8b\uff08\u5982\u7f8e\u98df\u3001\u8868\u6f14\u3001\u793c\u7269\uff09\u3002 \u5e7d\u9ed8\u60ac\u5ff5\uff1a\u53ef\u80fd\u4f34\u968f\u6076\u4f5c\u5267\uff08\u5982\u201c\u60ca\u559c\u201d\u53d8\u201c\u60ca\u5413\u201d\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587\u4f8b\u53e5 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u7f8e\u98df\u63a8\u8350 \"Try this cake\u2014you\u2019re in for a treat!\" \u201c\u5c1d\u5c1d\u8fd9\u86cb\u7cd5\uff0c\u5305\u4f60\u53eb\u7edd\uff01\u201d \u6f14\u51fa\u9884\u544a \"Wait till you see the magic trick. You\u2019re in for a treat!\" \u201c\u63a5\u4e0b\u6765\u8fd9\u4e2a\u9b54\u672f\uff0c\u8ba9\u4f60\u5927\u5f00\u773c\u754c\uff01\u201d \u53cd\u8bed\u8c03\u4f83 \"Mom\u2019s making \u2018special\u2019 pancakes... you\u2019re in for a treat.\" \u201c\u8001\u5988\u8981\u505a\u2018\u79d8\u5236\u2019\u714e\u997c\u2026\u4f60\u81ea\u6c42\u591a\u798f\u5427\u3002\u201d \u4e2d\u6587\u5bf9\u5e94\u8868\u8fbe \u6b63\u80fd\u91cf\u7248\uff1a\u201c\u4f60\u6709\u53e3\u798f/\u773c\u798f\u4e86\uff01\u201d \u60ac\u5ff5\u7248\uff1a\u201c\u63a5\u4e0b\u6765\uff0c\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\uff01\u201d \u9634\u9633\u602a\u6c14\u7248\uff1a\u201c\u563f\u563f\uff0c\u4f60\u7b49\u7740\u2018\u60ca\u559c\u2019\u5427~\u201d \"Take into account\" \u7684\u6f5c\u53f0\u8bcd \u6b63\u5f0f\u573a\u666f\uff1a\u533b\u751f/\u6559\u7ec3\u8868\u793a\u5df2\u8c03\u6574\u65b9\u6848\uff08\u5982\u51cf\u5c11\u5267\u70c8\u8fd0\u52a8\uff09\u3002 \"Your training plan takes your asthma into account.\" \uff08\u201c\u4f60\u7684\u8bad\u7ec3\u8ba1\u5212\u5df2\u8003\u8651\u54ee\u5598\u56e0\u7d20\u3002\u201d\uff09 \u65e5\u5e38\u5173\u6000\uff1a\u670b\u53cb\u63d0\u9192\u907f\u514d\u8fc7\u654f\u539f\uff08\u5982\u201c\u805a\u4f1a\u6ca1\u4e70\u82b1\u751f\u201d\uff09\u3002 \u8bbd\u523a\u7528\u6cd5\uff1a\u5bf9\u65b9\u62ff\u54ee\u5598\u5f53\u501f\u53e3\u65f6\u7ffb\u65e7\u8d26\uff08\"Oh, I \u2018took it into account\u2019 when you skipped chores!\"\uff09\u3002 Did we say a time?\" \u7ffb\u8bd1\uff1a \u201c\u6211\u4eec\u7ea6\u65f6\u95f4\u4e86\u5417\uff1f\u201d / \u201c\u5177\u4f53\u51e0\u70b9\u6765\u7740\uff1f\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u54b1\u8bf4\u597d\u51e0\u70b9\u78b0\u5934\u6ca1\uff1f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u786e\u8ba4\u662f\u5426\u5df2\u7ea6\u5b9a\u5177\u4f53\u65f6\u95f4\uff0c\u5e38\u89c1\u4e8e\uff1a \u5065\u5fd8\uff1a\u771f\u5fd8\u4e86\uff08\u5c24\u5176\u82f1\u8bed\u6bcd\u8bed\u8005\u5e38\u7528 \"Did we...\" \u4ee3\u66ff \"Have we...\"\uff09\u3002 \u59d4\u5a49\u50ac\u4fc3\uff1a\u6697\u793a\u5bf9\u65b9\u8be5\u5b9a\u65f6\u95f4\u4e86\uff08\u5982\u201c\u60a8\u5012\u662f\u8bf4\u4e2a\u70b9\u513f\u554a\uff01\u201d\uff09\u3002 \"For that dense molecular cloud of Aramis to dissipate.\" \u7ffb\u8bd1\uff1a \u201c\u8981\u8ba9\u963f\u62c9\u7c73\u65af\u90a3\u56e2\u6d53\u5bc6\u7684\u5206\u5b50\u4e91\u6563\u5f00\u3002\u201d \uff08\u6216\u66f4\u6587\u827a\uff1a\u201c\u5f85\u963f\u62c9\u7c73\u65af\u4e4b\u6d4a\u4e91\u6d88\u6563\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u79d1\u5b66\u9690\u55bb \u5206\u5b50\u4e91\uff08Molecular Cloud\uff09\uff1a\u5929\u6587\u5b66\u4e2d\u6052\u661f\u8bde\u751f\u7684\u6df7\u6c8c\u533a\u57df\uff0c\u6b64\u5904\u6bd4\u55bb \u201c\u963f\u62c9\u7c73\u65af\uff08Aramis\uff09\u7684\u6df7\u4e71/\u56fa\u6267/\u4e0d\u900f\u660e\u72b6\u6001\u201d\u3002 Dissipate\uff08\u6d88\u6563\uff09\uff1a\u6697\u793a\u9700\u8981\u65f6\u95f4\u6216\u5916\u529b\u5e72\u9884\u624d\u80fd\u7406\u6e05\u95ee\u9898\u3002 \"If it should ever come up...\" \u7ffb\u8bd1\uff1a \u201c\u4e07\u4e00\u6709\u4eba\u63d0\u8d77\u2026\u2026\u201d / \u201c\u5982\u679c\u8fd9\u4e8b\u88ab\u7ffb\u51fa\u6765\u2026\u2026\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u8981\u662f\u54ea\u5929\u6709\u4eba\u95ee\u8d77\u2026\u2026\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u9884\u9632\u6027\u94fa\u57ab\uff1a\u4e3a\u654f\u611f/\u5c34\u5c2c\u8bdd\u9898\u63d0\u524d\u51c6\u5907\u56de\u5e94\u3002 \u4f4e\u6982\u7387\u4e8b\u4ef6\uff1a\u6697\u793a\u95ee\u9898\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u63d0\u53ca\uff08\u4f46\u5f97\u9632\u4e00\u624b\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u804c\u573a\u7529\u9505 \"If it should ever come up, say the data was \u2018lost in transit\u2019.\" \u201c\u4e07\u4e00\u9886\u5bfc\u95ee\uff0c\u5c31\u8bf4\u6570\u636e\u2018\u4f20\u8f93\u4e22\u5931 \"This kicks off a rather unpleasant six months.\" \u7ffb\u8bd1\uff1a \u201c\u63a5\u4e0b\u6765\u8fd9\u516d\u4e2a\u6708\u4f1a\u76f8\u5f53\u96be\u71ac\u3002\u201d / \u201c\u8fd9\u5c31\u5f00\u542f\u4e86\u75db\u82e6\u7684\u534a\u5e74\u65f6\u5149\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u597d\u65e5\u5b50\u5230\u5934\u4e86\uff0c\u51c6\u5907\u71ac\u534a\u5e74\u5427\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Kicks off\" \u7684\u52a8\u6001\u611f \u539f\u6307\u8db3\u7403\u5f00\u7403\uff0c\u5f15\u7533\u4e3a\u201c\u4e0d\u60c5\u613f\u5730\u542f\u52a8\u67d0\u4e8b\u201d\uff0c\u6697\u542b\u201c\u88ab\u8feb\u5377\u5165\u201d\u7684\u65e0\u5948\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u62c9\u5f00\u5e8f\u5e55\u201d\uff08\u4e2d\u6027\uff09 / \u201c\u5669\u68a6\u5f00\u59cb\u201d\uff08\u6d88\u6781\uff09\u3002 \u533b\u7597\u60c5\u5883\uff1a \"The doctor said recovery takes six months... this kicks off a rather unpleasant journey.\" \uff08\u201c\u533b\u751f\u8bf4\u8981\u6062\u590d\u534a\u5e74\u2026\u82e6\u65e5\u5b50\u5f00\u59cb\u4e86\u3002\u201d\uff09 \u804c\u573a\u5410\u69fd\uff1a \"New CEO announced \u2018efficiency reforms\u2019\u2014yep, this kicks off six months of hell.\" \uff08\u201c\u65b0CEO\u8981\u2018\u6539\u9769\u2019\u2014\u2014\u5f97\uff0c\u63a5\u4e0b\u6765\u534a\u5e74\u522b\u60f3\u597d\u8fc7\u3002\u201d\uff09 \u672b\u65e5\u9884\u8a00\uff1a \"The asteroid\u2019s six months out... and so is my will to live.\" \uff08\u201c\u5c0f\u884c\u661f\u534a\u5e74\u540e\u649e\u5730\u7403\u2026\u6211\u7684\u6c42\u751f\u6b32\u4e5f\u5dee\u4e0d\u591a\u5230\u671f\u4e86\u3002\u201d\uff09 \"This thing is going the distance.\" \u7ffb\u8bd1\uff1a \u201c\u8fd9\u4e8b\u8981\u6b7b\u78d5\u5230\u5e95\u4e86\u3002\u201d / \u201c\u8fd9\u573a\u8f83\u91cf\u4f1a\u6301\u7eed\u5230\u6700\u540e\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u4e0d\u5206\u80dc\u8d1f\u4e0d\u7f62\u4f11\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Going the distance\" \u7684\u8d77\u6e90 \u6e90\u81ea\u62f3\u51fb\u672f\u8bed\uff0c\u6307\u201c\u6253\u6ee1\u5168\u573a\u56de\u5408\u201d\uff08\u901a\u5e3812\u56de\u5408\uff09\uff0c\u5f15\u7533\u4e3a\u575a\u6301\u5230\u6781\u9650\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u8840\u6218\u5230\u5e95\u201d / \u201c\u62fc\u5230\u5f39\u5c3d\u7cae\u7edd\u201d\u3002 \"I'll just tell her that you had a routine colonoscopy and haven't quite bounced back.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u5c31\u8ddf\u5979\u8bf4\u4f60\u521a\u505a\u5b8c\u5e38\u89c4\u80a0\u955c\uff0c\u8fd8\u6ca1\u5b8c\u5168\u6062\u590d\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u6211\u5c31\u8bf4\u4f60\u80a0\u955c\u68c0\u67e5\u5b8c\uff0c\u4eba\u8fd8\u865a\u7740\u5462~\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Routine colonoscopy\"\uff08\u5e38\u89c4\u80a0\u955c\uff09 \u6b27\u7f8e50\u5c81\u4ee5\u4e0a\u4eba\u7fa4\u5e38\u89c4\u4f53\u68c0\u9879\u76ee\uff0c\u4e2d\u6587\u4fd7\u79f0\u201c\u80a0\u80c3\u955c\u201d\u3002 \u5e38\u88ab\u7528\u4f5c\u8bf7\u5047/\u9003\u907f\u793e\u4ea4\u7684\u4e07\u80fd\u501f\u53e3\uff08\u56e0\u6d89\u53ca\u9690\u79c1\uff0c\u5c11\u6709\u4eba\u8ffd\u95ee\u7ec6\u8282\uff09\u3002 \"Haven't quite bounced back\" \u5b57\u9762\uff1a\u672a\u5b8c\u5168\u6062\u590d\uff08bounce back \u50cf\u7403\u5f39\u56de\uff0c\u55bb\u6307\u6062\u590d\u6d3b\u529b\uff09\u3002 \u6f5c\u53f0\u8bcd\uff1a \u771f\u4e0d\u9002\uff1a\u68c0\u67e5\u540e\u53ef\u80fd\u8179\u80c0\u3001\u4e4f\u529b\u3002 \u5047\u4e0d\u9002\uff1a\u59d4\u5a49\u62d2\u7edd\u7684\u501f\u53e3\uff08\u5982\u4e0d\u60f3\u53c2\u52a0\u56e2\u5efa\uff09\u3002 \u573a\u666f \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u771f\u5b9e\u533b\u7597 \"The sedation takes 24 hours to wear off.\" \u201c\u9ebb\u9189\u836f\u6548\u5f97\u4e00\u5929\u624d\u9000\u3002\u201d \u804c\u573a\u7cca\u5f04 \"Just say you\u2019re \u2018recovering\u2019\u2014no one asks follow-ups.\" \u201c\u8bf4\u2018\u8c03\u517b\u4e2d\u2019\uff0c\u6ca1\u4eba\u6562\u7ec6\u95ee\uff01\u201d \u5bb6\u5ead\u8c0e\u8a00 \"Mom, colonoscopy is code for \u2018hangover\u2019.\" \u201c\u5988\uff0c\u2018\u80a0\u955c\u2019\u5c31\u662f\u2018\u5bbf\u9189\u2019\u7684\u6697\u53f7\u3002\u201d \"We do have a chocolate key lime that\u2019s moving pretty well.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u4eec\u786e\u5b9e\u6709\u4e00\u6b3e\u5de7\u514b\u529b\u9752\u67e0\u6d3e\uff0c\u5356\u5f97\u633a\u706b\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u5de7\u514b\u529b\u9752\u67e0\u5473\u513f\u7684\uff0c\u73b0\u5728\u8d70\u91cf\u8d3c\u5feb\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Key lime\"\uff08\u9752\u67e0\u6d3e\uff09 \u7f8e\u56fd\u7ecf\u5178\u751c\u70b9\uff0c\u7528\u4f5b\u7f57\u91cc\u8fbe\u9752\u67e0\uff08Key lime\uff09\u5236\u4f5c\uff0c\u901a\u5e38\u914d\u5976\u6cb9\u6216\u5de7\u514b\u529b\u3002 \u4e2d\u6587\u5e38\u76f4\u8bd1\u4e3a\u201c\u9752\u67e0\u6d3e\u201d\uff0c\u4f46\u9700\u52a0\u8bf4\u660e\uff08\u56e0\u56fd\u5185\u8f83\u5c11\u89c1\uff09\u3002 \"Moving pretty well\" \u5546\u4e1a\u884c\u8bdd\uff0c\u6307\u201c\u9500\u91cf\u4e0d\u9519\u201d\uff08= selling fast\uff09\u3002 \u7c7b\u4f3c\u4e2d\u6587\uff1a\u201c\u8d70\u91cf\u5feb\u201d / \u201c\u5356\u7206\u4e86\u201d / \u201c\u7545\u9500\u6b3e\u201d\u3002 A: \"Centrifugal\uff08/sen\u02c8tr\u026afj\u0259\u0261l/\uff09 force!\" B: \"Actually, it\u2019s centripetal\uff08/sen\u02c8tr\u026ap\u026atl/\uff09 force, which is an inward force generated by the glass acting on the olive.\"","title":"S01e03"},{"location":"art/English/tv/bigbang/s01/e03/s01e03/#_1","text":"unsheathe \u62d4\u51fa spice \u8c03\u5473 mead \u871c\u9152 flank \u4fa7\u9762\uff1b\u4fa7\u7ffc smouldering \u9634\u71c3","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e03/s01e03/#_2","text":"\u539f\u6587\uff1a \"Blowing the gates.\" \u7ffb\u8bd1\uff1a \u201c\u70b8\u5f00\u95f8\u95e8\u201d / \u201c\u7834\u95e8\u800c\u5165\u201d \uff08\u6839\u636e\u8bed\u5883\u4e5f\u53ef\u8bd1\u4e3a\uff1a\u201c\u51b2\u7834\u9632\u7ebf\u201d\u3001\u201c\u5927\u5f00\u65b9\u4fbf\u4e4b\u95e8\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u610f\u601d Blowing\uff1a\u6307\u7528\u7206\u70b8\u7269\uff08\u5982\u70b8\u836f\uff09\u5f3a\u884c\u7834\u574f\uff0c\u519b\u4e8b/\u72af\u7f6a\u573a\u666f\u5e38\u7528\u3002 Gates\uff1a\u5e7f\u4e49\u6307\u201c\u95e8/\u95f8\u95e8\u201d\uff0c\u53ef\u5f15\u7533\u4e3a\u201c\u5173\u5361\u201d\u3001\u201c\u9650\u5236\u201d\u3002 \u76f4\u8bd1\u7ec4\u5408\uff1a\u901a\u8fc7\u66b4\u529b\u6216\u6280\u672f\u624b\u6bb5\u7a81\u7834\u7269\u7406\u5c01\u9501\u3002 \u5f15\u7533\u542b\u4e49 \u519b\u4e8b\u884c\u52a8\uff1a\u7a81\u51fb\u961f\u7206\u7834\u5165\u53e3\uff08\u5982\u300a\u4f7f\u547d\u53ec\u5524\u300b\u6e38\u620f\u573a\u666f\uff09\u3002 \u9ed1\u5ba2\u653b\u51fb\uff1a\u7834\u89e3\u7cfb\u7edf\u9632\u706b\u5899\uff08\"They\u2019re blowing the gates of the server.\"\uff09\u3002 \u4f53\u80b2\u7ade\u6280\uff1a\u5f3a\u52bf\u7a81\u7834\u9632\u5b88\uff08\u5982\u6a44\u6984\u7403\u6218\u672f\uff09\u3002 \u793e\u4f1a\u9690\u55bb\uff1a\u6253\u7834\u89c4\u5219\u675f\u7f1a\uff08\"The protest blew the gates of censorship.\"\uff09\u3002 \"Slash and move.\" \u7ffb\u8bd1\uff1a \u201c\u780d\u5b8c\u5c31\u64a4\u201d / \u201c\u5288\u780d\u8f6c\u79fb\u201d \uff08\u6218\u672f\u8bed\u5883\u4e0b\uff1a\u201c\u6253\u4e86\u5c31\u8dd1\u201d\uff1b\u56ed\u827a\u573a\u666f\uff1a\u201c\u526a\u679d\u540e\u632a\u4f4d\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u542b\u4e49 Slash\uff1a\u7528\u5229\u5668\uff08\u5200\u3001\u5251\u7b49\uff09\u5288\u780d\uff0c\u6216\u8c61\u5f81\u6027\u5feb\u901f\u7834\u574f\u3002 Move\uff1a\u7acb\u5373\u79fb\u52a8\u4f4d\u7f6e\uff0c\u907f\u514d\u88ab\u53cd\u51fb\u6216\u6ede\u7559\u98ce\u9669\u3002 \u7ec4\u5408\u6548\u679c\uff1a\u201c\u5feb\u901f\u653b\u51fb\u540e\u8fc5\u901f\u8131\u79bb\u201d\u7684\u6218\u672f\u601d\u7ef4\u3002 \u6e38\u620f\u6307\u6325\uff1a \"Slash and move! Don\u2019t let the boss agro you!\" \uff08\u201c\u780d\u5b8c\u95ea\u4eba\uff01\u522b\u62c9BOSS\u4ec7\u6068\uff01\u201d\uff09 \u804c\u573a\u6bd4\u55bb\uff1a \"Startup survival rule: Slash burn rate and move to monetization fast.\" \uff08\u201c\u521b\u4e1a\u751f\u5b58\u6cd5\u5219\uff1a\u72c2\u780d\u5f00\u652f\uff0c\u5feb\u641e\u94b1\u3002\u201d\uff09 \u4e27\u5c38\u672b\u65e5\uff1a \"Slash the zombie\u2019s neck and move\u2014they swarm fast!\" \uff08\u201c\u780d\u8116\u5b50\u901f\u6e9c\u2014\u2014\u5c38\u7fa4\u805a\u5f97\u5feb\uff01\u201d\uff09 \"Stay in formation.\" \u7ffb\u8bd1\uff1a \u201c\u4fdd\u6301\u961f\u5f62\uff01\u201d / \u201c\u522b\u4e71\u9635\u578b\uff01\u201d \uff08\u6218\u672f\u8bed\u5883\u4e0b\uff1a\u201c\u7ef4\u6301\u7f16\u961f\u201d\uff1b\u65e5\u5e38\u573a\u666f\uff1a\u201c\u522b\u6389\u961f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u519b\u4e8b/\u6218\u672f\u542b\u4e49 Formation\uff08\u961f\u5f62\uff09\uff1a\u6307\u519b\u961f\u3001\u6218\u673a\u3001\u8230\u961f\u7b49\u6309\u7279\u5b9a\u7b56\u7565\u6392\u5217\u7684\u9635\u578b\uff08\u5982\u6954\u5f62\u3001\u65b9\u9635\uff09\u3002 \u5173\u952e\u7528\u9014\uff1a \u9632\u5fa1\uff08\u5982\u7f57\u9a6c\u76fe\u5899\uff09 \u706b\u529b\u96c6\u4e2d\uff08\u5982\u6218\u673a\u7f16\u961f\u8f70\u70b8\uff09 \u8ff7\u60d1\u654c\u4eba\uff08\u5982\u9a91\u5175\u8fc2\u56de\u9635\uff09 \"On your tail\"\uff1a\u76f4\u8bd1\u4e3a\u201c\u5728\u4f60\u5c3e\u5df4\u4e0a\u201d\uff0c\u5b9e\u9645\u6307\u7d27\u8ffd\u4e0d\u820d\u7684\u8ffd\u8e2a\u8005\uff08\u5982\u654c\u4eba\u3001\u8b66\u5bdf\u3001\u7ade\u4e89\u5bf9\u624b\uff09\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u54ac\u4f4f\u4e0d\u653e\u201d\u6216\u201c\u5c3e\u968f\u201d\uff0c\u4f46\u66f4\u52a8\u6001\u5316\u3002 \u4f7f\u7528\u573a\u666f \u7a7a\u6218/\u8d5b\u8f66\uff1a \"Bandit at 6 o'clock! You got one on your tail!\" \uff08\u201c\u654c\u673a\u5728\u4f60\u6b63\u540e\u65b9\uff01\u54ac\u4f4f\u4f60\u4e86\uff01\u201d\uff09 \u52a8\u4f5c\u7247/\u9003\u4ea1\uff1a \"Don\u2019t look back, but you\u2019ve got a cop on your tail.\" \uff08\u201c\u522b\u56de\u5934\uff0c\u6709\u6761\u5b50\u76ef\u4e0a\u4f60\u4e86\u3002\u201d\uff09 \u804c\u573a\u7ade\u4e89\uff08\u5e7d\u9ed8\uff09\uff1a \"The new intern is hustling\u2014you got one on your tail for that promotion!\" \uff08\u201c\u65b0\u6765\u7684\u5b9e\u4e60\u751f\u5f88\u62fc\u554a\uff0c\u4f60\u5347\u804c\u8def\u4e0a\u6709\u5bf9\u624b\u4e86\uff01\u201d\uff09 \"My tail's prehensile, I'll swat him off.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u7684\u5c3e\u5df4\u53ef\u662f\u80fd\u6293\u63e1\u7684\uff0c\u770b\u6211\u4e0d\u628a\u4ed6\u7529\u98de\uff01\u201d \uff08\u6216\u66f4\u4fcf\u76ae\uff1a\u201c\u54b1\u8fd9\u5c3e\u5df4\u7075\u6d3b\u5f97\u5f88\uff0c\u4e00\u62bd\u4e00\u4e2a\u51c6\u513f~\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Prehensile tail\"\uff08\u53ef\u6293\u63e1\u7684\u5c3e\u5df4\uff09 \u751f\u7269\u5b66\u6982\u5ff5\uff1a\u6307\u67d0\u4e9b\u52a8\u7269\uff08\u5982\u7334\u5b50\u3001\u98df\u8681\u517d\uff09\u80fd\u50cf\u624b\u4e00\u6837\u7f20\u7ed5\u7269\u4f53\u7684\u5c3e\u5df4\u3002 \u79d1\u5e7b/\u5947\u5e7b\u8bbe\u5b9a\uff1a\u5916\u661f\u4eba\u6216\u517d\u4eba\u79cd\u65cf\u7684\u5e38\u89c1\u7279\u5f81\uff08\u5982\u300a\u963f\u51e1\u8fbe\u300b\u7684\u7eb3\u7f8e\u4eba\uff09\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u529f\u80fd\u6027\u5c3e\u5df4\u201d\uff08\u5b66\u672f\uff09/\u201c\u4e07\u80fd\u5c3e\u5df4\u201d\uff08\u4e2d\u4e8c\u7248\uff09\u3002 \"Swat off\" \u7684\u66b4\u529b\u840c\u611f Swat\uff1a\u62cd\u6253\uff08\u5982\u6253\u82cd\u8747\uff09\uff0c\u6b64\u5904\u5e26\u8f7b\u677e\u78be\u538b\u7684\u56a3\u5f20\u8bed\u6c14\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u4e00\u5c3e\u5df4\u62bd\u98de\u201d\uff08\u6b66\u4fa0\u98ce\uff09/\u201c\u7528\u5c3e\u5df4\u6559\u4ed6\u505a\u4eba\u201d\uff08\u7f51\u6587\u6897\uff09\u3002 \"Tonight I spice my mead with goblin blood.\" \u7ffb\u8bd1\uff1a \u201c\u4eca\u591c\uff0c\u6211\u7684\u871c\u9152\u4ee5\u54e5\u5e03\u6797\u4e4b\u8840\u8c03\u5473\u3002\u201d \uff08\u6216\u66f4\u4e2d\u4e8c\uff1a\u201c\u6b64\u676f\u7329\u7ea2\uff0c\u5f53\u4ee5\u5730\u7cbe\u8840\u4e3a\u5f15\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Mead\"\uff08\u871c\u9152\uff09 \u5317\u6b27/\u4e2d\u4e16\u7eaa\u4f20\u7edf\u9152\u7cbe\u996e\u54c1\uff0c\u8702\u871c\u53d1\u9175\u5236\u6210\uff0c\u7ef4\u4eac\u6218\u58eb\u548c\u5947\u5e7b\u6587\u5b66\u6807\u5fd7\u6027\u5143\u7d20\u3002 \u4e2d\u6587\u5e38\u8bd1\u201c\u8702\u871c\u9152\u201d\uff0c\u4f46\u201c\u871c\u9152\u201d\u66f4\u4fdd\u7559\u53e4\u98ce\uff08\u5982\u300a\u970d\u6bd4\u7279\u4eba\u300b\u77ee\u4eba\u72c2\u996e\u573a\u666f\uff09\u3002 \"Goblin blood\" \u7684\u8c61\u5f81 \u91ce\u86ee\u5f81\u670d\uff1a\u54e5\u5e03\u6797\uff08\u5730\u7cbe\uff09\u5728\u5947\u5e7b\u8bbe\u5b9a\u4e2d\u4e3a\u4f4e\u7b49\u9b54\u7269\uff0c\u5176\u8840\u8c61\u5f81\u5bf9\u654c\u4eba\u7684\u78be\u538b\u3002 \u9ed1\u6697\u5e7d\u9ed8\uff1a\u5982\u540c\u8bf4\u201c\u4eca\u665a\u5a01\u58eb\u5fcc\u52a0\u654c\u914b\u773c\u6cea\u201d\uff0c\u51f8\u663e\u56a3\u5f20\u59ff\u6001\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u4ee5\u654c\u796d\u9152\u201d\uff08\u6b66\u4fa0\u72e0\u8bdd\uff09/\u201c\u9b54\u8840\u8c03\u996e\u201d\uff08\u7f51\u6587\u98ce\uff09\u3002 \"Snail mail.\" \u7ffb\u8bd1\uff1a \u201c\u8717\u725b\u90ae\u4ef6\u201d / \u201c\u9f9f\u901f\u90ae\u653f\u201d \uff08\u4e2d\u6587\u4fd7\u79f0\uff1a\u201c\u5e73\u4fe1\u201d\u3001\u201c\u6162\u9012\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u8bcd\u6e90\u4e0e\u8bbd\u523a \u8bde\u751f\u4e8e1990\u5e74\u4ee3\u7535\u5b50\u90ae\u4ef6\u666e\u53ca\u540e\uff0c\u5bf9\u6bd4\u201c\u7535\u5b50\u90ae\u4ef6\u201d\uff08\u79d2\u8fbe\uff09\u548c\u201c\u4f20\u7edf\u90ae\u653f\u201d\uff08\u6570\u65e5/\u5468\uff09\u7684\u901f\u5ea6\u5dee\u5f02\u3002 \u7528\u8717\u725b\uff08snail\uff09\u6bd4\u55bb\u7f13\u6162\uff0c\u5e26\u620f\u8c11\u8272\u5f69\uff08\u7c7b\u4f3c\u4e2d\u6587\u201c\u9f9f\u901f\u201d\uff09\u3002 \u4f7f\u7528\u573a\u666f \u62b1\u6028\u90ae\u653f\uff1a \"My passport arrived by snail mail\u2014two weeks late!\" \uff08\u201c\u62a4\u7167\u8d70\u5e73\u4fe1\u5bc4\u5230\uff0c\u8fdf\u4e86\u4e24\u5468\uff01\u201d\uff09 \u6000\u65e7\u8425\u9500\uff1a \"Send love via snail mail for a vintage touch.\" \uff08\u201c\u7528\u8717\u725b\u90ae\u4ef6\u4f20\u9012\u7231\uff0c\u590d\u53e4\u53c8\u8d70\u5fc3\u3002\u201d\uff09 \u6cd5\u5f8b\u6587\u4ef6\uff1a \"The court only accepts snail-mailed applications.\" \uff08\u201c\u6cd5\u9662\u53ea\u6536\u7eb8\u8d28\u90ae\u5bc4\u7533\u8bf7\u3002\u201d\uff09 \"Civil servants have a documented propensity to snap.\" \u7ffb\u8bd1\uff1a \u201c\u516c\u52a1\u5458\u6709\u636e\u53ef\u67e5\u7684\u66b4\u813e\u6c14\u503e\u5411\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u516c\u52a1\u5458\u5bb9\u6613\u70b8\u6bdb\uff0c\u8fd9\u53ef\u662f\u6709\u8bb0\u5f55\u7684\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Civil servants\"\uff08\u516c\u52a1\u5458\uff09\u7684\u523b\u677f\u5370\u8c61 \u5728\u897f\u65b9\u8bed\u5883\u4e2d\uff0c\u516c\u52a1\u5458\u5e38\u88ab\u5410\u69fd\u4e3a\uff1a \u5b98\u50da\u4e3b\u4e49\uff08\u529e\u4e8b\u62d6\u6c93\u3001\u6b7b\u677f\uff09 \u538b\u6291\u60c5\u7eea\uff08\u957f\u671f\u9762\u5bf9\u516c\u4f17\u62b1\u6028\uff0c\u6613\u7a81\u7136\u7206\u53d1\uff09 \u4e2d\u6587\u7c7b\u4f3c\u6897\uff1a\u201c\u7a97\u53e3\u5355\u4f4d\u8138\u96be\u770b\u201d / \u201c\u4f53\u5236\u5185\u7956\u5b89\u4eba\u201d \"Documented propensity\"\uff08\u6709\u636e\u53ef\u67e5\u7684\u503e\u5411\uff09 \u7528\u5b66\u672f\u8154\u8c03\u4f83\uff0c\u6697\u793a\u201c\u516c\u52a1\u5458\u6613\u6012\u201d\u5df2\u662f\u516c\u5f00\u73b0\u8c61\uff0c\u751a\u81f3\u53ef\u80fd\u88ab\u7814\u7a76\u7edf\u8ba1\u8fc7\u3002 \u7c7b\u4f3c\u4e2d\u6587\uff1a\u201c\u6709\u8bba\u6587\u652f\u6301\u201d\uff08\u5e7d\u9ed8\u5938\u5f20\uff09 / \u201c\u5927\u6570\u636e\u663e\u793a\u201d \"Snap\" \u7684\u7cbe\u51c6\u542b\u4e49 \u4e0d\u662f\u666e\u901a\u7684\u751f\u6c14\uff0c\u800c\u662f\u957f\u671f\u538b\u6291\u540e\u7684\u7a81\u7136\u5d29\u6e83\uff08\u50cf\u76ae\u7b4b\u7ef7\u65ad\uff09\u3002 \u7ecf\u5178\u573a\u666f\uff1a \u67dc\u53f0\u516c\u52a1\u5458\u7a81\u7136\u6454\u6587\u4ef6\uff1a\u201c\u8fd9\u8868\u4f60\u81ea\u5df1\u586b\uff01\u201d \u4ea4\u8b66\u5bf9\u8fdd\u89c4\u53f8\u673a\u5486\u54ee\uff1a\u201c\u4f60\u9a7e\u7167\u662f\u6447\u53f7\u6447\u6765\u7684\u5417\uff1f\uff01\u201d \u4f7f\u7528\u573a\u666f\u4e3e\u4f8b \u540c\u4e8b\u5410\u69fd\uff1a \"Why was the DMV lady yelling?\" \"Dude, civil servants have a documented propensity to snap.\" \uff08\u201c\u4e3a\u5565\u8f66\u7ba1\u6240\u5927\u59d0\u5728\u543c\uff1f\u201d\u201c\u8001\u5144\uff0c\u516c\u52a1\u5458\u6613\u6012\u662f\u79d1\u5b66\u4e8b\u5b9e\u3002\u201d\uff09 \u793e\u4f1a\u65b0\u95fb\u8bc4\u8bba\uff1a \"A clerk threw a printer at a customer. Study confirms: civil servants snap.\" \uff08\u201c\u804c\u5458\u7528\u6253\u5370\u673a\u7838\u987e\u5ba2\u3002\u7814\u7a76\u8bc1\u5b9e\uff1a\u516c\u52a1\u5458\u4f1a\u66b4\u8d70\u3002\u201d\uff09 \u81ea\u5632\uff1a \"I\u2019m a civil servant... my therapist documents my propensity to snap.\" \uff08\u201c\u6211\u662f\u516c\u52a1\u5458\u2026\u2026\u6211\u7684\u5fc3\u7406\u533b\u751f\u5728\u8bb0\u5f55\u6211\u7684\u70b8\u6bdb\u9891\u7387\u3002\u201d\uff09 \"Penny for your thoughts.\" \u7ffb\u8bd1\uff1a \u201c\u80fd\u544a\u8bc9\u6211\u4f60\u5728\u60f3\u4ec0\u4e48\u5417\uff1f\u201d / \u201c\u4e00\u5206\u94b1\u4e70\u4f60\u7684\u5fc3\u4e8b\u3002\u201d \uff08\u4e2d\u6587\u4fd7\u8bed\uff1a\u201c\u8bf4\u8bf4\u4f60\u7684\u5fc3\u91cc\u8bdd\uff1f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u8d77\u6e90\u4e0e\u5b57\u9762\u610f\u601d \u6e90\u81ea16\u4e16\u7eaa\u82f1\u56fd\uff0c\u5b57\u9762\u610f\u601d\u662f\u201c\u7528\u4e00\u5206\u94b1\u4e70\u4f60\u7684\u60f3\u6cd5\u201d\uff0c\u662f\u4e00\u79cd\u5e7d\u9ed8\u800c\u59d4\u5a49\u7684\u8be2\u95ee\u65b9\u5f0f\uff0c\u7c7b\u4f3c\u4e8e\u4e2d\u6587\u7684\u201c\u4e70\u4f60\u4e00\u53e5\u771f\u8bdd\u201d\u3002 \u6700\u521d\u53ef\u80fd\u6307\u7528\u786c\u5e01\u6362\u53d6\u7b97\u547d\u8005\u7684\u9884\u8a00\uff0c\u540e\u6765\u6f14\u53d8\u4e3a\u5173\u5fc3\u4ed6\u4eba\u5fc3\u4e8b\u7684\u8868\u8fbe\u3002 \u4f7f\u7528\u573a\u666f \u5173\u5fc3\u670b\u53cb\uff1a\u5bf9\u65b9\u770b\u8d77\u6765\u5fc3\u4e8b\u91cd\u91cd\u65f6\uff0c\u7528\u8fd9\u53e5\u8bdd\u6e29\u67d4\u8be2\u95ee\u3002 \"You\u2019ve been quiet all day\u2014penny for your thoughts?\" \uff08\u201c\u4f60\u4e00\u6574\u5929\u6ca1\u8bf4\u8bdd\u4e86\uff0c\u80fd\u544a\u8bc9\u6211\u4f60\u5728\u60f3\u4ec0\u4e48\u5417\uff1f\u201d\uff09 \u5e7d\u9ed8\u8c03\u4f83\uff1a\u5bf9\u65b9\u53d1\u5446\u6216\u8d70\u795e\u65f6\uff0c\u7528\u8fd9\u53e5\u8bdd\u6253\u8da3\u3002 \"Penny for your thoughts? Or is it a million-dollar idea?\" \uff08\u201c\u4e00\u5206\u94b1\u4e70\u4f60\u7684\u60f3\u6cd5\uff0c\u8fd8\u662f\u8bf4\u8fd9\u662f\u4e2a\u4ef7\u503c\u767e\u4e07\u7684\u70b9\u5b50\uff1f\u201d\uff09 \"Kissing? What kind of kissing? Cheeks, lips, chase, French?\" \u7ffb\u8bd1\uff1a \u201c\u63a5\u543b\uff1f\u54ea\u79cd\u543b\uff1f\u4eb2\u8138\u988a\u3001\u5634\u5507\u3001\u8ffd\u9010\u543b\u3001\u6cd5\u5f0f\u6df1\u543b\uff1f\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u4eb2\u4eb2\uff1f\u548b\u4eb2\uff1f\u8d34\u8138\u3001\u5634\u5bf9\u5634\u3001\u4f60\u8ffd\u6211\u8eb2\u3001\u820c\u543b\uff1f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 Kissing \u7684\u7ec6\u5206\u7c7b\u578b Cheeks\uff08\u8138\u988a\u543b\uff09\uff1a\u793c\u4eea\u6027\u8f7b\u543b\uff0c\u5e38\u89c1\u4e8e\u6b27\u6d32\u95ee\u5019\uff08\u5982\u6cd5\u56fd la bise\uff09\u3002 Lips\uff08\u5507\u543b\uff09\uff1a\u6d6a\u6f2b\u4f46\u514b\u5236\u7684\u8f7b\u543b\uff0c\u5982\u7ae5\u8bdd\u4e2d\u201c\u771f\u7231\u4e4b\u543b\u201d\u3002 Chase kiss\uff08\u8ffd\u9010\u543b\uff09\uff1a\u8c03\u76ae\u8eb2\u95ea\u7684\u8c03\u60c5\u543b\uff08\u4e00\u65b9\u8eb2\uff0c\u4e00\u65b9\u8ffd\uff09\u3002 French kiss\uff08\u6cd5\u5f0f\u543b\uff09\uff1a\u820c\u543b\u7684\u4ee3\u79f0\uff0c\u56e0\u6cd5\u56fd\u4eba\u201c\u6d6a\u6f2b\u201d\u7684\u523b\u677f\u5370\u8c61\u5f97\u540d\u3002 \u6587\u5316\u5dee\u5f02 \u543b\u7c7b\u578b \u897f\u65b9\u5e38\u89c1\u573a\u666f \u4e2d\u6587\u5bf9\u5e94\u6982\u5ff5 Cheeks \u670b\u53cb\u89c1\u9762\u8d34\u9762\u793c \u201c\u8d34\u8138\u4eb2\u201d/\u201c\u78b0\u8138\u201d Lips \u60c5\u4fa3\u65e5\u5e38\u8f7b\u543b \u201c\u5575\u4e00\u4e2a\u201d Chase \u8c03\u60c5/\u5f71\u89c6\u5267\u7ecf\u5178\u6865\u6bb5 \u201c\u8eb2\u732b\u732b\u4eb2\u201d French \u6210\u4eba\u5173\u7cfb\u4eb2\u5bc6\u884c\u4e3a \u201c\u820c\u543b\u201d/\u201c\u6df1\u543b\u201d \"At least now you can retrieve the black box from the twisted smouldering wreckage that was once your fantasy of dating her, and analyse the data so that you don\u2019t crash into geek mountain again.\" \u7ffb\u8bd1\uff1a \u201c\u81f3\u5c11\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f60\u90a3\u66fe\u7ecf\u7f8e\u597d\u7684\u2018\u8ffd\u5979\u5e7b\u60f3\u2019\u7684\u6b8b\u9ab8\u4e2d\u6316\u51fa\u9ed1\u5323\u5b50\uff0c\u5206\u6790\u6570\u636e\uff0c\u4ee5\u514d\u518d\u6b21\u649e\u4e0a\u2018\u6781\u5ba2\u5c71\u2019\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u81f3\u5c11\u4f60\u80fd\u4ece\u2018\u8ffd\u5979\u68a6\u2019\u7684\u5e9f\u589f\u91cc\u7ffb\u51fa\u8bb0\u5f55\u4eea\uff0c\u7814\u7a76\u4e0b\u4e3a\u5565\u53c8\u53cc\u53d2\u6ca6\u4e3a\u5355\u8eab\u72d7\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u201cBlack box\u201d\uff08\u9ed1\u5323\u5b50\uff09\u7684\u9690\u55bb \u539f\u6307\u98de\u673a\u8bb0\u5f55\u4e8b\u6545\u6570\u636e\u7684\u8bbe\u5907\uff0c\u6b64\u5904\u6bd4\u55bb\u201c\u590d\u76d8\u604b\u7231\u5931\u8d25\u539f\u56e0\u201d\u3002 \u4e2d\u6587\u7c7b\u4f3c\u8868\u8fbe\uff1a\u201c\u5403\u4e00\u5811\u957f\u4e00\u667a\u201d / \u201c\u5931\u8d25\u662f\u6210\u529f\u4e4b\u6bcd\u201d\uff08\u4f46\u66f4\u6280\u672f\u5b85\u98ce\uff09\u3002 \u201cTwisted smouldering wreckage\u201d\uff08\u626d\u66f2\u5192\u70df\u7684\u6b8b\u9ab8\uff09 \u5c06\u7834\u788e\u7684\u604b\u7231\u5e7b\u60f3\u6bd4\u4f5c\u7a7a\u96be\u73b0\u573a\uff0c\u5f3a\u8c03\u60e8\u70c8\u7a0b\u5ea6\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u6614\u65e5\u7f8e\u68a6\uff0c\u5982\u4eca\u7a00\u788e\u201d / \u201c\u7231\u60c5\u5df2\u6b7b\uff0c\u6709\u4e8b\u70e7\u7eb8\u201d\u3002 \u201cGeek mountain\u201d\uff08\u6781\u5ba2\u5c71\uff09 \u81ea\u5632\u6897\uff0c\u6307\u56e0\u6c89\u8ff7\u6280\u672f/\u5b85\u6587\u5316\uff08\u5982\u6e38\u620f\u3001\u52a8\u6f2b\u3001\u7f16\u7a0b\uff09\u800c\u5355\u8eab\u7684\u72b6\u6001\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u6ce8\u5b64\u751f\u201d / \u201c\u4e8c\u523a\u8788\u306e\u8bc5\u5492\u201d\u3002 \u4f7f\u7528\u573a\u666f\u4e3e\u4f8b \u670b\u53cb\u6bd2\u820c\u5b89\u6170\uff1a A: \"She said I care more about Python than her...\" B: \"Well, retrieve the black box from your wrecked fantasy and stop coding on dates!\" \uff08\u201c\u5979\u8bf4\u4f60\u7231Python\u80dc\u8fc7\u7231\u5979\uff1f\u8d76\u7d27\u4ece\u5e7b\u60f3\u6b8b\u9ab8\u91cc\u627e\u9ed1\u5323\u5b50\uff0c\u4e0b\u6b21\u7ea6\u4f1a\u522b\u518d\u5199\u4ee3\u7801\u4e86\uff01\u201d\uff09 \u81ea\u5632\u6587\u6848\uff1a \"My love life\u2019s crash site has enough black boxes to open a museum.\" \uff08\u201c\u6211\u7684\u60c5\u53f2\u6b8b\u9ab8\u91cc\u7684\u9ed1\u5323\u5b50\u80fd\u5f00\u535a\u7269\u9986\u4e86\u3002\u201d\uff09 \u804c\u573a\u9690\u55bb\uff1a \"After this project failed, we need to find its black box\u2014was it the budget or your Excel addiction?\" \uff08\u201c\u9879\u76ee\u9ec4\u4e86\uff0c\u5f97\u627e\u9ed1\u5323\u5b50\u2014\u2014\u662f\u9884\u7b97\u95ee\u9898\uff0c\u8fd8\u662f\u4f60Excel\u6210\u763e\uff1f\u201d\uff09 \"I don't think you have a shot there.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u89c9\u5f97\u4f60\u6ca1\u620f\u3002\u201d / \u201c\u4f60\u8fd9\u6ce2\u4f30\u8ba1\u8981\u51c9\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u522b\u60f3\u4e86\uff0c\u6839\u672c\u6ca1\u6307\u671b\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Have a shot\" \u7684\u6f5c\u53f0\u8bcd \u5b57\u9762\u610f\u601d\uff1a\u5f00\u67aa/\u5c04\u51fb \u2192 \u5f15\u7533\u4e3a\u201c\u5c1d\u8bd5\u7684\u673a\u4f1a\u201d\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u6709\u620f\u201d\u6216\u201c\u80dc\u7b97\u201d\uff0c\u4f46\u66f4\u5f3a\u8c03\u201c\u53ef\u80fd\u6027\u6781\u4f4e\u201d\u3002 \u4f7f\u7528\u573a\u666f \u604b\u7231\u8ffd\u6c42\uff1a A: \"I\u2019m gonna ask her out!\" B: \"Bro, I don\u2019t think you have a shot.\" \uff08\u201c\u5144\u5f1f\uff0c\u4f60\u8ffd\u5979\uff1f\u7b97\u4e86\u5427\u3002\u201d\uff09 \"I'm a bit of a self-taught expert.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u7b97\u662f\u81ea\u5b66\u6210\u624d\u7684\u4e13\u5bb6\u5427\u3002\u201d / \u201c\u54b1\u8fd9\u6280\u672f\uff0c\u7eaf\u5c5e\u91ce\u8def\u5b50\u51fa\u8eab\u3002\u201d \uff08\u6216\u66f4\u51e1\u5c14\u8d5b\uff1a\u201c\u7565\u61c2\uff0c\u90fd\u662f\u81ea\u5df1\u778e\u7422\u78e8\u7684\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Self-taught expert\" \u7684\u6f5c\u53f0\u8bcd \u81ea\u8c6a\u611f\uff1a\u5f3a\u8c03\u4e0d\u9760\u6b63\u89c4\u6559\u80b2\uff0c\u5168\u9760\u4e2a\u4eba\u52aa\u529b\u3002 \u8c26\u865a\u5305\u88c5\uff1a\u7528 a bit of\uff08\u4e00\u70b9\u70b9\uff09\u6de1\u5316\u70ab\u8000\u611f\uff0c\u4f46\u5b9e\u9645\u6697\u793a\u201c\u6211\u5f88\u725b\u201d\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u6c11\u95f4\u5927\u795e\u201d / \u201c\u571f\u6cd5\u70bc\u94a2\u578b\u9ad8\u624b\u201d\u3002 \"Featuring the talents of...\" \u76f4\u8bd1\uff1a \u201c\u7531\u2026\u2026\u7684\u624d\u534e\u51fa\u6f14\u201d / \u201c\u7279\u9080\u2026\u2026\u503e\u60c5\u732e\u827a\u201d \u610f\u8bd1\uff1a \u201c\u7531\u2026\u2026\u4e3b\u6f14\u201d / \u201c\u9886\u8854\u4e3b\u6f14\uff1a\u2026\u2026\u201d \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u62c6\u89e3 Feature\uff1a\u5728\u5f71\u89c6/\u97f3\u4e50\u9886\u57df\u6307\u201c\u4ee5\u2026\u2026\u4e3a\u7279\u8272\u201d\u3002 Talents\uff1a\u6b64\u5904\u6307\u201c\u660e\u661f\u6f14\u5458/\u827a\u4eba\u201d\uff0c\u800c\u975e\u5b57\u9762\u201c\u624d\u80fd\u201d\u3002 \u7ec4\u5408\u6548\u679c\uff1a\u59d4\u5a49\u8868\u8fbe\u201c\u5927\u724c\u53c2\u6f14\u201d\uff0c\u5e38\u89c1\u4e8e\u6d77\u62a5\u3001\u5ba3\u4f20\u7a3f\u3002 \u4f7f\u7528\u573a\u666f \u5f71\u89c6\u5ba3\u4f20\uff1a \"This film features the talents of Tom Hanks and Meryl Streep.\" \uff08\u201c\u672c\u7247\u7531\u6c64\u59c6\u00b7\u6c49\u514b\u65af\u4e0e\u6885\u4e3d\u5c14\u00b7\u65af\u7279\u91cc\u666e\u4e3b\u6f14\u3002\u201d\uff09 \u97f3\u4e50\u4e13\u8f91\uff1a \"The album features the talents of Jay-Z and Beyonc\u00e9.\" \uff08\u201c\u4e13\u8f91\u7279\u9080Jay-Z\u548c\u78a7\u6602\u4e1d\u732e\u58f0\u3002\u201d\uff09 \u8bbd\u523a\u8c03\u4f83\uff1a \"The school play features the \u2018talents\u2019 of my tone-deaf nephew.\" \uff08\u201c\u6821\u5267\u2018\u7279\u9080\u2019\u6211\u4e94\u97f3\u4e0d\u5168\u7684\u4f84\u5b50\u2018\u732e\u827a\u2019\u3002\u201d\uff09 \"On the plus side...\" \u7ffb\u8bd1\uff1a \u201c\u5f80\u597d\u5904\u60f3\u2026\u2026\u201d / \u201c\u6362\u4e2a\u89d2\u5ea6\u4e5f\u6709\u4f18\u70b9\u2026\u2026\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u597d\u6b79\u2026\u2026\u201d / \u201c\u9000\u4e00\u4e07\u6b65\u8bf4\u2026\u2026\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u529f\u80fd \u7528\u4e8e\u5e73\u8861\u8d1f\u9762\u60c5\u5883\uff0c\u5728\u574f\u4e8b\u4e2d\u627e\u51fa\u79ef\u6781\u56e0\u7d20\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u4e0d\u5e78\u4e2d\u7684\u4e07\u5e78\u201d\uff0c\u4f46\u66f4\u8f7b\u677e\u968f\u610f\u3002 \u4f7f\u7528\u573a\u666f \u8d1f\u9762\u60c5\u5883 On the plus side... \u7684\u79ef\u6781\u8f6c\u6298 \u4e2d\u6587\u5bf9\u5e94 \"My flight was canceled.\" \"On the plus side, I got hotel vouchers!\" \u201c\u822a\u73ed\u53d6\u6d88\uff0c\u4f46\u767d\u5ad6\u4e86\u9152\u5e97\u3002\u201d \"I failed the exam.\" \"On the plus side, now I know what to study.\" \u201c\u6302\u79d1\u4e86\uff0c\u81f3\u5c11\u77e5\u9053\u8be5\u590d\u4e60\u5565\u3002\u201d \"My date ghosted me.\" \"On the plus side, I saved $200 on dinner.\" \u201c\u88ab\u653e\u9e3d\u5b50\uff0c\u7701\u4e86\u987f\u996d\u94b1\u3002\u201d \u76f4\u63a5\u53cd\u4e49\u77ed\u8bed \u82f1\u6587 \u4e2d\u6587\u7ffb\u8bd1 \u4f7f\u7528\u573a\u666f \"On the downside...\" \u201c\u7f3a\u70b9\u662f\u2026\u2026\u201d \u5ba2\u89c2\u5217\u4e3e\u5f0a\u7aef\uff08\u4e2d\u6027\u8bed\u6c14\uff09 \"On the minus side...\" \u201c\u4e0d\u5229\u7684\u662f\u2026\u2026\u201d \u6b63\u5f0f\u62a5\u544a/\u6570\u636e\u5206\u6790 \"The bad news is...\" \u201c\u574f\u6d88\u606f\u662f\u2026\u2026\u201d \u5e7d\u9ed8\u6216\u620f\u5267\u6027\u8f6c\u6298 \"Would I be bound by Asimov's Three Laws of Robotics?\" \u7ffb\u8bd1\uff1a \u201c\u6211\u9700\u8981\u9075\u5b88\u963f\u897f\u83ab\u592b\u7684\u673a\u5668\u4eba\u4e09\u5b9a\u5f8b\u5417\uff1f\u201d \"Be bound\" \u7ffb\u8bd1\uff1a \u201c\u53d7\u7ea6\u675f\u201d / \u201c\u5fc5\u987b\u9075\u5b88\u201d \uff08\u6839\u636e\u8bed\u5883\u53ef\u8bd1\u4e3a\uff1a\u201c\u53d7\u9650\u4e8e\u201d\u3001\u201c\u6ce8\u5b9a\u201d\u3001\u201c\u7ed1\u5b9a\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u6cd5\u5f8b/\u89c4\u5219\uff1a\u6307\u88ab\u6761\u6b3e\u3001\u5408\u540c\u6216\u9053\u5fb7\u51c6\u5219\u5f3a\u5236\u7ea6\u675f\u3002 \"The contract binds us to secrecy.\" \uff08\u201c\u5408\u540c\u8981\u6c42\u6211\u4eec\u5fc5\u987b\u4fdd\u5bc6\u3002\u201d\uff09 \u7269\u7406/\u6280\u672f\uff1a\u6307\u88ab\u7269\u7406\u6027\u6346\u7ed1\u6216\u7cfb\u7edf\u5f3a\u5236\u9650\u5236\u3002 \"The data is bound to the server.\" \uff08\u201c\u6570\u636e\u88ab\u7ed1\u5b9a\u5728\u670d\u52a1\u5668\u4e0a\u3002\u201d\uff09 \u547d\u8fd0/\u5fc5\u7136\u6027\uff1a\u8868\u8fbe\u4e0d\u53ef\u907f\u514d\u7684\u7ed3\u679c\u3002 \"He was bound to fail.\" \uff08\u201c\u4ed6\u6ce8\u5b9a\u5931\u8d25\u3002\u201d\uff09 \"You're in for a treat.\" \u7ffb\u8bd1\uff1a \u201c\u4f60\u6709\u597d\u620f\u770b\u4e86\uff01\u201d / \u201c\u4f60\u8981\u8d70\u8fd0\u4e86\uff01\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u51c6\u5907\u597d\u60ca\u559c\u5427\uff01\u201d / \u201c\u4f60\u8981\u4e50\u5f00\u82b1\u5566\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u79ef\u6781\u60ca\u559c\uff1a\u6697\u793a\u5bf9\u65b9\u5373\u5c06\u4f53\u9a8c\u8d85\u9884\u671f\u7684\u597d\u4e8b\uff08\u5982\u7f8e\u98df\u3001\u8868\u6f14\u3001\u793c\u7269\uff09\u3002 \u5e7d\u9ed8\u60ac\u5ff5\uff1a\u53ef\u80fd\u4f34\u968f\u6076\u4f5c\u5267\uff08\u5982\u201c\u60ca\u559c\u201d\u53d8\u201c\u60ca\u5413\u201d\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587\u4f8b\u53e5 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u7f8e\u98df\u63a8\u8350 \"Try this cake\u2014you\u2019re in for a treat!\" \u201c\u5c1d\u5c1d\u8fd9\u86cb\u7cd5\uff0c\u5305\u4f60\u53eb\u7edd\uff01\u201d \u6f14\u51fa\u9884\u544a \"Wait till you see the magic trick. You\u2019re in for a treat!\" \u201c\u63a5\u4e0b\u6765\u8fd9\u4e2a\u9b54\u672f\uff0c\u8ba9\u4f60\u5927\u5f00\u773c\u754c\uff01\u201d \u53cd\u8bed\u8c03\u4f83 \"Mom\u2019s making \u2018special\u2019 pancakes... you\u2019re in for a treat.\" \u201c\u8001\u5988\u8981\u505a\u2018\u79d8\u5236\u2019\u714e\u997c\u2026\u4f60\u81ea\u6c42\u591a\u798f\u5427\u3002\u201d \u4e2d\u6587\u5bf9\u5e94\u8868\u8fbe \u6b63\u80fd\u91cf\u7248\uff1a\u201c\u4f60\u6709\u53e3\u798f/\u773c\u798f\u4e86\uff01\u201d \u60ac\u5ff5\u7248\uff1a\u201c\u63a5\u4e0b\u6765\uff0c\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\uff01\u201d \u9634\u9633\u602a\u6c14\u7248\uff1a\u201c\u563f\u563f\uff0c\u4f60\u7b49\u7740\u2018\u60ca\u559c\u2019\u5427~\u201d \"Take into account\" \u7684\u6f5c\u53f0\u8bcd \u6b63\u5f0f\u573a\u666f\uff1a\u533b\u751f/\u6559\u7ec3\u8868\u793a\u5df2\u8c03\u6574\u65b9\u6848\uff08\u5982\u51cf\u5c11\u5267\u70c8\u8fd0\u52a8\uff09\u3002 \"Your training plan takes your asthma into account.\" \uff08\u201c\u4f60\u7684\u8bad\u7ec3\u8ba1\u5212\u5df2\u8003\u8651\u54ee\u5598\u56e0\u7d20\u3002\u201d\uff09 \u65e5\u5e38\u5173\u6000\uff1a\u670b\u53cb\u63d0\u9192\u907f\u514d\u8fc7\u654f\u539f\uff08\u5982\u201c\u805a\u4f1a\u6ca1\u4e70\u82b1\u751f\u201d\uff09\u3002 \u8bbd\u523a\u7528\u6cd5\uff1a\u5bf9\u65b9\u62ff\u54ee\u5598\u5f53\u501f\u53e3\u65f6\u7ffb\u65e7\u8d26\uff08\"Oh, I \u2018took it into account\u2019 when you skipped chores!\"\uff09\u3002 Did we say a time?\" \u7ffb\u8bd1\uff1a \u201c\u6211\u4eec\u7ea6\u65f6\u95f4\u4e86\u5417\uff1f\u201d / \u201c\u5177\u4f53\u51e0\u70b9\u6765\u7740\uff1f\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u54b1\u8bf4\u597d\u51e0\u70b9\u78b0\u5934\u6ca1\uff1f\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u786e\u8ba4\u662f\u5426\u5df2\u7ea6\u5b9a\u5177\u4f53\u65f6\u95f4\uff0c\u5e38\u89c1\u4e8e\uff1a \u5065\u5fd8\uff1a\u771f\u5fd8\u4e86\uff08\u5c24\u5176\u82f1\u8bed\u6bcd\u8bed\u8005\u5e38\u7528 \"Did we...\" \u4ee3\u66ff \"Have we...\"\uff09\u3002 \u59d4\u5a49\u50ac\u4fc3\uff1a\u6697\u793a\u5bf9\u65b9\u8be5\u5b9a\u65f6\u95f4\u4e86\uff08\u5982\u201c\u60a8\u5012\u662f\u8bf4\u4e2a\u70b9\u513f\u554a\uff01\u201d\uff09\u3002 \"For that dense molecular cloud of Aramis to dissipate.\" \u7ffb\u8bd1\uff1a \u201c\u8981\u8ba9\u963f\u62c9\u7c73\u65af\u90a3\u56e2\u6d53\u5bc6\u7684\u5206\u5b50\u4e91\u6563\u5f00\u3002\u201d \uff08\u6216\u66f4\u6587\u827a\uff1a\u201c\u5f85\u963f\u62c9\u7c73\u65af\u4e4b\u6d4a\u4e91\u6d88\u6563\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u79d1\u5b66\u9690\u55bb \u5206\u5b50\u4e91\uff08Molecular Cloud\uff09\uff1a\u5929\u6587\u5b66\u4e2d\u6052\u661f\u8bde\u751f\u7684\u6df7\u6c8c\u533a\u57df\uff0c\u6b64\u5904\u6bd4\u55bb \u201c\u963f\u62c9\u7c73\u65af\uff08Aramis\uff09\u7684\u6df7\u4e71/\u56fa\u6267/\u4e0d\u900f\u660e\u72b6\u6001\u201d\u3002 Dissipate\uff08\u6d88\u6563\uff09\uff1a\u6697\u793a\u9700\u8981\u65f6\u95f4\u6216\u5916\u529b\u5e72\u9884\u624d\u80fd\u7406\u6e05\u95ee\u9898\u3002 \"If it should ever come up...\" \u7ffb\u8bd1\uff1a \u201c\u4e07\u4e00\u6709\u4eba\u63d0\u8d77\u2026\u2026\u201d / \u201c\u5982\u679c\u8fd9\u4e8b\u88ab\u7ffb\u51fa\u6765\u2026\u2026\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u8981\u662f\u54ea\u5929\u6709\u4eba\u95ee\u8d77\u2026\u2026\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u6838\u5fc3\u542b\u4e49 \u9884\u9632\u6027\u94fa\u57ab\uff1a\u4e3a\u654f\u611f/\u5c34\u5c2c\u8bdd\u9898\u63d0\u524d\u51c6\u5907\u56de\u5e94\u3002 \u4f4e\u6982\u7387\u4e8b\u4ef6\uff1a\u6697\u793a\u95ee\u9898\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u63d0\u53ca\uff08\u4f46\u5f97\u9632\u4e00\u624b\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u804c\u573a\u7529\u9505 \"If it should ever come up, say the data was \u2018lost in transit\u2019.\" \u201c\u4e07\u4e00\u9886\u5bfc\u95ee\uff0c\u5c31\u8bf4\u6570\u636e\u2018\u4f20\u8f93\u4e22\u5931 \"This kicks off a rather unpleasant six months.\" \u7ffb\u8bd1\uff1a \u201c\u63a5\u4e0b\u6765\u8fd9\u516d\u4e2a\u6708\u4f1a\u76f8\u5f53\u96be\u71ac\u3002\u201d / \u201c\u8fd9\u5c31\u5f00\u542f\u4e86\u75db\u82e6\u7684\u534a\u5e74\u65f6\u5149\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u597d\u65e5\u5b50\u5230\u5934\u4e86\uff0c\u51c6\u5907\u71ac\u534a\u5e74\u5427\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Kicks off\" \u7684\u52a8\u6001\u611f \u539f\u6307\u8db3\u7403\u5f00\u7403\uff0c\u5f15\u7533\u4e3a\u201c\u4e0d\u60c5\u613f\u5730\u542f\u52a8\u67d0\u4e8b\u201d\uff0c\u6697\u542b\u201c\u88ab\u8feb\u5377\u5165\u201d\u7684\u65e0\u5948\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u62c9\u5f00\u5e8f\u5e55\u201d\uff08\u4e2d\u6027\uff09 / \u201c\u5669\u68a6\u5f00\u59cb\u201d\uff08\u6d88\u6781\uff09\u3002 \u533b\u7597\u60c5\u5883\uff1a \"The doctor said recovery takes six months... this kicks off a rather unpleasant journey.\" \uff08\u201c\u533b\u751f\u8bf4\u8981\u6062\u590d\u534a\u5e74\u2026\u82e6\u65e5\u5b50\u5f00\u59cb\u4e86\u3002\u201d\uff09 \u804c\u573a\u5410\u69fd\uff1a \"New CEO announced \u2018efficiency reforms\u2019\u2014yep, this kicks off six months of hell.\" \uff08\u201c\u65b0CEO\u8981\u2018\u6539\u9769\u2019\u2014\u2014\u5f97\uff0c\u63a5\u4e0b\u6765\u534a\u5e74\u522b\u60f3\u597d\u8fc7\u3002\u201d\uff09 \u672b\u65e5\u9884\u8a00\uff1a \"The asteroid\u2019s six months out... and so is my will to live.\" \uff08\u201c\u5c0f\u884c\u661f\u534a\u5e74\u540e\u649e\u5730\u7403\u2026\u6211\u7684\u6c42\u751f\u6b32\u4e5f\u5dee\u4e0d\u591a\u5230\u671f\u4e86\u3002\u201d\uff09 \"This thing is going the distance.\" \u7ffb\u8bd1\uff1a \u201c\u8fd9\u4e8b\u8981\u6b7b\u78d5\u5230\u5e95\u4e86\u3002\u201d / \u201c\u8fd9\u573a\u8f83\u91cf\u4f1a\u6301\u7eed\u5230\u6700\u540e\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u4e0d\u5206\u80dc\u8d1f\u4e0d\u7f62\u4f11\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Going the distance\" \u7684\u8d77\u6e90 \u6e90\u81ea\u62f3\u51fb\u672f\u8bed\uff0c\u6307\u201c\u6253\u6ee1\u5168\u573a\u56de\u5408\u201d\uff08\u901a\u5e3812\u56de\u5408\uff09\uff0c\u5f15\u7533\u4e3a\u575a\u6301\u5230\u6781\u9650\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u8840\u6218\u5230\u5e95\u201d / \u201c\u62fc\u5230\u5f39\u5c3d\u7cae\u7edd\u201d\u3002 \"I'll just tell her that you had a routine colonoscopy and haven't quite bounced back.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u5c31\u8ddf\u5979\u8bf4\u4f60\u521a\u505a\u5b8c\u5e38\u89c4\u80a0\u955c\uff0c\u8fd8\u6ca1\u5b8c\u5168\u6062\u590d\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u6211\u5c31\u8bf4\u4f60\u80a0\u955c\u68c0\u67e5\u5b8c\uff0c\u4eba\u8fd8\u865a\u7740\u5462~\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Routine colonoscopy\"\uff08\u5e38\u89c4\u80a0\u955c\uff09 \u6b27\u7f8e50\u5c81\u4ee5\u4e0a\u4eba\u7fa4\u5e38\u89c4\u4f53\u68c0\u9879\u76ee\uff0c\u4e2d\u6587\u4fd7\u79f0\u201c\u80a0\u80c3\u955c\u201d\u3002 \u5e38\u88ab\u7528\u4f5c\u8bf7\u5047/\u9003\u907f\u793e\u4ea4\u7684\u4e07\u80fd\u501f\u53e3\uff08\u56e0\u6d89\u53ca\u9690\u79c1\uff0c\u5c11\u6709\u4eba\u8ffd\u95ee\u7ec6\u8282\uff09\u3002 \"Haven't quite bounced back\" \u5b57\u9762\uff1a\u672a\u5b8c\u5168\u6062\u590d\uff08bounce back \u50cf\u7403\u5f39\u56de\uff0c\u55bb\u6307\u6062\u590d\u6d3b\u529b\uff09\u3002 \u6f5c\u53f0\u8bcd\uff1a \u771f\u4e0d\u9002\uff1a\u68c0\u67e5\u540e\u53ef\u80fd\u8179\u80c0\u3001\u4e4f\u529b\u3002 \u5047\u4e0d\u9002\uff1a\u59d4\u5a49\u62d2\u7edd\u7684\u501f\u53e3\uff08\u5982\u4e0d\u60f3\u53c2\u52a0\u56e2\u5efa\uff09\u3002 \u573a\u666f \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u771f\u5b9e\u533b\u7597 \"The sedation takes 24 hours to wear off.\" \u201c\u9ebb\u9189\u836f\u6548\u5f97\u4e00\u5929\u624d\u9000\u3002\u201d \u804c\u573a\u7cca\u5f04 \"Just say you\u2019re \u2018recovering\u2019\u2014no one asks follow-ups.\" \u201c\u8bf4\u2018\u8c03\u517b\u4e2d\u2019\uff0c\u6ca1\u4eba\u6562\u7ec6\u95ee\uff01\u201d \u5bb6\u5ead\u8c0e\u8a00 \"Mom, colonoscopy is code for \u2018hangover\u2019.\" \u201c\u5988\uff0c\u2018\u80a0\u955c\u2019\u5c31\u662f\u2018\u5bbf\u9189\u2019\u7684\u6697\u53f7\u3002\u201d \"We do have a chocolate key lime that\u2019s moving pretty well.\" \u7ffb\u8bd1\uff1a \u201c\u6211\u4eec\u786e\u5b9e\u6709\u4e00\u6b3e\u5de7\u514b\u529b\u9752\u67e0\u6d3e\uff0c\u5356\u5f97\u633a\u706b\u3002\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u5de7\u514b\u529b\u9752\u67e0\u5473\u513f\u7684\uff0c\u73b0\u5728\u8d70\u91cf\u8d3c\u5feb\uff01\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Key lime\"\uff08\u9752\u67e0\u6d3e\uff09 \u7f8e\u56fd\u7ecf\u5178\u751c\u70b9\uff0c\u7528\u4f5b\u7f57\u91cc\u8fbe\u9752\u67e0\uff08Key lime\uff09\u5236\u4f5c\uff0c\u901a\u5e38\u914d\u5976\u6cb9\u6216\u5de7\u514b\u529b\u3002 \u4e2d\u6587\u5e38\u76f4\u8bd1\u4e3a\u201c\u9752\u67e0\u6d3e\u201d\uff0c\u4f46\u9700\u52a0\u8bf4\u660e\uff08\u56e0\u56fd\u5185\u8f83\u5c11\u89c1\uff09\u3002 \"Moving pretty well\" \u5546\u4e1a\u884c\u8bdd\uff0c\u6307\u201c\u9500\u91cf\u4e0d\u9519\u201d\uff08= selling fast\uff09\u3002 \u7c7b\u4f3c\u4e2d\u6587\uff1a\u201c\u8d70\u91cf\u5feb\u201d / \u201c\u5356\u7206\u4e86\u201d / \u201c\u7545\u9500\u6b3e\u201d\u3002 A: \"Centrifugal\uff08/sen\u02c8tr\u026afj\u0259\u0261l/\uff09 force!\" B: \"Actually, it\u2019s centripetal\uff08/sen\u02c8tr\u026ap\u026atl/\uff09 force, which is an inward force generated by the glass acting on the olive.\"","title":"\u53e5\u5b50"},{"location":"art/English/tv/bigbang/s01/e04/s01e04/","text":"\u53f0\u8bcd \u624b\u6253\u53f0\u8bcd \u751f\u8bcd roadblock \u8def\u969c suffice \u8db3\u591f sabbatical scrambled eggs \u53e5\u5b50 \"Put it on the back burner.\" \u7ffb\u8bd1\uff1a \u201c\u5148\u6401\u7f6e\u4e00\u8fb9\u201d / \u201c\u6682\u65f6\u7f13\u7f13\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u653e\u4e00\u653e\uff0c\u4e0d\u6025\u3002\u201d / \u201c\u5148\u6254\u51b0\u7bb1\u91cc\uff0c\u7b49\u4f1a\u513f\u518d\u7092\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u6765\u6e90 \u6e90\u81ea\u53a8\u623f\u7076\u5177\uff1a\u524d\u7076\uff08front burner\uff09\u706b\u529b\u731b\uff08\u4f18\u5148\u5904\u7406\uff09\uff0c\u540e\u7076\uff08back burner\uff09\u5c0f\u706b\u6162\u7096\uff08\u6b21\u8981\u4efb\u52a1\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u9879\u76ee\u7ba1\u7406 \"Let\u2019s put the redesign on the back burner.\" \u201c\u754c\u9762\u6539\u7248\u5148\u653e\u4e00\u653e\u3002\u201d \u5bb6\u5ead\u51b3\u7b56 \"Mom, can we back-burner the piano lessons?\" \u201c\u5988\uff0c\u94a2\u7434\u8bfe\u80fd\u7f13\u7f13\u5417\uff1f\u201d \u62d6\u5ef6\u6218\u672f \"He \u2018back-burnered\u2019 my request for 6 months.\" \u201c\u4ed6\u628a\u6211\u9700\u6c42\u667e\u4e86\u534a\u5e74\uff01\u201d Each one dumbed down to accommodate the duration of an average bowel movement.\" \u7ffb\u8bd1\uff1a \u201c\u6bcf\u6761\u5185\u5bb9\u90fd\u7b80\u5316\u5230\u9002\u5408\u666e\u901a\u4eba\u4e0a\u5395\u6240\u7684\u65f6\u95f4\u8bfb\u5b8c\u3002\u201d \uff08\u6216\u66f4\u76f4\u767d\uff1a\u201c\u6bcf\u6761\u4fe1\u606f\u90fd\u964d\u667a\u5230\u62c9\u6ce1\u5c4e\u7684\u529f\u592b\u5c31\u80fd\u770b\u61c2\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Dumbed down\"\uff08\u964d\u667a\u5316\uff09 \u6307\u523b\u610f\u7b80\u5316\u5185\u5bb9\uff0c\u751a\u81f3\u727a\u7272\u51c6\u786e\u6027\u4ee5\u9002\u5e94\u4f4e\u8ba4\u77e5\u6c34\u5e73\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u6ce8\u6c34\u201d / \u201c\u5feb\u9910\u5316\u201d / \u201c\u63a5\u5730\u6c14\u63a5\u5230\u5730\u5e9c\u201d\u3002 \"Duration of a bowel movement\"\uff08\u6392\u4fbf\u65f6\u957f\uff09 \u897f\u65b9\u7814\u7a76\u663e\u793a\u5e73\u5747\u65f6\u957f\uff1a3-10\u5206\u949f\uff08\u624b\u673a\u5237\u5c4f\u9ec4\u91d1\u65f6\u95f4\uff09\u3002 \u4e2d\u6587\u5e7d\u9ed8\u8868\u8fbe\uff1a\u201c\u8e72\u5751\u65f6\u957f\u201d / \u201c\u5e26\u85aa\u5982\u5395\u6807\u51c6\u65f6\u201d\u3002 \u8bbd\u523a\u5bf9\u8c61 \u77ed\u89c6\u9891\u5e73\u53f0\uff08TikTok/\u6296\u97f3\uff09\u7684\u201c15\u79d2\u77e5\u8bc6\u80f6\u56ca\u201d\u3002 \u5395\u6240\u8bfb\u7269\uff08\u5982\u300a\u7537\u4eba\u88c5\u300b\u6742\u5fd7\u788e\u7247\u5316\u6392\u7248\uff09\u3002 \"With all due respect...\" \u7ffb\u8bd1\uff1a \u201c\u6055\u6211\u76f4\u8a00\u2026\u2026\u201d / \u201c\u65e0\u610f\u5192\u72af\uff0c\u4f46\u2026\u2026\u201d \uff08\u6216\u66f4\u7280\u5229\uff1a\u201c\u4e0d\u662f\u6211\u8bf4\u4f60\u2026\u2026\u201d / \u201c\u7ed9\u8138\u4e86\uff0c\u6211\u8fd8\u662f\u8981\u8bf4\u2026\u2026\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u8868\u9762\u793c\u8c8c\uff0c\u5b9e\u5219\u5f00\u70ae \u5b57\u9762\u610f\u601d\u662f\u201c\u7ed9\u4e88\u5e94\u6709\u7684\u5c0a\u91cd\u201d\uff0c\u5b9e\u9645\u7528\u4e8e\u94fa\u57ab\u5c16\u9510\u6279\u8bc4\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u6709\u53e5\u8bdd\u4e0d\u77e5\u5f53\u8bb2\u4e0d\u5f53\u8bb2\u201d\uff08\u7136\u540e\u5fc5\u8bb2\u96be\u542c\u8bdd\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u804c\u573a\u603c\u9886\u5bfc \"With all due respect, this plan is garbage.\" \u201c\u9886\u5bfc\uff0c\u8fd9\u65b9\u6848\u771f\u4e0d\u884c\u3002\u201d \u5bb6\u5ead\u8fa9\u8bba \"Mom, with all due respect, your tofu could break teeth.\" \u201c\u5988\uff0c\u60a8\u8fd9\u8c46\u8150\u80fd\u7ec3\u7259\u53e3\u3002\u201d \u653f\u5ba2\u4e92\u6495 \"With all due respect, the senator is lying.\" \u201c\u8bae\u5458\u5148\u751f\uff0c\u60a8\u8fd9\u662f\u7741\u773c\u8bf4\u778e\u8bdd\u3002\u201d \"Vis-\u00e0-vis\"\uff08\u5173\u4e8e\uff09 \u6cd5\u8bed\u501f\u8bcd\uff0c\u5b66\u672f\u88c5X\u4e13\u7528\uff0c\u7c7b\u4f3c\u4e2d\u6587\u201c\u5c31\u2026\u2026\u800c\u8a00\u201d\u3002 \u65e5\u5e38\u5bf9\u8bdd\u7528 \"regarding\" \u66f4\u81ea\u7136\uff0c\u6b64\u5904\u663e\u523b\u610f\u8f83\u771f\u3002 \"Decades\"\uff08\u51e0\u5341\u5e74\uff09\u7684\u51b2\u51fb\u529b \u897f\u65b9\u5e38\u7528\u5938\u5f20\u8868\u8fbe\uff08\u53ef\u80fd\u5b9e\u9645\u4ec55-10\u5e74\uff09\uff0c\u7a81\u51fa\u201c\u82e6\u71ac\u5df2\u4e45\u201d\u7684\u8f9b\u9178\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u534a\u8f88\u5b50\u6ca1\u4f11\u606f\u201d / \u201c\u71ac\u5230\u5730\u8001\u5929\u8352\u201d\u3002 \"Savor\"\uff08\u54c1\u5473\uff09\u7684\u6df1\u5c42\u542b\u4e49 \u4e0d\u6b62\u662f\u201c\u4eab\u53d7\u201d\uff0c\u66f4\u5f3a\u8c03\u73cd\u60dc\u8f6c\u77ac\u5373\u901d\u7684\u653e\u677e\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u7ec6\u54c1\u201d\uff08\u5982\u201c\u7ec8\u4e8e\u80fd\u7ec6\u54c1\u4e00\u676f\u5496\u5561\u4e86\u201d\uff09\u3002 She says that free-range chickens taste much better than factory-farmed ones \u8d70\u5730\u9e21 \u5982\u679c\u4f60\u542c\u8bf4\u67d0\u4eba\u5728\u516c\u53f8\u88ab\u89e3\u96c7\u4e86,\u4f60\u53ef\u4ee5\u8bf4:\u201cHe got canned.\u201d \u6216\u8005 \u201cHe got laid off. \"Oh, I\u2019m sorry, did I insult you? Is your body mass somehow tied into your self-worth?\" \u7ffb\u8bd1\uff1a \u201c\u54e6\u62b1\u6b49\uff0c\u6211\u5192\u72af\u5230\u4f60\u4e86\uff1f\u96be\u9053\u4f60\u7684\u81ea\u6211\u4ef7\u503c\u8fd8\u548c\u4f53\u91cd\u6302\u94a9\u4e86\uff1f\u201d \u201can impossibility that nature will quickly resolve into death, mutilation\u201d\uff1a \u201can impossibility\u201d \u662f\u5bf9\u524d\u9762 \u201cwe\u2019ll be occupying the same space as that Buick in front of us\u201d \u8fd9\u79cd\u60c5\u51b5\u7684\u8bc4\u4ef7\uff0c\u5373\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u662f \u201c\u4e0d\u53ef\u80fd\u7684\u4e8b\u201d \u3002 \u201cthat nature will quickly resolve into death, mutilation\u201d \u662f\u4e00\u4e2a\u5b9a\u8bed\u4ece\u53e5\uff0c\u4fee\u9970\u5148\u884c\u8bcd \u201can impossibility\u201d \u3002 \u5728\u8fd9\u4e2a\u5b9a\u8bed\u4ece\u53e5\u4e2d\uff0c\u201cresolve into\u201d \u662f\u4e00\u4e2a\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u5206\u89e3\u4e3a\uff1b\u8f6c\u5316\u4e3a\u201d \uff0c\u8fd9\u91cc \u201cnature will quickly resolve into death, mutilation\u201d \u8868\u793a \u201c\u5927\u81ea\u7136\u4f1a\u8fc5\u901f\u5730\u5c06\u8fd9\u79cd\uff08\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff09\u8f6c\u5316\u4e3a\u6b7b\u4ea1\u548c\u4f24\u6b8b\u201d \uff0c\u201cnature\u201d \u5728\u8fd9\u91cc\u53ef\u4ee5\u7406\u89e3\u4e3a\u81ea\u7136\u89c4\u5f8b\u3001\u5ba2\u89c2\u60c5\u51b5\u7b49\u3002 \u6574\u53e5\u8bdd\u5927\u81f4\u610f\u601d\u662f\uff1a\u6211\u4eec\u5c06\u4f1a\u548c\u6211\u4eec\u524d\u9762\u7684\u90a3\u8f86\u522b\u514b\u8f66\u5904\u4e8e\u76f8\u540c\u7684\u7a7a\u95f4\u4f4d\u7f6e\uff0c\u800c\u8fd9\u662f\u4e00\u79cd\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u81ea\u7136\u89c4\u5f8b\u4f1a\u8fc5\u901f\u5730\u5c06\u8fd9\u79cd\u60c5\u51b5\u6f14\u53d8\u6210\u6b7b\u4ea1\u548c\u4f24\u6b8b\uff08\u5373\u8fd9\u79cd\u5371\u9669\u7684\u60c5\u51b5\u5fc5\u7136\u4f1a\u4ee5\u6b7b\u4ea1\u548c\u4f24\u6b8b\u544a\u7ec8\uff09\u3002 \u201cMum\u2019s the word\u201d \u662f\u4e00\u4e2a\u6e90\u81ea\u82f1\u8bed\u6587\u5316\u7684\u4e60\u8bed\u3002\u201cmum\u201d \u5728\u8fd9\u91cc\u7528\u4f5c\u62df\u58f0\u8bcd\uff0c\u6a21\u4eff\u5634\u5df4\u95ed\u7d27\u4e0d\u53d1\u51fa\u58f0\u97f3\u7684\u72b6\u6001\uff0c\u5c31\u50cf\u628a\u5634\u5df4\u95ed\u4e0a\u4e0d\u8bf4\u8bdd\u7684\u6837\u5b50\u3002\u8fd9\u4e2a\u8868\u8fbe\u901a\u5e38\u7528\u4e8e\u5f3a\u8c03\u8981\u4fdd\u5b88\u79d8\u5bc6\uff0c\u4e0d\u8981\u628a\u67d0\u4ef6\u4e8b\u60c5\u8bf4\u51fa\u53bb\u3002\u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u4eba\u4eec\u5728\u5f88\u591a\u573a\u5408\u4e0b\u4f1a\u4f7f\u7528\u8fd9\u6837\u7684\u4e60\u8bed\u6765\u63d0\u9192\u4ed6\u4eba\u4e0d\u8981\u6cc4\u5bc6\uff0c\u6bd4\u5982\u5728\u8ba8\u8bba\u4e00\u4e9b\u4e0d\u60f3\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u7684\u8ba1\u5212\u3001\u60ca\u559c\u6d3b\u52a8\u7b49\u60c5\u5883\u4e2d\u3002\u4f8b\u5982\uff0c\u5f53\u51c6\u5907\u7ed9\u67d0\u4eba\u4e00\u4e2a\u751f\u65e5\u60ca\u559c\u6d3e\u5bf9\u65f6\uff0c\u7ec4\u7ec7\u8005\u53ef\u80fd\u4f1a\u5bf9\u53c2\u4e0e\u7b79\u5907\u7684\u4eba\u8bf4 \u201cMum\u2019s the word about the party. We don't want them to know.\u201d\uff08\u5173\u4e8e\u8fd9\u4e2a\u6d3e\u5bf9\u8981\u4fdd\u5bc6\u54e6\uff0c\u6211\u4eec\u4e0d\u60f3\u8ba9\u4ed6\u4eec\u77e5\u9053\u3002 \uff09 \u201cgrown man\u201d \u662f\u540d\u8bcd\u77ed\u8bed\uff0c\u201cgrown\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u6210\u5e74\u7684\u3001\u6210\u719f\u7684\u201d\uff0c\u4fee\u9970\u540d\u8bcd \u201cman\u201d\uff0c\u8868\u793a \u201c\u6210\u5e74\u7537\u5b50\u201d\u3002 \u201ccapable of\u201d \u662f\u4e00\u4e2a\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u80fd\u591f\u2026\u2026 \u7684\u3001\u6709\u2026\u2026 \u80fd\u529b\u7684\u201d\uff0c\u540e\u9762\u63a5\u540d\u8bcd\u6216\u52a8\u540d\u8bcd\u5f62\u5f0f\uff0c\u8fd9\u91cc \u201ccapable of living my life\u201d \u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201ca grown man\u201d\uff0c\u8bf4\u660e\u8fd9\u4e2a\u4eba\u6709\u80fd\u529b\u6309\u7167\u81ea\u5df1\u7684\u65b9\u5f0f\u751f\u6d3b\u3002 \u201cas I see fit\u201d \u662f\u4e00\u4e2a\u65b9\u5f0f\u72b6\u8bed\u4ece\u53e5\uff0c\u201cas\u201d \u662f\u5f15\u5bfc\u8bcd\uff0c\u610f\u4e3a \u201c\u6309\u7167\u3001\u5982\u540c\u201d\uff0c\u201cI see fit\u201d \u8868\u793a \u201c\u6211\u8ba4\u4e3a\u5408\u9002\u201d\uff0c\u6574\u4e2a\u4ece\u53e5\u8868\u793a \u201c\u6309\u7167\u6211\u8ba4\u4e3a\u5408\u9002\u7684\u65b9\u5f0f\u201d\uff0c\u7528\u6765\u4fee\u9970 \u201cliving my life\u201d\uff0c\u8bf4\u660e\u751f\u6d3b\u7684\u65b9\u5f0f\u3002 \u5173\u4e8e \u201csmouldering good looks\u201d \u7684\u63cf\u8ff0\uff0c\u201csmouldering\u201d \u672c\u610f\u662f \u201c\u95f7\u71c3\u3001\u9634\u71c3\u201d\uff0c\u5728\u8fd9\u91cc\u7528\u6765\u5f62\u5bb9\u5916\u8c8c\u65f6\uff0c\u4f20\u8fbe\u51fa\u4e00\u79cd\u5145\u6ee1\u9b45\u529b\u3001\u6027\u611f\u4e14\u5185\u655b\u7684\u5438\u5f15\u529b\u3002\u5728\u897f\u65b9\u7684\u5ba1\u7f8e\u548c\u8bed\u8a00\u4e60\u60ef\u4e2d\uff0c\u7528\u8fd9\u6837\u5bcc\u6709\u8868\u73b0\u529b\u7684\u8bcd\u6c47\u6765\u5938\u8d5e\u4ed6\u4eba\u7684\u5916\u8c8c\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\uff0c\u5c24\u5176\u662f\u5728\u8868\u8fbe\u5bf9\u67d0\u4eba\u72ec\u7279\u9b45\u529b\u7684\u6b23\u8d4f\u65f6\u3002\u6bd4\u5982\u5728\u4e00\u4e9b\u5f71\u89c6\u4f5c\u54c1\u3001\u793e\u4ea4\u573a\u5408\u4e2d\uff0c\u4eba\u4eec\u4f1a\u7528\u7c7b\u4f3c\u7684\u8bcd\u6c47\u6765\u8d5e\u7f8e\u6709\u5438\u5f15\u529b\u7684\u4eba\u3002 \u5bf9\u4e8e \u201chad a fit\u201d \u7684\u63cf\u8ff0\uff0c\u201cfit\u201d \u5728\u8fd9\u91cc\u901a\u5e38\u6307 \u201c\u75c9\u631b\u3001\u62bd\u6410\u201d \u6216 \u201c\u7a81\u53d1\u7684\u4e00\u9635\uff08\u5982\u75be\u75c5\u53d1\u4f5c\u7b49\u60c5\u51b5\uff09\u201d\u3002\u5728\u897f\u65b9\u793e\u4f1a\u7684\u65e5\u5e38\u751f\u6d3b\u548c\u533b\u7597\u573a\u666f\u4e2d\uff0c\u4eba\u4eec\u4f1a\u7528\u8fd9\u6837\u7684\u8bcd\u6c47\u6765\u63cf\u8ff0\u8eab\u4f53\u4e0a\u7684\u7a81\u53d1\u5f02\u5e38\u72b6\u51b5\u3002\u6bd4\u5982\u5728\u4e00\u4e9b\u5173\u4e8e\u5065\u5eb7\u95ee\u9898\u7684\u4ea4\u6d41\u3001\u7d27\u6025\u60c5\u51b5\u5904\u7406\u7b49\u60c5\u5883\u4e0b\uff0c\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u8868\u8fbe\u3002\u800c\u4e14\uff0c\u5f53\u63cf\u8ff0\u4e00\u4e2a\u4eba\u8eab\u4f53\u51fa\u73b0\u8fd9\u79cd\u72b6\u51b5\u65f6\uff0c\u8bf4 \u201cthe poor boy\u201d\uff08\u8fd9\u4e2a\u53ef\u601c\u7684\u7537\u5b69\uff09\u4e5f\u53cd\u6620\u51fa\u4e00\u79cd\u5bf9\u906d\u9047\u8fd9\u79cd\u72b6\u51b5\u7684\u4eba\u7684\u540c\u60c5\u548c\u5173\u5207\u7684\u6001\u5ea6\uff0c\u8fd9\u4e5f\u662f\u897f\u65b9\u6587\u5316\u4e2d\u5e38\u89c1\u7684\u60c5\u611f\u8868\u8fbe\u3002 \u201cIt pissed our dog off\u201d \u90e8\u5206\uff1a \u201cIt\u201d \u5728\u8fd9\u91cc\u4f5c\u4e3b\u8bed\uff0c\u901a\u5e38\u6307\u4ee3\u524d\u6587\u63d0\u5230\u7684\u67d0\u4ef6\u4e8b\u60c5\uff08\u7531\u4e8e\u6ca1\u6709\u524d\u6587\u5177\u4f53\u8bed\u5883\uff0c\u8fd9\u91cc \u201cIt\u201d \u6240\u6307\u5185\u5bb9\u4e0d\u660e\u786e\uff09\u3002 \u201cpissed\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u662f \u201cpiss\u201d \u7684\u8fc7\u53bb\u5f0f\uff0c\u201cpiss off\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u201cour dog\u201d \u662f \u201cpiss off\u201d \u7684\u5bbe\u8bed\u3002\u201coff\u201d \u5728\u8fd9\u91cc\u662f\u526f\u8bcd\uff0c\u4e0e \u201cpiss\u201d \u6784\u6210\u77ed\u8bed\u52a8\u8bcd\uff0c\u201cpiss sb. off\u201d \u8868\u793a \u201c\u4f7f\u67d0\u4eba\u607c\u6012\u201d\u3002 \u201cto no end\u201d \u90e8\u5206\uff1a \u201cto no end\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u7a0b\u5ea6\u72b6\u8bed\uff0c\u4fee\u9970 \u201cpissed our dog off\u201d \u8fd9\u4e2a\u52a8\u4f5c\uff0c\u8bf4\u660e\u4f7f\u72d7\u751f\u6c14\u7684\u7a0b\u5ea6\u8fbe\u5230\u4e86\u6781\u70b9\u3002\u6574\u4e2a\u53e5\u5b50\u7684\u7ed3\u6784\u662f \u201c\u4e3b\u8bed + \u8c13\u8bed\u52a8\u8bcd\u77ed\u8bed + \u5bbe\u8bed + \u7a0b\u5ea6\u72b6\u8bed\u201d \u201cpluck a nerve\u201d \u8fd9\u4e00\u8868\u8fbe\u6e90\u4e8e\u82f1\u8bed\u6587\u5316\u4e2d\u5bf9\u8eab\u4f53\u548c\u60c5\u611f\u5173\u7cfb\u7684\u4e00\u79cd\u5f62\u8c61\u6bd4\u55bb\u3002\u5728\u897f\u65b9\u6587\u5316\u91cc\uff0c\u4eba\u4eec\u5e38\u7528\u8eab\u4f53\u7684\u67d0\u4e9b\u90e8\u4f4d\u6216\u751f\u7406\u73b0\u8c61\u6765\u6bd4\u55bb\u60c5\u611f\u6216\u5fc3\u7406\u4e0a\u7684\u53cd\u5e94\u3002\u201cnerve\u201d \u672c\u610f\u662f \u201c\u795e\u7ecf\u201d\uff0c\u5f53\u8eab\u4f53\u7684\u795e\u7ecf\u88ab\u89e6\u78b0\u6216\u523a\u6fc0\u65f6\u4f1a\u6709\u5f3a\u70c8\u7684\u53cd\u5e94\uff0c\u5728\u8fd9\u91cc \u201cpluck a nerve\u201d \u5c31\u5f62\u8c61\u5730\u8868\u793a\u89e6\u52a8\u4e86\u67d0\u4eba\u654f\u611f\u7684\u60c5\u611f\u6216\u5f15\u53d1\u4e86\u67d0\u4eba\u5f3a\u70c8\u7684\u60c5\u7eea\u53cd\u5e94\uff0c\u6bd4\u5982\u751f\u6c14\u3001\u4f24\u5fc3\u3001\u5c34\u5c2c\u7b49\u3002\u8fd9\u79cd\u8868\u8fbe\u5e38\u7528\u4e8e\u4eba\u9645\u4ea4\u5f80\u4e2d\uff0c\u5f53\u4e00\u4e2a\u4eba\u4e0d\u786e\u5b9a\u81ea\u5df1\u7684\u8bdd\u6216\u884c\u4e3a\u662f\u5426\u5f15\u8d77\u4e86\u5bf9\u65b9\u7684\u5f3a\u70c8\u60c5\u7eea\u6ce2\u52a8\u65f6\uff0c\u5c31\u4f1a\u8bf4\u8fd9\u6837\u7684\u8bdd\u3002\u4f8b\u5982\uff0c\u5728\u4e89\u8bba\u6216\u8ba8\u8bba\u4e2d\uff0c\u4e00\u65b9\u53ef\u80fd\u4f1a\u89c9\u5f97\u81ea\u5df1\u7684\u8bdd\u53ef\u80fd\u89e6\u78b0\u5230\u4e86\u5bf9\u65b9\u7684\u75db\u5904\uff0c\u4ece\u800c\u8be2\u95ee \u201cDid I pluck a nerve there?\u201d\u3002 \u4ece\u8bed\u8a00\u4f7f\u7528\u573a\u666f\u6765\u770b\uff0c\u8fd9\u79cd\u8868\u8fbe\u5728\u65e5\u5e38\u5bf9\u8bdd\u3001\u5f71\u89c6\u5267\u60c5\u3001\u5c0f\u8bf4\u7b49\u60c5\u5883\u4e2d\u90fd\u6bd4\u8f83\u5e38\u89c1\uff0c\u5c24\u5176\u5728\u523b\u753b\u4eba\u7269\u4e4b\u95f4\u5fae\u5999\u7684\u4e92\u52a8\u548c\u60c5\u611f\u51b2\u7a81\u65f6\u7ecf\u5e38\u51fa\u73b0\uff0c\u5e2e\u52a9\u5c55\u73b0\u4eba\u7269\u5173\u7cfb\u548c\u60c5\u7eea\u53d8\u5316\u3002 \u201cget back on his rocker\u201d\uff1a\u201cget back on one's rocker\u201d \u662f\u4e00\u4e2a\u6bd4\u8f83\u5f62\u8c61\u7684\u4e60\u8bed\u8868\u8fbe\u3002\u201crocker\u201d \u6709 \u201c\u6447\u6905\u201d \u7684\u610f\u601d\uff0c\u4ece\u5b57\u9762\u7406\u89e3\uff0c\u201cget back on one's rocker\u201d \u8868\u793a\u56de\u5230\u6447\u6905\u4e0a\uff0c\u5b9e\u9645\u5f15\u7533\u4e3a \u201c\u6062\u590d\u6b63\u5e38\u72b6\u6001\u3001\u6062\u590d\u5e73\u9759\u3001\u6062\u590d\u4ee5\u5f80\u7684\u6d3b\u529b\u6216\u7406\u667a\u201d\u3002\u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u5f53\u4eba\u4eec\u5f62\u5bb9\u67d0\u4eba\u7ecf\u5386\u4e86\u4e00\u6bb5\u6df7\u4e71\u3001\u56f0\u6270\u6216\u5931\u53bb\u5e38\u6001\u7684\u65f6\u671f\u540e\uff0c\u5e0c\u671b\u5176\u80fd\u91cd\u65b0\u56de\u5230\u6b63\u5e38\u72b6\u6001\u65f6\uff0c\u5c31\u4f1a\u4f7f\u7528\u8fd9\u6837\u7684\u8868\u8fbe\u3002\u6bd4\u5982\u5728\u67d0\u4eba\u7ecf\u5386\u4e86\u75be\u75c5\u3001\u632b\u6298\u6216\u60c5\u7eea\u6ce2\u52a8\u540e\uff0c\u670b\u53cb\u6216\u5bb6\u4eba\u53ef\u80fd\u4f1a\u5e0c\u671b\u4ed6\u80fd \u201cget back on his rocker\u201d\u3002 \u201csnap out of it\u201d \u662f\u4e00\u4e2a\u975e\u5e38\u53e3\u8bed\u5316\u4e14\u5e38\u7528\u7684\u82f1\u8bed\u8868\u8fbe\u3002\u5728\u82f1\u8bed\u6587\u5316\u7684\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u5f53\u4e00\u4e2a\u4eba\u770b\u5230\u53e6\u4e00\u4e2a\u4eba\u5904\u4e8e\u6d88\u6781\u7684\u60c5\u7eea\u72b6\u6001\uff08\u5982\u60b2\u4f24\u3001\u6cae\u4e27\u3001\u6124\u6012\u3001\u8ff7\u832b\u3001\u6c89\u6d78\u5728\u67d0\u79cd\u5e7b\u60f3\u6216\u4e0d\u826f\u4e60\u60ef\u4e2d\uff09\u65f6\uff0c\u5c31\u4f1a\u7528\u8fd9\u4e2a\u77ed\u8bed\u6765\u9f13\u52b1\u5bf9\u65b9\u5feb\u901f\u6446\u8131\u8fd9\u79cd\u72b6\u6001\uff0c\u6062\u590d\u5230\u6b63\u5e38\u6216\u79ef\u6781\u7684\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u670b\u53cb\u56e0\u4e3a\u5931\u604b\u800c\u4e00\u76f4\u840e\u9761\u4e0d\u632f\uff0c\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u8bf4 \u201cCome on, snap out of it! There are better things waiting for you.\u201d\uff08\u5f97\u4e86\uff0c\u632f\u4f5c\u8d77\u6765\u5427\uff01\u8fd8\u6709\u66f4\u597d\u7684\u4e8b\u60c5\u7b49\u7740\u4f60\u5462\u3002\uff09\u8fd9\u79cd\u8868\u8fbe\u4f53\u73b0\u4e86\u82f1\u8bed\u6587\u5316\u4e2d\u6ce8\u91cd\u79ef\u6781\u5411\u4e0a\u3001\u9f13\u52b1\u4eba\u4eec\u5feb\u901f\u514b\u670d\u56f0\u96be\u548c\u4e0d\u826f\u60c5\u7eea\u7684\u6001\u5ea6\u3002 You know how your daddy used to say that you can only fish for so long before you got to throw a stick of dynamite in the water? \u201cthat you can only fish for so long before you got to throw a stick of dynamite in the water\u201d \u8fd9\u90e8\u5206\u662f \u201csay\u201d \u7684\u5bbe\u8bed\u4ece\u53e5\u3002\u201cthat\u201d \u662f\u5f15\u5bfc\u8bcd\uff0c\u5728\u4ece\u53e5\u4e2d\u4e0d\u5145\u5f53\u6210\u5206\u3002\u201cfor so long\u201d \u4e2d\u7684 \u201cfor\u201d \u8868\u793a\u4e00\u6bb5\u65f6\u95f4\uff0c\u201cso long\u201d \u8868\u793a \u201c\u8fd9\u4e48\u957f\u65f6\u95f4\u201d\uff0c\u4f5c\u65f6\u95f4\u72b6\u8bed\u4fee\u9970 \u201cfish\u201d\u3002\u201cbefore you got to throw a stick of dynamite in the water\u201d \u662f\u4e00\u4e2a\u65f6\u95f4\u72b6\u8bed\u4ece\u53e5\uff0c\u201cbefore\u201d \u662f\u5f15\u5bfc\u8bcd\uff0c\u201cgot to\u201d \u5728\u8fd9\u91cc\u76f8\u5f53\u4e8e \u201chave to\u201d\uff08\u8fc7\u53bb\u5f0f\uff09\uff0c\u8868\u793a \u201c\u4e0d\u5f97\u4e0d\u3001\u5fc5\u987b\u201d\uff0c\u201ca stick of\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u8868\u793a \u201c\u4e00\u6839\u201d\uff0c\u4fee\u9970 \u201cdynamite\u201d \u3002 \u201cget cracking\u201d \u662f\u975e\u5e38\u53e3\u8bed\u5316\u4e14\u5e38\u7528\u7684\u82f1\u8bed\u8868\u8fbe\u3002\u5728\u82f1\u8bed\u6587\u5316\u7684\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u5f53\u4eba\u4eec\u60f3\u8981\u5f00\u59cb\u7740\u624b\u505a\u67d0\u4ef6\u4e8b\u60c5\uff0c\u5c24\u5176\u662f\u5728\u5927\u5bb6\u51c6\u5907\u4e00\u8d77\u884c\u52a8\uff0c\u6216\u8005\u4e00\u65b9\u50ac\u4fc3\u53e6\u4e00\u65b9\u5f00\u59cb\u5de5\u4f5c\u3001\u5b8c\u6210\u4efb\u52a1\u7b49\u60c5\u5883\u4e0b\uff0c\u5c31\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u77ed\u8bed\u3002\u6bd4\u5982\u5728\u4e00\u7fa4\u4eba\u51c6\u5907\u8fdb\u884c\u4e00\u9879\u624b\u5de5\u5236\u4f5c\u3001\u5b8c\u6210\u4e00\u9879\u5de5\u4f5c\u9879\u76ee\u6216\u8005\u5f00\u59cb\u4e00\u573a\u4f53\u80b2\u6d3b\u52a8\u65f6\uff0c\u53ef\u80fd\u4f1a\u6709\u4eba\u8bf4 \u201cNow let\u2019s get cracking\u201d \u6765\u9f13\u52b1\u5927\u5bb6\u8fc5\u901f\u5f00\u59cb\u884c\u52a8\u3002\u5b83\u4f53\u73b0\u4e86\u4e00\u79cd\u79ef\u6781\u4e3b\u52a8\u3001\u4e0d\u62d6\u5ef6\u7684\u505a\u4e8b\u6001\u5ea6\uff0c\u7ed9\u4eba\u4e00\u79cd\u5145\u6ee1\u6d3b\u529b\u548c\u884c\u52a8\u529b\u7684\u611f\u89c9\u3002 \u201cThankfully\u201d \u8868\u8fbe\u4e00\u79cd\u5e86\u5e78\u3001\u611f\u6069\u7684\u60c5\u7eea\uff0c\u5728\u897f\u65b9\u6587\u5316\u4e2d\uff0c\u4eba\u4eec\u5e38\u5e38\u4f1a\u8868\u8fbe\u5bf9\u751f\u6d3b\u4e2d\u4e00\u4e9b\u4e8b\u60c5\u7684\u611f\u6069\uff0c\u53ef\u80fd\u5e26\u6709\u4e00\u5b9a\u7684\u5b97\u6559\u6587\u5316\u5f71\u54cd\uff08\u867d\u7136\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u5b8c\u5168\u57fa\u4e8e\u5b97\u6559\u610f\u4e49\uff09\uff0c\u8868\u793a\u5bf9\u67d0\u79cd\u7ed3\u679c\u6216\u60c5\u51b5\u7684\u5e86\u5e78\u6001\u5ea6\u3002 \u201che blessed me with...\u201d \u4e2d \u201cbless\u201d \u5e38\u89c1\u4e8e\u5b97\u6559\u8bed\u5883\u4e2d\uff0c\u610f\u601d\u662f \u201c\u8d50\u798f\u3001\u4fdd\u4f51\u3001\u7ed9\u4e88\u201d\uff0c\u8fd9\u91cc\u8bf4 \u201che blessed me with\u201d \u53ef\u80fd\u662f\u4e00\u79cd\u6bd4\u8f83\u968f\u610f\u5730\u8868\u8fbe\u67d0\u4eba\u7ed9\u4e88\u81ea\u5df1\u67d0\u4e9b\u4e1c\u897f\uff08\u8fd9\u91cc\u662f\u5b69\u5b50\uff09\u3002\u4f46\u540c\u65f6\u8bf4\u8bdd\u8005\u540e\u9762\u53c8\u8bf4\u5b69\u5b50 \u201cdumb as soup\u201d\uff08\u7b28\u5f97\u8981\u547d\uff09\uff0c\u8fd9\u79cd\u770b\u4f3c\u77db\u76fe\u7684\u8868\u8fbe\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\u53ef\u80fd\u662f\u4e00\u79cd\u5e7d\u9ed8\u6216\u7565\u5e26\u8c03\u4f83\u7684\u65b9\u5f0f\uff0c\u4f53\u73b0\u4e86\u8bf4\u8bdd\u8005\u5bf9\u5b69\u5b50\u53c8\u7231\u53c8 \u201c\u5acc\u5f03\u201d \u7684\u590d\u6742\u60c5\u611f\uff0c\u5728\u5bb6\u5ead\u6587\u5316\u4e2d\uff0c\u5bb6\u4eba\u4e4b\u95f4\u5e38\u5e38\u4f1a\u7528\u8fd9\u79cd\u7565\u5e26\u73a9\u7b11\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u5f7c\u6b64\u3002 \u201cdumb as soup\u201d \u662f\u4e00\u4e2a\u6bd4\u8f83\u5f62\u8c61\u4e14\u53e3\u8bed\u5316\u7684\u4fd7\u8bed\u8868\u8fbe\u3002\u201csoup\u201d\uff08\u6c64\uff09\u662f\u4e00\u79cd\u5f88\u7a00\u8f6f\u3001\u6ca1\u6709\u4ec0\u4e48\u5b9e\u8d28\u5185\u5bb9\u7684\u4e1c\u897f\uff0c\u7528 \u201cdumb as soup\u201d \u6765\u5f62\u5bb9\u4eba\u7b28\uff0c\u662f\u4e00\u79cd\u751f\u52a8\u7684\u6bd4\u55bb\uff0c\u5728\u82f1\u8bed\u6587\u5316\u7684\u53e3\u8bed\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u4f1a\u4f7f\u7528\u5404\u79cd\u5f62\u8c61\u7684\u4fd7\u8bed\u6765\u63cf\u8ff0\u4eba\u7684\u7279\u70b9\u3002 \u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u4e00\u4e9b\u9700\u8981\u5728\u767d\u5929\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u6216\u6d3b\u52a8\u7684\u60c5\u5883\u4e0b\uff0c\u6bd4\u5982\u6237\u5916\u5de5\u4f5c\uff08\u5982\u519c\u573a\u52b3\u4f5c\u3001\u5efa\u7b51\u65bd\u5de5\u7b49\uff09\u3001\u6237\u5916\u8fd0\u52a8\uff08\u5982\u5f92\u6b65\u65c5\u884c\u3001\u6253\u730e\u7b49\uff09\uff0c\u4eba\u4eec\u4f1a\u5f88\u5728\u610f\u767d\u5929\u7684\u65f6\u95f4\u3002\u56e0\u4e3a\u4e00\u65e6\u5929\u8272\u53d8\u6697\uff0c\u5f88\u591a\u6d3b\u52a8\u5c31\u4f1a\u53d7\u5230\u9650\u5236\u751a\u81f3\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u3002\u6240\u4ee5\u5f53\u8bf4 \u201cwe\u2019re losing daylight\u201d \u65f6\uff0c\u901a\u5e38\u662f\u5728\u63d0\u9192\u5927\u5bb6\u65f6\u95f4\u7d27\u8feb\uff0c\u8981\u6293\u7d27\u5728\u5929\u9ed1\u4e4b\u524d\u5b8c\u6210\u624b\u5934\u7684\u4e8b\u60c5\uff0c\u53cd\u6620\u4e86\u4e00\u79cd\u5bf9\u65f6\u95f4\u548c\u5149\u7ebf\u6761\u4ef6\u7684\u91cd\u89c6\uff0c\u4ee5\u53ca\u5728\u81ea\u7136\u73af\u5883\u4e0b\u6d3b\u52a8\u7684\u4e00\u79cd\u751f\u6d3b\u4e60\u60ef\u3002 \u201cgotten off on the wrong foot\u201d \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u82f1\u8bed\u4e60\u8bed\uff0c\u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u5b83\u5f62\u8c61\u5730\u8868\u793a\u4eba\u4e0e\u4eba\u4e4b\u95f4\u521d\u6b21\u89c1\u9762\u6216\u5f00\u59cb\u67d0\u79cd\u5173\u7cfb\uff08\u5982\u5408\u4f5c\u3001\u4ea4\u5f80\u7b49\uff09\u65f6\u5c31\u51fa\u73b0\u4e86\u4e0d\u597d\u7684\u5f00\u7aef\u6216\u72af\u4e86\u9519\u8bef\u3002\u8fd9\u79cd\u8868\u8fbe\u5728\u793e\u4ea4\u573a\u5408\u4e2d\u5f88\u5e38\u89c1\uff0c\u6bd4\u5982\u5728\u670b\u53cb\u3001\u540c\u4e8b\u4e4b\u95f4\uff0c\u5f53\u610f\u8bc6\u5230\u4e00\u5f00\u59cb\u7684\u4e92\u52a8\u4e0d\u592a\u987a\u5229\u65f6\uff0c\u4f1a\u7528\u8fd9\u4e2a\u4e60\u8bed\u6765\u63d0\u53ca\u5e76\u53ef\u80fd\u5c1d\u8bd5\u4fee\u590d\u5173\u7cfb\u3002\u800c\u79f0\u547c\u522b\u4eba \u201cidiot\u201d\uff08\u767d\u75f4\uff09\u663e\u7136\u662f\u4e0d\u793c\u8c8c\u7684\u884c\u4e3a\uff0c\u5728\u4efb\u4f55\u6587\u5316\u4e2d\uff0c\u8fd9\u6837\u7684\u79f0\u547c\u90fd\u53ef\u80fd\u4f24\u5bb3\u5230\u5bf9\u65b9\u611f\u60c5\uff0c\u5bfc\u81f4\u5173\u7cfb\u7d27\u5f20\uff0c\u6240\u4ee5\u8bf4\u8bdd\u8005\u5728\u8fd9\u91cc\u627f\u8ba4\u4e86\u81ea\u5df1\u7684\u9519\u8bef\uff0c\u610f\u8bc6\u5230\u56e0\u4e3a\u8fd9\u4e2a\u4e0d\u5f53\u79f0\u547c\u800c\u8ba9\u53cc\u65b9\u4e00\u5f00\u59cb\u5c31\u6ca1\u5904\u597d\u3002 \u8bed\u6cd5\u642d\u914d\uff1a \u201cwe may have gotten...\u201d \u8fd9\u90e8\u5206\u4f7f\u7528\u4e86 \u201c\u60c5\u6001\u52a8\u8bcd\uff08may\uff09+ have + \u8fc7\u53bb\u5206\u8bcd\uff08gotten\uff09\u201d \u7684\u7ed3\u6784\uff0c\u8fd9\u662f\u4e00\u79cd\u8868\u793a\u5bf9\u8fc7\u53bb\u60c5\u51b5\u7684\u63a8\u6d4b\u6216\u53ef\u80fd\u6027\u7684\u8bed\u6cd5\u5f62\u5f0f\u3002\u201cmay have done\u201d \u8868\u793a \u201c\u53ef\u80fd\u5df2\u7ecf\u505a\u4e86\u2026\u2026\u201d\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u8bf4\u8bdd\u8005\u8ba4\u4e3a\u4ed6\u4eec\u53ef\u80fd\u5728\u8fc7\u53bb\uff08\u5f53\u79f0\u547c\u5bf9\u65b9\u4e3a \u201cidiot\u201d \u65f6\uff09\u5c31\u5df2\u7ecf\u6709\u4e86\u4e0d\u597d\u7684\u5f00\u7aef\u3002 \u201cgotten off\u201d \u662f \u201cget off\u201d \u7684\u8fc7\u53bb\u5206\u8bcd\u5f62\u5f0f\uff0c\u201cget off\u201d \u5728\u8fd9\u91cc\u548c \u201con the wrong foot\u201d \u6784\u6210\u4e60\u8bed \u201cget off on the wrong foot\u201d\u3002","title":"S01e04"},{"location":"art/English/tv/bigbang/s01/e04/s01e04/#_1","text":"roadblock \u8def\u969c suffice \u8db3\u591f sabbatical scrambled eggs","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e04/s01e04/#_2","text":"\"Put it on the back burner.\" \u7ffb\u8bd1\uff1a \u201c\u5148\u6401\u7f6e\u4e00\u8fb9\u201d / \u201c\u6682\u65f6\u7f13\u7f13\u201d \uff08\u6216\u66f4\u53e3\u8bed\u5316\uff1a\u201c\u653e\u4e00\u653e\uff0c\u4e0d\u6025\u3002\u201d / \u201c\u5148\u6254\u51b0\u7bb1\u91cc\uff0c\u7b49\u4f1a\u513f\u518d\u7092\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u5b57\u9762\u6765\u6e90 \u6e90\u81ea\u53a8\u623f\u7076\u5177\uff1a\u524d\u7076\uff08front burner\uff09\u706b\u529b\u731b\uff08\u4f18\u5148\u5904\u7406\uff09\uff0c\u540e\u7076\uff08back burner\uff09\u5c0f\u706b\u6162\u7096\uff08\u6b21\u8981\u4efb\u52a1\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u9879\u76ee\u7ba1\u7406 \"Let\u2019s put the redesign on the back burner.\" \u201c\u754c\u9762\u6539\u7248\u5148\u653e\u4e00\u653e\u3002\u201d \u5bb6\u5ead\u51b3\u7b56 \"Mom, can we back-burner the piano lessons?\" \u201c\u5988\uff0c\u94a2\u7434\u8bfe\u80fd\u7f13\u7f13\u5417\uff1f\u201d \u62d6\u5ef6\u6218\u672f \"He \u2018back-burnered\u2019 my request for 6 months.\" \u201c\u4ed6\u628a\u6211\u9700\u6c42\u667e\u4e86\u534a\u5e74\uff01\u201d Each one dumbed down to accommodate the duration of an average bowel movement.\" \u7ffb\u8bd1\uff1a \u201c\u6bcf\u6761\u5185\u5bb9\u90fd\u7b80\u5316\u5230\u9002\u5408\u666e\u901a\u4eba\u4e0a\u5395\u6240\u7684\u65f6\u95f4\u8bfb\u5b8c\u3002\u201d \uff08\u6216\u66f4\u76f4\u767d\uff1a\u201c\u6bcf\u6761\u4fe1\u606f\u90fd\u964d\u667a\u5230\u62c9\u6ce1\u5c4e\u7684\u529f\u592b\u5c31\u80fd\u770b\u61c2\u3002\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \"Dumbed down\"\uff08\u964d\u667a\u5316\uff09 \u6307\u523b\u610f\u7b80\u5316\u5185\u5bb9\uff0c\u751a\u81f3\u727a\u7272\u51c6\u786e\u6027\u4ee5\u9002\u5e94\u4f4e\u8ba4\u77e5\u6c34\u5e73\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u6ce8\u6c34\u201d / \u201c\u5feb\u9910\u5316\u201d / \u201c\u63a5\u5730\u6c14\u63a5\u5230\u5730\u5e9c\u201d\u3002 \"Duration of a bowel movement\"\uff08\u6392\u4fbf\u65f6\u957f\uff09 \u897f\u65b9\u7814\u7a76\u663e\u793a\u5e73\u5747\u65f6\u957f\uff1a3-10\u5206\u949f\uff08\u624b\u673a\u5237\u5c4f\u9ec4\u91d1\u65f6\u95f4\uff09\u3002 \u4e2d\u6587\u5e7d\u9ed8\u8868\u8fbe\uff1a\u201c\u8e72\u5751\u65f6\u957f\u201d / \u201c\u5e26\u85aa\u5982\u5395\u6807\u51c6\u65f6\u201d\u3002 \u8bbd\u523a\u5bf9\u8c61 \u77ed\u89c6\u9891\u5e73\u53f0\uff08TikTok/\u6296\u97f3\uff09\u7684\u201c15\u79d2\u77e5\u8bc6\u80f6\u56ca\u201d\u3002 \u5395\u6240\u8bfb\u7269\uff08\u5982\u300a\u7537\u4eba\u88c5\u300b\u6742\u5fd7\u788e\u7247\u5316\u6392\u7248\uff09\u3002 \"With all due respect...\" \u7ffb\u8bd1\uff1a \u201c\u6055\u6211\u76f4\u8a00\u2026\u2026\u201d / \u201c\u65e0\u610f\u5192\u72af\uff0c\u4f46\u2026\u2026\u201d \uff08\u6216\u66f4\u7280\u5229\uff1a\u201c\u4e0d\u662f\u6211\u8bf4\u4f60\u2026\u2026\u201d / \u201c\u7ed9\u8138\u4e86\uff0c\u6211\u8fd8\u662f\u8981\u8bf4\u2026\u2026\u201d\uff09 \u6587\u5316\u80cc\u666f\u89e3\u6790 \u8868\u9762\u793c\u8c8c\uff0c\u5b9e\u5219\u5f00\u70ae \u5b57\u9762\u610f\u601d\u662f\u201c\u7ed9\u4e88\u5e94\u6709\u7684\u5c0a\u91cd\u201d\uff0c\u5b9e\u9645\u7528\u4e8e\u94fa\u57ab\u5c16\u9510\u6279\u8bc4\u3002 \u7c7b\u4f3c\u4e2d\u6587\u7684\u201c\u6709\u53e5\u8bdd\u4e0d\u77e5\u5f53\u8bb2\u4e0d\u5f53\u8bb2\u201d\uff08\u7136\u540e\u5fc5\u8bb2\u96be\u542c\u8bdd\uff09\u3002 \u4f7f\u7528\u573a\u666f \u60c5\u5883 \u82f1\u6587 \u4e2d\u6587\u5730\u9053\u8bf4\u6cd5 \u804c\u573a\u603c\u9886\u5bfc \"With all due respect, this plan is garbage.\" \u201c\u9886\u5bfc\uff0c\u8fd9\u65b9\u6848\u771f\u4e0d\u884c\u3002\u201d \u5bb6\u5ead\u8fa9\u8bba \"Mom, with all due respect, your tofu could break teeth.\" \u201c\u5988\uff0c\u60a8\u8fd9\u8c46\u8150\u80fd\u7ec3\u7259\u53e3\u3002\u201d \u653f\u5ba2\u4e92\u6495 \"With all due respect, the senator is lying.\" \u201c\u8bae\u5458\u5148\u751f\uff0c\u60a8\u8fd9\u662f\u7741\u773c\u8bf4\u778e\u8bdd\u3002\u201d \"Vis-\u00e0-vis\"\uff08\u5173\u4e8e\uff09 \u6cd5\u8bed\u501f\u8bcd\uff0c\u5b66\u672f\u88c5X\u4e13\u7528\uff0c\u7c7b\u4f3c\u4e2d\u6587\u201c\u5c31\u2026\u2026\u800c\u8a00\u201d\u3002 \u65e5\u5e38\u5bf9\u8bdd\u7528 \"regarding\" \u66f4\u81ea\u7136\uff0c\u6b64\u5904\u663e\u523b\u610f\u8f83\u771f\u3002 \"Decades\"\uff08\u51e0\u5341\u5e74\uff09\u7684\u51b2\u51fb\u529b \u897f\u65b9\u5e38\u7528\u5938\u5f20\u8868\u8fbe\uff08\u53ef\u80fd\u5b9e\u9645\u4ec55-10\u5e74\uff09\uff0c\u7a81\u51fa\u201c\u82e6\u71ac\u5df2\u4e45\u201d\u7684\u8f9b\u9178\u3002 \u4e2d\u6587\u7c7b\u4f3c\uff1a\u201c\u534a\u8f88\u5b50\u6ca1\u4f11\u606f\u201d / \u201c\u71ac\u5230\u5730\u8001\u5929\u8352\u201d\u3002 \"Savor\"\uff08\u54c1\u5473\uff09\u7684\u6df1\u5c42\u542b\u4e49 \u4e0d\u6b62\u662f\u201c\u4eab\u53d7\u201d\uff0c\u66f4\u5f3a\u8c03\u73cd\u60dc\u8f6c\u77ac\u5373\u901d\u7684\u653e\u677e\u3002 \u4e2d\u6587\u5bf9\u5e94\uff1a\u201c\u7ec6\u54c1\u201d\uff08\u5982\u201c\u7ec8\u4e8e\u80fd\u7ec6\u54c1\u4e00\u676f\u5496\u5561\u4e86\u201d\uff09\u3002 She says that free-range chickens taste much better than factory-farmed ones \u8d70\u5730\u9e21 \u5982\u679c\u4f60\u542c\u8bf4\u67d0\u4eba\u5728\u516c\u53f8\u88ab\u89e3\u96c7\u4e86,\u4f60\u53ef\u4ee5\u8bf4:\u201cHe got canned.\u201d \u6216\u8005 \u201cHe got laid off. \"Oh, I\u2019m sorry, did I insult you? Is your body mass somehow tied into your self-worth?\" \u7ffb\u8bd1\uff1a \u201c\u54e6\u62b1\u6b49\uff0c\u6211\u5192\u72af\u5230\u4f60\u4e86\uff1f\u96be\u9053\u4f60\u7684\u81ea\u6211\u4ef7\u503c\u8fd8\u548c\u4f53\u91cd\u6302\u94a9\u4e86\uff1f\u201d \u201can impossibility that nature will quickly resolve into death, mutilation\u201d\uff1a \u201can impossibility\u201d \u662f\u5bf9\u524d\u9762 \u201cwe\u2019ll be occupying the same space as that Buick in front of us\u201d \u8fd9\u79cd\u60c5\u51b5\u7684\u8bc4\u4ef7\uff0c\u5373\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u662f \u201c\u4e0d\u53ef\u80fd\u7684\u4e8b\u201d \u3002 \u201cthat nature will quickly resolve into death, mutilation\u201d \u662f\u4e00\u4e2a\u5b9a\u8bed\u4ece\u53e5\uff0c\u4fee\u9970\u5148\u884c\u8bcd \u201can impossibility\u201d \u3002 \u5728\u8fd9\u4e2a\u5b9a\u8bed\u4ece\u53e5\u4e2d\uff0c\u201cresolve into\u201d \u662f\u4e00\u4e2a\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u5206\u89e3\u4e3a\uff1b\u8f6c\u5316\u4e3a\u201d \uff0c\u8fd9\u91cc \u201cnature will quickly resolve into death, mutilation\u201d \u8868\u793a \u201c\u5927\u81ea\u7136\u4f1a\u8fc5\u901f\u5730\u5c06\u8fd9\u79cd\uff08\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff09\u8f6c\u5316\u4e3a\u6b7b\u4ea1\u548c\u4f24\u6b8b\u201d \uff0c\u201cnature\u201d \u5728\u8fd9\u91cc\u53ef\u4ee5\u7406\u89e3\u4e3a\u81ea\u7136\u89c4\u5f8b\u3001\u5ba2\u89c2\u60c5\u51b5\u7b49\u3002 \u6574\u53e5\u8bdd\u5927\u81f4\u610f\u601d\u662f\uff1a\u6211\u4eec\u5c06\u4f1a\u548c\u6211\u4eec\u524d\u9762\u7684\u90a3\u8f86\u522b\u514b\u8f66\u5904\u4e8e\u76f8\u540c\u7684\u7a7a\u95f4\u4f4d\u7f6e\uff0c\u800c\u8fd9\u662f\u4e00\u79cd\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u81ea\u7136\u89c4\u5f8b\u4f1a\u8fc5\u901f\u5730\u5c06\u8fd9\u79cd\u60c5\u51b5\u6f14\u53d8\u6210\u6b7b\u4ea1\u548c\u4f24\u6b8b\uff08\u5373\u8fd9\u79cd\u5371\u9669\u7684\u60c5\u51b5\u5fc5\u7136\u4f1a\u4ee5\u6b7b\u4ea1\u548c\u4f24\u6b8b\u544a\u7ec8\uff09\u3002 \u201cMum\u2019s the word\u201d \u662f\u4e00\u4e2a\u6e90\u81ea\u82f1\u8bed\u6587\u5316\u7684\u4e60\u8bed\u3002\u201cmum\u201d \u5728\u8fd9\u91cc\u7528\u4f5c\u62df\u58f0\u8bcd\uff0c\u6a21\u4eff\u5634\u5df4\u95ed\u7d27\u4e0d\u53d1\u51fa\u58f0\u97f3\u7684\u72b6\u6001\uff0c\u5c31\u50cf\u628a\u5634\u5df4\u95ed\u4e0a\u4e0d\u8bf4\u8bdd\u7684\u6837\u5b50\u3002\u8fd9\u4e2a\u8868\u8fbe\u901a\u5e38\u7528\u4e8e\u5f3a\u8c03\u8981\u4fdd\u5b88\u79d8\u5bc6\uff0c\u4e0d\u8981\u628a\u67d0\u4ef6\u4e8b\u60c5\u8bf4\u51fa\u53bb\u3002\u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u4eba\u4eec\u5728\u5f88\u591a\u573a\u5408\u4e0b\u4f1a\u4f7f\u7528\u8fd9\u6837\u7684\u4e60\u8bed\u6765\u63d0\u9192\u4ed6\u4eba\u4e0d\u8981\u6cc4\u5bc6\uff0c\u6bd4\u5982\u5728\u8ba8\u8bba\u4e00\u4e9b\u4e0d\u60f3\u8ba9\u5176\u4ed6\u4eba\u77e5\u9053\u7684\u8ba1\u5212\u3001\u60ca\u559c\u6d3b\u52a8\u7b49\u60c5\u5883\u4e2d\u3002\u4f8b\u5982\uff0c\u5f53\u51c6\u5907\u7ed9\u67d0\u4eba\u4e00\u4e2a\u751f\u65e5\u60ca\u559c\u6d3e\u5bf9\u65f6\uff0c\u7ec4\u7ec7\u8005\u53ef\u80fd\u4f1a\u5bf9\u53c2\u4e0e\u7b79\u5907\u7684\u4eba\u8bf4 \u201cMum\u2019s the word about the party. We don't want them to know.\u201d\uff08\u5173\u4e8e\u8fd9\u4e2a\u6d3e\u5bf9\u8981\u4fdd\u5bc6\u54e6\uff0c\u6211\u4eec\u4e0d\u60f3\u8ba9\u4ed6\u4eec\u77e5\u9053\u3002 \uff09 \u201cgrown man\u201d \u662f\u540d\u8bcd\u77ed\u8bed\uff0c\u201cgrown\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u6210\u5e74\u7684\u3001\u6210\u719f\u7684\u201d\uff0c\u4fee\u9970\u540d\u8bcd \u201cman\u201d\uff0c\u8868\u793a \u201c\u6210\u5e74\u7537\u5b50\u201d\u3002 \u201ccapable of\u201d \u662f\u4e00\u4e2a\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u80fd\u591f\u2026\u2026 \u7684\u3001\u6709\u2026\u2026 \u80fd\u529b\u7684\u201d\uff0c\u540e\u9762\u63a5\u540d\u8bcd\u6216\u52a8\u540d\u8bcd\u5f62\u5f0f\uff0c\u8fd9\u91cc \u201ccapable of living my life\u201d \u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201ca grown man\u201d\uff0c\u8bf4\u660e\u8fd9\u4e2a\u4eba\u6709\u80fd\u529b\u6309\u7167\u81ea\u5df1\u7684\u65b9\u5f0f\u751f\u6d3b\u3002 \u201cas I see fit\u201d \u662f\u4e00\u4e2a\u65b9\u5f0f\u72b6\u8bed\u4ece\u53e5\uff0c\u201cas\u201d \u662f\u5f15\u5bfc\u8bcd\uff0c\u610f\u4e3a \u201c\u6309\u7167\u3001\u5982\u540c\u201d\uff0c\u201cI see fit\u201d \u8868\u793a \u201c\u6211\u8ba4\u4e3a\u5408\u9002\u201d\uff0c\u6574\u4e2a\u4ece\u53e5\u8868\u793a \u201c\u6309\u7167\u6211\u8ba4\u4e3a\u5408\u9002\u7684\u65b9\u5f0f\u201d\uff0c\u7528\u6765\u4fee\u9970 \u201cliving my life\u201d\uff0c\u8bf4\u660e\u751f\u6d3b\u7684\u65b9\u5f0f\u3002 \u5173\u4e8e \u201csmouldering good looks\u201d \u7684\u63cf\u8ff0\uff0c\u201csmouldering\u201d \u672c\u610f\u662f \u201c\u95f7\u71c3\u3001\u9634\u71c3\u201d\uff0c\u5728\u8fd9\u91cc\u7528\u6765\u5f62\u5bb9\u5916\u8c8c\u65f6\uff0c\u4f20\u8fbe\u51fa\u4e00\u79cd\u5145\u6ee1\u9b45\u529b\u3001\u6027\u611f\u4e14\u5185\u655b\u7684\u5438\u5f15\u529b\u3002\u5728\u897f\u65b9\u7684\u5ba1\u7f8e\u548c\u8bed\u8a00\u4e60\u60ef\u4e2d\uff0c\u7528\u8fd9\u6837\u5bcc\u6709\u8868\u73b0\u529b\u7684\u8bcd\u6c47\u6765\u5938\u8d5e\u4ed6\u4eba\u7684\u5916\u8c8c\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\uff0c\u5c24\u5176\u662f\u5728\u8868\u8fbe\u5bf9\u67d0\u4eba\u72ec\u7279\u9b45\u529b\u7684\u6b23\u8d4f\u65f6\u3002\u6bd4\u5982\u5728\u4e00\u4e9b\u5f71\u89c6\u4f5c\u54c1\u3001\u793e\u4ea4\u573a\u5408\u4e2d\uff0c\u4eba\u4eec\u4f1a\u7528\u7c7b\u4f3c\u7684\u8bcd\u6c47\u6765\u8d5e\u7f8e\u6709\u5438\u5f15\u529b\u7684\u4eba\u3002 \u5bf9\u4e8e \u201chad a fit\u201d \u7684\u63cf\u8ff0\uff0c\u201cfit\u201d \u5728\u8fd9\u91cc\u901a\u5e38\u6307 \u201c\u75c9\u631b\u3001\u62bd\u6410\u201d \u6216 \u201c\u7a81\u53d1\u7684\u4e00\u9635\uff08\u5982\u75be\u75c5\u53d1\u4f5c\u7b49\u60c5\u51b5\uff09\u201d\u3002\u5728\u897f\u65b9\u793e\u4f1a\u7684\u65e5\u5e38\u751f\u6d3b\u548c\u533b\u7597\u573a\u666f\u4e2d\uff0c\u4eba\u4eec\u4f1a\u7528\u8fd9\u6837\u7684\u8bcd\u6c47\u6765\u63cf\u8ff0\u8eab\u4f53\u4e0a\u7684\u7a81\u53d1\u5f02\u5e38\u72b6\u51b5\u3002\u6bd4\u5982\u5728\u4e00\u4e9b\u5173\u4e8e\u5065\u5eb7\u95ee\u9898\u7684\u4ea4\u6d41\u3001\u7d27\u6025\u60c5\u51b5\u5904\u7406\u7b49\u60c5\u5883\u4e0b\uff0c\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u8868\u8fbe\u3002\u800c\u4e14\uff0c\u5f53\u63cf\u8ff0\u4e00\u4e2a\u4eba\u8eab\u4f53\u51fa\u73b0\u8fd9\u79cd\u72b6\u51b5\u65f6\uff0c\u8bf4 \u201cthe poor boy\u201d\uff08\u8fd9\u4e2a\u53ef\u601c\u7684\u7537\u5b69\uff09\u4e5f\u53cd\u6620\u51fa\u4e00\u79cd\u5bf9\u906d\u9047\u8fd9\u79cd\u72b6\u51b5\u7684\u4eba\u7684\u540c\u60c5\u548c\u5173\u5207\u7684\u6001\u5ea6\uff0c\u8fd9\u4e5f\u662f\u897f\u65b9\u6587\u5316\u4e2d\u5e38\u89c1\u7684\u60c5\u611f\u8868\u8fbe\u3002 \u201cIt pissed our dog off\u201d \u90e8\u5206\uff1a \u201cIt\u201d \u5728\u8fd9\u91cc\u4f5c\u4e3b\u8bed\uff0c\u901a\u5e38\u6307\u4ee3\u524d\u6587\u63d0\u5230\u7684\u67d0\u4ef6\u4e8b\u60c5\uff08\u7531\u4e8e\u6ca1\u6709\u524d\u6587\u5177\u4f53\u8bed\u5883\uff0c\u8fd9\u91cc \u201cIt\u201d \u6240\u6307\u5185\u5bb9\u4e0d\u660e\u786e\uff09\u3002 \u201cpissed\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u662f \u201cpiss\u201d \u7684\u8fc7\u53bb\u5f0f\uff0c\u201cpiss off\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u201cour dog\u201d \u662f \u201cpiss off\u201d \u7684\u5bbe\u8bed\u3002\u201coff\u201d \u5728\u8fd9\u91cc\u662f\u526f\u8bcd\uff0c\u4e0e \u201cpiss\u201d \u6784\u6210\u77ed\u8bed\u52a8\u8bcd\uff0c\u201cpiss sb. off\u201d \u8868\u793a \u201c\u4f7f\u67d0\u4eba\u607c\u6012\u201d\u3002 \u201cto no end\u201d \u90e8\u5206\uff1a \u201cto no end\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u7a0b\u5ea6\u72b6\u8bed\uff0c\u4fee\u9970 \u201cpissed our dog off\u201d \u8fd9\u4e2a\u52a8\u4f5c\uff0c\u8bf4\u660e\u4f7f\u72d7\u751f\u6c14\u7684\u7a0b\u5ea6\u8fbe\u5230\u4e86\u6781\u70b9\u3002\u6574\u4e2a\u53e5\u5b50\u7684\u7ed3\u6784\u662f \u201c\u4e3b\u8bed + \u8c13\u8bed\u52a8\u8bcd\u77ed\u8bed + \u5bbe\u8bed + \u7a0b\u5ea6\u72b6\u8bed\u201d \u201cpluck a nerve\u201d \u8fd9\u4e00\u8868\u8fbe\u6e90\u4e8e\u82f1\u8bed\u6587\u5316\u4e2d\u5bf9\u8eab\u4f53\u548c\u60c5\u611f\u5173\u7cfb\u7684\u4e00\u79cd\u5f62\u8c61\u6bd4\u55bb\u3002\u5728\u897f\u65b9\u6587\u5316\u91cc\uff0c\u4eba\u4eec\u5e38\u7528\u8eab\u4f53\u7684\u67d0\u4e9b\u90e8\u4f4d\u6216\u751f\u7406\u73b0\u8c61\u6765\u6bd4\u55bb\u60c5\u611f\u6216\u5fc3\u7406\u4e0a\u7684\u53cd\u5e94\u3002\u201cnerve\u201d \u672c\u610f\u662f \u201c\u795e\u7ecf\u201d\uff0c\u5f53\u8eab\u4f53\u7684\u795e\u7ecf\u88ab\u89e6\u78b0\u6216\u523a\u6fc0\u65f6\u4f1a\u6709\u5f3a\u70c8\u7684\u53cd\u5e94\uff0c\u5728\u8fd9\u91cc \u201cpluck a nerve\u201d \u5c31\u5f62\u8c61\u5730\u8868\u793a\u89e6\u52a8\u4e86\u67d0\u4eba\u654f\u611f\u7684\u60c5\u611f\u6216\u5f15\u53d1\u4e86\u67d0\u4eba\u5f3a\u70c8\u7684\u60c5\u7eea\u53cd\u5e94\uff0c\u6bd4\u5982\u751f\u6c14\u3001\u4f24\u5fc3\u3001\u5c34\u5c2c\u7b49\u3002\u8fd9\u79cd\u8868\u8fbe\u5e38\u7528\u4e8e\u4eba\u9645\u4ea4\u5f80\u4e2d\uff0c\u5f53\u4e00\u4e2a\u4eba\u4e0d\u786e\u5b9a\u81ea\u5df1\u7684\u8bdd\u6216\u884c\u4e3a\u662f\u5426\u5f15\u8d77\u4e86\u5bf9\u65b9\u7684\u5f3a\u70c8\u60c5\u7eea\u6ce2\u52a8\u65f6\uff0c\u5c31\u4f1a\u8bf4\u8fd9\u6837\u7684\u8bdd\u3002\u4f8b\u5982\uff0c\u5728\u4e89\u8bba\u6216\u8ba8\u8bba\u4e2d\uff0c\u4e00\u65b9\u53ef\u80fd\u4f1a\u89c9\u5f97\u81ea\u5df1\u7684\u8bdd\u53ef\u80fd\u89e6\u78b0\u5230\u4e86\u5bf9\u65b9\u7684\u75db\u5904\uff0c\u4ece\u800c\u8be2\u95ee \u201cDid I pluck a nerve there?\u201d\u3002 \u4ece\u8bed\u8a00\u4f7f\u7528\u573a\u666f\u6765\u770b\uff0c\u8fd9\u79cd\u8868\u8fbe\u5728\u65e5\u5e38\u5bf9\u8bdd\u3001\u5f71\u89c6\u5267\u60c5\u3001\u5c0f\u8bf4\u7b49\u60c5\u5883\u4e2d\u90fd\u6bd4\u8f83\u5e38\u89c1\uff0c\u5c24\u5176\u5728\u523b\u753b\u4eba\u7269\u4e4b\u95f4\u5fae\u5999\u7684\u4e92\u52a8\u548c\u60c5\u611f\u51b2\u7a81\u65f6\u7ecf\u5e38\u51fa\u73b0\uff0c\u5e2e\u52a9\u5c55\u73b0\u4eba\u7269\u5173\u7cfb\u548c\u60c5\u7eea\u53d8\u5316\u3002 \u201cget back on his rocker\u201d\uff1a\u201cget back on one's rocker\u201d \u662f\u4e00\u4e2a\u6bd4\u8f83\u5f62\u8c61\u7684\u4e60\u8bed\u8868\u8fbe\u3002\u201crocker\u201d \u6709 \u201c\u6447\u6905\u201d \u7684\u610f\u601d\uff0c\u4ece\u5b57\u9762\u7406\u89e3\uff0c\u201cget back on one's rocker\u201d \u8868\u793a\u56de\u5230\u6447\u6905\u4e0a\uff0c\u5b9e\u9645\u5f15\u7533\u4e3a \u201c\u6062\u590d\u6b63\u5e38\u72b6\u6001\u3001\u6062\u590d\u5e73\u9759\u3001\u6062\u590d\u4ee5\u5f80\u7684\u6d3b\u529b\u6216\u7406\u667a\u201d\u3002\u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u5f53\u4eba\u4eec\u5f62\u5bb9\u67d0\u4eba\u7ecf\u5386\u4e86\u4e00\u6bb5\u6df7\u4e71\u3001\u56f0\u6270\u6216\u5931\u53bb\u5e38\u6001\u7684\u65f6\u671f\u540e\uff0c\u5e0c\u671b\u5176\u80fd\u91cd\u65b0\u56de\u5230\u6b63\u5e38\u72b6\u6001\u65f6\uff0c\u5c31\u4f1a\u4f7f\u7528\u8fd9\u6837\u7684\u8868\u8fbe\u3002\u6bd4\u5982\u5728\u67d0\u4eba\u7ecf\u5386\u4e86\u75be\u75c5\u3001\u632b\u6298\u6216\u60c5\u7eea\u6ce2\u52a8\u540e\uff0c\u670b\u53cb\u6216\u5bb6\u4eba\u53ef\u80fd\u4f1a\u5e0c\u671b\u4ed6\u80fd \u201cget back on his rocker\u201d\u3002 \u201csnap out of it\u201d \u662f\u4e00\u4e2a\u975e\u5e38\u53e3\u8bed\u5316\u4e14\u5e38\u7528\u7684\u82f1\u8bed\u8868\u8fbe\u3002\u5728\u82f1\u8bed\u6587\u5316\u7684\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u5f53\u4e00\u4e2a\u4eba\u770b\u5230\u53e6\u4e00\u4e2a\u4eba\u5904\u4e8e\u6d88\u6781\u7684\u60c5\u7eea\u72b6\u6001\uff08\u5982\u60b2\u4f24\u3001\u6cae\u4e27\u3001\u6124\u6012\u3001\u8ff7\u832b\u3001\u6c89\u6d78\u5728\u67d0\u79cd\u5e7b\u60f3\u6216\u4e0d\u826f\u4e60\u60ef\u4e2d\uff09\u65f6\uff0c\u5c31\u4f1a\u7528\u8fd9\u4e2a\u77ed\u8bed\u6765\u9f13\u52b1\u5bf9\u65b9\u5feb\u901f\u6446\u8131\u8fd9\u79cd\u72b6\u6001\uff0c\u6062\u590d\u5230\u6b63\u5e38\u6216\u79ef\u6781\u7684\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u670b\u53cb\u56e0\u4e3a\u5931\u604b\u800c\u4e00\u76f4\u840e\u9761\u4e0d\u632f\uff0c\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u8bf4 \u201cCome on, snap out of it! There are better things waiting for you.\u201d\uff08\u5f97\u4e86\uff0c\u632f\u4f5c\u8d77\u6765\u5427\uff01\u8fd8\u6709\u66f4\u597d\u7684\u4e8b\u60c5\u7b49\u7740\u4f60\u5462\u3002\uff09\u8fd9\u79cd\u8868\u8fbe\u4f53\u73b0\u4e86\u82f1\u8bed\u6587\u5316\u4e2d\u6ce8\u91cd\u79ef\u6781\u5411\u4e0a\u3001\u9f13\u52b1\u4eba\u4eec\u5feb\u901f\u514b\u670d\u56f0\u96be\u548c\u4e0d\u826f\u60c5\u7eea\u7684\u6001\u5ea6\u3002 You know how your daddy used to say that you can only fish for so long before you got to throw a stick of dynamite in the water? \u201cthat you can only fish for so long before you got to throw a stick of dynamite in the water\u201d \u8fd9\u90e8\u5206\u662f \u201csay\u201d \u7684\u5bbe\u8bed\u4ece\u53e5\u3002\u201cthat\u201d \u662f\u5f15\u5bfc\u8bcd\uff0c\u5728\u4ece\u53e5\u4e2d\u4e0d\u5145\u5f53\u6210\u5206\u3002\u201cfor so long\u201d \u4e2d\u7684 \u201cfor\u201d \u8868\u793a\u4e00\u6bb5\u65f6\u95f4\uff0c\u201cso long\u201d \u8868\u793a \u201c\u8fd9\u4e48\u957f\u65f6\u95f4\u201d\uff0c\u4f5c\u65f6\u95f4\u72b6\u8bed\u4fee\u9970 \u201cfish\u201d\u3002\u201cbefore you got to throw a stick of dynamite in the water\u201d \u662f\u4e00\u4e2a\u65f6\u95f4\u72b6\u8bed\u4ece\u53e5\uff0c\u201cbefore\u201d \u662f\u5f15\u5bfc\u8bcd\uff0c\u201cgot to\u201d \u5728\u8fd9\u91cc\u76f8\u5f53\u4e8e \u201chave to\u201d\uff08\u8fc7\u53bb\u5f0f\uff09\uff0c\u8868\u793a \u201c\u4e0d\u5f97\u4e0d\u3001\u5fc5\u987b\u201d\uff0c\u201ca stick of\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u8868\u793a \u201c\u4e00\u6839\u201d\uff0c\u4fee\u9970 \u201cdynamite\u201d \u3002 \u201cget cracking\u201d \u662f\u975e\u5e38\u53e3\u8bed\u5316\u4e14\u5e38\u7528\u7684\u82f1\u8bed\u8868\u8fbe\u3002\u5728\u82f1\u8bed\u6587\u5316\u7684\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u5f53\u4eba\u4eec\u60f3\u8981\u5f00\u59cb\u7740\u624b\u505a\u67d0\u4ef6\u4e8b\u60c5\uff0c\u5c24\u5176\u662f\u5728\u5927\u5bb6\u51c6\u5907\u4e00\u8d77\u884c\u52a8\uff0c\u6216\u8005\u4e00\u65b9\u50ac\u4fc3\u53e6\u4e00\u65b9\u5f00\u59cb\u5de5\u4f5c\u3001\u5b8c\u6210\u4efb\u52a1\u7b49\u60c5\u5883\u4e0b\uff0c\u5c31\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u77ed\u8bed\u3002\u6bd4\u5982\u5728\u4e00\u7fa4\u4eba\u51c6\u5907\u8fdb\u884c\u4e00\u9879\u624b\u5de5\u5236\u4f5c\u3001\u5b8c\u6210\u4e00\u9879\u5de5\u4f5c\u9879\u76ee\u6216\u8005\u5f00\u59cb\u4e00\u573a\u4f53\u80b2\u6d3b\u52a8\u65f6\uff0c\u53ef\u80fd\u4f1a\u6709\u4eba\u8bf4 \u201cNow let\u2019s get cracking\u201d \u6765\u9f13\u52b1\u5927\u5bb6\u8fc5\u901f\u5f00\u59cb\u884c\u52a8\u3002\u5b83\u4f53\u73b0\u4e86\u4e00\u79cd\u79ef\u6781\u4e3b\u52a8\u3001\u4e0d\u62d6\u5ef6\u7684\u505a\u4e8b\u6001\u5ea6\uff0c\u7ed9\u4eba\u4e00\u79cd\u5145\u6ee1\u6d3b\u529b\u548c\u884c\u52a8\u529b\u7684\u611f\u89c9\u3002 \u201cThankfully\u201d \u8868\u8fbe\u4e00\u79cd\u5e86\u5e78\u3001\u611f\u6069\u7684\u60c5\u7eea\uff0c\u5728\u897f\u65b9\u6587\u5316\u4e2d\uff0c\u4eba\u4eec\u5e38\u5e38\u4f1a\u8868\u8fbe\u5bf9\u751f\u6d3b\u4e2d\u4e00\u4e9b\u4e8b\u60c5\u7684\u611f\u6069\uff0c\u53ef\u80fd\u5e26\u6709\u4e00\u5b9a\u7684\u5b97\u6559\u6587\u5316\u5f71\u54cd\uff08\u867d\u7136\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u5b8c\u5168\u57fa\u4e8e\u5b97\u6559\u610f\u4e49\uff09\uff0c\u8868\u793a\u5bf9\u67d0\u79cd\u7ed3\u679c\u6216\u60c5\u51b5\u7684\u5e86\u5e78\u6001\u5ea6\u3002 \u201che blessed me with...\u201d \u4e2d \u201cbless\u201d \u5e38\u89c1\u4e8e\u5b97\u6559\u8bed\u5883\u4e2d\uff0c\u610f\u601d\u662f \u201c\u8d50\u798f\u3001\u4fdd\u4f51\u3001\u7ed9\u4e88\u201d\uff0c\u8fd9\u91cc\u8bf4 \u201che blessed me with\u201d \u53ef\u80fd\u662f\u4e00\u79cd\u6bd4\u8f83\u968f\u610f\u5730\u8868\u8fbe\u67d0\u4eba\u7ed9\u4e88\u81ea\u5df1\u67d0\u4e9b\u4e1c\u897f\uff08\u8fd9\u91cc\u662f\u5b69\u5b50\uff09\u3002\u4f46\u540c\u65f6\u8bf4\u8bdd\u8005\u540e\u9762\u53c8\u8bf4\u5b69\u5b50 \u201cdumb as soup\u201d\uff08\u7b28\u5f97\u8981\u547d\uff09\uff0c\u8fd9\u79cd\u770b\u4f3c\u77db\u76fe\u7684\u8868\u8fbe\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\u53ef\u80fd\u662f\u4e00\u79cd\u5e7d\u9ed8\u6216\u7565\u5e26\u8c03\u4f83\u7684\u65b9\u5f0f\uff0c\u4f53\u73b0\u4e86\u8bf4\u8bdd\u8005\u5bf9\u5b69\u5b50\u53c8\u7231\u53c8 \u201c\u5acc\u5f03\u201d \u7684\u590d\u6742\u60c5\u611f\uff0c\u5728\u5bb6\u5ead\u6587\u5316\u4e2d\uff0c\u5bb6\u4eba\u4e4b\u95f4\u5e38\u5e38\u4f1a\u7528\u8fd9\u79cd\u7565\u5e26\u73a9\u7b11\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u5f7c\u6b64\u3002 \u201cdumb as soup\u201d \u662f\u4e00\u4e2a\u6bd4\u8f83\u5f62\u8c61\u4e14\u53e3\u8bed\u5316\u7684\u4fd7\u8bed\u8868\u8fbe\u3002\u201csoup\u201d\uff08\u6c64\uff09\u662f\u4e00\u79cd\u5f88\u7a00\u8f6f\u3001\u6ca1\u6709\u4ec0\u4e48\u5b9e\u8d28\u5185\u5bb9\u7684\u4e1c\u897f\uff0c\u7528 \u201cdumb as soup\u201d \u6765\u5f62\u5bb9\u4eba\u7b28\uff0c\u662f\u4e00\u79cd\u751f\u52a8\u7684\u6bd4\u55bb\uff0c\u5728\u82f1\u8bed\u6587\u5316\u7684\u53e3\u8bed\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u4f1a\u4f7f\u7528\u5404\u79cd\u5f62\u8c61\u7684\u4fd7\u8bed\u6765\u63cf\u8ff0\u4eba\u7684\u7279\u70b9\u3002 \u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u4e00\u4e9b\u9700\u8981\u5728\u767d\u5929\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u6216\u6d3b\u52a8\u7684\u60c5\u5883\u4e0b\uff0c\u6bd4\u5982\u6237\u5916\u5de5\u4f5c\uff08\u5982\u519c\u573a\u52b3\u4f5c\u3001\u5efa\u7b51\u65bd\u5de5\u7b49\uff09\u3001\u6237\u5916\u8fd0\u52a8\uff08\u5982\u5f92\u6b65\u65c5\u884c\u3001\u6253\u730e\u7b49\uff09\uff0c\u4eba\u4eec\u4f1a\u5f88\u5728\u610f\u767d\u5929\u7684\u65f6\u95f4\u3002\u56e0\u4e3a\u4e00\u65e6\u5929\u8272\u53d8\u6697\uff0c\u5f88\u591a\u6d3b\u52a8\u5c31\u4f1a\u53d7\u5230\u9650\u5236\u751a\u81f3\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u3002\u6240\u4ee5\u5f53\u8bf4 \u201cwe\u2019re losing daylight\u201d \u65f6\uff0c\u901a\u5e38\u662f\u5728\u63d0\u9192\u5927\u5bb6\u65f6\u95f4\u7d27\u8feb\uff0c\u8981\u6293\u7d27\u5728\u5929\u9ed1\u4e4b\u524d\u5b8c\u6210\u624b\u5934\u7684\u4e8b\u60c5\uff0c\u53cd\u6620\u4e86\u4e00\u79cd\u5bf9\u65f6\u95f4\u548c\u5149\u7ebf\u6761\u4ef6\u7684\u91cd\u89c6\uff0c\u4ee5\u53ca\u5728\u81ea\u7136\u73af\u5883\u4e0b\u6d3b\u52a8\u7684\u4e00\u79cd\u751f\u6d3b\u4e60\u60ef\u3002 \u201cgotten off on the wrong foot\u201d \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u82f1\u8bed\u4e60\u8bed\uff0c\u5728\u82f1\u8bed\u6587\u5316\u4e2d\uff0c\u5b83\u5f62\u8c61\u5730\u8868\u793a\u4eba\u4e0e\u4eba\u4e4b\u95f4\u521d\u6b21\u89c1\u9762\u6216\u5f00\u59cb\u67d0\u79cd\u5173\u7cfb\uff08\u5982\u5408\u4f5c\u3001\u4ea4\u5f80\u7b49\uff09\u65f6\u5c31\u51fa\u73b0\u4e86\u4e0d\u597d\u7684\u5f00\u7aef\u6216\u72af\u4e86\u9519\u8bef\u3002\u8fd9\u79cd\u8868\u8fbe\u5728\u793e\u4ea4\u573a\u5408\u4e2d\u5f88\u5e38\u89c1\uff0c\u6bd4\u5982\u5728\u670b\u53cb\u3001\u540c\u4e8b\u4e4b\u95f4\uff0c\u5f53\u610f\u8bc6\u5230\u4e00\u5f00\u59cb\u7684\u4e92\u52a8\u4e0d\u592a\u987a\u5229\u65f6\uff0c\u4f1a\u7528\u8fd9\u4e2a\u4e60\u8bed\u6765\u63d0\u53ca\u5e76\u53ef\u80fd\u5c1d\u8bd5\u4fee\u590d\u5173\u7cfb\u3002\u800c\u79f0\u547c\u522b\u4eba \u201cidiot\u201d\uff08\u767d\u75f4\uff09\u663e\u7136\u662f\u4e0d\u793c\u8c8c\u7684\u884c\u4e3a\uff0c\u5728\u4efb\u4f55\u6587\u5316\u4e2d\uff0c\u8fd9\u6837\u7684\u79f0\u547c\u90fd\u53ef\u80fd\u4f24\u5bb3\u5230\u5bf9\u65b9\u611f\u60c5\uff0c\u5bfc\u81f4\u5173\u7cfb\u7d27\u5f20\uff0c\u6240\u4ee5\u8bf4\u8bdd\u8005\u5728\u8fd9\u91cc\u627f\u8ba4\u4e86\u81ea\u5df1\u7684\u9519\u8bef\uff0c\u610f\u8bc6\u5230\u56e0\u4e3a\u8fd9\u4e2a\u4e0d\u5f53\u79f0\u547c\u800c\u8ba9\u53cc\u65b9\u4e00\u5f00\u59cb\u5c31\u6ca1\u5904\u597d\u3002 \u8bed\u6cd5\u642d\u914d\uff1a \u201cwe may have gotten...\u201d \u8fd9\u90e8\u5206\u4f7f\u7528\u4e86 \u201c\u60c5\u6001\u52a8\u8bcd\uff08may\uff09+ have + \u8fc7\u53bb\u5206\u8bcd\uff08gotten\uff09\u201d \u7684\u7ed3\u6784\uff0c\u8fd9\u662f\u4e00\u79cd\u8868\u793a\u5bf9\u8fc7\u53bb\u60c5\u51b5\u7684\u63a8\u6d4b\u6216\u53ef\u80fd\u6027\u7684\u8bed\u6cd5\u5f62\u5f0f\u3002\u201cmay have done\u201d \u8868\u793a \u201c\u53ef\u80fd\u5df2\u7ecf\u505a\u4e86\u2026\u2026\u201d\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u8bf4\u8bdd\u8005\u8ba4\u4e3a\u4ed6\u4eec\u53ef\u80fd\u5728\u8fc7\u53bb\uff08\u5f53\u79f0\u547c\u5bf9\u65b9\u4e3a \u201cidiot\u201d \u65f6\uff09\u5c31\u5df2\u7ecf\u6709\u4e86\u4e0d\u597d\u7684\u5f00\u7aef\u3002 \u201cgotten off\u201d \u662f \u201cget off\u201d \u7684\u8fc7\u53bb\u5206\u8bcd\u5f62\u5f0f\uff0c\u201cget off\u201d \u5728\u8fd9\u91cc\u548c \u201con the wrong foot\u201d \u6784\u6210\u4e60\u8bed \u201cget off on the wrong foot\u201d\u3002","title":"\u53e5\u5b50"},{"location":"art/English/tv/bigbang/s01/e05/s01e05/","text":"\u53f0\u8bcd \u624b\u6253\u53f0\u8bcd \u751f\u8bcd battalion \u8425 division \u5e08 infantry \u6b65\u5175 Cavalry \u9a91\u5175 cellist \u5927\u63d0\u7434\u624b quartet \u56db\u91cd\u594f \u53e5\u5b50 \u6211\u4eec\u4ece\u4fa7\u7ffc\u5305\u6284\u7530\u7eb3\u897f\u5927\u5b66\u5fd7\u613f\u8005\u961f\uff08\u8fd9\u91cc \u201cTennessee Volunteers\u201d \u5e38\u6307\u7f8e\u56fd\u7530\u7eb3\u897f\u5927\u5b66\u7684\u4f53\u80b2\u4ee3\u8868\u961f\uff0c\u7279\u522b\u662f\u6a44\u6984\u7403\u961f\u7b49\uff09\uff0c\u5317\u65b9\u519b\u961f\u53c8\u4e00\u6b21\u8d62\u5f97\u4e86\u845b\u5e95\u65af\u5821\u6218\u5f79\u7684\u80dc\u5229\u3002 \u4ece\u53e5\u5b50\u672c\u8eab\u6765\u770b\uff0c\u201cflank\u201d \u5728\u8fd9\u91cc\u4f5c\u52a8\u8bcd\uff0c\u8868\u793a \u201c\u4ece\u4fa7\u7ffc\u5305\u6284\u3001\u4fa7\u7ffc\u653b\u51fb\u201d \uff1b\u201cthe Tennessee Volunteers\u201d \u7530\u7eb3\u897f\u5927\u5b66\u5fd7\u613f\u8005\u961f\uff0c\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u56e2\u4f53\u540d\u79f0\uff1b\u201cthe North\u201d \u6307\u7684\u662f\u7f8e\u56fd\u5357\u5317\u6218\u4e89\u65f6\u671f\u7684\u5317\u65b9\u519b\u961f\uff1b\u201cthe Battle of Gettysburg\u201d \u662f\u7f8e\u56fd\u5357\u5317\u6218\u4e89\u4e2d\u975e\u5e38\u8457\u540d\u7684\u845b\u5e95\u65af\u5821\u6218\u5f79\uff0c\u8fd9\u573a\u6218\u5f79\u662f\u5357\u5317\u6218\u4e89\u7684\u8f6c\u6298\u70b9\u4e4b\u4e00\u3002 \u201cWhen the smoke clears, Abraham Lincoln will be speaking Hindi and drinking mint juleps.\u201d \uff1a\u201c\u5f53\u785d\u70df\u6563\u53bb\uff08\u201cWhen the smoke clears\u201d \u5b57\u9762\u610f\u601d\u662f\u5f53\u70df\u96fe\u6d88\u6563\uff0c\u8fd9\u91cc\u53ef\u7406\u89e3\u4e3a\u5f53\u6df7\u4e71\u6216\u67d0\u79cd\u60c5\u5883\u7ed3\u675f\u540e\uff09\uff0c\u4e9a\u4f2f\u62c9\u7f55\u30fb\u6797\u80af\uff08Abraham Lincoln\uff0c\u7f8e\u56fd\u7b2c 16 \u4efb\u603b\u7edf\uff0c\u9886\u5bfc\u4e86\u7f8e\u56fd\u5357\u5317\u6218\u4e89\uff09\u5c06\u4f1a\u8bf4\u7740\u5370\u5730\u8bed\uff08Hindi\uff0c\u5370\u5ea6\u7684\u4e3b\u8981\u8bed\u8a00\u4e4b\u4e00\uff09\u5e76\u4e14\u559d\u7740\u8584\u8377\u6731\u5229\u666e\u9152\uff08mint juleps\uff0c\u4e00\u79cd\u4f20\u7edf\u7684\u7f8e\u56fd\u5357\u65b9\u9e21\u5c3e\u9152\uff09\u3002\u201d \u8fd9\u91cc\u5c06\u5386\u53f2\u4e0a\u7684\u6797\u80af\u4e0e\u5370\u5ea6\u8bed\u8a00\u4ee5\u53ca\u7f8e\u56fd\u5357\u65b9\u7279\u8272\u996e\u54c1\u8054\u7cfb\u8d77\u6765\uff0c\u8fd9\u79cd\u7ec4\u5408\u975e\u5e38\u4e0d\u5bfb\u5e38\uff0c\u5e26\u6709\u4e00\u79cd\u8352\u8bde\u3001\u620f\u8c11\u6216\u8d85\u73b0\u5b9e\u7684\u610f\u5473\uff0c\u53ef\u80fd\u662f\u5728\u4ee5\u4e00\u79cd\u5938\u5f20\u3001\u5e7d\u9ed8\u6216\u8bbd\u523a\u7684\u65b9\u5f0f\u8868\u8fbe\u4e00\u79cd\u6587\u5316\u7684\u9519\u4e71\u3001\u6df7\u5408\u6216\u5bf9\u67d0\u79cd\u4e0d\u5408\u7406\u73b0\u8c61\u7684\u8c03\u4f83 \u8fd9\u53e5\u8bdd\u6545\u610f\u5236\u9020\u6027\u6697\u793a+\u53cd\u8f6c\uff1a \u524d\u534a\u53e5 \u201ccome for the breasts\u201d \u6307\u7684\u662f\u5438\u5f15\u6ce8\u610f\u7684\u201c\u5916\u5728\u201d\u6216\u201c\u6027\u611f\u201d\u7684\u4e1c\u897f\uff08\u6bd4\u5982\u7a7f\u7740\u6027\u611f\u7684\u5973\u6027\uff09\uff0c\u5c5e\u4e8e\u4e00\u79cd\u5178\u578b\u7684\u201c\u5f15\u4eba\u6ce8\u76ee\u201d\u7684\u5671\u5934\u3002 \u540e\u534a\u53e5 \u201cstay for the brains\u201d \u6307\u7684\u662f\u771f\u6b63\u7559\u4e0b\u6765\uff0c\u662f\u56e0\u4e3a\u5bf9\u65b9\u806a\u660e\u3001\u667a\u6167\u3001\u6709\u6df1\u5ea6\uff0c\u5f3a\u8c03\u5185\u5728\u4ef7\u503c\u3002 \u201cLeonard\u201d\u8fd9\u4e2a\u540d\u5b57\uff0c\u5728\u7f8e\u56fd\u9752\u5c11\u5e74\u6587\u5316\u4e2d\uff0c\u6709\u70b9\u4e66\u5446\u5b50\u3001\u8001\u6d3e\u3001\u5b85\u7684\u611f\u89c9\uff1b \u201cAdvanced Placement classes\uff08AP\u73ed\uff09\u201d\u662f\u4e3a\u6210\u7ee9\u7279\u522b\u4f18\u79c0\u7684\u5b66\u751f\u5f00\u8bbe\u7684\u8bfe\u7a0b\uff0c\u901a\u5e38\u88ab\u89c6\u4e3a\u201c\u5b66\u9738\u201d\u624d\u4e0a\u7684\uff1b \u201cwasn\u2019t getting me beaten up enough\u201d \u662f\u8bbd\u523a\u5730\u8bf4\uff0c\u8fd9\u4e9b\u201c\u4e66\u5446\u5b50\u201d\u6807\u7b7e\u5df2\u7ecf\u591f\u8ba9\u4eba\u88ab\u6b3a\u8d1f\u4e86\uff0c\u7238\u5988\u8fd8\u4e0d\u6ee1\u8db3\uff0c\u4eff\u4f5b\u6545\u610f\u8ba9\u4ed6\u66f4\u5bb9\u6613\u88ab\u9738\u51cc\u3002 \u201cBoy\u201d \u5728\u8fd9\u91cc\u662f\u4e00\u79cd\u79f0\u547c\u8bed\uff0c\u7528\u6765\u5f15\u8d77\u5bf9\u65b9\u7684\u6ce8\u610f\uff0c\u5e76\u975e\u6307\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u5c0f\u7537\u5b69\uff0c\u5728\u53e3\u8bed\u4e2d\u5e38\u7528\u4e8e\u52a0\u5f3a\u8bed\u6c14\u6216\u8868\u8fbe\u4e00\u79cd\u4eb2\u6635\u3001\u8c03\u4f83\u7684\u6001\u5ea6\u3002 \u201cyou\u2019re wound awfully tight\u201d \u662f\u4e3b\u7cfb\u8868\u7ed3\u6784\uff0c\u201cyou\u2019re\u201d \u662f \u201cyou are\u201d \u7684\u7f29\u5199\uff0c\u201cwound\u201d \u5728\u8fd9\u91cc\u662f\u5f62\u5bb9\u8bcd \u201cwound up\u201d\uff08\u7d27\u5f20\u7684\u3001\u7126\u8651\u4e0d\u5b89\u7684\uff09\u7684\u4e00\u79cd\u7b80\u7565\u5f62\u5f0f\uff0c\u201cawfully\u201d \u662f\u526f\u8bcd\uff0c\u610f\u4e3a \u201c\u975e\u5e38\u3001\u6781\u5176\u201d\uff0c\u7528\u6765\u4fee\u9970\u5f62\u5bb9\u8bcd \u201ctight\u201d\uff08\u7d27\u5f20\u7684\uff09\uff0c\u8868\u793a\u7a0b\u5ea6\u5f88\u6df1\u3002 \u201cfor a man who just had sexual intercourse\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u201cfor\u201d \u8868\u793a \u201c\u5bf9\u4e8e\u201d\uff0c\u201ca man\u201d \u662f\u4ecb\u8bcd \u201cfor\u201d \u7684\u5bbe\u8bed\uff0c\u201cwho just had sexual intercourse\u201d \u662f\u4e00\u4e2a\u5b9a\u8bed\u4ece\u53e5\uff0c\u4fee\u9970\u5148\u884c\u8bcd \u201ca man\u201d\uff0c\u201cwho\u201d \u662f\u5173\u7cfb\u4ee3\u8bcd\uff0c\u5728\u4ece\u53e5\u4e2d\u4f5c\u4e3b\u8bed\uff0c\u201cjust\u201d \u662f\u526f\u8bcd\u8868\u793a \u201c\u521a\u521a\u201d\uff0c\u201chad sexual intercourse\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u53d1\u751f\u4e86\u6027\u884c\u4e3a\u201d\u3002 penny\u7684\u8fd9\u4e2a\u7b11\u8c01\u61c2\u554a\uff01\uff01\uff01 \u53e5\u5b50\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u9648\u8ff0\u53e5\u3002\u201cThis\u201d \u662f\u53e5\u5b50\u7684\u4e3b\u8bed\uff0c\u6307\u4ee3\u6240\u8c08\u8bba\u7684\u67d0\u4e2a\u4e8b\u7269\uff08\u5f88\u53ef\u80fd\u662f\u4e00\u79cd\u98df\u7269\uff0c\u6bd4\u5982\u6c49\u5821\u4e4b\u7c7b\u7684\u5e26\u9762\u5305\u7684\u98df\u7269\uff09\uff1b\u201chas\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u6709\u201d\uff1b\u201ca much more satisfying meat to bun to condiment ratio\u201d \u662f\u5bbe\u8bed\u90e8\u5206\u3002 \u8bcd\u6c47\u53ca\u77ed\u8bed\uff1a \u201cmuch more\u201d \u662f\u6bd4\u8f83\u7ea7\u7684\u4fee\u9970\u8bed\uff0c\u201cmuch\u201d \u7528\u6765\u52a0\u5f3a \u201cmore\u201d \u7684\u7a0b\u5ea6\uff0c\u201csatisfying\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u4ee4\u4eba\u6ee1\u610f\u7684\u201d\uff0c\u7528\u6765\u4fee\u9970 \u201cratio\u201d\u3002 \u201cmeat to bun to condiment ratio\u201d \u662f\u4e00\u4e2a\u540d\u8bcd\u77ed\u8bed\uff0c\u201cmeat\u201d\uff08\u8089\uff09\u3001\u201cbun\u201d\uff08\u5c0f\u5706\u9762\u5305\uff09\u3001\u201ccondiment\u201d\uff08\u8c03\u5473\u54c1\uff09\u901a\u8fc7 \u201cto\u201d \u8fde\u63a5\uff0c\u8868\u660e\u8fd9\u4e09\u8005\u4e4b\u95f4\u7684\u6bd4\u4f8b\u5173\u7cfb\uff0c\u5373\u8089\u3001\u9762\u5305\u548c\u8c03\u5473\u54c1\u4e4b\u95f4\u7684\u6bd4\u4f8b\u3002","title":"S01e05"},{"location":"art/English/tv/bigbang/s01/e05/s01e05/#_1","text":"battalion \u8425 division \u5e08 infantry \u6b65\u5175 Cavalry \u9a91\u5175 cellist \u5927\u63d0\u7434\u624b quartet \u56db\u91cd\u594f","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e05/s01e05/#_2","text":"\u6211\u4eec\u4ece\u4fa7\u7ffc\u5305\u6284\u7530\u7eb3\u897f\u5927\u5b66\u5fd7\u613f\u8005\u961f\uff08\u8fd9\u91cc \u201cTennessee Volunteers\u201d \u5e38\u6307\u7f8e\u56fd\u7530\u7eb3\u897f\u5927\u5b66\u7684\u4f53\u80b2\u4ee3\u8868\u961f\uff0c\u7279\u522b\u662f\u6a44\u6984\u7403\u961f\u7b49\uff09\uff0c\u5317\u65b9\u519b\u961f\u53c8\u4e00\u6b21\u8d62\u5f97\u4e86\u845b\u5e95\u65af\u5821\u6218\u5f79\u7684\u80dc\u5229\u3002 \u4ece\u53e5\u5b50\u672c\u8eab\u6765\u770b\uff0c\u201cflank\u201d \u5728\u8fd9\u91cc\u4f5c\u52a8\u8bcd\uff0c\u8868\u793a \u201c\u4ece\u4fa7\u7ffc\u5305\u6284\u3001\u4fa7\u7ffc\u653b\u51fb\u201d \uff1b\u201cthe Tennessee Volunteers\u201d \u7530\u7eb3\u897f\u5927\u5b66\u5fd7\u613f\u8005\u961f\uff0c\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u56e2\u4f53\u540d\u79f0\uff1b\u201cthe North\u201d \u6307\u7684\u662f\u7f8e\u56fd\u5357\u5317\u6218\u4e89\u65f6\u671f\u7684\u5317\u65b9\u519b\u961f\uff1b\u201cthe Battle of Gettysburg\u201d \u662f\u7f8e\u56fd\u5357\u5317\u6218\u4e89\u4e2d\u975e\u5e38\u8457\u540d\u7684\u845b\u5e95\u65af\u5821\u6218\u5f79\uff0c\u8fd9\u573a\u6218\u5f79\u662f\u5357\u5317\u6218\u4e89\u7684\u8f6c\u6298\u70b9\u4e4b\u4e00\u3002 \u201cWhen the smoke clears, Abraham Lincoln will be speaking Hindi and drinking mint juleps.\u201d \uff1a\u201c\u5f53\u785d\u70df\u6563\u53bb\uff08\u201cWhen the smoke clears\u201d \u5b57\u9762\u610f\u601d\u662f\u5f53\u70df\u96fe\u6d88\u6563\uff0c\u8fd9\u91cc\u53ef\u7406\u89e3\u4e3a\u5f53\u6df7\u4e71\u6216\u67d0\u79cd\u60c5\u5883\u7ed3\u675f\u540e\uff09\uff0c\u4e9a\u4f2f\u62c9\u7f55\u30fb\u6797\u80af\uff08Abraham Lincoln\uff0c\u7f8e\u56fd\u7b2c 16 \u4efb\u603b\u7edf\uff0c\u9886\u5bfc\u4e86\u7f8e\u56fd\u5357\u5317\u6218\u4e89\uff09\u5c06\u4f1a\u8bf4\u7740\u5370\u5730\u8bed\uff08Hindi\uff0c\u5370\u5ea6\u7684\u4e3b\u8981\u8bed\u8a00\u4e4b\u4e00\uff09\u5e76\u4e14\u559d\u7740\u8584\u8377\u6731\u5229\u666e\u9152\uff08mint juleps\uff0c\u4e00\u79cd\u4f20\u7edf\u7684\u7f8e\u56fd\u5357\u65b9\u9e21\u5c3e\u9152\uff09\u3002\u201d \u8fd9\u91cc\u5c06\u5386\u53f2\u4e0a\u7684\u6797\u80af\u4e0e\u5370\u5ea6\u8bed\u8a00\u4ee5\u53ca\u7f8e\u56fd\u5357\u65b9\u7279\u8272\u996e\u54c1\u8054\u7cfb\u8d77\u6765\uff0c\u8fd9\u79cd\u7ec4\u5408\u975e\u5e38\u4e0d\u5bfb\u5e38\uff0c\u5e26\u6709\u4e00\u79cd\u8352\u8bde\u3001\u620f\u8c11\u6216\u8d85\u73b0\u5b9e\u7684\u610f\u5473\uff0c\u53ef\u80fd\u662f\u5728\u4ee5\u4e00\u79cd\u5938\u5f20\u3001\u5e7d\u9ed8\u6216\u8bbd\u523a\u7684\u65b9\u5f0f\u8868\u8fbe\u4e00\u79cd\u6587\u5316\u7684\u9519\u4e71\u3001\u6df7\u5408\u6216\u5bf9\u67d0\u79cd\u4e0d\u5408\u7406\u73b0\u8c61\u7684\u8c03\u4f83 \u8fd9\u53e5\u8bdd\u6545\u610f\u5236\u9020\u6027\u6697\u793a+\u53cd\u8f6c\uff1a \u524d\u534a\u53e5 \u201ccome for the breasts\u201d \u6307\u7684\u662f\u5438\u5f15\u6ce8\u610f\u7684\u201c\u5916\u5728\u201d\u6216\u201c\u6027\u611f\u201d\u7684\u4e1c\u897f\uff08\u6bd4\u5982\u7a7f\u7740\u6027\u611f\u7684\u5973\u6027\uff09\uff0c\u5c5e\u4e8e\u4e00\u79cd\u5178\u578b\u7684\u201c\u5f15\u4eba\u6ce8\u76ee\u201d\u7684\u5671\u5934\u3002 \u540e\u534a\u53e5 \u201cstay for the brains\u201d \u6307\u7684\u662f\u771f\u6b63\u7559\u4e0b\u6765\uff0c\u662f\u56e0\u4e3a\u5bf9\u65b9\u806a\u660e\u3001\u667a\u6167\u3001\u6709\u6df1\u5ea6\uff0c\u5f3a\u8c03\u5185\u5728\u4ef7\u503c\u3002 \u201cLeonard\u201d\u8fd9\u4e2a\u540d\u5b57\uff0c\u5728\u7f8e\u56fd\u9752\u5c11\u5e74\u6587\u5316\u4e2d\uff0c\u6709\u70b9\u4e66\u5446\u5b50\u3001\u8001\u6d3e\u3001\u5b85\u7684\u611f\u89c9\uff1b \u201cAdvanced Placement classes\uff08AP\u73ed\uff09\u201d\u662f\u4e3a\u6210\u7ee9\u7279\u522b\u4f18\u79c0\u7684\u5b66\u751f\u5f00\u8bbe\u7684\u8bfe\u7a0b\uff0c\u901a\u5e38\u88ab\u89c6\u4e3a\u201c\u5b66\u9738\u201d\u624d\u4e0a\u7684\uff1b \u201cwasn\u2019t getting me beaten up enough\u201d \u662f\u8bbd\u523a\u5730\u8bf4\uff0c\u8fd9\u4e9b\u201c\u4e66\u5446\u5b50\u201d\u6807\u7b7e\u5df2\u7ecf\u591f\u8ba9\u4eba\u88ab\u6b3a\u8d1f\u4e86\uff0c\u7238\u5988\u8fd8\u4e0d\u6ee1\u8db3\uff0c\u4eff\u4f5b\u6545\u610f\u8ba9\u4ed6\u66f4\u5bb9\u6613\u88ab\u9738\u51cc\u3002 \u201cBoy\u201d \u5728\u8fd9\u91cc\u662f\u4e00\u79cd\u79f0\u547c\u8bed\uff0c\u7528\u6765\u5f15\u8d77\u5bf9\u65b9\u7684\u6ce8\u610f\uff0c\u5e76\u975e\u6307\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u5c0f\u7537\u5b69\uff0c\u5728\u53e3\u8bed\u4e2d\u5e38\u7528\u4e8e\u52a0\u5f3a\u8bed\u6c14\u6216\u8868\u8fbe\u4e00\u79cd\u4eb2\u6635\u3001\u8c03\u4f83\u7684\u6001\u5ea6\u3002 \u201cyou\u2019re wound awfully tight\u201d \u662f\u4e3b\u7cfb\u8868\u7ed3\u6784\uff0c\u201cyou\u2019re\u201d \u662f \u201cyou are\u201d \u7684\u7f29\u5199\uff0c\u201cwound\u201d \u5728\u8fd9\u91cc\u662f\u5f62\u5bb9\u8bcd \u201cwound up\u201d\uff08\u7d27\u5f20\u7684\u3001\u7126\u8651\u4e0d\u5b89\u7684\uff09\u7684\u4e00\u79cd\u7b80\u7565\u5f62\u5f0f\uff0c\u201cawfully\u201d \u662f\u526f\u8bcd\uff0c\u610f\u4e3a \u201c\u975e\u5e38\u3001\u6781\u5176\u201d\uff0c\u7528\u6765\u4fee\u9970\u5f62\u5bb9\u8bcd \u201ctight\u201d\uff08\u7d27\u5f20\u7684\uff09\uff0c\u8868\u793a\u7a0b\u5ea6\u5f88\u6df1\u3002 \u201cfor a man who just had sexual intercourse\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u201cfor\u201d \u8868\u793a \u201c\u5bf9\u4e8e\u201d\uff0c\u201ca man\u201d \u662f\u4ecb\u8bcd \u201cfor\u201d \u7684\u5bbe\u8bed\uff0c\u201cwho just had sexual intercourse\u201d \u662f\u4e00\u4e2a\u5b9a\u8bed\u4ece\u53e5\uff0c\u4fee\u9970\u5148\u884c\u8bcd \u201ca man\u201d\uff0c\u201cwho\u201d \u662f\u5173\u7cfb\u4ee3\u8bcd\uff0c\u5728\u4ece\u53e5\u4e2d\u4f5c\u4e3b\u8bed\uff0c\u201cjust\u201d \u662f\u526f\u8bcd\u8868\u793a \u201c\u521a\u521a\u201d\uff0c\u201chad sexual intercourse\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u53d1\u751f\u4e86\u6027\u884c\u4e3a\u201d\u3002 penny\u7684\u8fd9\u4e2a\u7b11\u8c01\u61c2\u554a\uff01\uff01\uff01 \u53e5\u5b50\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u9648\u8ff0\u53e5\u3002\u201cThis\u201d \u662f\u53e5\u5b50\u7684\u4e3b\u8bed\uff0c\u6307\u4ee3\u6240\u8c08\u8bba\u7684\u67d0\u4e2a\u4e8b\u7269\uff08\u5f88\u53ef\u80fd\u662f\u4e00\u79cd\u98df\u7269\uff0c\u6bd4\u5982\u6c49\u5821\u4e4b\u7c7b\u7684\u5e26\u9762\u5305\u7684\u98df\u7269\uff09\uff1b\u201chas\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u6709\u201d\uff1b\u201ca much more satisfying meat to bun to condiment ratio\u201d \u662f\u5bbe\u8bed\u90e8\u5206\u3002 \u8bcd\u6c47\u53ca\u77ed\u8bed\uff1a \u201cmuch more\u201d \u662f\u6bd4\u8f83\u7ea7\u7684\u4fee\u9970\u8bed\uff0c\u201cmuch\u201d \u7528\u6765\u52a0\u5f3a \u201cmore\u201d \u7684\u7a0b\u5ea6\uff0c\u201csatisfying\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u4ee4\u4eba\u6ee1\u610f\u7684\u201d\uff0c\u7528\u6765\u4fee\u9970 \u201cratio\u201d\u3002 \u201cmeat to bun to condiment ratio\u201d \u662f\u4e00\u4e2a\u540d\u8bcd\u77ed\u8bed\uff0c\u201cmeat\u201d\uff08\u8089\uff09\u3001\u201cbun\u201d\uff08\u5c0f\u5706\u9762\u5305\uff09\u3001\u201ccondiment\u201d\uff08\u8c03\u5473\u54c1\uff09\u901a\u8fc7 \u201cto\u201d \u8fde\u63a5\uff0c\u8868\u660e\u8fd9\u4e09\u8005\u4e4b\u95f4\u7684\u6bd4\u4f8b\u5173\u7cfb\uff0c\u5373\u8089\u3001\u9762\u5305\u548c\u8c03\u5473\u54c1\u4e4b\u95f4\u7684\u6bd4\u4f8b\u3002","title":"\u53e5\u5b50"},{"location":"art/English/tv/bigbang/s01/e06/s01e06/","text":"\u53f0\u8bcd \u624b\u6253\u53f0\u8bcd \u751f\u8bcd \u53e5\u5b50 \u201close to\u201d \u662f\u4e00\u4e2a\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u8f93\u7ed9\u2026\u2026\u201d\u3002\u201cKyle Bernstein\u2019s Bar-Mitzvah party\u201d \u4e2d\uff0c\u201cKyle Bernstein\u2019s\u201d \u662f\u540d\u8bcd\u6240\u6709\u683c\uff0c\u8868\u793a \u201c\u51ef\u5c14\u30fb\u4f2f\u6069\u65af\u5766\u7684\u201d\uff0c\u201cBar-Mitzvah party\u201d \u662f\u540d\u8bcd\u77ed\u8bed\uff0c\u6307\u72b9\u592a\u7537\u5b69\u7684\u6210\u4eba\u4eea\u5f0f\u6d3e\u5bf9\uff08\u72b9\u592a\u6559\u4e2d\u7537\u5b69 13 \u5c81\u65f6\u4e3e\u884c\u7684\u4e00\u79cd\u91cd\u8981\u5b97\u6559\u548c\u793e\u4ea4\u4eea\u5f0f\uff09 \u3002 \u6587\u5316\u80cc\u666f\u89e3\u91ca\uff1a Bar-Mitzvah \u6587\u5316\uff1aBar-Mitzvah\uff08\u6210\u4eba\u793c\uff09\u662f\u72b9\u592a\u6587\u5316\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6807\u5fd7\u7740\u4e00\u4e2a\u72b9\u592a\u7537\u5b69\u4ece\u513f\u7ae5\u6b65\u5165\u6210\u5e74\uff0c\u5728\u5b97\u6559\u3001\u793e\u4f1a\u548c\u5bb6\u5ead\u4e2d\u627f\u62c5\u66f4\u591a\u7684\u8d23\u4efb\u548c\u4e49\u52a1\u3002\u5728\u8fd9\u4e2a\u4eea\u5f0f\u4e0a\uff0c\u4f1a\u6709\u5b97\u6559\u4eea\u5f0f\u3001\u5e86\u795d\u6d3b\u52a8\u548c\u793e\u4ea4\u805a\u4f1a\u7b49\u3002\u5728\u5267\u4e2d\u63d0\u5230\u7684 \u201cKyle Bernstein\u2019s Bar-Mitzvah party\u201d\uff0c\u8bf4\u660e\u8fd9\u662f\u51ef\u5c14\u30fb\u4f2f\u6069\u65af\u5766\u4e3e\u884c\u6210\u4eba\u793c\u65f6\u4e3e\u529e\u7684\u6d3e\u5bf9\uff0c\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u4eb2\u670b\u597d\u53cb\u53c2\u52a0\uff0c\u5145\u6ee1\u6b22\u4e50\u3001\u70ed\u95f9\u7684\u6c1b\u56f4\u3002 \u53e5\u5b50\u6574\u4f53\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u53e5\uff0c\u201cYou know\u201d \u4f5c\u4e3a\u63d2\u5165\u8bed\uff0c\u7528\u4e8e\u5f15\u8d77\u5bf9\u65b9\u6ce8\u610f\u6216\u4f5c\u4e3a\u4e00\u79cd\u8bf4\u8bdd\u7684\u4e60\u60ef\u5f00\u573a\uff0c\u5728\u53e5\u5b50\u4e2d\u4e0d\u627f\u62c5\u4e3b\u8981\u7684\u8bed\u6cd5\u6210\u5206\u3002\u53e5\u5b50\u7684\u4e3b\u5e72\u662f \u201cwe were annihilated\u201d\uff0c\u4f7f\u7528\u4e86\u4e00\u822c\u8fc7\u53bb\u65f6\u7684\u88ab\u52a8\u8bed\u6001\uff0c\u201cwe\u201d \u662f\u4e3b\u8bed\uff0c\u201cwere annihilated\u201d\uff08\u88ab\u5f7b\u5e95\u51fb\u8d25\u3001\u6467\u6bc1\uff09\u662f\u8c13\u8bed\u90e8\u5206\u3002 \u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff1a\u201cby our own incompetence and the inability of some people to follow the chain of command\u201d \u662f\u7531 \u201cby\u201d \u5f15\u5bfc\u7684\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u65b9\u5f0f\u72b6\u8bed\uff0c\u8bf4\u660e \u201c\u6211\u4eec\u88ab\u51fb\u8d25\u201d \u7684\u539f\u56e0\u3002\u5176\u4e2d \u201cour own incompetence\u201d\uff08\u6211\u4eec\u81ea\u5df1\u7684\u65e0\u80fd\uff09\u548c \u201cthe inability of some people to follow the chain of command\u201d\uff08\u4e00\u4e9b\u4eba\u65e0\u6cd5\u9075\u5faa\u6307\u6325\u7cfb\u7edf\uff09\u662f\u5e76\u5217\u5173\u7cfb\uff0c\u7531 \u201cand\u201d \u8fde\u63a5\u3002 \u540e\u7f6e\u5b9a\u8bed\uff1a\u201cof some people to follow the chain of command\u201d \u662f\u4e00\u4e2a\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cthe inability\u201d\uff0c\u201cto follow the chain of command\u201d \u662f\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u8fdb\u4e00\u6b65\u8bf4\u660e \u201c\u65e0\u80fd\u201d \u7684\u5177\u4f53\u5185\u5bb9\uff0c\u5373 \u201c\u4e00\u4e9b\u4eba\u5728\u9075\u5faa\u6307\u6325\u7cfb\u7edf\u65b9\u9762\u7684\u65e0\u80fd\u201d\u3002 \uff1a\u201cclear space\u201d \u662f\u4e00\u4e2a\u77ed\u8bed\uff0c\u201cclear\u201d \u5728\u8fd9\u91cc\u662f\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u6e05\u7406\u3001\u817e\u51fa\u201d\uff0c\u201cspace\u201d \u8868\u793a \u201c\u7a7a\u95f4\u201d\uff0c\u201cclear space on your calendar\u201d \u5373 \u201c\u5728\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u4e0a\u817e\u51fa\u65f6\u95f4\u201d\uff1b\u201cenquiry\u201d\uff08\u82f1\u5f0f\u82f1\u8bed\uff0c\u7f8e\u5f0f\u82f1\u8bed\u5e38\u7528 \u201cinquiry\u201d\uff09\u662f\u540d\u8bcd\uff0c\u610f\u601d\u662f \u201c\u8c03\u67e5\u3001\u8be2\u95ee\u201d \u3002 \u201crandom\u201d\uff08\u968f\u673a\u7684\u3001\u4efb\u610f\u7684\uff09\u548c \u201cgenre specific\u201d\uff08\u7279\u5b9a\u7c7b\u578b\u7684\u3001\u6709\u98ce\u683c\u9650\u5236\u7684\uff09\u662f\u4e24\u4e2a\u5e76\u5217\u7684\u8868\u8bed\uff0c\u901a\u8fc7 \u201cor\u201d \u8fde\u63a5\uff0c\u8ba9\u5bf9\u65b9\u5728\u8fd9\u4e24\u79cd\u53ef\u80fd\u6027\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u8be2\u95ee\u670d\u88c5\u662f\u968f\u610f\u9009\u62e9\u7684\uff0c\u8fd8\u662f\u6709\u7279\u5b9a\u7684\u98ce\u683c\u7c7b\u578b\u8981\u6c42\u3002 D&D\uff1a\u5373\u9f99\u4e0e\u5730\u4e0b\u57ce\uff08Dungeons & Dragons\uff09\uff0c\u662f\u4e00\u6b3e\u6781\u5177\u5f71\u54cd\u529b\u7684\u684c\u4e0a\u89d2\u8272\u626e\u6f14\u6e38\u620f\u3002\u73a9\u5bb6\u5728\u6e38\u620f\u4e2d\u53ef\u4ee5\u626e\u6f14\u5404\u79cd\u5947\u5e7b\u89d2\u8272\uff0c\u5982\u6218\u58eb\u3001\u6cd5\u5e08\u3001\u76d7\u8d3c\u7b49\uff0c\u5728\u865a\u62df\u7684\u5947\u5e7b\u4e16\u754c\u4e2d\u8fdb\u884c\u5192\u9669\u3002\u5267\u4e2d\u89d2\u8272\u4eec\u7ecf\u5e38\u73a9\u8fd9\u6b3e\u6e38\u620f\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u4ee5\u6e38\u620f\u4e2d\u7684\u89d2\u8272\u5f62\u8c61\u4f5c\u4e3a\u88c5\u626e\u3002 Manga\uff1a\u6307\u65e5\u672c\u6f2b\u753b\u3002\u65e5\u672c\u6f2b\u753b\u6709\u4f17\u591a\u4e30\u5bcc\u7684\u89d2\u8272\u548c\u98ce\u683c\uff0c\u5982\u300a\u706b\u5f71\u5fcd\u8005\u300b\u300a\u6d77\u8d3c\u738b\u300b\u7b49\u4f5c\u54c1\u4e2d\u7684\u89d2\u8272\uff0c\u90fd\u53ef\u4ee5\u6210\u4e3a\u4ed6\u4eec\u88c5\u626e\u7684\u7075\u611f\u6765\u6e90\uff0c\u53cd\u6620\u51fa\u4ed6\u4eec\u5bf9\u4e0d\u540c\u6587\u5316\u80cc\u666f\u4e0b\u7684\u6d41\u884c\u6587\u5316\u7684\u559c\u7231\u548c\u5173\u6ce8\u3002 Greek Gods, Roman Gods, Norse Gods\uff1a\u5206\u522b\u6307\u5e0c\u814a\u795e\u8bdd\u3001\u7f57\u9a6c\u795e\u8bdd\u548c\u5317\u6b27\u795e\u8bdd\u4e2d\u7684\u4f17\u795e\u3002\u8fd9\u4e9b\u795e\u8bdd\u4f53\u7cfb\u4e2d\u6709\u8bb8\u591a\u4e2a\u6027\u9c9c\u660e\u3001\u5f62\u8c61\u72ec\u7279\u7684\u795e\u7947\uff0c\u5982\u5e0c\u814a\u795e\u8bdd\u4e2d\u7684\u5b99\u65af\u3001\u7f57\u9a6c\u795e\u8bdd\u4e2d\u7684\u6731\u5e87\u7279\u3001\u5317\u6b27\u795e\u8bdd\u4e2d\u7684\u5965\u4e01\u7b49\uff0c\u9009\u62e9\u4ee5\u8fd9\u4e9b\u795e\u8bdd\u89d2\u8272\u4f5c\u4e3a\u88c5\u626e\uff0c\u80fd\u591f\u5c55\u73b0\u51fa\u4ed6\u4eec\u5bf9\u53e4\u4ee3\u795e\u8bdd\u6587\u5316\u7684\u5174\u8da3\uff0c\u540c\u65f6\u4e5f\u80fd\u5728\u6d3e\u5bf9\u4e0a\u5448\u73b0\u51fa\u72ec\u7279\u800c\u795e\u79d8\u7684\u98ce\u683c\u3002 \u201cnobody gets to be The Flash\u201d \u662f\u4e00\u4e2a\u4e3b\u8c13\u5bbe\u7ed3\u6784\u7684\u53e5\u5b50\uff0c\u201cnobody\u201d \u4f5c\u4e3b\u8bed\uff0c\u8868\u793a \u201c\u6ca1\u6709\u4eba\u201d\uff1b\u201cgets to be\u201d \u662f\u8c13\u8bed\u90e8\u5206\uff0c\u201cget to\u201d \u5728\u8fd9\u91cc\u8868\u793a \u201c\u6709\u673a\u4f1a\u3001\u88ab\u5141\u8bb8\u201d\uff0c\u201cbe\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cThe Flash\u201d\uff08\u95ea\u7535\u4fa0\uff0c\u7f8e\u56fd DC \u6f2b\u753b\u65d7\u4e0b\u8d85\u7ea7\u82f1\u96c4\uff09\u4f5c\u8868\u8bed\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6ca1\u6709\u4eba\u53ef\u4ee5\u626e\u6f14\u95ea\u7535\u4fa0\u201d\u3002 \u201cthis party is my first chance for Penny to see me in the context of her social group\u201d\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\u3002\u201cthis party\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cmy first chance\u201d \u4f5c\u8868\u8bed\u3002 \u201cfor Penny to see me in the context of her social group\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u7684\u590d\u5408\u7ed3\u6784\uff0c\u4f5c\u540e\u7f6e\u5b9a\u8bed\u4fee\u9970 \u201cchance\u201d\u3002\u201cfor Penny\u201d \u8868\u793a\u4e0d\u5b9a\u5f0f\u52a8\u4f5c \u201cto see me\u201d \u7684\u903b\u8f91\u4e3b\u8bed\uff0c\u201cin the context of her social group\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u4fee\u9970 \u201csee me\u201d\uff0c\u8868\u793a \u201c\u5728\u4f69\u59ae\u7684\u793e\u4ea4\u5708\u5b50\u8fd9\u4e2a\u60c5\u5883\u4e0b\u201d\u3002 \u201cand I need you not to embarrass me tonight\u201d\uff1a \u201cand\u201d \u662f\u5e76\u5217\u8fde\u8bcd\uff0c\u8fde\u63a5\u524d\u540e\u4e24\u4e2a\u53e5\u5b50\u3002 \u201cI\u201d \u662f\u4e3b\u8bed\uff0c\u201cneed\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u201cyou\u201d \u662f\u5bbe\u8bed\uff0c\u201cnot to embarrass me tonight\u201d \u662f\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u7684\u5426\u5b9a\u5f62\u5f0f\u4f5c\u5bbe\u8bed\u8865\u8db3\u8bed\uff0c\u201cneed sb. not to do sth.\u201d \u8868\u793a \u201c\u9700\u8981\u67d0\u4eba\u4e0d\u8981\u505a\u67d0\u4e8b\u201d\uff0c\u201ctonight\u201d \u662f\u65f6\u95f4\u72b6\u8bed\u3002 \u201cJust a heads up fellas\u201d\uff1a\u201cJust\u201d \u662f\u526f\u8bcd\uff0c\u8d77\u5f3a\u8c03\u4f5c\u7528\uff0c\u201ca heads up\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u4e8b\u5148\u63d0\u9192\uff1b\u9884\u8b66\u201d\uff0c\u201cfellas\u201d \u662f \u201cfellow\u201d \u7684\u590d\u6570\u5f62\u5f0f\uff0c\u5728\u8fd9\u91cc\u7528\u4f5c\u79f0\u547c\u8bed\uff0c\u610f\u4e3a \u201c\u4f19\u8ba1\u4eec\u201d\uff0c\u8fd9\u90e8\u5206\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8868\u8fbe\uff0c\u7528\u4e8e\u5f15\u8d77\u5176\u4ed6\u4eba\u7684\u6ce8\u610f\u5e76\u4f20\u8fbe\u63d0\u9192\u7684\u610f\u56fe\u3002 \u201cif anyone gets lucky\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u7531 \u201cif\u201d \u5f15\u5bfc\u7684\u6761\u4ef6\u72b6\u8bed\u4ece\u53e5\uff0c\u201canyone\u201d \u4f5c\u4ece\u53e5\u7684\u4e3b\u8bed\uff0c\u201cgets lucky\u201d \u662f\u7cfb\u8868\u7ed3\u6784\uff0c\u201clucky\u201d \u4f5c\u8868\u8bed\uff0c\u8fd9\u91cc \u201cgets lucky\u201d \u7ed3\u5408\u8bed\u5883\u53ef\u7406\u89e3\u4e3a \u201c\u6709\u6027\u65b9\u9762\u7684\u5e78\u8fd0\uff08\u5373\u6709\u673a\u4f1a\u53d1\u751f\u6027\u884c\u4e3a\uff09\u201d\u3002 \u201cI\u2019ve got a dozen condoms in my quiver\u201d\uff1a\u201cI\u2019ve got\u201d \u662f \u201cI have got\u201d \u7684\u7f29\u5199\uff0c\u76f8\u5f53\u4e8e \u201cI have\u201d\uff0c\u8868\u793a \u201c\u6211\u6709\u201d\u3002\u201ca dozen\u201d \u610f\u4e3a \u201c\u4e00\u6253\uff0c\u5341\u4e8c\u4e2a\u201d\uff0c\u4fee\u9970 \u201ccondoms\u201d\uff08\u907f\u5b55\u5957\uff09\u3002\u201cin my quiver\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u5730\u70b9\u72b6\u8bed\uff0c\u201cquiver\u201d \u539f\u610f\u4e3a \u201c\u7bad\u7b52\uff1b\u7bad\u888b\u201d\uff0c\u8fd9\u91cc\u5f62\u8c61\u5730\u8868\u793a \u201c\u50a8\u5907\uff1b\u5b58\u8d27\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6211\u50a8\u5907\u4e86\u5341\u4e8c\u4e2a\u907f\u5b55\u5957\u201d\u3002 \u201cby Odin\u2019s beard\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u5728\u8fd9\u91cc\u4f5c\u72b6\u8bed\uff0c\u201cby\u201d \u8868\u793a \u201c\u4ee5\u2026\u2026 \u7684\u540d\u4e49\uff1b\u501f\u52a9\u4e8e\u201d\uff0c\u201cOdin\u2019s beard\u201d \u4e2d \u201cOdin\u201d \u662f\u5317\u6b27\u795e\u8bdd\u4e2d\u7684\u4f17\u795e\u4e4b\u738b\u5965\u4e01\uff0c\u201cbeard\u201d \u662f \u201c\u80e1\u987b\u201d \u7684\u610f\u601d\uff0c\u201cby Odin\u2019s beard\u201d \u7c7b\u4f3c\u4e8e\u4e00\u79cd\u611f\u53f9\u8bed\uff0c\u8868\u8fbe\u60ca\u8bb6\u3001\u8d5e\u53f9\u7b49\u5f3a\u70c8\u7684\u60c5\u7eea\uff0c\u6709 \u201c\u770b\u5728\u5965\u4e01\u7684\u4efd\u4e0a\uff1b\u5929\u54ea\u201d \u7b49\u542b\u4e49\u3002 \u201cthis is good Chex Mix\u201d \u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\uff0c\u201cthis\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cgood Chex Mix\u201d \u4f5c\u8868\u8bed\uff0c\u201cChex Mix\u201d \u662f\u4e00\u79cd\u6df7\u5408\u96f6\u98df\uff08\u7531\u8c37\u7269\u7247\u3001\u575a\u679c\u3001\u997c\u5e72\u7b49\u6df7\u5408\u800c\u6210\uff09\uff0c\u201cgood\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u4fee\u9970 \u201cChex Mix\u201d\uff0c\u8868\u793a\u8fd9\u79cd\u96f6\u98df\u5f88\u597d\u5403\u3002 \u201ccheck out the sexy nurse\u201d\uff1a\u201ccheck out\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u770b\u770b\u3001\u77a7\u77a7\u201d\uff0c\u201cthe sexy nurse\u201d \u662f \u201ccheck out\u201d \u7684\u5bbe\u8bed\uff0c\u201csexy\u201d \u662f\u5f62\u5bb9\u8bcd\u4fee\u9970 \u201cnurse\u201d\uff0c\u8868\u793a \u201c\u6027\u611f\u7684\u62a4\u58eb\u201d\uff0c\u6574\u53e5\u8bdd\u662f\u8ba9\u5927\u5bb6\u770b\u90a3\u4e2a\u6027\u611f\u7684\u62a4\u58eb\u3002 \u201cI believe it\u2019s time for me to turn my head and cough\u201d\uff1a\u201cI believe\u201d \u540e\u63a5\u5bbe\u8bed\u4ece\u53e5 \u201cit\u2019s time for me to turn my head and cough\u201d\u3002\u201cit\u2019s time for sb. to do sth.\u201d \u662f\u4e00\u4e2a\u5e38\u7528\u53e5\u578b\uff0c\u610f\u4e3a \u201c\u662f\u67d0\u4eba\u505a\u67d0\u4e8b\u7684\u65f6\u5019\u4e86\u201d\uff0c\u201cturn my head and cough\u201d \u662f \u201cto\u201d \u540e\u9762\u7684\u52a8\u8bcd\u77ed\u8bed\uff0c\u5b57\u9762\u610f\u601d\u662f \u201c\u8f6c\u8fc7\u5934\u7136\u540e\u54b3\u55fd\u201d\u3002 \u5728\u897f\u65b9\u6587\u5316\u4e2d\uff0c\u201cturn your head and cough\u201d \u662f\u533b\u751f\u5728\u7ed9\u7537\u6027\u60a3\u8005\u505a\u8eab\u4f53\u68c0\u67e5\uff08\u5c24\u5176\u662f\u68c0\u67e5\u8179\u80a1\u6c9f\u533a\u57df\uff09\u65f6\u5e38\u89c1\u7684\u6307\u4ee4\u3002\u8bf4\u8bdd\u8005\u5728\u8fd9\u91cc\u6545\u610f\u501f\u7528\u8fd9\u4e2a\u60c5\u5883\uff0c\u4ee5\u4e00\u79cd\u8bd9\u8c10\u7684\u65b9\u5f0f\u8868\u8fbe\u81ea\u5df1\u5bf9\u6027\u611f\u62a4\u58eb\u7684\u53cd\u5e94\uff0c\u6697\u793a\u81ea\u5df1\u5e0c\u671b\u5f97\u5230\u62a4\u58eb\u50cf\u533b\u751f\u68c0\u67e5\u90a3\u6837\u7684 \u201c\u7279\u522b\u5173\u6ce8\u201d\uff0c\u8425\u9020\u51fa\u4e00\u79cd\u8f7b\u677e\u3001\u641e\u7b11\u7684\u6c1b\u56f4\u3002 \u201cI have transient idiopathic arrhythmia\u201d\uff1a\u201cI\u201d \u662f\u4e3b\u8bed\uff0c\u201chave\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u60a3\u6709\uff1b\u62e5\u6709\u201d\u3002\u201ctransient idiopathic arrhythmia\u201d \u662f\u5bbe\u8bed\uff0c\u201ctransient\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u77ed\u6682\u7684\uff1b\u6682\u65f6\u7684\u201d\uff1b\u201cidiopathic\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u601d\u662f \u201c\u7279\u53d1\u6027\u7684\uff08\u539f\u56e0\u4e0d\u660e\u7684\uff09\u201d\uff1b\u201carrhythmia\u201d \u662f\u540d\u8bcd\uff0c\u6307 \u201c\u5fc3\u5f8b\u5931\u5e38\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6211\u60a3\u6709\u77ed\u6682\u6027\u7279\u53d1\u6027\u5fc3\u5f8b\u5931\u5e38\u201d\u3002 \u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7591\u95ee\u53e5\uff0c\u91c7\u7528\u4e86 \u201c\u7591\u95ee\u8bcd + \u7cfb\u52a8\u8bcd + \u4e3b\u8bed\u201d \u7684\u5012\u88c5\u7ed3\u6784\u3002\u201cHow\u201d \u662f\u7591\u95ee\u526f\u8bcd\uff0c\u5728\u8fd9\u91cc\u7528\u6765\u8be2\u95ee\u7a0b\u5ea6\uff0c\u610f\u4e3a \u201c\u591a\u4e48\u201d\uff1b\u201cwasted\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u5728\u53e3\u8bed\u4e2d\u5e38\u7528\u6765\u8868\u793a \u201c\uff08\u56e0\u996e\u9152\u6216\u5438\u6bd2\u7b49\u800c\uff09\u559d\u9189\u7684\u3001\u795e\u5fd7\u4e0d\u6e05\u7684\u201d\uff1b\u201cam\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cI\u201d \u662f\u4e3b\u8bed\u3002\u6574\u53e5\u8bdd\u7684\u6b63\u5e38\u8bed\u5e8f\u5e94\u8be5\u662f \u201cI am how wasted\u201d\uff0c\u4f46\u5728\u7591\u95ee\u53e5\u4e2d\u8981\u5c06\u7cfb\u52a8\u8bcd \u201cam\u201d \u63d0\u5230\u4e3b\u8bed \u201cI\u201d \u524d\u9762\uff0c\u4ee5\u6784\u6210\u7279\u6b8a\u7591\u95ee\u53e5\u7684\u5f62\u5f0f\u6765\u8be2\u95ee \u201c\u6211\u9189\u5230\u4ec0\u4e48\u7a0b\u5ea6\u4e86\uff1f\u201d \u201cif this was 15,000 years ago\u201d \u662f\u4e00\u4e2a\u7531 \u201cif\u201d \u5f15\u5bfc\u7684\u865a\u62df\u6761\u4ef6\u72b6\u8bed\u4ece\u53e5\uff0c\u4f7f\u7528\u4e86\u4e00\u822c\u8fc7\u53bb\u65f6 \u201cwas\u201d \u6765\u8868\u793a\u4e0e\u73b0\u5728\u4e8b\u5b9e\u76f8\u53cd\u7684\u5047\u8bbe\uff08\u5728\u865a\u62df\u8bed\u6c14\u4e2d\uff0c\u201cbe\u201d \u52a8\u8bcd\u5e38\u7528 \u201cwere\u201d\uff0c\u4f46\u5728\u53e3\u8bed\u4e2d \u201cwas\u201d \u4e5f\u8f83\u4e3a\u5e38\u89c1\uff09\uff0c\u610f\u601d\u662f \u201c\u5982\u679c\u8fd9\u662f\u5728\u4e00\u4e07\u4e94\u5343\u5e74\u524d\u201d\u3002 \u201cby virtue of his size and strength\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u65b9\u5f0f\u72b6\u8bed\uff0c\u201cby virtue of\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u7531\u4e8e\uff1b\u51ed\u501f\u201d\uff0c\u201chis size and strength\u201d \u8868\u793a \u201c\u4ed6\u7684\u4f53\u578b\u548c\u529b\u91cf\u201d\uff0c\u8bf4\u660e\u540e\u9762\u60c5\u51b5\u7684\u539f\u56e0\u3002 \u201cKurt would be entitled to his choice of female partners\u201d \u662f\u4e3b\u53e5\uff0c\u4f7f\u7528\u4e86\u865a\u62df\u8bed\u6c14\uff0c\u201cwould be\u201d \u662f\u8c13\u8bed\u90e8\u5206\uff0c\u201centitled to\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u6709\u6743\uff1b\u6709\u8d44\u683c\u201d\uff0c\u201chis choice of female partners\u201d \u4f5c \u201centitled to\u201d \u7684\u5bbe\u8bed\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u5e93\u5c14\u7279\u5c31\u6709\u8d44\u683c\u9009\u62e9\u4ed6\u7684\u5973\u6027\u4f34\u4fa3\u201d\u3002 \u201cpretty much whatever tickled his fancy\u201d\uff1a\u201cpretty much\u201d \u662f\u4e00\u4e2a\u526f\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u51e0\u4e4e\uff1b\u5dee\u4e0d\u591a\u201d\uff0c\u8d77\u5f3a\u8c03\u4f5c\u7528\u3002\u201cwhatever tickled his fancy\u201d \u662f\u4e00\u4e2a\u5bbe\u8bed\u4ece\u53e5\uff0c\u201cwhatever\u201d \u65e2\u4f5c\u5f15\u5bfc\u8bcd\u53c8\u5728\u4ece\u53e5\u4e2d\u5145\u5f53\u4e3b\u8bed\uff0c\u201ctickled\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u201ctickle one's fancy\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u5408\u67d0\u4eba\u7684\u5fc3\u610f\uff1b\u4f7f\u67d0\u4eba\u611f\u5174\u8da3\u201d\uff0c\u201chis\u201d \u6307\u4ee3\u524d\u6587\u63d0\u5230\u7684\u5e93\u5c14\u7279\uff08Kurt\uff09\uff0c\u201cfancy\u201d \u5728\u8fd9\u91cc\u662f\u540d\u8bcd\uff0c\u610f\u4e3a \u201c\u559c\u597d\uff1b\u5e7b\u60f3\u201d\u3002\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u5dee\u4e0d\u591a\u4efb\u4f55\u5408\u4ed6\u5fc3\u610f\u7684\u4e1c\u897f\u201d\u3002 \u201cin the information age\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u65f6\u95f4\u72b6\u8bed\uff0c\u8868\u660e\u53e5\u5b50\u6240\u63cf\u8ff0\u7684\u60c5\u51b5\u53d1\u751f\u7684\u65f6\u4ee3\u80cc\u666f\uff0c\u610f\u601d\u662f \u201c\u5728\u4fe1\u606f\u65f6\u4ee3\u201d\u3002 \u201cSheldon, you and I are the alpha males\u201d\uff1a\u201cSheldon\u201d \u5728\u8fd9\u91cc\u662f\u79f0\u547c\u8bed\uff0c\u201cyou and I\u201d \u662f\u5e76\u5217\u7684\u4e3b\u8bed\uff0c\u201care\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cthe alpha males\u201d \u4f5c\u8868\u8bed\u3002\u201calpha males\u201d \u76f4\u8bd1\u4e3a \u201c\u96c4\u6027\u9886\u8896\uff1b\u4e3b\u5bfc\u7537\u6027\u201d\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u5728\u67d0\u4e2a\u7fa4\u4f53\u6216\u73af\u5883\u4e2d\u5904\u4e8e\u4f18\u52bf\u3001\u4e3b\u5bfc\u5730\u4f4d\u7684\u7537\u6027\u3002 \u201cWe shouldn\u2019t have to back down\u201d\uff1a\u201cWe\u201d \u662f\u4e3b\u8bed\uff0c\u201cshouldn\u2019t\u201d \u662f\u60c5\u6001\u52a8\u8bcd \u201cshould\u201d \u7684\u5426\u5b9a\u5f62\u5f0f\uff0c\u201chave to\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u4e0d\u5f97\u4e0d\uff1b\u5fc5\u987b\u201d\uff0c\u201cback down\u201d \u662f\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u9000\u7f29\uff1b\u8ba9\u6b65\u201d\u3002\u6574\u53e5\u8bdd\u8868\u793a \u201c\u6211\u4eec\u4e0d\u5e94\u8be5\u4e0d\u5f97\u4e0d\u9000\u7f29\uff08\u5373\u6211\u4eec\u4e0d\u5e94\u8be5\u9000\u7f29\uff09\u201d\u3002 \u201cGiven the reaction to my costume\u201d\uff1a\u201cgiven\u201d \u5728\u8fd9\u91cc\u662f\u4ecb\u8bcd\uff0c\u610f\u4e3a \u201c\u8003\u8651\u5230\uff1b\u9274\u4e8e\u201d\uff0c\u201cthe reaction to my costume\u201d \u662f \u201cgiven\u201d \u7684\u5bbe\u8bed\uff0c\u201cto my costume\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\u4fee\u9970 \u201creaction\u201d\uff0c\u8868\u793a \u201c\u5bf9\u6211\u670d\u88c5\u7684\u53cd\u5e94\u201d\uff0c\u6574\u4e2a\u77ed\u8bed\u5728\u53e5\u4e2d\u4f5c\u539f\u56e0\u72b6\u8bed\uff0c\u8868\u660e\u540e\u9762\u7ed3\u8bba\u4ea7\u751f\u7684\u4f9d\u636e\u3002 \u201cthis party is a scathing indictment of the American education system\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\u3002\u201cthis party\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201ca scathing indictment\u201d \u662f\u8868\u8bed\uff0c\u201cscathing\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u4e25\u5389\u7684\uff1b\u5c16\u523b\u7684\u201d\uff0c\u201cindictment\u201d \u662f\u540d\u8bcd\uff0c\u610f\u601d\u662f \u201c\u8c34\u8d23\uff1b\u63a7\u8bc9\u201d\u3002\u201cof the American education system\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cindictment\u201d\uff0c\u8868\u793a \u201c\u5bf9\u7f8e\u56fd\u6559\u80b2\u4f53\u7cfb\u7684\uff08\u8c34\u8d23\uff09\u201d \u3002 \u201cYet\u201d \u5728\u8fd9\u91cc\u662f\u4e00\u4e2a\u526f\u8bcd\uff0c\u610f\u601d\u662f \u201c\u8fd8\uff1b\u4ecd\u7136\uff1b\u53c8\u201d\uff0c\u7528\u4e8e\u52a0\u5f3a\u8bed\u6c14\uff0c\u5f3a\u8c03\u60c5\u51b5\u7684\u91cd\u590d\u6027\u6216\u8fde\u7eed\u6027\u3002 \u201canother\u201d \u662f\u9650\u5b9a\u8bcd\uff0c\u610f\u4e3a \u201c\u53c8\u4e00\uff1b\u518d\u4e00\uff1b\u53e6\u4e00\u201d\uff0c\u4fee\u9970\u540e\u9762\u7684\u540d\u8bcd \u201cchild\u201d\u3002 \u201cchild\u201d \u662f\u540d\u8bcd\uff0c\u201c\u5b69\u5b50\u201d \u7684\u610f\u601d\u3002 \u201cleft behind\u201d \u662f\u8fc7\u53bb\u5206\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cchild\u201d\u3002\u201cleave behind\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u7559\u4e0b\uff1b\u9057\u5fd8\uff1b\u4e22\u5f03\u201d\uff0c\u8fd9\u91cc\u7528\u8fc7\u53bb\u5206\u8bcd\u5f62\u5f0f\u8868\u793a\u88ab\u52a8\uff0c\u5373 \u201c\u88ab\u7559\u4e0b\u7684\u5b69\u5b50\u201d\u3002\u6574\u4e2a\u53e5\u5b50\u53ef\u4ee5\u7406\u89e3\u4e3a \u201c\u53c8\u4e00\u4e2a\u88ab\u7559\u4e0b\u7684\u5b69\u5b50\u201d\u3002 \u201ca Hobbit is a mortal Halfling inhabitant of Middle Earth\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\u3002\u201ca Hobbit\u201d \u662f\u4e3b\u8bed\uff0c\u8868\u793a \u201c\u4e00\u4e2a\u970d\u6bd4\u7279\u4eba\u201d\uff1b\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff1b\u201ca mortal Halfling inhabitant of Middle Earth\u201d \u662f\u8868\u8bed\u90e8\u5206\uff0c\u5176\u4e2d \u201ca\u201d \u662f\u4e0d\u5b9a\u51a0\u8bcd\uff0c\u201cmortal\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u51e1\u4eba\u7684\u3001\u7ec8\u6709\u4e00\u6b7b\u7684\u201d\uff0c\u201cHalfling\u201d \u662f\u540d\u8bcd\uff0c\u6307 \u201c\u534a\u8eab\u4eba\uff08\u970d\u6bd4\u7279\u4eba\u7684\u522b\u79f0\uff09\u201d\uff0c\u201cinhabitant\u201d \u662f\u540d\u8bcd \u201c\u5c45\u6c11\u201d\uff0c\u201cof Middle Earth\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cinhabitant\u201d\uff0c\u8868\u793a \u201c\u4e2d\u571f\u4e16\u754c\u7684\u5c45\u6c11\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u4e00\u4e2a\u970d\u6bd4\u7279\u4eba\u662f\u4e2d\u571f\u4e16\u754c\u91cc\u7ec8\u6709\u4e00\u6b7b\u7684\u534a\u8eab\u4eba\u5c45\u6c11\u201d\u3002 \u201cwhereas an Elf is an immortal tall warrior\u201d\uff1a\u201cwhereas\u201d \u662f\u8fde\u8bcd\uff0c\u610f\u4e3a \u201c\u7136\u800c\u3001\u800c\u201d\uff0c\u7528\u4e8e\u5bf9\u6bd4\u6216\u5bf9\u7167\u4e24\u4e2a\u53e5\u5b50\u3002\u201can Elf\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201can immortal tall warrior\u201d \u662f\u8868\u8bed\uff0c\u201can\u201d \u662f\u4e0d\u5b9a\u51a0\u8bcd\uff0c\u201cimmortal\u201d \u662f\u5f62\u5bb9\u8bcd \u201c\u4e0d\u673d\u7684\u3001\u957f\u751f\u4e0d\u8001\u7684\u201d\uff0c\u201ctall\u201d \u662f\u5f62\u5bb9\u8bcd \u201c\u9ad8\u5927\u7684\u201d\uff0c\u201cwarrior\u201d \u662f\u540d\u8bcd \u201c\u6218\u58eb\u201d\uff0c\u8fd9\u53e5\u8bdd\u8868\u793a \u201c\u800c\u4e00\u4e2a\u7cbe\u7075\u662f\u957f\u751f\u4e0d\u8001\u7684\u9ad8\u5927\u6218\u58eb\u201d \u201cwhy don\u2019t you go hop off on a quest\u201d\uff1a\u201cwhy don\u2019t you...\u201d \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u53e5\u5f0f\uff0c\u7528\u4e8e\u63d0\u51fa\u5efa\u8bae\u6216\u8868\u793a\u4e0d\u6ee1\u3001\u4e0d\u8010\u70e6\u7b49\u60c5\u7eea\uff0c\u610f\u601d\u662f \u201c\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u2026\u2026\u201d\u3002\u201cgo hop off\u201d \u4e2d \u201cgo\u201d \u548c\u540e\u9762\u7684\u52a8\u8bcd \u201chop off\u201d \u6784\u6210 \u201cgo + \u52a8\u8bcd\u539f\u5f62\u201d \u7684\u7ed3\u6784\uff0c\u8868\u793a\u53bb\u505a\u67d0\u4e8b\uff0c\u5728\u8fd9\u91cc \u201chop off\u201d \u662f\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u79bb\u5f00\uff1b\u51fa\u53d1\u201d\u3002\u201con a quest\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u201cquest\u201d \u610f\u4e3a \u201c\u63a2\u7d22\uff1b\u5bfb\u6c42\uff1b\u5192\u9669\u201d\uff0c\u201con a quest\u201d \u8868\u793a \u201c\u8fdb\u884c\u4e00\u6b21\u5192\u9669\u201d\u3002\u6240\u4ee5\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u79bb\u5f00\u53bb\u8fdb\u884c\u4e00\u6b21\u5192\u9669\u5462\u201d\u3002 \u201cand so you\u2019re driven to animalistic puffery\u201d\uff1a\u201cand so\u201d \u662f\u8fde\u8bcd\u77ed\u8bed\uff0c\u8d77\u5230\u8fde\u63a5\u548c\u5f15\u51fa\u7ed3\u679c\u7684\u4f5c\u7528\uff0c\u201cso\u201d \u5728\u8fd9\u91cc\u8868\u793a \u201c\u56e0\u6b64\uff1b\u6240\u4ee5\u201d\u3002\u201cyou\u2019re\u201d \u662f \u201cyou are\u201d \u7684\u7f29\u5199\uff0c\u201care driven\u201d \u662f\u88ab\u52a8\u8bed\u6001\u7ed3\u6784\uff0c\u201cdrive\u201d \u5728\u8fd9\u91cc\u610f\u4e3a \u201c\u9a71\u4f7f\u201d\uff0c\u201cyou are driven\u201d \u5373 \u201c\u4f60\u88ab\u9a71\u4f7f\u201d\u3002\u201cto animalistic puffery\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\uff0c\u201canimalistic\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u517d\u6027\u7684\uff1b\u52a8\u7269\u672c\u80fd\u7684\u201d\uff0c\u201cpuffery\u201d \u662f\u540d\u8bcd\uff0c\u610f\u601d\u662f \u201c\u5439\u5618\uff1b\u5938\u5927\u5176\u8bcd\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6240\u4ee5\u4f60\u5c31\u53ea\u80fd\u8bc9\u8bf8\u4e8e\u517d\u6027\u822c\u7684\u5439\u5618\u201d\u3002 \u201cAre misfiring neurons in your hippocampus preventing the conversion from short-term to long-term memory?\u201d \u8fd9\u662f\u4e00\u4e2a\u4e00\u822c\u7591\u95ee\u53e5\uff0c\u91c7\u7528\u4e86\u73b0\u5728\u8fdb\u884c\u65f6\u7684\u7591\u95ee\u7ed3\u6784\u3002 \u201cAre\u201d \u662f\u52a9\u52a8\u8bcd\uff0c\u7528\u4e8e\u6784\u6210\u7591\u95ee\u53e5\u548c\u73b0\u5728\u8fdb\u884c\u65f6\uff0c\u5e2e\u52a9\u5c06\u9648\u8ff0\u53e5\u53d8\u4e3a\u7591\u95ee\u53e5\u5f62\u5f0f\u3002 \u201cmisfiring neurons\u201d \u662f\u53e5\u5b50\u7684\u4e3b\u8bed\uff0c\u201cmisfiring\u201d \u662f\u73b0\u5728\u5206\u8bcd\u4f5c\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cneurons\u201d\uff0c\u8868\u793a \u201c\u529f\u80fd\u5f02\u5e38\u653e\u7535\u7684\u795e\u7ecf\u5143\u201d\uff0c\u201cneurons\u201d \u662f\u540d\u8bcd \u201c\u795e\u7ecf\u5143\u201d \u7684\u590d\u6570\u5f62\u5f0f\u3002 \u201cin your hippocampus\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cneurons\u201d\uff0c\u201chippocampus\u201d \u662f\u540d\u8bcd \u201c\u6d77\u9a6c\u4f53\uff08\u5927\u8111\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff09\u201d\uff0c\u8bf4\u660e\u8fd9\u4e9b\u795e\u7ecf\u5143\u7684\u4f4d\u7f6e\u662f\u5728\u6d77\u9a6c\u4f53\u4e2d\u3002 \u201cpreventing\u201d \u662f\u73b0\u5728\u5206\u8bcd\uff0c\u4e0e\u524d\u9762\u7684 \u201care\u201d \u4e00\u8d77\u6784\u6210\u73b0\u5728\u8fdb\u884c\u65f6\u7684\u8c13\u8bed\u90e8\u5206\uff0c\u201cprevent\u201d \u662f\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u963b\u6b62\uff1b\u59a8\u788d\u201d\u3002 \u201cthe conversion from short-term to long-term memory\u201d \u662f \u201cpreventing\u201d \u7684\u5bbe\u8bed\uff0c\u201cthe conversion\u201d \u662f\u540d\u8bcd \u201c\u8f6c\u6362\u201d\uff0c\u201cfrom short-term to long-term memory\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cconversion\u201d\uff0c\u8868\u793a \u201c\u4ece\u77ed\u671f\u8bb0\u5fc6\u5230\u957f\u671f\u8bb0\u5fc6\u7684\u8f6c\u6362\u201d\u3002 \u201cA homo-habilus discovering his opposable thumbs\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u540d\u8bcd\u77ed\u8bed\uff0c\u6838\u5fc3\u8bcd\u662f \u201chomo-habilus\u201d\uff08\u80fd\u4eba\uff0c\u65e9\u671f\u4eba\u7c7b\u7684\u4e00\u79cd\uff09\uff0c\u201cdiscovering his opposable thumbs\u201d \u662f\u73b0\u5728\u5206\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\u4fee\u9970 \u201chomo-habilus\u201d\u3002\u201cdiscovering\u201d \u662f\u73b0\u5728\u5206\u8bcd\uff0c\u201chis\u201d \u662f\u5f62\u5bb9\u8bcd\u6027\u7269\u4e3b\u4ee3\u8bcd\u4fee\u9970 \u201copposable thumbs\u201d\uff08\u5bf9\u751f\u62c7\u6307\uff09\uff0c\u8868\u793a \u201c\u53d1\u73b0\u4ed6\u7684\u5bf9\u751f\u62c7\u6307\u7684\uff08\u80fd\u4eba\uff09\u201d\u3002 \u201csays what?\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u53e3\u8bed\u5316\u7684\u8868\u8fbe\uff0c\u201csays\u201d \u662f\u52a8\u8bcd \u201c\u8bf4\u201d \u7684\u7b2c\u4e09\u4eba\u79f0\u5355\u6570\u5f62\u5f0f\uff0c\u201cwhat\u201d \u662f\u7591\u95ee\u8bcd\uff0c\u5728\u8fd9\u91cc \u201csays what\u201d \u610f\u601d\u662f \u201c\u4f1a\u8bf4\u4ec0\u4e48\u5462\u201d\uff0c\u6784\u6210\u4e00\u4e2a\u7b80\u77ed\u7684\u7591\u95ee\u53e5\uff0c\u7528\u6765\u8be2\u95ee \u201c\u53d1\u73b0\u5bf9\u751f\u62c7\u6307\u7684\u80fd\u4eba\u4f1a\u8bf4\u4e9b\u4ec0\u4e48\u201d\u3002 \u201cput him down\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u201cput\u201d \u662f\u52a8\u8bcd\uff0c\u5728\u8fd9\u91cc\u662f \u201c\u653e\u7f6e\uff1b\u653e\u4e0b\u201d \u7684\u610f\u601d\uff0c\u201chim\u201d \u662f\u4eba\u79f0\u4ee3\u8bcd\u5bbe\u683c\uff0c\u4f5c \u201cput\u201d \u7684\u5bbe\u8bed\uff0c\u201cdown\u201d \u662f\u526f\u8bcd\uff0c\u4f5c\u8865\u8bed\uff0c\u8865\u5145\u8bf4\u660e \u201cput\u201d \u7684\u65b9\u5411\uff0c\u5373 \u201c\u653e\u4e0b\u201d\u3002 \u201cthis instant\u201d \u662f\u4e00\u4e2a\u65f6\u95f4\u77ed\u8bed\uff0c\u76f8\u5f53\u4e8e \u201cright now\u201d \u6216 \u201cimmediately\u201d\uff0c\u610f\u601d\u662f \u201c\u7acb\u523b\uff1b\u9a6c\u4e0a\u201d\uff0c\u5728\u53e5\u4e2d\u4f5c\u65f6\u95f4\u72b6\u8bed\uff0c\u4fee\u9970\u52a8\u8bcd\u77ed\u8bed \u201cput him down\u201d\uff0c\u5f3a\u8c03\u52a8\u4f5c\u8981\u8fc5\u901f\u5b8c\u6210\u3002\u6574\u4e2a\u53e5\u5b50\u662f\u4e00\u4e2a\u7948\u4f7f\u53e5\uff0c\u7701\u7565\u4e86\u4e3b\u8bed \u201cyou\u201d\uff0c\u8868\u8fbe\u547d\u4ee4\u6216\u5f3a\u70c8\u7684\u8981\u6c42\u3002","title":"S01e06"},{"location":"art/English/tv/bigbang/s01/e06/s01e06/#_1","text":"","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e06/s01e06/#_2","text":"\u201close to\u201d \u662f\u4e00\u4e2a\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u8f93\u7ed9\u2026\u2026\u201d\u3002\u201cKyle Bernstein\u2019s Bar-Mitzvah party\u201d \u4e2d\uff0c\u201cKyle Bernstein\u2019s\u201d \u662f\u540d\u8bcd\u6240\u6709\u683c\uff0c\u8868\u793a \u201c\u51ef\u5c14\u30fb\u4f2f\u6069\u65af\u5766\u7684\u201d\uff0c\u201cBar-Mitzvah party\u201d \u662f\u540d\u8bcd\u77ed\u8bed\uff0c\u6307\u72b9\u592a\u7537\u5b69\u7684\u6210\u4eba\u4eea\u5f0f\u6d3e\u5bf9\uff08\u72b9\u592a\u6559\u4e2d\u7537\u5b69 13 \u5c81\u65f6\u4e3e\u884c\u7684\u4e00\u79cd\u91cd\u8981\u5b97\u6559\u548c\u793e\u4ea4\u4eea\u5f0f\uff09 \u3002 \u6587\u5316\u80cc\u666f\u89e3\u91ca\uff1a Bar-Mitzvah \u6587\u5316\uff1aBar-Mitzvah\uff08\u6210\u4eba\u793c\uff09\u662f\u72b9\u592a\u6587\u5316\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6807\u5fd7\u7740\u4e00\u4e2a\u72b9\u592a\u7537\u5b69\u4ece\u513f\u7ae5\u6b65\u5165\u6210\u5e74\uff0c\u5728\u5b97\u6559\u3001\u793e\u4f1a\u548c\u5bb6\u5ead\u4e2d\u627f\u62c5\u66f4\u591a\u7684\u8d23\u4efb\u548c\u4e49\u52a1\u3002\u5728\u8fd9\u4e2a\u4eea\u5f0f\u4e0a\uff0c\u4f1a\u6709\u5b97\u6559\u4eea\u5f0f\u3001\u5e86\u795d\u6d3b\u52a8\u548c\u793e\u4ea4\u805a\u4f1a\u7b49\u3002\u5728\u5267\u4e2d\u63d0\u5230\u7684 \u201cKyle Bernstein\u2019s Bar-Mitzvah party\u201d\uff0c\u8bf4\u660e\u8fd9\u662f\u51ef\u5c14\u30fb\u4f2f\u6069\u65af\u5766\u4e3e\u884c\u6210\u4eba\u793c\u65f6\u4e3e\u529e\u7684\u6d3e\u5bf9\uff0c\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u4eb2\u670b\u597d\u53cb\u53c2\u52a0\uff0c\u5145\u6ee1\u6b22\u4e50\u3001\u70ed\u95f9\u7684\u6c1b\u56f4\u3002 \u53e5\u5b50\u6574\u4f53\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u53e5\uff0c\u201cYou know\u201d \u4f5c\u4e3a\u63d2\u5165\u8bed\uff0c\u7528\u4e8e\u5f15\u8d77\u5bf9\u65b9\u6ce8\u610f\u6216\u4f5c\u4e3a\u4e00\u79cd\u8bf4\u8bdd\u7684\u4e60\u60ef\u5f00\u573a\uff0c\u5728\u53e5\u5b50\u4e2d\u4e0d\u627f\u62c5\u4e3b\u8981\u7684\u8bed\u6cd5\u6210\u5206\u3002\u53e5\u5b50\u7684\u4e3b\u5e72\u662f \u201cwe were annihilated\u201d\uff0c\u4f7f\u7528\u4e86\u4e00\u822c\u8fc7\u53bb\u65f6\u7684\u88ab\u52a8\u8bed\u6001\uff0c\u201cwe\u201d \u662f\u4e3b\u8bed\uff0c\u201cwere annihilated\u201d\uff08\u88ab\u5f7b\u5e95\u51fb\u8d25\u3001\u6467\u6bc1\uff09\u662f\u8c13\u8bed\u90e8\u5206\u3002 \u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff1a\u201cby our own incompetence and the inability of some people to follow the chain of command\u201d \u662f\u7531 \u201cby\u201d \u5f15\u5bfc\u7684\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u65b9\u5f0f\u72b6\u8bed\uff0c\u8bf4\u660e \u201c\u6211\u4eec\u88ab\u51fb\u8d25\u201d \u7684\u539f\u56e0\u3002\u5176\u4e2d \u201cour own incompetence\u201d\uff08\u6211\u4eec\u81ea\u5df1\u7684\u65e0\u80fd\uff09\u548c \u201cthe inability of some people to follow the chain of command\u201d\uff08\u4e00\u4e9b\u4eba\u65e0\u6cd5\u9075\u5faa\u6307\u6325\u7cfb\u7edf\uff09\u662f\u5e76\u5217\u5173\u7cfb\uff0c\u7531 \u201cand\u201d \u8fde\u63a5\u3002 \u540e\u7f6e\u5b9a\u8bed\uff1a\u201cof some people to follow the chain of command\u201d \u662f\u4e00\u4e2a\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cthe inability\u201d\uff0c\u201cto follow the chain of command\u201d \u662f\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u8fdb\u4e00\u6b65\u8bf4\u660e \u201c\u65e0\u80fd\u201d \u7684\u5177\u4f53\u5185\u5bb9\uff0c\u5373 \u201c\u4e00\u4e9b\u4eba\u5728\u9075\u5faa\u6307\u6325\u7cfb\u7edf\u65b9\u9762\u7684\u65e0\u80fd\u201d\u3002 \uff1a\u201cclear space\u201d \u662f\u4e00\u4e2a\u77ed\u8bed\uff0c\u201cclear\u201d \u5728\u8fd9\u91cc\u662f\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u6e05\u7406\u3001\u817e\u51fa\u201d\uff0c\u201cspace\u201d \u8868\u793a \u201c\u7a7a\u95f4\u201d\uff0c\u201cclear space on your calendar\u201d \u5373 \u201c\u5728\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u4e0a\u817e\u51fa\u65f6\u95f4\u201d\uff1b\u201cenquiry\u201d\uff08\u82f1\u5f0f\u82f1\u8bed\uff0c\u7f8e\u5f0f\u82f1\u8bed\u5e38\u7528 \u201cinquiry\u201d\uff09\u662f\u540d\u8bcd\uff0c\u610f\u601d\u662f \u201c\u8c03\u67e5\u3001\u8be2\u95ee\u201d \u3002 \u201crandom\u201d\uff08\u968f\u673a\u7684\u3001\u4efb\u610f\u7684\uff09\u548c \u201cgenre specific\u201d\uff08\u7279\u5b9a\u7c7b\u578b\u7684\u3001\u6709\u98ce\u683c\u9650\u5236\u7684\uff09\u662f\u4e24\u4e2a\u5e76\u5217\u7684\u8868\u8bed\uff0c\u901a\u8fc7 \u201cor\u201d \u8fde\u63a5\uff0c\u8ba9\u5bf9\u65b9\u5728\u8fd9\u4e24\u79cd\u53ef\u80fd\u6027\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u8be2\u95ee\u670d\u88c5\u662f\u968f\u610f\u9009\u62e9\u7684\uff0c\u8fd8\u662f\u6709\u7279\u5b9a\u7684\u98ce\u683c\u7c7b\u578b\u8981\u6c42\u3002 D&D\uff1a\u5373\u9f99\u4e0e\u5730\u4e0b\u57ce\uff08Dungeons & Dragons\uff09\uff0c\u662f\u4e00\u6b3e\u6781\u5177\u5f71\u54cd\u529b\u7684\u684c\u4e0a\u89d2\u8272\u626e\u6f14\u6e38\u620f\u3002\u73a9\u5bb6\u5728\u6e38\u620f\u4e2d\u53ef\u4ee5\u626e\u6f14\u5404\u79cd\u5947\u5e7b\u89d2\u8272\uff0c\u5982\u6218\u58eb\u3001\u6cd5\u5e08\u3001\u76d7\u8d3c\u7b49\uff0c\u5728\u865a\u62df\u7684\u5947\u5e7b\u4e16\u754c\u4e2d\u8fdb\u884c\u5192\u9669\u3002\u5267\u4e2d\u89d2\u8272\u4eec\u7ecf\u5e38\u73a9\u8fd9\u6b3e\u6e38\u620f\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u4ee5\u6e38\u620f\u4e2d\u7684\u89d2\u8272\u5f62\u8c61\u4f5c\u4e3a\u88c5\u626e\u3002 Manga\uff1a\u6307\u65e5\u672c\u6f2b\u753b\u3002\u65e5\u672c\u6f2b\u753b\u6709\u4f17\u591a\u4e30\u5bcc\u7684\u89d2\u8272\u548c\u98ce\u683c\uff0c\u5982\u300a\u706b\u5f71\u5fcd\u8005\u300b\u300a\u6d77\u8d3c\u738b\u300b\u7b49\u4f5c\u54c1\u4e2d\u7684\u89d2\u8272\uff0c\u90fd\u53ef\u4ee5\u6210\u4e3a\u4ed6\u4eec\u88c5\u626e\u7684\u7075\u611f\u6765\u6e90\uff0c\u53cd\u6620\u51fa\u4ed6\u4eec\u5bf9\u4e0d\u540c\u6587\u5316\u80cc\u666f\u4e0b\u7684\u6d41\u884c\u6587\u5316\u7684\u559c\u7231\u548c\u5173\u6ce8\u3002 Greek Gods, Roman Gods, Norse Gods\uff1a\u5206\u522b\u6307\u5e0c\u814a\u795e\u8bdd\u3001\u7f57\u9a6c\u795e\u8bdd\u548c\u5317\u6b27\u795e\u8bdd\u4e2d\u7684\u4f17\u795e\u3002\u8fd9\u4e9b\u795e\u8bdd\u4f53\u7cfb\u4e2d\u6709\u8bb8\u591a\u4e2a\u6027\u9c9c\u660e\u3001\u5f62\u8c61\u72ec\u7279\u7684\u795e\u7947\uff0c\u5982\u5e0c\u814a\u795e\u8bdd\u4e2d\u7684\u5b99\u65af\u3001\u7f57\u9a6c\u795e\u8bdd\u4e2d\u7684\u6731\u5e87\u7279\u3001\u5317\u6b27\u795e\u8bdd\u4e2d\u7684\u5965\u4e01\u7b49\uff0c\u9009\u62e9\u4ee5\u8fd9\u4e9b\u795e\u8bdd\u89d2\u8272\u4f5c\u4e3a\u88c5\u626e\uff0c\u80fd\u591f\u5c55\u73b0\u51fa\u4ed6\u4eec\u5bf9\u53e4\u4ee3\u795e\u8bdd\u6587\u5316\u7684\u5174\u8da3\uff0c\u540c\u65f6\u4e5f\u80fd\u5728\u6d3e\u5bf9\u4e0a\u5448\u73b0\u51fa\u72ec\u7279\u800c\u795e\u79d8\u7684\u98ce\u683c\u3002 \u201cnobody gets to be The Flash\u201d \u662f\u4e00\u4e2a\u4e3b\u8c13\u5bbe\u7ed3\u6784\u7684\u53e5\u5b50\uff0c\u201cnobody\u201d \u4f5c\u4e3b\u8bed\uff0c\u8868\u793a \u201c\u6ca1\u6709\u4eba\u201d\uff1b\u201cgets to be\u201d \u662f\u8c13\u8bed\u90e8\u5206\uff0c\u201cget to\u201d \u5728\u8fd9\u91cc\u8868\u793a \u201c\u6709\u673a\u4f1a\u3001\u88ab\u5141\u8bb8\u201d\uff0c\u201cbe\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cThe Flash\u201d\uff08\u95ea\u7535\u4fa0\uff0c\u7f8e\u56fd DC \u6f2b\u753b\u65d7\u4e0b\u8d85\u7ea7\u82f1\u96c4\uff09\u4f5c\u8868\u8bed\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6ca1\u6709\u4eba\u53ef\u4ee5\u626e\u6f14\u95ea\u7535\u4fa0\u201d\u3002 \u201cthis party is my first chance for Penny to see me in the context of her social group\u201d\uff1a \u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\u3002\u201cthis party\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cmy first chance\u201d \u4f5c\u8868\u8bed\u3002 \u201cfor Penny to see me in the context of her social group\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u7684\u590d\u5408\u7ed3\u6784\uff0c\u4f5c\u540e\u7f6e\u5b9a\u8bed\u4fee\u9970 \u201cchance\u201d\u3002\u201cfor Penny\u201d \u8868\u793a\u4e0d\u5b9a\u5f0f\u52a8\u4f5c \u201cto see me\u201d \u7684\u903b\u8f91\u4e3b\u8bed\uff0c\u201cin the context of her social group\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u4fee\u9970 \u201csee me\u201d\uff0c\u8868\u793a \u201c\u5728\u4f69\u59ae\u7684\u793e\u4ea4\u5708\u5b50\u8fd9\u4e2a\u60c5\u5883\u4e0b\u201d\u3002 \u201cand I need you not to embarrass me tonight\u201d\uff1a \u201cand\u201d \u662f\u5e76\u5217\u8fde\u8bcd\uff0c\u8fde\u63a5\u524d\u540e\u4e24\u4e2a\u53e5\u5b50\u3002 \u201cI\u201d \u662f\u4e3b\u8bed\uff0c\u201cneed\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u201cyou\u201d \u662f\u5bbe\u8bed\uff0c\u201cnot to embarrass me tonight\u201d \u662f\u52a8\u8bcd\u4e0d\u5b9a\u5f0f\u7684\u5426\u5b9a\u5f62\u5f0f\u4f5c\u5bbe\u8bed\u8865\u8db3\u8bed\uff0c\u201cneed sb. not to do sth.\u201d \u8868\u793a \u201c\u9700\u8981\u67d0\u4eba\u4e0d\u8981\u505a\u67d0\u4e8b\u201d\uff0c\u201ctonight\u201d \u662f\u65f6\u95f4\u72b6\u8bed\u3002 \u201cJust a heads up fellas\u201d\uff1a\u201cJust\u201d \u662f\u526f\u8bcd\uff0c\u8d77\u5f3a\u8c03\u4f5c\u7528\uff0c\u201ca heads up\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u4e8b\u5148\u63d0\u9192\uff1b\u9884\u8b66\u201d\uff0c\u201cfellas\u201d \u662f \u201cfellow\u201d \u7684\u590d\u6570\u5f62\u5f0f\uff0c\u5728\u8fd9\u91cc\u7528\u4f5c\u79f0\u547c\u8bed\uff0c\u610f\u4e3a \u201c\u4f19\u8ba1\u4eec\u201d\uff0c\u8fd9\u90e8\u5206\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8868\u8fbe\uff0c\u7528\u4e8e\u5f15\u8d77\u5176\u4ed6\u4eba\u7684\u6ce8\u610f\u5e76\u4f20\u8fbe\u63d0\u9192\u7684\u610f\u56fe\u3002 \u201cif anyone gets lucky\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u7531 \u201cif\u201d \u5f15\u5bfc\u7684\u6761\u4ef6\u72b6\u8bed\u4ece\u53e5\uff0c\u201canyone\u201d \u4f5c\u4ece\u53e5\u7684\u4e3b\u8bed\uff0c\u201cgets lucky\u201d \u662f\u7cfb\u8868\u7ed3\u6784\uff0c\u201clucky\u201d \u4f5c\u8868\u8bed\uff0c\u8fd9\u91cc \u201cgets lucky\u201d \u7ed3\u5408\u8bed\u5883\u53ef\u7406\u89e3\u4e3a \u201c\u6709\u6027\u65b9\u9762\u7684\u5e78\u8fd0\uff08\u5373\u6709\u673a\u4f1a\u53d1\u751f\u6027\u884c\u4e3a\uff09\u201d\u3002 \u201cI\u2019ve got a dozen condoms in my quiver\u201d\uff1a\u201cI\u2019ve got\u201d \u662f \u201cI have got\u201d \u7684\u7f29\u5199\uff0c\u76f8\u5f53\u4e8e \u201cI have\u201d\uff0c\u8868\u793a \u201c\u6211\u6709\u201d\u3002\u201ca dozen\u201d \u610f\u4e3a \u201c\u4e00\u6253\uff0c\u5341\u4e8c\u4e2a\u201d\uff0c\u4fee\u9970 \u201ccondoms\u201d\uff08\u907f\u5b55\u5957\uff09\u3002\u201cin my quiver\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u5730\u70b9\u72b6\u8bed\uff0c\u201cquiver\u201d \u539f\u610f\u4e3a \u201c\u7bad\u7b52\uff1b\u7bad\u888b\u201d\uff0c\u8fd9\u91cc\u5f62\u8c61\u5730\u8868\u793a \u201c\u50a8\u5907\uff1b\u5b58\u8d27\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6211\u50a8\u5907\u4e86\u5341\u4e8c\u4e2a\u907f\u5b55\u5957\u201d\u3002 \u201cby Odin\u2019s beard\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u5728\u8fd9\u91cc\u4f5c\u72b6\u8bed\uff0c\u201cby\u201d \u8868\u793a \u201c\u4ee5\u2026\u2026 \u7684\u540d\u4e49\uff1b\u501f\u52a9\u4e8e\u201d\uff0c\u201cOdin\u2019s beard\u201d \u4e2d \u201cOdin\u201d \u662f\u5317\u6b27\u795e\u8bdd\u4e2d\u7684\u4f17\u795e\u4e4b\u738b\u5965\u4e01\uff0c\u201cbeard\u201d \u662f \u201c\u80e1\u987b\u201d \u7684\u610f\u601d\uff0c\u201cby Odin\u2019s beard\u201d \u7c7b\u4f3c\u4e8e\u4e00\u79cd\u611f\u53f9\u8bed\uff0c\u8868\u8fbe\u60ca\u8bb6\u3001\u8d5e\u53f9\u7b49\u5f3a\u70c8\u7684\u60c5\u7eea\uff0c\u6709 \u201c\u770b\u5728\u5965\u4e01\u7684\u4efd\u4e0a\uff1b\u5929\u54ea\u201d \u7b49\u542b\u4e49\u3002 \u201cthis is good Chex Mix\u201d \u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\uff0c\u201cthis\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cgood Chex Mix\u201d \u4f5c\u8868\u8bed\uff0c\u201cChex Mix\u201d \u662f\u4e00\u79cd\u6df7\u5408\u96f6\u98df\uff08\u7531\u8c37\u7269\u7247\u3001\u575a\u679c\u3001\u997c\u5e72\u7b49\u6df7\u5408\u800c\u6210\uff09\uff0c\u201cgood\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u4fee\u9970 \u201cChex Mix\u201d\uff0c\u8868\u793a\u8fd9\u79cd\u96f6\u98df\u5f88\u597d\u5403\u3002 \u201ccheck out the sexy nurse\u201d\uff1a\u201ccheck out\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u770b\u770b\u3001\u77a7\u77a7\u201d\uff0c\u201cthe sexy nurse\u201d \u662f \u201ccheck out\u201d \u7684\u5bbe\u8bed\uff0c\u201csexy\u201d \u662f\u5f62\u5bb9\u8bcd\u4fee\u9970 \u201cnurse\u201d\uff0c\u8868\u793a \u201c\u6027\u611f\u7684\u62a4\u58eb\u201d\uff0c\u6574\u53e5\u8bdd\u662f\u8ba9\u5927\u5bb6\u770b\u90a3\u4e2a\u6027\u611f\u7684\u62a4\u58eb\u3002 \u201cI believe it\u2019s time for me to turn my head and cough\u201d\uff1a\u201cI believe\u201d \u540e\u63a5\u5bbe\u8bed\u4ece\u53e5 \u201cit\u2019s time for me to turn my head and cough\u201d\u3002\u201cit\u2019s time for sb. to do sth.\u201d \u662f\u4e00\u4e2a\u5e38\u7528\u53e5\u578b\uff0c\u610f\u4e3a \u201c\u662f\u67d0\u4eba\u505a\u67d0\u4e8b\u7684\u65f6\u5019\u4e86\u201d\uff0c\u201cturn my head and cough\u201d \u662f \u201cto\u201d \u540e\u9762\u7684\u52a8\u8bcd\u77ed\u8bed\uff0c\u5b57\u9762\u610f\u601d\u662f \u201c\u8f6c\u8fc7\u5934\u7136\u540e\u54b3\u55fd\u201d\u3002 \u5728\u897f\u65b9\u6587\u5316\u4e2d\uff0c\u201cturn your head and cough\u201d \u662f\u533b\u751f\u5728\u7ed9\u7537\u6027\u60a3\u8005\u505a\u8eab\u4f53\u68c0\u67e5\uff08\u5c24\u5176\u662f\u68c0\u67e5\u8179\u80a1\u6c9f\u533a\u57df\uff09\u65f6\u5e38\u89c1\u7684\u6307\u4ee4\u3002\u8bf4\u8bdd\u8005\u5728\u8fd9\u91cc\u6545\u610f\u501f\u7528\u8fd9\u4e2a\u60c5\u5883\uff0c\u4ee5\u4e00\u79cd\u8bd9\u8c10\u7684\u65b9\u5f0f\u8868\u8fbe\u81ea\u5df1\u5bf9\u6027\u611f\u62a4\u58eb\u7684\u53cd\u5e94\uff0c\u6697\u793a\u81ea\u5df1\u5e0c\u671b\u5f97\u5230\u62a4\u58eb\u50cf\u533b\u751f\u68c0\u67e5\u90a3\u6837\u7684 \u201c\u7279\u522b\u5173\u6ce8\u201d\uff0c\u8425\u9020\u51fa\u4e00\u79cd\u8f7b\u677e\u3001\u641e\u7b11\u7684\u6c1b\u56f4\u3002 \u201cI have transient idiopathic arrhythmia\u201d\uff1a\u201cI\u201d \u662f\u4e3b\u8bed\uff0c\u201chave\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u60a3\u6709\uff1b\u62e5\u6709\u201d\u3002\u201ctransient idiopathic arrhythmia\u201d \u662f\u5bbe\u8bed\uff0c\u201ctransient\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u77ed\u6682\u7684\uff1b\u6682\u65f6\u7684\u201d\uff1b\u201cidiopathic\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u601d\u662f \u201c\u7279\u53d1\u6027\u7684\uff08\u539f\u56e0\u4e0d\u660e\u7684\uff09\u201d\uff1b\u201carrhythmia\u201d \u662f\u540d\u8bcd\uff0c\u6307 \u201c\u5fc3\u5f8b\u5931\u5e38\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6211\u60a3\u6709\u77ed\u6682\u6027\u7279\u53d1\u6027\u5fc3\u5f8b\u5931\u5e38\u201d\u3002 \u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7591\u95ee\u53e5\uff0c\u91c7\u7528\u4e86 \u201c\u7591\u95ee\u8bcd + \u7cfb\u52a8\u8bcd + \u4e3b\u8bed\u201d \u7684\u5012\u88c5\u7ed3\u6784\u3002\u201cHow\u201d \u662f\u7591\u95ee\u526f\u8bcd\uff0c\u5728\u8fd9\u91cc\u7528\u6765\u8be2\u95ee\u7a0b\u5ea6\uff0c\u610f\u4e3a \u201c\u591a\u4e48\u201d\uff1b\u201cwasted\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u5728\u53e3\u8bed\u4e2d\u5e38\u7528\u6765\u8868\u793a \u201c\uff08\u56e0\u996e\u9152\u6216\u5438\u6bd2\u7b49\u800c\uff09\u559d\u9189\u7684\u3001\u795e\u5fd7\u4e0d\u6e05\u7684\u201d\uff1b\u201cam\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cI\u201d \u662f\u4e3b\u8bed\u3002\u6574\u53e5\u8bdd\u7684\u6b63\u5e38\u8bed\u5e8f\u5e94\u8be5\u662f \u201cI am how wasted\u201d\uff0c\u4f46\u5728\u7591\u95ee\u53e5\u4e2d\u8981\u5c06\u7cfb\u52a8\u8bcd \u201cam\u201d \u63d0\u5230\u4e3b\u8bed \u201cI\u201d \u524d\u9762\uff0c\u4ee5\u6784\u6210\u7279\u6b8a\u7591\u95ee\u53e5\u7684\u5f62\u5f0f\u6765\u8be2\u95ee \u201c\u6211\u9189\u5230\u4ec0\u4e48\u7a0b\u5ea6\u4e86\uff1f\u201d \u201cif this was 15,000 years ago\u201d \u662f\u4e00\u4e2a\u7531 \u201cif\u201d \u5f15\u5bfc\u7684\u865a\u62df\u6761\u4ef6\u72b6\u8bed\u4ece\u53e5\uff0c\u4f7f\u7528\u4e86\u4e00\u822c\u8fc7\u53bb\u65f6 \u201cwas\u201d \u6765\u8868\u793a\u4e0e\u73b0\u5728\u4e8b\u5b9e\u76f8\u53cd\u7684\u5047\u8bbe\uff08\u5728\u865a\u62df\u8bed\u6c14\u4e2d\uff0c\u201cbe\u201d \u52a8\u8bcd\u5e38\u7528 \u201cwere\u201d\uff0c\u4f46\u5728\u53e3\u8bed\u4e2d \u201cwas\u201d \u4e5f\u8f83\u4e3a\u5e38\u89c1\uff09\uff0c\u610f\u601d\u662f \u201c\u5982\u679c\u8fd9\u662f\u5728\u4e00\u4e07\u4e94\u5343\u5e74\u524d\u201d\u3002 \u201cby virtue of his size and strength\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u65b9\u5f0f\u72b6\u8bed\uff0c\u201cby virtue of\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u7531\u4e8e\uff1b\u51ed\u501f\u201d\uff0c\u201chis size and strength\u201d \u8868\u793a \u201c\u4ed6\u7684\u4f53\u578b\u548c\u529b\u91cf\u201d\uff0c\u8bf4\u660e\u540e\u9762\u60c5\u51b5\u7684\u539f\u56e0\u3002 \u201cKurt would be entitled to his choice of female partners\u201d \u662f\u4e3b\u53e5\uff0c\u4f7f\u7528\u4e86\u865a\u62df\u8bed\u6c14\uff0c\u201cwould be\u201d \u662f\u8c13\u8bed\u90e8\u5206\uff0c\u201centitled to\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u6709\u6743\uff1b\u6709\u8d44\u683c\u201d\uff0c\u201chis choice of female partners\u201d \u4f5c \u201centitled to\u201d \u7684\u5bbe\u8bed\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u5e93\u5c14\u7279\u5c31\u6709\u8d44\u683c\u9009\u62e9\u4ed6\u7684\u5973\u6027\u4f34\u4fa3\u201d\u3002 \u201cpretty much whatever tickled his fancy\u201d\uff1a\u201cpretty much\u201d \u662f\u4e00\u4e2a\u526f\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u51e0\u4e4e\uff1b\u5dee\u4e0d\u591a\u201d\uff0c\u8d77\u5f3a\u8c03\u4f5c\u7528\u3002\u201cwhatever tickled his fancy\u201d \u662f\u4e00\u4e2a\u5bbe\u8bed\u4ece\u53e5\uff0c\u201cwhatever\u201d \u65e2\u4f5c\u5f15\u5bfc\u8bcd\u53c8\u5728\u4ece\u53e5\u4e2d\u5145\u5f53\u4e3b\u8bed\uff0c\u201ctickled\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u201ctickle one's fancy\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u5408\u67d0\u4eba\u7684\u5fc3\u610f\uff1b\u4f7f\u67d0\u4eba\u611f\u5174\u8da3\u201d\uff0c\u201chis\u201d \u6307\u4ee3\u524d\u6587\u63d0\u5230\u7684\u5e93\u5c14\u7279\uff08Kurt\uff09\uff0c\u201cfancy\u201d \u5728\u8fd9\u91cc\u662f\u540d\u8bcd\uff0c\u610f\u4e3a \u201c\u559c\u597d\uff1b\u5e7b\u60f3\u201d\u3002\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u5dee\u4e0d\u591a\u4efb\u4f55\u5408\u4ed6\u5fc3\u610f\u7684\u4e1c\u897f\u201d\u3002 \u201cin the information age\u201d \u662f\u4e00\u4e2a\u4ecb\u8bcd\u77ed\u8bed\uff0c\u4f5c\u65f6\u95f4\u72b6\u8bed\uff0c\u8868\u660e\u53e5\u5b50\u6240\u63cf\u8ff0\u7684\u60c5\u51b5\u53d1\u751f\u7684\u65f6\u4ee3\u80cc\u666f\uff0c\u610f\u601d\u662f \u201c\u5728\u4fe1\u606f\u65f6\u4ee3\u201d\u3002 \u201cSheldon, you and I are the alpha males\u201d\uff1a\u201cSheldon\u201d \u5728\u8fd9\u91cc\u662f\u79f0\u547c\u8bed\uff0c\u201cyou and I\u201d \u662f\u5e76\u5217\u7684\u4e3b\u8bed\uff0c\u201care\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201cthe alpha males\u201d \u4f5c\u8868\u8bed\u3002\u201calpha males\u201d \u76f4\u8bd1\u4e3a \u201c\u96c4\u6027\u9886\u8896\uff1b\u4e3b\u5bfc\u7537\u6027\u201d\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u5728\u67d0\u4e2a\u7fa4\u4f53\u6216\u73af\u5883\u4e2d\u5904\u4e8e\u4f18\u52bf\u3001\u4e3b\u5bfc\u5730\u4f4d\u7684\u7537\u6027\u3002 \u201cWe shouldn\u2019t have to back down\u201d\uff1a\u201cWe\u201d \u662f\u4e3b\u8bed\uff0c\u201cshouldn\u2019t\u201d \u662f\u60c5\u6001\u52a8\u8bcd \u201cshould\u201d \u7684\u5426\u5b9a\u5f62\u5f0f\uff0c\u201chave to\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u4e0d\u5f97\u4e0d\uff1b\u5fc5\u987b\u201d\uff0c\u201cback down\u201d \u662f\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u601d\u662f \u201c\u9000\u7f29\uff1b\u8ba9\u6b65\u201d\u3002\u6574\u53e5\u8bdd\u8868\u793a \u201c\u6211\u4eec\u4e0d\u5e94\u8be5\u4e0d\u5f97\u4e0d\u9000\u7f29\uff08\u5373\u6211\u4eec\u4e0d\u5e94\u8be5\u9000\u7f29\uff09\u201d\u3002 \u201cGiven the reaction to my costume\u201d\uff1a\u201cgiven\u201d \u5728\u8fd9\u91cc\u662f\u4ecb\u8bcd\uff0c\u610f\u4e3a \u201c\u8003\u8651\u5230\uff1b\u9274\u4e8e\u201d\uff0c\u201cthe reaction to my costume\u201d \u662f \u201cgiven\u201d \u7684\u5bbe\u8bed\uff0c\u201cto my costume\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\u4fee\u9970 \u201creaction\u201d\uff0c\u8868\u793a \u201c\u5bf9\u6211\u670d\u88c5\u7684\u53cd\u5e94\u201d\uff0c\u6574\u4e2a\u77ed\u8bed\u5728\u53e5\u4e2d\u4f5c\u539f\u56e0\u72b6\u8bed\uff0c\u8868\u660e\u540e\u9762\u7ed3\u8bba\u4ea7\u751f\u7684\u4f9d\u636e\u3002 \u201cthis party is a scathing indictment of the American education system\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\u3002\u201cthis party\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201ca scathing indictment\u201d \u662f\u8868\u8bed\uff0c\u201cscathing\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u4e25\u5389\u7684\uff1b\u5c16\u523b\u7684\u201d\uff0c\u201cindictment\u201d \u662f\u540d\u8bcd\uff0c\u610f\u601d\u662f \u201c\u8c34\u8d23\uff1b\u63a7\u8bc9\u201d\u3002\u201cof the American education system\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cindictment\u201d\uff0c\u8868\u793a \u201c\u5bf9\u7f8e\u56fd\u6559\u80b2\u4f53\u7cfb\u7684\uff08\u8c34\u8d23\uff09\u201d \u3002 \u201cYet\u201d \u5728\u8fd9\u91cc\u662f\u4e00\u4e2a\u526f\u8bcd\uff0c\u610f\u601d\u662f \u201c\u8fd8\uff1b\u4ecd\u7136\uff1b\u53c8\u201d\uff0c\u7528\u4e8e\u52a0\u5f3a\u8bed\u6c14\uff0c\u5f3a\u8c03\u60c5\u51b5\u7684\u91cd\u590d\u6027\u6216\u8fde\u7eed\u6027\u3002 \u201canother\u201d \u662f\u9650\u5b9a\u8bcd\uff0c\u610f\u4e3a \u201c\u53c8\u4e00\uff1b\u518d\u4e00\uff1b\u53e6\u4e00\u201d\uff0c\u4fee\u9970\u540e\u9762\u7684\u540d\u8bcd \u201cchild\u201d\u3002 \u201cchild\u201d \u662f\u540d\u8bcd\uff0c\u201c\u5b69\u5b50\u201d \u7684\u610f\u601d\u3002 \u201cleft behind\u201d \u662f\u8fc7\u53bb\u5206\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cchild\u201d\u3002\u201cleave behind\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u7559\u4e0b\uff1b\u9057\u5fd8\uff1b\u4e22\u5f03\u201d\uff0c\u8fd9\u91cc\u7528\u8fc7\u53bb\u5206\u8bcd\u5f62\u5f0f\u8868\u793a\u88ab\u52a8\uff0c\u5373 \u201c\u88ab\u7559\u4e0b\u7684\u5b69\u5b50\u201d\u3002\u6574\u4e2a\u53e5\u5b50\u53ef\u4ee5\u7406\u89e3\u4e3a \u201c\u53c8\u4e00\u4e2a\u88ab\u7559\u4e0b\u7684\u5b69\u5b50\u201d\u3002 \u201ca Hobbit is a mortal Halfling inhabitant of Middle Earth\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u4e3b\u7cfb\u8868\u7ed3\u6784\u7684\u53e5\u5b50\u3002\u201ca Hobbit\u201d \u662f\u4e3b\u8bed\uff0c\u8868\u793a \u201c\u4e00\u4e2a\u970d\u6bd4\u7279\u4eba\u201d\uff1b\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff1b\u201ca mortal Halfling inhabitant of Middle Earth\u201d \u662f\u8868\u8bed\u90e8\u5206\uff0c\u5176\u4e2d \u201ca\u201d \u662f\u4e0d\u5b9a\u51a0\u8bcd\uff0c\u201cmortal\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u51e1\u4eba\u7684\u3001\u7ec8\u6709\u4e00\u6b7b\u7684\u201d\uff0c\u201cHalfling\u201d \u662f\u540d\u8bcd\uff0c\u6307 \u201c\u534a\u8eab\u4eba\uff08\u970d\u6bd4\u7279\u4eba\u7684\u522b\u79f0\uff09\u201d\uff0c\u201cinhabitant\u201d \u662f\u540d\u8bcd \u201c\u5c45\u6c11\u201d\uff0c\u201cof Middle Earth\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cinhabitant\u201d\uff0c\u8868\u793a \u201c\u4e2d\u571f\u4e16\u754c\u7684\u5c45\u6c11\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u4e00\u4e2a\u970d\u6bd4\u7279\u4eba\u662f\u4e2d\u571f\u4e16\u754c\u91cc\u7ec8\u6709\u4e00\u6b7b\u7684\u534a\u8eab\u4eba\u5c45\u6c11\u201d\u3002 \u201cwhereas an Elf is an immortal tall warrior\u201d\uff1a\u201cwhereas\u201d \u662f\u8fde\u8bcd\uff0c\u610f\u4e3a \u201c\u7136\u800c\u3001\u800c\u201d\uff0c\u7528\u4e8e\u5bf9\u6bd4\u6216\u5bf9\u7167\u4e24\u4e2a\u53e5\u5b50\u3002\u201can Elf\u201d \u662f\u4e3b\u8bed\uff0c\u201cis\u201d \u662f\u7cfb\u52a8\u8bcd\uff0c\u201can immortal tall warrior\u201d \u662f\u8868\u8bed\uff0c\u201can\u201d \u662f\u4e0d\u5b9a\u51a0\u8bcd\uff0c\u201cimmortal\u201d \u662f\u5f62\u5bb9\u8bcd \u201c\u4e0d\u673d\u7684\u3001\u957f\u751f\u4e0d\u8001\u7684\u201d\uff0c\u201ctall\u201d \u662f\u5f62\u5bb9\u8bcd \u201c\u9ad8\u5927\u7684\u201d\uff0c\u201cwarrior\u201d \u662f\u540d\u8bcd \u201c\u6218\u58eb\u201d\uff0c\u8fd9\u53e5\u8bdd\u8868\u793a \u201c\u800c\u4e00\u4e2a\u7cbe\u7075\u662f\u957f\u751f\u4e0d\u8001\u7684\u9ad8\u5927\u6218\u58eb\u201d \u201cwhy don\u2019t you go hop off on a quest\u201d\uff1a\u201cwhy don\u2019t you...\u201d \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u53e5\u5f0f\uff0c\u7528\u4e8e\u63d0\u51fa\u5efa\u8bae\u6216\u8868\u793a\u4e0d\u6ee1\u3001\u4e0d\u8010\u70e6\u7b49\u60c5\u7eea\uff0c\u610f\u601d\u662f \u201c\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u2026\u2026\u201d\u3002\u201cgo hop off\u201d \u4e2d \u201cgo\u201d \u548c\u540e\u9762\u7684\u52a8\u8bcd \u201chop off\u201d \u6784\u6210 \u201cgo + \u52a8\u8bcd\u539f\u5f62\u201d \u7684\u7ed3\u6784\uff0c\u8868\u793a\u53bb\u505a\u67d0\u4e8b\uff0c\u5728\u8fd9\u91cc \u201chop off\u201d \u662f\u52a8\u8bcd\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u79bb\u5f00\uff1b\u51fa\u53d1\u201d\u3002\u201con a quest\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u201cquest\u201d \u610f\u4e3a \u201c\u63a2\u7d22\uff1b\u5bfb\u6c42\uff1b\u5192\u9669\u201d\uff0c\u201con a quest\u201d \u8868\u793a \u201c\u8fdb\u884c\u4e00\u6b21\u5192\u9669\u201d\u3002\u6240\u4ee5\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u79bb\u5f00\u53bb\u8fdb\u884c\u4e00\u6b21\u5192\u9669\u5462\u201d\u3002 \u201cand so you\u2019re driven to animalistic puffery\u201d\uff1a\u201cand so\u201d \u662f\u8fde\u8bcd\u77ed\u8bed\uff0c\u8d77\u5230\u8fde\u63a5\u548c\u5f15\u51fa\u7ed3\u679c\u7684\u4f5c\u7528\uff0c\u201cso\u201d \u5728\u8fd9\u91cc\u8868\u793a \u201c\u56e0\u6b64\uff1b\u6240\u4ee5\u201d\u3002\u201cyou\u2019re\u201d \u662f \u201cyou are\u201d \u7684\u7f29\u5199\uff0c\u201care driven\u201d \u662f\u88ab\u52a8\u8bed\u6001\u7ed3\u6784\uff0c\u201cdrive\u201d \u5728\u8fd9\u91cc\u610f\u4e3a \u201c\u9a71\u4f7f\u201d\uff0c\u201cyou are driven\u201d \u5373 \u201c\u4f60\u88ab\u9a71\u4f7f\u201d\u3002\u201cto animalistic puffery\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\uff0c\u201canimalistic\u201d \u662f\u5f62\u5bb9\u8bcd\uff0c\u610f\u4e3a \u201c\u517d\u6027\u7684\uff1b\u52a8\u7269\u672c\u80fd\u7684\u201d\uff0c\u201cpuffery\u201d \u662f\u540d\u8bcd\uff0c\u610f\u601d\u662f \u201c\u5439\u5618\uff1b\u5938\u5927\u5176\u8bcd\u201d\uff0c\u6574\u53e5\u8bdd\u610f\u601d\u662f \u201c\u6240\u4ee5\u4f60\u5c31\u53ea\u80fd\u8bc9\u8bf8\u4e8e\u517d\u6027\u822c\u7684\u5439\u5618\u201d\u3002 \u201cAre misfiring neurons in your hippocampus preventing the conversion from short-term to long-term memory?\u201d \u8fd9\u662f\u4e00\u4e2a\u4e00\u822c\u7591\u95ee\u53e5\uff0c\u91c7\u7528\u4e86\u73b0\u5728\u8fdb\u884c\u65f6\u7684\u7591\u95ee\u7ed3\u6784\u3002 \u201cAre\u201d \u662f\u52a9\u52a8\u8bcd\uff0c\u7528\u4e8e\u6784\u6210\u7591\u95ee\u53e5\u548c\u73b0\u5728\u8fdb\u884c\u65f6\uff0c\u5e2e\u52a9\u5c06\u9648\u8ff0\u53e5\u53d8\u4e3a\u7591\u95ee\u53e5\u5f62\u5f0f\u3002 \u201cmisfiring neurons\u201d \u662f\u53e5\u5b50\u7684\u4e3b\u8bed\uff0c\u201cmisfiring\u201d \u662f\u73b0\u5728\u5206\u8bcd\u4f5c\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cneurons\u201d\uff0c\u8868\u793a \u201c\u529f\u80fd\u5f02\u5e38\u653e\u7535\u7684\u795e\u7ecf\u5143\u201d\uff0c\u201cneurons\u201d \u662f\u540d\u8bcd \u201c\u795e\u7ecf\u5143\u201d \u7684\u590d\u6570\u5f62\u5f0f\u3002 \u201cin your hippocampus\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cneurons\u201d\uff0c\u201chippocampus\u201d \u662f\u540d\u8bcd \u201c\u6d77\u9a6c\u4f53\uff08\u5927\u8111\u4e2d\u7684\u4e00\u4e2a\u533a\u57df\uff09\u201d\uff0c\u8bf4\u660e\u8fd9\u4e9b\u795e\u7ecf\u5143\u7684\u4f4d\u7f6e\u662f\u5728\u6d77\u9a6c\u4f53\u4e2d\u3002 \u201cpreventing\u201d \u662f\u73b0\u5728\u5206\u8bcd\uff0c\u4e0e\u524d\u9762\u7684 \u201care\u201d \u4e00\u8d77\u6784\u6210\u73b0\u5728\u8fdb\u884c\u65f6\u7684\u8c13\u8bed\u90e8\u5206\uff0c\u201cprevent\u201d \u662f\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u963b\u6b62\uff1b\u59a8\u788d\u201d\u3002 \u201cthe conversion from short-term to long-term memory\u201d \u662f \u201cpreventing\u201d \u7684\u5bbe\u8bed\uff0c\u201cthe conversion\u201d \u662f\u540d\u8bcd \u201c\u8f6c\u6362\u201d\uff0c\u201cfrom short-term to long-term memory\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u4fee\u9970 \u201cconversion\u201d\uff0c\u8868\u793a \u201c\u4ece\u77ed\u671f\u8bb0\u5fc6\u5230\u957f\u671f\u8bb0\u5fc6\u7684\u8f6c\u6362\u201d\u3002 \u201cA homo-habilus discovering his opposable thumbs\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u540d\u8bcd\u77ed\u8bed\uff0c\u6838\u5fc3\u8bcd\u662f \u201chomo-habilus\u201d\uff08\u80fd\u4eba\uff0c\u65e9\u671f\u4eba\u7c7b\u7684\u4e00\u79cd\uff09\uff0c\u201cdiscovering his opposable thumbs\u201d \u662f\u73b0\u5728\u5206\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\u4fee\u9970 \u201chomo-habilus\u201d\u3002\u201cdiscovering\u201d \u662f\u73b0\u5728\u5206\u8bcd\uff0c\u201chis\u201d \u662f\u5f62\u5bb9\u8bcd\u6027\u7269\u4e3b\u4ee3\u8bcd\u4fee\u9970 \u201copposable thumbs\u201d\uff08\u5bf9\u751f\u62c7\u6307\uff09\uff0c\u8868\u793a \u201c\u53d1\u73b0\u4ed6\u7684\u5bf9\u751f\u62c7\u6307\u7684\uff08\u80fd\u4eba\uff09\u201d\u3002 \u201csays what?\u201d\uff1a\u8fd9\u662f\u4e00\u4e2a\u53e3\u8bed\u5316\u7684\u8868\u8fbe\uff0c\u201csays\u201d \u662f\u52a8\u8bcd \u201c\u8bf4\u201d \u7684\u7b2c\u4e09\u4eba\u79f0\u5355\u6570\u5f62\u5f0f\uff0c\u201cwhat\u201d \u662f\u7591\u95ee\u8bcd\uff0c\u5728\u8fd9\u91cc \u201csays what\u201d \u610f\u601d\u662f \u201c\u4f1a\u8bf4\u4ec0\u4e48\u5462\u201d\uff0c\u6784\u6210\u4e00\u4e2a\u7b80\u77ed\u7684\u7591\u95ee\u53e5\uff0c\u7528\u6765\u8be2\u95ee \u201c\u53d1\u73b0\u5bf9\u751f\u62c7\u6307\u7684\u80fd\u4eba\u4f1a\u8bf4\u4e9b\u4ec0\u4e48\u201d\u3002 \u201cput him down\u201d \u662f\u4e00\u4e2a\u52a8\u8bcd\u77ed\u8bed\uff0c\u201cput\u201d \u662f\u52a8\u8bcd\uff0c\u5728\u8fd9\u91cc\u662f \u201c\u653e\u7f6e\uff1b\u653e\u4e0b\u201d \u7684\u610f\u601d\uff0c\u201chim\u201d \u662f\u4eba\u79f0\u4ee3\u8bcd\u5bbe\u683c\uff0c\u4f5c \u201cput\u201d \u7684\u5bbe\u8bed\uff0c\u201cdown\u201d \u662f\u526f\u8bcd\uff0c\u4f5c\u8865\u8bed\uff0c\u8865\u5145\u8bf4\u660e \u201cput\u201d \u7684\u65b9\u5411\uff0c\u5373 \u201c\u653e\u4e0b\u201d\u3002 \u201cthis instant\u201d \u662f\u4e00\u4e2a\u65f6\u95f4\u77ed\u8bed\uff0c\u76f8\u5f53\u4e8e \u201cright now\u201d \u6216 \u201cimmediately\u201d\uff0c\u610f\u601d\u662f \u201c\u7acb\u523b\uff1b\u9a6c\u4e0a\u201d\uff0c\u5728\u53e5\u4e2d\u4f5c\u65f6\u95f4\u72b6\u8bed\uff0c\u4fee\u9970\u52a8\u8bcd\u77ed\u8bed \u201cput him down\u201d\uff0c\u5f3a\u8c03\u52a8\u4f5c\u8981\u8fc5\u901f\u5b8c\u6210\u3002\u6574\u4e2a\u53e5\u5b50\u662f\u4e00\u4e2a\u7948\u4f7f\u53e5\uff0c\u7701\u7565\u4e86\u4e3b\u8bed \u201cyou\u201d\uff0c\u8868\u8fbe\u547d\u4ee4\u6216\u5f3a\u70c8\u7684\u8981\u6c42\u3002","title":"\u53e5\u5b50"},{"location":"art/English/tv/bigbang/s01/e07/s01e07/","text":"\u751f\u8bcd \u53e5\u5b50 If we\u2019re all through playing mock the flawed technology \u53e5\u5b50\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u6761\u4ef6\u72b6\u8bed\u4ece\u53e5\uff0c\u4e3b\u53e5\u90e8\u5206\u88ab\u7701\u7565\uff0c\u5b8c\u6574\u7684\u8868\u8fbe\u53ef\u80fd\u662f\u4e00\u4e2a\u9690\u542b\u7684\u5efa\u8bae\u6216\u547d\u4ee4\uff0c\u5982 \u201cIf we\u2019re all through playing mock the flawed technology, then let's do something else\u201d\uff08\u5982\u679c\u6211\u4eec\u73a9\u591f\u4e86\u5632\u7b11\u6709\u7f3a\u9677\u7684\u6280\u672f\uff0c\u90a3\u5c31\u505a\u70b9\u522b\u7684\u5427\uff09\u3002 \u5173\u952e\u77ed\u8bed\uff1a be through (doing sth.)\uff1a\u610f\u4e3a \u201c\u7ed3\u675f\u3001\u5b8c\u6210\uff08\u505a\u67d0\u4e8b\uff09\u201d\uff0c\u8868\u793a\u5bf9\u67d0\u884c\u4e3a\u7684\u538c\u5026\u6216\u4e0d\u518d\u7ee7\u7eed\u3002 mock the flawed technology\uff1a\u201cmock\u201d \u662f\u52a8\u8bcd \u201c\u5632\u7b11\u201d\uff0c\u201cflawed technology\u201d \u6307 \u201c\u6709\u7f3a\u9677\u7684\u6280\u672f\u201d\uff0c\u6574\u4e2a\u77ed\u8bed\u8868\u793a \u201c\u5632\u7b11\u6709\u7f3a\u9677\u7684\u6280\u672f\u201d \u8fd9\u4e00\u884c\u4e3a\u3002 \u53e5\u5b50\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u590d\u5408\u53e5\uff0c\u4e3b\u53e5\u662f \u201cfirst we have to decide...\u201d\uff0c\u5bbe\u8bed\u4ece\u53e5\u662f \u201cif those lost six minutes will be coming out of game time, bathroom time or the pizza break\u201d\u3002 if \u5f15\u5bfc\u5bbe\u8bed\u4ece\u53e5\uff0c\u6b64\u5904\u610f\u4e3a \u201c\u662f\u5426\u201d\uff0c\u4f46\u6839\u636e\u8bed\u5883\u66f4\u504f\u5411\u4e8e \u201c\u8be5\u4ece\u2026\u2026 \u4e2d\u6263\u9664\u201d \u7684\u9009\u62e9\uff08\u7c7b\u4f3c \u201cwhether\u201d \u7684\u7528\u6cd5\uff09\u3002 have to \u8868\u793a \u201c\u5fc5\u987b\u201d\uff0c\u5f3a\u8c03\u5ba2\u89c2\u9700\u8981\uff1bcoming out of \u662f\u77ed\u8bed\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u4ece\u2026\u2026 \u4e2d\u6263\u9664 / \u51cf\u53bb\u201d\uff0c\u8fd9\u91cc\u6307\u65f6\u95f4\u5206\u914d\u7684\u53d6\u820d\u3002 the next thing I know\uff1a\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u63a5\u4e0b\u6765\u6211\u5c31\u53d1\u73b0 / \u7a81\u7136\u201d\uff0c\u5f15\u5bfc\u65f6\u95f4\u72b6\u8bed\uff0c\u8868\u793a\u67d0\u4e8b\u53d1\u751f\u5f97\u7a81\u7136\u4e14\u51fa\u4e4e\u610f\u6599\u3002 she\u2019s invited herself out here to stay with me\uff1a\u4e3b\u53e5\uff0c\u4f7f\u7528\u73b0\u5728\u5b8c\u6210\u65f6 \u201chas invited\u201d\uff0c\u5f3a\u8c03\u52a8\u4f5c\u5bf9\u73b0\u5728\u7684\u5f71\u54cd\u3002 invite oneself\uff1a\u56fa\u5b9a\u642d\u914d\uff0c\u610f\u4e3a \u201c\u64c5\u81ea\u9080\u8bf7\u81ea\u5df1\uff0c\u4e0d\u8bf7\u81ea\u6765\u201d\uff0c\u5e26\u6709\u88ab\u52a8\u63a5\u53d7\u6216\u65e0\u5948\u7684\u8bed\u6c14\u3002 out here\uff1a\u8868\u793a \u201c\u5230\u8fd9\u91cc\u6765\u201d\uff0c\u5f3a\u8c03\u5730\u7406\u4f4d\u7f6e\u7684\u79fb\u52a8\uff1bto stay with me \u662f\u4e0d\u5b9a\u5f0f\u77ed\u8bed\u4f5c\u76ee\u7684\u72b6\u8bed\u3002 \u7b2c\u4e00\u90e8\u5206\uff1a\u201cis she doing it one thong at a time\u201d do it\uff1a\u53e3\u8bed\u4e2d\u5e38\u7528\u7684\u59d4\u5a49\u8868\u8fbe\uff0c\u6307\u4ee3\u5177\u4f53\u884c\u4e3a\uff08\u6b64\u5904\u7ed3\u5408\u8bed\u5883\u4e3a\u5e26\u6709\u6027\u6697\u793a\u7684\u52a8\u4f5c\uff09\u3002 one thong at a time\uff1a\u201cthong\u201d \u6307\u4e01\u5b57\u88e4\uff0c\u201c\u4e00\u6b21\u4e00\u4ef6\u4e01\u5b57\u88e4\u201d \u9690\u55bb\u9010\u6b65\u3001\u7f13\u6162\u7684\u52a8\u4f5c\uff0c\u53ef\u80fd\u8c03\u4f83\u67d0\u4eba\u523b\u610f\u8425\u9020\u8bf1\u60d1\u7684\u8282\u594f\u3002 \u7b2c\u4e8c\u90e8\u5206\uff1a\u201cdoes she just throw it all in, like some sort of erotic bouillabaisse\u201d throw it all in\uff1a\u5b57\u9762\u610f\u4e3a \u201c\u5168\u90e8\u6254\u8fdb\u201d\uff0c\u9690\u55bb \u201c\u4e00\u80a1\u8111\u513f\u5b8c\u6210\u201d\uff0c\u4e0e\u524d\u534a\u53e5\u7684 \u201c\u9010\u6b65\u201d \u5f62\u6210\u5bf9\u6bd4\u3002 erotic bouillabaisse\uff1a\u201cbouillabaisse\u201d \u662f\u6cd5\u5f0f\u7096\u9c7c\u7fb9\uff0c\u6b64\u5904\u5c06 \u201c erotic\uff08\u8272\u60c5\u7684\uff09\u201d \u4e0e\u98df\u7269\u7c7b\u6bd4\uff0c\u7528\u5938\u5f20\u7684\u6bd4\u55bb\u8c03\u4f83\u5bf9\u65b9\u884c\u4e3a\u7684\u6df7\u4e71\u6216 \u201c\u5927\u6742\u70e9\u201d \u5f0f\u98ce\u683c\uff0c\u5e26\u6709\u620f\u8c11\u7684\u4fae\u8fb1\u6027\u3002 \u5728\u793e\u4ea4\u5a92\u4f53\u65f6\u4ee3\uff0c\u201cdial it down\u201d \u4e0d\u4ec5\u6307\u7ebf\u4e0b\u884c\u4e3a\u7684\u6536\u655b\uff0c\u4e5f\u53ef\u6307\u4ee3\u7f51\u7edc\u4e0a\u7684 \u201c\u964d\u566a\u201d\u2014\u2014 \u505c\u6b62\u8fc7\u5ea6\u5c55\u793a\u3001\u4e89\u8bba\u6216\u60c5\u7eea\u5ba3\u6cc4\u3002\u5267\u4e2d\u89d2\u8272\u7684\u56f0\u6270\uff08\u5982\u8c22\u5c14\u987f\u5bf9 \u201c\u8282\u65e5\u88c5\u9970\u8fc7\u5ea6\u201d \u7684\u5410\u69fd\uff09\u6697\u5408\u5f53\u4ee3\u4eba\u5bf9 \u201c\u4fe1\u606f\u8fc7\u8f7d\u201d\u201c\u793e\u4ea4\u75b2\u52b3\u201d \u7684\u666e\u904d\u7126\u8651\uff0c\u4f7f\u53f0\u8bcd\u5177\u6709\u8d85\u8d8a\u5267\u60c5\u7684\u73b0\u5b9e\u5171\u9e23\u3002 who needs Halo\uff1a\u201cHalo\u201d \u662f\u77e5\u540d\u79d1\u5e7b\u9898\u6750\u7535\u5b50\u6e38\u620f\u300a\u5149\u73af\u300b\uff0c\u201cwho needs\u201d \u610f\u4e3a \u201c\u8c01\u9700\u8981\u201d\uff0c\u53cd\u95ee\u8bed\u6c14\u8868\u793a \u201c\u65e0\u9700\u3001\u6ca1\u5fc5\u8981\u201d\u3002 be regaled with\uff1a\u56fa\u5b9a\u642d\u914d\uff0c\u610f\u4e3a \u201c\u88ab\u6b3e\u5f85\u4ee5\u2026\u2026\u3001\u8046\u542c\u2026\u2026\uff08\u5c24\u6307\u6545\u4e8b\uff09\u201d\uff0c\u6b64\u5904\u7528\u88ab\u52a8\u8bed\u6001\u5f3a\u8c03 \u201c\u88ab\u8feb\u542c\u201d \u7684\u610f\u5473\u3002 the delightfully folksy tale of the whore of Omaha\uff1a\u6838\u5fc3\u662f\u5bf9 \u201c\u5965\u9a6c\u54c8\u8361\u5987\u201d \u6545\u4e8b\u7684\u620f\u8c11\u63cf\u8ff0\u3002 delightfully folksy\uff1a\u53cd\u8bbd\u7528\u6cd5\uff0c\u201c\u6c11\u4fd7\u822c\u6109\u60a6\u7684\u201d \u5b9e\u5219\u6697\u793a\u6545\u4e8b\u4f4e\u4fd7\u3001\u5e02\u4e95\uff1b whore of Omaha\uff1a\u201c\u5965\u9a6c\u54c8\uff08\u7f8e\u56fd\u57ce\u5e02\uff09\u7684\u5993\u5973\u201d\uff0c\u7528\u5730\u57df + \u8eab\u4efd\u7684\u7ec4\u5408\u5236\u9020\u8352\u8bde\u611f\uff0c\u53ef\u80fd\u6307\u4ee3\u67d0\u865a\u6784\u7684\u4f4e\u4fd7\u4f20\u95fb\u6216\u89d2\u8272\u3002 if you guys need a fourth\uff1a\u6761\u4ef6\u4ece\u53e5\uff0c\u201cif\u201d \u5f15\u5bfc\u6761\u4ef6\u72b6\u8bed\uff0c\u201cyou guys\u201d \u662f\u53e3\u8bed\u5316\u7684 \u201c\u4f60\u4eec\u201d\uff0c\u201cneed\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u201ca fourth\u201d \u6307 \u201c\u7b2c\u56db\u4e2a\uff08\u53c2\u4e0e\u8005\uff09\u201d\uff0c\u7701\u7565\u4e86 \u201cplayer\u201d \u7b49\u540d\u8bcd\uff0c\u5c5e\u4e8e\u82f1\u8bed\u4e2d\u6570\u5b57\u4f5c\u540d\u8bcd\u7684\u7b80\u6d01\u7528\u6cd5\uff08\u5982 \u201ca third\u201d \u8868\u793a \u201c\u7b2c\u4e09\u4eba\u201d\uff09\u3002 I\u2019ll play\uff1a\u4e3b\u53e5\uff0c\u201cI will play\u201d \u7684\u7f29\u5199\uff0c\u201cplay\u201d \u5728\u6b64\u5904\u6839\u636e\u8bed\u5883\u53ef\u7406\u89e3\u4e3a \u201c\u53c2\u4e0e\uff08\u6e38\u620f\u3001\u6d3b\u52a8\u7b49\uff09\u201d\u3002 This is a complex battle simulation with a steep learning curve, there are myriad weapons, vehicles and strategies to master, not to mention an extremely intricate back-story \u4e3b\u53e5\uff1aThis is a complex battle simulation with a steep learning curve with a steep learning curve\uff1a\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u201clearning curve\u201d \u6307 \u201c\u5b66\u4e60\u66f2\u7ebf\u201d\uff0c\u201csteep\u201d \u5f62\u5bb9\u96be\u5ea6\u5927\uff0c\u6574\u4f53\u610f\u4e3a \u201c\u9700\u8981\u5927\u91cf\u65f6\u95f4\u7cbe\u529b\u638c\u63e1\u7684\u201d\u3002 \u5206\u53e5 1\uff1athere are myriad weapons, vehicles and strategies to master myriad\uff1a\u5f62\u5bb9\u8bcd \u201c\u65e0\u6570\u7684\u201d\uff0c\u5f3a\u8c03\u6570\u91cf\u5e9e\u5927\uff1bto master\uff1a\u4e0d\u5b9a\u5f0f\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u9690\u542b \u201c\u9700\u9010\u4e00\u7cbe\u901a\u201d \u7684\u6311\u6218\u6027\u3002 \u5206\u53e5 2\uff1anot to mention an extremely intricate back-story not to mention\uff1a\u56fa\u5b9a\u77ed\u8bed \u201c\u66f4\u4e0d\u7528\u8bf4\u201d\uff0c\u5f15\u51fa\u9012\u8fdb\u5185\u5bb9\uff1bintricate back-story\uff1a\u201c\u590d\u6742\u7684\u80cc\u666f\u6545\u4e8b\u201d\uff0c\u201cintricate\u201d \u5f3a\u8c03\u60c5\u8282\u76d8\u6839\u9519\u8282\u3002 whoever\u2019s her partner\uff1a\u4e3b\u8bed\u4ece\u53e5\uff0c\u201cwhoever\u201d \u5f15\u5bfc\u4e3b\u8bed\uff0c\u610f\u4e3a \u201c\u65e0\u8bba\u8c01\u201d\uff0c\u5f3a\u8c03\u4e0d\u786e\u5b9a\u6027\uff1b\u201cher partner\u201d \u4e3a\u4e3b\u8bed\u4ece\u53e5\u7684\u8868\u8bed\uff0c\u6784\u6210 \u201c\u8c01\u662f\u5979\u7684\u642d\u6863\u201d \u7684\u6cdb\u6307\u3002 will be hamstrung by her lack of experience\uff1a\u4e3b\u53e5\uff0c\u88ab\u52a8\u8bed\u6001\uff0c\u201chamstrung\u201d \u662f\u8fc7\u53bb\u5206\u8bcd\uff08\u539f\u5f62\u4e3a \u201chamstring\u201d\uff0c\u539f\u6307 \u201c\u5272\u65ad\u808c\u8171\u4f7f\u65e0\u6cd5\u884c\u52a8\u201d\uff0c\u5f15\u7533\u4e3a \u201c\u963b\u788d\u3001\u675f\u7f1a\u201d\uff09\uff1b\u201cby her lack of experience\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u8bf4\u660e\u963b\u788d\u7684\u539f\u56e0\u3002 \u200crespawned\u200c\u662f\u4e00\u4e2a\u52a8\u8bcd\uff0c\u4e3b\u8981\u5728\u7535\u5b50\u6e38\u620f\u4e2d\u4f7f\u7528\uff0c\u8868\u793a\u89d2\u8272\u6216\u7269\u4f53\u5728\u6d88\u5931\u540e\u518d\u6b21\u51fa\u73b0\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u6e38\u620f\u4e2d\u7684\u89d2\u8272\u88ab\u6740\u6b7b\u540e\uff0c\u5b83\u4f1a\u518d\u6b21\u51fa\u73b0\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u79f0\u4e3arespawn\u3002\u4f8b\u5982\uff1a\u201cOn level five of the game, enemies respawn very quickly.\u201d\uff08\u5728\u6e38\u620f\u7684\u7b2c\u4e94\u5173\uff0c\u654c\u4eba\u5f88\u5feb\u5c31\u4f1a\u518d\u6b21\u51fa\u73b0\uff09\u200c \u6b64\u5916\uff0crespawn\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u540d\u8bcd\u4f7f\u7528\uff0c\u8868\u793a\u91cd\u65b0\u51fa\u73b0\u7684\u4e8b\u7269\u6216\u73b0\u8c61\u3002\u4f8b\u5982\uff1a\u201cWhen you respawn, you'll fight again with the same enemies.\u201d\uff08\u5f53\u4f60\u91cd\u65b0\u51fa\u73b0\u65f6\uff0c\u4f60\u4f1a\u518d\u6b21\u4e0e\u76f8\u540c\u7684\u654c\u4eba\u6218\u6597\uff09\u200c kind of a sore loser\uff1a\u53e3\u8bed\u5316\u8868\u8fbe\uff0c\u201ckind of\u201d \u610f\u4e3a \u201c\u6709\u70b9\u3001\u7a0d\u5fae\u201d\uff0c\u5f31\u5316\u8bed\u6c14\uff1b\u201csore loser\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u6307 \u201c\u8f93\u4e0d\u8d77\u7684\u4eba\u201d\uff08\u8f93\u4e86\u540e\u5bb9\u6613\u751f\u6c14\u3001\u62b1\u6028\u7684\u4eba\uff09\u3002 isn\u2019t he?\uff1a\u53cd\u4e49\u7591\u95ee\u90e8\u5206\uff0c\u9075\u5faa \u201c\u524d\u80af\u540e\u5426\u201d \u89c4\u5219\uff0c\u7528\u4e8e\u5f81\u6c42\u5bf9\u65b9\u8ba4\u540c\uff0c\u5e26\u6709\u8c03\u4f83\u6216\u65e0\u5948\u7684\u610f\u5473\u3002 \u4e3b\u53e5\uff1aIt\u2019s culturally universal...headboard away from the door It\uff1a\u6307\u4ee3 \u201c\u5e8a\u7684\u6446\u653e\u65b9\u5f0f\u201d \u8fd9\u4e00\u73b0\u8c61\uff1b oriented with the headboard away from the door\uff1a\u88ab\u52a8\u8bed\u6001\uff0c\u201c\u5e8a\u5934\u8fdc\u79bb\u95e8\u201d \u7684\u65b9\u4f4d\u8bbe\u5b9a\uff0c\u5f3a\u8c03\u8be5\u884c\u4e3a\u7684\u666e\u904d\u6027\u3002 \u89e3\u91ca\u53e5\uff1aIt serves the ancient imperative of protecting oneself against marauders serves\uff1a\u610f\u4e3a \u201c\u7b26\u5408\u3001\u6ee1\u8db3\u201d\uff1b ancient imperative\uff1a\u201c\u53e4\u8001\u7684\u751f\u5b58\u9700\u6c42\u201d\uff0c\u201cimperative\u201d \u5f3a\u8c03\u5fc5\u8981\u6027\uff1b marauders\uff1a\u6307 \u201c\u63a0\u593a\u8005\u3001\u5165\u4fb5\u8005\u201d\uff0c\u547c\u5e94\u539f\u59cb\u793e\u4f1a\u7684\u5b89\u5168\u5a01\u80c1\u3002","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e07/s01e07/#_1","text":"","title":"\u751f\u8bcd"},{"location":"art/English/tv/bigbang/s01/e07/s01e07/#_2","text":"If we\u2019re all through playing mock the flawed technology \u53e5\u5b50\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u6761\u4ef6\u72b6\u8bed\u4ece\u53e5\uff0c\u4e3b\u53e5\u90e8\u5206\u88ab\u7701\u7565\uff0c\u5b8c\u6574\u7684\u8868\u8fbe\u53ef\u80fd\u662f\u4e00\u4e2a\u9690\u542b\u7684\u5efa\u8bae\u6216\u547d\u4ee4\uff0c\u5982 \u201cIf we\u2019re all through playing mock the flawed technology, then let's do something else\u201d\uff08\u5982\u679c\u6211\u4eec\u73a9\u591f\u4e86\u5632\u7b11\u6709\u7f3a\u9677\u7684\u6280\u672f\uff0c\u90a3\u5c31\u505a\u70b9\u522b\u7684\u5427\uff09\u3002 \u5173\u952e\u77ed\u8bed\uff1a be through (doing sth.)\uff1a\u610f\u4e3a \u201c\u7ed3\u675f\u3001\u5b8c\u6210\uff08\u505a\u67d0\u4e8b\uff09\u201d\uff0c\u8868\u793a\u5bf9\u67d0\u884c\u4e3a\u7684\u538c\u5026\u6216\u4e0d\u518d\u7ee7\u7eed\u3002 mock the flawed technology\uff1a\u201cmock\u201d \u662f\u52a8\u8bcd \u201c\u5632\u7b11\u201d\uff0c\u201cflawed technology\u201d \u6307 \u201c\u6709\u7f3a\u9677\u7684\u6280\u672f\u201d\uff0c\u6574\u4e2a\u77ed\u8bed\u8868\u793a \u201c\u5632\u7b11\u6709\u7f3a\u9677\u7684\u6280\u672f\u201d \u8fd9\u4e00\u884c\u4e3a\u3002 \u53e5\u5b50\u7ed3\u6784\uff1a\u8fd9\u662f\u4e00\u4e2a\u590d\u5408\u53e5\uff0c\u4e3b\u53e5\u662f \u201cfirst we have to decide...\u201d\uff0c\u5bbe\u8bed\u4ece\u53e5\u662f \u201cif those lost six minutes will be coming out of game time, bathroom time or the pizza break\u201d\u3002 if \u5f15\u5bfc\u5bbe\u8bed\u4ece\u53e5\uff0c\u6b64\u5904\u610f\u4e3a \u201c\u662f\u5426\u201d\uff0c\u4f46\u6839\u636e\u8bed\u5883\u66f4\u504f\u5411\u4e8e \u201c\u8be5\u4ece\u2026\u2026 \u4e2d\u6263\u9664\u201d \u7684\u9009\u62e9\uff08\u7c7b\u4f3c \u201cwhether\u201d \u7684\u7528\u6cd5\uff09\u3002 have to \u8868\u793a \u201c\u5fc5\u987b\u201d\uff0c\u5f3a\u8c03\u5ba2\u89c2\u9700\u8981\uff1bcoming out of \u662f\u77ed\u8bed\u52a8\u8bcd\uff0c\u610f\u4e3a \u201c\u4ece\u2026\u2026 \u4e2d\u6263\u9664 / \u51cf\u53bb\u201d\uff0c\u8fd9\u91cc\u6307\u65f6\u95f4\u5206\u914d\u7684\u53d6\u820d\u3002 the next thing I know\uff1a\u56fa\u5b9a\u77ed\u8bed\uff0c\u610f\u4e3a \u201c\u63a5\u4e0b\u6765\u6211\u5c31\u53d1\u73b0 / \u7a81\u7136\u201d\uff0c\u5f15\u5bfc\u65f6\u95f4\u72b6\u8bed\uff0c\u8868\u793a\u67d0\u4e8b\u53d1\u751f\u5f97\u7a81\u7136\u4e14\u51fa\u4e4e\u610f\u6599\u3002 she\u2019s invited herself out here to stay with me\uff1a\u4e3b\u53e5\uff0c\u4f7f\u7528\u73b0\u5728\u5b8c\u6210\u65f6 \u201chas invited\u201d\uff0c\u5f3a\u8c03\u52a8\u4f5c\u5bf9\u73b0\u5728\u7684\u5f71\u54cd\u3002 invite oneself\uff1a\u56fa\u5b9a\u642d\u914d\uff0c\u610f\u4e3a \u201c\u64c5\u81ea\u9080\u8bf7\u81ea\u5df1\uff0c\u4e0d\u8bf7\u81ea\u6765\u201d\uff0c\u5e26\u6709\u88ab\u52a8\u63a5\u53d7\u6216\u65e0\u5948\u7684\u8bed\u6c14\u3002 out here\uff1a\u8868\u793a \u201c\u5230\u8fd9\u91cc\u6765\u201d\uff0c\u5f3a\u8c03\u5730\u7406\u4f4d\u7f6e\u7684\u79fb\u52a8\uff1bto stay with me \u662f\u4e0d\u5b9a\u5f0f\u77ed\u8bed\u4f5c\u76ee\u7684\u72b6\u8bed\u3002 \u7b2c\u4e00\u90e8\u5206\uff1a\u201cis she doing it one thong at a time\u201d do it\uff1a\u53e3\u8bed\u4e2d\u5e38\u7528\u7684\u59d4\u5a49\u8868\u8fbe\uff0c\u6307\u4ee3\u5177\u4f53\u884c\u4e3a\uff08\u6b64\u5904\u7ed3\u5408\u8bed\u5883\u4e3a\u5e26\u6709\u6027\u6697\u793a\u7684\u52a8\u4f5c\uff09\u3002 one thong at a time\uff1a\u201cthong\u201d \u6307\u4e01\u5b57\u88e4\uff0c\u201c\u4e00\u6b21\u4e00\u4ef6\u4e01\u5b57\u88e4\u201d \u9690\u55bb\u9010\u6b65\u3001\u7f13\u6162\u7684\u52a8\u4f5c\uff0c\u53ef\u80fd\u8c03\u4f83\u67d0\u4eba\u523b\u610f\u8425\u9020\u8bf1\u60d1\u7684\u8282\u594f\u3002 \u7b2c\u4e8c\u90e8\u5206\uff1a\u201cdoes she just throw it all in, like some sort of erotic bouillabaisse\u201d throw it all in\uff1a\u5b57\u9762\u610f\u4e3a \u201c\u5168\u90e8\u6254\u8fdb\u201d\uff0c\u9690\u55bb \u201c\u4e00\u80a1\u8111\u513f\u5b8c\u6210\u201d\uff0c\u4e0e\u524d\u534a\u53e5\u7684 \u201c\u9010\u6b65\u201d \u5f62\u6210\u5bf9\u6bd4\u3002 erotic bouillabaisse\uff1a\u201cbouillabaisse\u201d \u662f\u6cd5\u5f0f\u7096\u9c7c\u7fb9\uff0c\u6b64\u5904\u5c06 \u201c erotic\uff08\u8272\u60c5\u7684\uff09\u201d \u4e0e\u98df\u7269\u7c7b\u6bd4\uff0c\u7528\u5938\u5f20\u7684\u6bd4\u55bb\u8c03\u4f83\u5bf9\u65b9\u884c\u4e3a\u7684\u6df7\u4e71\u6216 \u201c\u5927\u6742\u70e9\u201d \u5f0f\u98ce\u683c\uff0c\u5e26\u6709\u620f\u8c11\u7684\u4fae\u8fb1\u6027\u3002 \u5728\u793e\u4ea4\u5a92\u4f53\u65f6\u4ee3\uff0c\u201cdial it down\u201d \u4e0d\u4ec5\u6307\u7ebf\u4e0b\u884c\u4e3a\u7684\u6536\u655b\uff0c\u4e5f\u53ef\u6307\u4ee3\u7f51\u7edc\u4e0a\u7684 \u201c\u964d\u566a\u201d\u2014\u2014 \u505c\u6b62\u8fc7\u5ea6\u5c55\u793a\u3001\u4e89\u8bba\u6216\u60c5\u7eea\u5ba3\u6cc4\u3002\u5267\u4e2d\u89d2\u8272\u7684\u56f0\u6270\uff08\u5982\u8c22\u5c14\u987f\u5bf9 \u201c\u8282\u65e5\u88c5\u9970\u8fc7\u5ea6\u201d \u7684\u5410\u69fd\uff09\u6697\u5408\u5f53\u4ee3\u4eba\u5bf9 \u201c\u4fe1\u606f\u8fc7\u8f7d\u201d\u201c\u793e\u4ea4\u75b2\u52b3\u201d \u7684\u666e\u904d\u7126\u8651\uff0c\u4f7f\u53f0\u8bcd\u5177\u6709\u8d85\u8d8a\u5267\u60c5\u7684\u73b0\u5b9e\u5171\u9e23\u3002 who needs Halo\uff1a\u201cHalo\u201d \u662f\u77e5\u540d\u79d1\u5e7b\u9898\u6750\u7535\u5b50\u6e38\u620f\u300a\u5149\u73af\u300b\uff0c\u201cwho needs\u201d \u610f\u4e3a \u201c\u8c01\u9700\u8981\u201d\uff0c\u53cd\u95ee\u8bed\u6c14\u8868\u793a \u201c\u65e0\u9700\u3001\u6ca1\u5fc5\u8981\u201d\u3002 be regaled with\uff1a\u56fa\u5b9a\u642d\u914d\uff0c\u610f\u4e3a \u201c\u88ab\u6b3e\u5f85\u4ee5\u2026\u2026\u3001\u8046\u542c\u2026\u2026\uff08\u5c24\u6307\u6545\u4e8b\uff09\u201d\uff0c\u6b64\u5904\u7528\u88ab\u52a8\u8bed\u6001\u5f3a\u8c03 \u201c\u88ab\u8feb\u542c\u201d \u7684\u610f\u5473\u3002 the delightfully folksy tale of the whore of Omaha\uff1a\u6838\u5fc3\u662f\u5bf9 \u201c\u5965\u9a6c\u54c8\u8361\u5987\u201d \u6545\u4e8b\u7684\u620f\u8c11\u63cf\u8ff0\u3002 delightfully folksy\uff1a\u53cd\u8bbd\u7528\u6cd5\uff0c\u201c\u6c11\u4fd7\u822c\u6109\u60a6\u7684\u201d \u5b9e\u5219\u6697\u793a\u6545\u4e8b\u4f4e\u4fd7\u3001\u5e02\u4e95\uff1b whore of Omaha\uff1a\u201c\u5965\u9a6c\u54c8\uff08\u7f8e\u56fd\u57ce\u5e02\uff09\u7684\u5993\u5973\u201d\uff0c\u7528\u5730\u57df + \u8eab\u4efd\u7684\u7ec4\u5408\u5236\u9020\u8352\u8bde\u611f\uff0c\u53ef\u80fd\u6307\u4ee3\u67d0\u865a\u6784\u7684\u4f4e\u4fd7\u4f20\u95fb\u6216\u89d2\u8272\u3002 if you guys need a fourth\uff1a\u6761\u4ef6\u4ece\u53e5\uff0c\u201cif\u201d \u5f15\u5bfc\u6761\u4ef6\u72b6\u8bed\uff0c\u201cyou guys\u201d \u662f\u53e3\u8bed\u5316\u7684 \u201c\u4f60\u4eec\u201d\uff0c\u201cneed\u201d \u662f\u8c13\u8bed\u52a8\u8bcd\uff0c\u201ca fourth\u201d \u6307 \u201c\u7b2c\u56db\u4e2a\uff08\u53c2\u4e0e\u8005\uff09\u201d\uff0c\u7701\u7565\u4e86 \u201cplayer\u201d \u7b49\u540d\u8bcd\uff0c\u5c5e\u4e8e\u82f1\u8bed\u4e2d\u6570\u5b57\u4f5c\u540d\u8bcd\u7684\u7b80\u6d01\u7528\u6cd5\uff08\u5982 \u201ca third\u201d \u8868\u793a \u201c\u7b2c\u4e09\u4eba\u201d\uff09\u3002 I\u2019ll play\uff1a\u4e3b\u53e5\uff0c\u201cI will play\u201d \u7684\u7f29\u5199\uff0c\u201cplay\u201d \u5728\u6b64\u5904\u6839\u636e\u8bed\u5883\u53ef\u7406\u89e3\u4e3a \u201c\u53c2\u4e0e\uff08\u6e38\u620f\u3001\u6d3b\u52a8\u7b49\uff09\u201d\u3002 This is a complex battle simulation with a steep learning curve, there are myriad weapons, vehicles and strategies to master, not to mention an extremely intricate back-story \u4e3b\u53e5\uff1aThis is a complex battle simulation with a steep learning curve with a steep learning curve\uff1a\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u201clearning curve\u201d \u6307 \u201c\u5b66\u4e60\u66f2\u7ebf\u201d\uff0c\u201csteep\u201d \u5f62\u5bb9\u96be\u5ea6\u5927\uff0c\u6574\u4f53\u610f\u4e3a \u201c\u9700\u8981\u5927\u91cf\u65f6\u95f4\u7cbe\u529b\u638c\u63e1\u7684\u201d\u3002 \u5206\u53e5 1\uff1athere are myriad weapons, vehicles and strategies to master myriad\uff1a\u5f62\u5bb9\u8bcd \u201c\u65e0\u6570\u7684\u201d\uff0c\u5f3a\u8c03\u6570\u91cf\u5e9e\u5927\uff1bto master\uff1a\u4e0d\u5b9a\u5f0f\u4f5c\u540e\u7f6e\u5b9a\u8bed\uff0c\u9690\u542b \u201c\u9700\u9010\u4e00\u7cbe\u901a\u201d \u7684\u6311\u6218\u6027\u3002 \u5206\u53e5 2\uff1anot to mention an extremely intricate back-story not to mention\uff1a\u56fa\u5b9a\u77ed\u8bed \u201c\u66f4\u4e0d\u7528\u8bf4\u201d\uff0c\u5f15\u51fa\u9012\u8fdb\u5185\u5bb9\uff1bintricate back-story\uff1a\u201c\u590d\u6742\u7684\u80cc\u666f\u6545\u4e8b\u201d\uff0c\u201cintricate\u201d \u5f3a\u8c03\u60c5\u8282\u76d8\u6839\u9519\u8282\u3002 whoever\u2019s her partner\uff1a\u4e3b\u8bed\u4ece\u53e5\uff0c\u201cwhoever\u201d \u5f15\u5bfc\u4e3b\u8bed\uff0c\u610f\u4e3a \u201c\u65e0\u8bba\u8c01\u201d\uff0c\u5f3a\u8c03\u4e0d\u786e\u5b9a\u6027\uff1b\u201cher partner\u201d \u4e3a\u4e3b\u8bed\u4ece\u53e5\u7684\u8868\u8bed\uff0c\u6784\u6210 \u201c\u8c01\u662f\u5979\u7684\u642d\u6863\u201d \u7684\u6cdb\u6307\u3002 will be hamstrung by her lack of experience\uff1a\u4e3b\u53e5\uff0c\u88ab\u52a8\u8bed\u6001\uff0c\u201chamstrung\u201d \u662f\u8fc7\u53bb\u5206\u8bcd\uff08\u539f\u5f62\u4e3a \u201chamstring\u201d\uff0c\u539f\u6307 \u201c\u5272\u65ad\u808c\u8171\u4f7f\u65e0\u6cd5\u884c\u52a8\u201d\uff0c\u5f15\u7533\u4e3a \u201c\u963b\u788d\u3001\u675f\u7f1a\u201d\uff09\uff1b\u201cby her lack of experience\u201d \u662f\u4ecb\u8bcd\u77ed\u8bed\u4f5c\u72b6\u8bed\uff0c\u8bf4\u660e\u963b\u788d\u7684\u539f\u56e0\u3002 \u200crespawned\u200c\u662f\u4e00\u4e2a\u52a8\u8bcd\uff0c\u4e3b\u8981\u5728\u7535\u5b50\u6e38\u620f\u4e2d\u4f7f\u7528\uff0c\u8868\u793a\u89d2\u8272\u6216\u7269\u4f53\u5728\u6d88\u5931\u540e\u518d\u6b21\u51fa\u73b0\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u6e38\u620f\u4e2d\u7684\u89d2\u8272\u88ab\u6740\u6b7b\u540e\uff0c\u5b83\u4f1a\u518d\u6b21\u51fa\u73b0\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u79f0\u4e3arespawn\u3002\u4f8b\u5982\uff1a\u201cOn level five of the game, enemies respawn very quickly.\u201d\uff08\u5728\u6e38\u620f\u7684\u7b2c\u4e94\u5173\uff0c\u654c\u4eba\u5f88\u5feb\u5c31\u4f1a\u518d\u6b21\u51fa\u73b0\uff09\u200c \u6b64\u5916\uff0crespawn\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u540d\u8bcd\u4f7f\u7528\uff0c\u8868\u793a\u91cd\u65b0\u51fa\u73b0\u7684\u4e8b\u7269\u6216\u73b0\u8c61\u3002\u4f8b\u5982\uff1a\u201cWhen you respawn, you'll fight again with the same enemies.\u201d\uff08\u5f53\u4f60\u91cd\u65b0\u51fa\u73b0\u65f6\uff0c\u4f60\u4f1a\u518d\u6b21\u4e0e\u76f8\u540c\u7684\u654c\u4eba\u6218\u6597\uff09\u200c kind of a sore loser\uff1a\u53e3\u8bed\u5316\u8868\u8fbe\uff0c\u201ckind of\u201d \u610f\u4e3a \u201c\u6709\u70b9\u3001\u7a0d\u5fae\u201d\uff0c\u5f31\u5316\u8bed\u6c14\uff1b\u201csore loser\u201d \u662f\u56fa\u5b9a\u77ed\u8bed\uff0c\u6307 \u201c\u8f93\u4e0d\u8d77\u7684\u4eba\u201d\uff08\u8f93\u4e86\u540e\u5bb9\u6613\u751f\u6c14\u3001\u62b1\u6028\u7684\u4eba\uff09\u3002 isn\u2019t he?\uff1a\u53cd\u4e49\u7591\u95ee\u90e8\u5206\uff0c\u9075\u5faa \u201c\u524d\u80af\u540e\u5426\u201d \u89c4\u5219\uff0c\u7528\u4e8e\u5f81\u6c42\u5bf9\u65b9\u8ba4\u540c\uff0c\u5e26\u6709\u8c03\u4f83\u6216\u65e0\u5948\u7684\u610f\u5473\u3002 \u4e3b\u53e5\uff1aIt\u2019s culturally universal...headboard away from the door It\uff1a\u6307\u4ee3 \u201c\u5e8a\u7684\u6446\u653e\u65b9\u5f0f\u201d \u8fd9\u4e00\u73b0\u8c61\uff1b oriented with the headboard away from the door\uff1a\u88ab\u52a8\u8bed\u6001\uff0c\u201c\u5e8a\u5934\u8fdc\u79bb\u95e8\u201d \u7684\u65b9\u4f4d\u8bbe\u5b9a\uff0c\u5f3a\u8c03\u8be5\u884c\u4e3a\u7684\u666e\u904d\u6027\u3002 \u89e3\u91ca\u53e5\uff1aIt serves the ancient imperative of protecting oneself against marauders serves\uff1a\u610f\u4e3a \u201c\u7b26\u5408\u3001\u6ee1\u8db3\u201d\uff1b ancient imperative\uff1a\u201c\u53e4\u8001\u7684\u751f\u5b58\u9700\u6c42\u201d\uff0c\u201cimperative\u201d \u5f3a\u8c03\u5fc5\u8981\u6027\uff1b marauders\uff1a\u6307 \u201c\u63a0\u593a\u8005\u3001\u5165\u4fb5\u8005\u201d\uff0c\u547c\u5e94\u539f\u59cb\u793e\u4f1a\u7684\u5b89\u5168\u5a01\u80c1\u3002","title":"\u53e5\u5b50"},{"location":"art/English/vocacom/vocacom/","text":"\u8fd9\u662f\u6e05\u534e\u6559\u6388\u4ea4\u7ed9\u6211\u7684\u4e00\u4e2a\u7f51\u7ad9\uff0c\u62ff\u6765\u6c89\u6d78\u5f0f\u80cc\u5355\u8bcd\uff0c\u6211\u672c\u4ee5\u4e3a\u81ea\u5df1\u7684\u82f1\u8bed\u5df2\u7ecf\u633a\u597d\u7684\uff0c\u7ed3\u679c\u53d1\u73b0\u90a3\u4e9b\u9898\u8fde\u9898\u76ee\u90fd\u770b\u4e0d\u61c2 2025\u5e743\u6708","title":"Vocacom"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/","text":"\u968f\u540e\uff0c\u91cc\u5361\u591a\u00b7\u5bcc\u52d2\u9519\u5931\u4e86\u4e00\u6b21\u7edd\u4f73\u7684\u7834\u95e8\u826f\u673a\u2014\u2014\u4ed6\u5728\u516d\u7801\u5904\u65e0\u4eba\u76ef\u9632\u7684\u60c5\u51b5\u4e0b\u63a5\u5230\u4e00\u8bb0\u4f20\u7403\uff0c\u5374\u4ed3\u4fc3\u8d77\u811a\uff0c\u5c06\u7403\u6253\u98de\u8d8a\u8fc7\u6a2a\u6881\u3002 \uff08\u7ffb\u8bd1\u8bf4\u660e\uff1a 1. \"mis-hit shot\" \u8bd1\u4e3a\u201c\u4e00\u8bb0\u4f20\u7403\u201d\uff0c\u7ed3\u5408\u4e0a\u4e0b\u6587\u7406\u89e3\u4e3a\u961f\u53cb\u7684\u4f20\u7403\u4e0d\u591f\u7cbe\u51c6\u4f46\u610f\u5916\u843d\u5230\u5bcc\u52d2\u811a\u4e0b\u3002 2. \"unmarked\" \u8bd1\u4e3a\u201c\u65e0\u4eba\u76ef\u9632\u201d\uff0c\u7b26\u5408\u8db3\u7403\u672f\u8bed\u3002 3. \"waft a hasty attempt\" \u610f\u8bd1\u4e3a\u201c\u4ed3\u4fc3\u8d77\u811a\u201d\uff0c\u4fdd\u7559\u52a8\u4f5c\u7684\u5306\u5fd9\u611f\u3002 4. \"over the bar\" \u8bd1\u4e3a\u201c\u8d8a\u8fc7\u6a2a\u6881\u201d\uff0c\u662f\u8db3\u7403\u6bd4\u8d5b\u4e2d\u5c04\u95e8\u504f\u51fa\u7684\u6807\u51c6\u8868\u8fbe\u3002\uff09 The correct answer is: materialize Full Sentence: \"The store arrived at the tail end of the housing boom, and anticipated demand failed to materialize as housing prices plummeted and the recession gripped the region.\" Translation (Chinese): \u8fd9\u5bb6\u5546\u5e97\u5f00\u4e1a\u65f6\u6b63\u503c\u623f\u5730\u4ea7\u7e41\u8363\u7684\u5c3e\u58f0\uff0c\u4f46\u968f\u7740\u623f\u4ef7\u66b4\u8dcc\u548c\u7ecf\u6d4e\u8870\u9000\u5e2d\u5377\u8be5\u5730\u533a\uff0c\u9884\u671f\u7684\u9700\u6c42 \u5e76\u672a\u5b9e\u73b0 \u3002 Explanation: Materialize (\u5b9e\u73b0\uff0c\u6210\u4e3a\u73b0\u5b9e) means to happen or develop as expected. In this context, the store expected high demand, but due to the recession, that demand did not materialize (\u6ca1\u6709\u5b9e\u73b0). Other options: Ameliorate (\u6539\u5584) \u2013 Doesn\u2019t fit; demand doesn\u2019t \"improve.\" Dabble (\u6d89\u730e) \u2013 Irrelevant here. Proliferate (\u6fc0\u589e) \u2013 The opposite of what happened (demand decreased, not increased). Thus, \"materialize\" is the best choice. The correct answer is: fastidious Explanation: Meticulous (\u4e00\u4e1d\u4e0d\u82df\u7684\uff0c\u4e25\u8c28\u7684) means showing great attention to detail and being very careful and precise. Fastidious (\u6311\u5254\u7684\uff0c\u82db\u6c42\u7684) also means being very attentive to accuracy and detail, making it the closest synonym. Why Not the Others? Perfidious (\u80cc\u4fe1\u5f03\u4e49\u7684) \u2013 Means deceitful or treacherous (completely different meaning). Indigent (\u8d2b\u56f0\u7684) \u2013 Means poor or needy (no relation to attention to detail). Delectable (\u7f8e\u5473\u7684) \u2013 Means delicious (unrelated to carefulness). Example Usage: \"She was meticulous in her research, checking every source twice.\" \"He was fastidious about keeping his workspace perfectly organized.\" Thus, fastidious is the best synonym for meticulous . \"A2A\" \u662f \"Asked to Answer\" \u7684\u7f29\u5199\uff0c\u5e38\u89c1\u4e8e\u8bba\u575b\uff08\u5982Quora\uff09\u4e2d\uff0c\u8868\u793a\u56de\u7b54\u8005\u662f\u88ab\u9080\u8bf7\uff08\u6216\u70b9\u540d\uff09\u6765\u56de\u7b54\u8be5\u95ee\u9898\u7684\u3002","title":"Note"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/#full-sentence","text":"\"The store arrived at the tail end of the housing boom, and anticipated demand failed to materialize as housing prices plummeted and the recession gripped the region.\"","title":"Full Sentence:"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/#translation-chinese","text":"\u8fd9\u5bb6\u5546\u5e97\u5f00\u4e1a\u65f6\u6b63\u503c\u623f\u5730\u4ea7\u7e41\u8363\u7684\u5c3e\u58f0\uff0c\u4f46\u968f\u7740\u623f\u4ef7\u66b4\u8dcc\u548c\u7ecf\u6d4e\u8870\u9000\u5e2d\u5377\u8be5\u5730\u533a\uff0c\u9884\u671f\u7684\u9700\u6c42 \u5e76\u672a\u5b9e\u73b0 \u3002","title":"Translation (Chinese):"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/#explanation","text":"Materialize (\u5b9e\u73b0\uff0c\u6210\u4e3a\u73b0\u5b9e) means to happen or develop as expected. In this context, the store expected high demand, but due to the recession, that demand did not materialize (\u6ca1\u6709\u5b9e\u73b0). Other options: Ameliorate (\u6539\u5584) \u2013 Doesn\u2019t fit; demand doesn\u2019t \"improve.\" Dabble (\u6d89\u730e) \u2013 Irrelevant here. Proliferate (\u6fc0\u589e) \u2013 The opposite of what happened (demand decreased, not increased). Thus, \"materialize\" is the best choice. The correct answer is: fastidious","title":"Explanation:"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/#explanation_1","text":"Meticulous (\u4e00\u4e1d\u4e0d\u82df\u7684\uff0c\u4e25\u8c28\u7684) means showing great attention to detail and being very careful and precise. Fastidious (\u6311\u5254\u7684\uff0c\u82db\u6c42\u7684) also means being very attentive to accuracy and detail, making it the closest synonym.","title":"Explanation:"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/#why-not-the-others","text":"Perfidious (\u80cc\u4fe1\u5f03\u4e49\u7684) \u2013 Means deceitful or treacherous (completely different meaning). Indigent (\u8d2b\u56f0\u7684) \u2013 Means poor or needy (no relation to attention to detail). Delectable (\u7f8e\u5473\u7684) \u2013 Means delicious (unrelated to carefulness).","title":"Why Not the Others?"},{"location":"art/English/vocacom/practice/2025%E5%B9%B43%E6%9C%88/note/#example-usage","text":"\"She was meticulous in her research, checking every source twice.\" \"He was fastidious about keeping his workspace perfectly organized.\" Thus, fastidious is the best synonym for meticulous . \"A2A\" \u662f \"Asked to Answer\" \u7684\u7f29\u5199\uff0c\u5e38\u89c1\u4e8e\u8bba\u575b\uff08\u5982Quora\uff09\u4e2d\uff0c\u8868\u793a\u56de\u7b54\u8005\u662f\u88ab\u9080\u8bf7\uff08\u6216\u70b9\u540d\uff09\u6765\u56de\u7b54\u8be5\u95ee\u9898\u7684\u3002","title":"Example Usage:"},{"location":"art/English/vocacom/practice/2025%E5%B9%B44%E6%9C%88/note/","text":"","title":"Note"},{"location":"art/English/vocacom/practice/2025%E5%B9%B45%E6%9C%88/note/","text":"","title":"Note"},{"location":"books/book/","text":"","title":"Book"},{"location":"books/cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lan/","text":"\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\u5927\u6982\u5c31\u90a3\u4e48\u51e0\u79cd scratch Scratch programming for teens coding for kids learn to code with scratch","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"books/cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/lan/#scratch","text":"Scratch programming for teens coding for kids learn to code with scratch","title":"scratch"},{"location":"books/navy/zashu/","text":"\u8fd9\u91cc\u5b58\u653e\u4e00\u4e9b\u6742\u4e66\u4f9b\u6d88\u9063 \u6d77\u519b \u6d77\u519b\u708a\u4e8b\u5175\u7269\u8bed","title":"\u6742\u4e66"},{"location":"books/navy/zashu/#_1","text":"\u6d77\u519b\u708a\u4e8b\u5175\u7269\u8bed","title":"\u6d77\u519b"},{"location":"books/navy/%E6%B5%B7%E5%86%9B%E7%82%8A%E4%BA%8B%E5%85%B5%E7%89%A9%E8%AF%AD/","text":"\u8fd9\u662f\u4e00\u672c\u5173\u4e8e\u65e5\u672c\u6d77\u519b\u7684\u4e66 \u539f\u4e66","title":"\u6d77\u519b\u708a\u4e8b\u5175\u7269\u8bed"},{"location":"books/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/gr/","text":"\u81ea\u5f8b\u7c7b \u81ea\u5f8b\u4fee\u70bc\u624b\u518c \u54f2\u5b66 \u6c89\u601d\u5f55 \u7f57\u9a6c\u5e1d\u56fd\u7687\u5e1d\u9a6c\u53ef\u00b7\u5965\u52d2\u7559\u7684\u4e2a\u4eba\u53cd\u601d\u5f55\uff0c\u96c6\u4e2d\u4f53\u73b0\u4e86\u65af\u591a\u4e9a\u5b66\u6d3e\u7684\u54f2\u5b66\u601d\u60f3\u3002\u4e66\u4e2d\u7684\u8bb8\u591a\u6bb5\u843d\u63a2\u8ba8\u4e86\u7406\u6027\u3001\u5185\u7701\u3001\u81ea\u6211\u63a7\u5236\u548c\u8d85\u8d8a\u611f\u5b98\u6b32\u671b\u7684\u4e3b\u9898\u3002\u9a6c\u53ef\u00b7\u5965\u52d2\u7559\u8ba4\u4e3a\uff0c\u771f\u6b63\u7684\u667a\u6167\u548c\u4eba\u751f\u7684\u610f\u4e49\u4e0d\u5728\u4e8e\u5916\u754c\u7684\u4e8b\u7269\uff0c\u800c\u5728\u4e8e\u5185\u5fc3\u7684\u4fee\u517b\u4e0e\u7406\u6027\u601d\u8003","title":"\u4e2a\u4eba\u6210\u957f"},{"location":"books/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/gr/#_1","text":"\u81ea\u5f8b\u4fee\u70bc\u624b\u518c","title":"\u81ea\u5f8b\u7c7b"},{"location":"books/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/gr/#_2","text":"\u6c89\u601d\u5f55 \u7f57\u9a6c\u5e1d\u56fd\u7687\u5e1d\u9a6c\u53ef\u00b7\u5965\u52d2\u7559\u7684\u4e2a\u4eba\u53cd\u601d\u5f55\uff0c\u96c6\u4e2d\u4f53\u73b0\u4e86\u65af\u591a\u4e9a\u5b66\u6d3e\u7684\u54f2\u5b66\u601d\u60f3\u3002\u4e66\u4e2d\u7684\u8bb8\u591a\u6bb5\u843d\u63a2\u8ba8\u4e86\u7406\u6027\u3001\u5185\u7701\u3001\u81ea\u6211\u63a7\u5236\u548c\u8d85\u8d8a\u611f\u5b98\u6b32\u671b\u7684\u4e3b\u9898\u3002\u9a6c\u53ef\u00b7\u5965\u52d2\u7559\u8ba4\u4e3a\uff0c\u771f\u6b63\u7684\u667a\u6167\u548c\u4eba\u751f\u7684\u610f\u4e49\u4e0d\u5728\u4e8e\u5916\u754c\u7684\u4e8b\u7269\uff0c\u800c\u5728\u4e8e\u5185\u5fc3\u7684\u4fee\u517b\u4e0e\u7406\u6027\u601d\u8003","title":"\u54f2\u5b66"},{"location":"books/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/%E8%87%AA%E5%BE%8B%E4%BF%AE%E7%82%BC%E6%89%8B%E5%86%8C/","text":"\u539f\u4e66 \u8fd9\u672c\u4e66\u6781\u4e3a\u8be6\u7ec6\u5730\u5206\u4eab\u4e86\u4f5c\u8005\u7684\u81ea\u5f8b\u4e4b\u65c5\uff0c\u600e\u6837\u4ece\u4e00\u4e2a\u5403\u7262\u996d\u7684\u4e0d\u826f\u5c11\u5e74\u53d8\u6210\u6210\u529f\u7684\u4f01\u4e1a\u5bb6 \u4f5c\u8005\u7684\u672c\u8eab\u7ecf\u5386\u4e5f\u975e\u5e38\u4f20\u5947\uff0c\u8fd9\u4e2a\u4ed6\u7684 \u4e2a\u4eba\u7f51\u7ad9","title":"\u81ea\u5f8b\u4fee\u70bc\u624b\u518c"},{"location":"cs/cs/","text":"\u8ba1\u7b97\u673a\u5c31\u50cf\u9b54\u6cd5 \u7f16\u7a0b\u8bed\u8a00 python \u5ed6\u96ea\u5cf0 100\u9898","title":"\u8ba1\u7b97\u673a"},{"location":"cs/cs/#_1","text":"","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"cs/cs/#python","text":"\u5ed6\u96ea\u5cf0 100\u9898","title":"python"},{"location":"cs/learn/","text":"this is an area to save my learnings \u6e05\u534e \u5b66\u4e60 \u5927\u4e00 \u5927\u4e00\u7684\u603b\u7ed3 \u5fae\u79ef\u5206 \u7ebf\u6027\u4ee3\u6570 \u79bb\u6563\u6570\u5b66 \u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840 \u5927\u4e8c \u5927\u4e09 \u5927\u56db \u6821\u56ed \u725b\u4ebagithub Siqiao Huang CSDIY \u5b66\u4e60","title":"Learn"},{"location":"cs/learn/#_1","text":"","title":"\u6e05\u534e"},{"location":"cs/learn/#_2","text":"","title":"\u5b66\u4e60"},{"location":"cs/learn/#_3","text":"\u5927\u4e00\u7684\u603b\u7ed3","title":"\u5927\u4e00"},{"location":"cs/learn/#_4","text":"","title":"\u5fae\u79ef\u5206"},{"location":"cs/learn/#_5","text":"","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"cs/learn/#_6","text":"","title":"\u79bb\u6563\u6570\u5b66"},{"location":"cs/learn/#_7","text":"","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840"},{"location":"cs/learn/#_8","text":"","title":"\u5927\u4e8c"},{"location":"cs/learn/#_9","text":"","title":"\u5927\u4e09"},{"location":"cs/learn/#_10","text":"","title":"\u5927\u56db"},{"location":"cs/learn/#_11","text":"","title":"\u6821\u56ed"},{"location":"cs/learn/#github","text":"Siqiao Huang","title":"\u725b\u4ebagithub"},{"location":"cs/learn/#csdiy","text":"","title":"CSDIY \u5b66\u4e60"},{"location":"cs/csdiy/csdiy/","text":"\u6211\u8981\u597d\u597d\u5229\u7528\u8fd9\u4e2a\u8d44\u6e90\uff0c\u63d0\u5347\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u6c34\u5e73 csdiy","title":"Csdiy"},{"location":"cs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/os/","text":"\u64cd\u4f5c\u7cfb\u7edf For full documentation visit mkdocs.org . \u96c6\u5927\u6210\u8005 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u603b\u8ff0"},{"location":"cs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/os/#_1","text":"For full documentation visit mkdocs.org .","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"cs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/os/#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u96c6\u5927\u6210\u8005"},{"location":"cs/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/os/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/dsa/","text":"DSA For full documentation visit mkdocs.org . \u7b97\u6cd5\u662f\u4e00\u5207\u7684\u6e90\u5934 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u603b\u8ff0"},{"location":"cs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/dsa/#dsa","text":"For full documentation visit mkdocs.org .","title":"DSA"},{"location":"cs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/dsa/#_1","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u7b97\u6cd5\u662f\u4e00\u5207\u7684\u6e90\u5934"},{"location":"cs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/dsa/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/programming_language/","text":"\u7f16\u7a0b\u8bed\u8a00 For full documentation visit mkdocs.org . \u8bed\u8a00\u662f\u4ee3\u7801\u7684\u57fa\u7840 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/programming_language/#_1","text":"For full documentation visit mkdocs.org .","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/programming_language/#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u8bed\u8a00\u662f\u4ee3\u7801\u7684\u57fa\u7840"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/programming_language/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/c/","text":"C\u8bed\u8a00 For full documentation visit mkdocs.org . \u8bed\u8a00\u662f\u4ee3\u7801\u7684\u57fa\u7840 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"C"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/c/#c","text":"For full documentation visit mkdocs.org .","title":"C\u8bed\u8a00"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/c/#_1","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u8bed\u8a00\u662f\u4ee3\u7801\u7684\u57fa\u7840"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/c/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp/","text":"C++\u8bed\u8a00 For full documentation visit mkdocs.org . \u68a6\u5f00\u59cb\u7684\u5730\u65b9 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"C++"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp/#c","text":"For full documentation visit mkdocs.org .","title":"C++\u8bed\u8a00"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp/#_1","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u68a6\u5f00\u59cb\u7684\u5730\u65b9"},{"location":"cs/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/cpp/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/jz/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 For full documentation visit mkdocs.org . \u6700\u786c\u7684\u8bfe mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u603b\u8ff0"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/jz/#_1","text":"For full documentation visit mkdocs.org .","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/jz/#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u6700\u786c\u7684\u8bfe"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/jz/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jw/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u539f\u7406 For full documentation visit mkdocs.org . \u80cc\u7684\u4e1c\u897f\u5f88\u591a mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u603b\u8ff0"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jw/#_1","text":"For full documentation visit mkdocs.org .","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u539f\u7406"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jw/#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u80cc\u7684\u4e1c\u897f\u5f88\u591a"},{"location":"cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/jw/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"finance/finance/","text":"it's important to learn finance!","title":"\u91d1\u878d"},{"location":"finance/crypto/crypto/","text":"\u52a0\u5bc6\u8d27\u5e01","title":"\u5e01"},{"location":"finance/crypto/bitcoin/bitcoin/","text":"i lost 7k yuan in crypto in 2024","title":"Bitcoin"},{"location":"finance/quant/quant/","text":"\u91cf\u5316","title":"\u91cf\u5316"},{"location":"finance/stock/stock/","text":"\u80a1\u7968","title":"\u80a1\u7968"},{"location":"math/caculus/","text":"\u5fae\u79ef\u5206 For full documentation visit mkdocs.org . \u91cd\u8981\u6027 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. \u8d44\u6e90 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u5fae\u79ef\u5206"},{"location":"math/caculus/#_1","text":"For full documentation visit mkdocs.org .","title":"\u5fae\u79ef\u5206"},{"location":"math/caculus/#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u91cd\u8981\u6027"},{"location":"math/caculus/#_3","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u8d44\u6e90"},{"location":"math/linear/","text":"\u7ebf\u6027\u4ee3\u6570","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"math/math/","text":"\u6570\u5b66 For full documentation visit mkdocs.org . \u91cd\u8981\u6027 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. \u8d44\u6e90 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u6570\u5b66"},{"location":"math/math/#_1","text":"For full documentation visit mkdocs.org .","title":"\u6570\u5b66"},{"location":"math/math/#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u91cd\u8981\u6027"},{"location":"math/math/#_3","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u8d44\u6e90"},{"location":"math/probability/","text":"\u6982\u7387\u8bba","title":"\u6982\u7387\u8bba"},{"location":"math/pro/pro/","text":"","title":"Pro"},{"location":"me/dgh/","text":"here to write about myself, helping me understand myself deeply","title":"\u6211\u662f\u8c01"},{"location":"me/2024/2024/","text":"this is my precious year 2024","title":"2024\u5e74"},{"location":"me/2024/11/2024%E5%B9%B411%E6%9C%8828%E6%97%A5/","text":"\u65e0\u6570\u6b21\u7684\u53cd\u601d\uff0c\u8fd8\u662f\u6ca1\u6709\u89e3\u51b3\u95ee\u9898\uff0c\u6211\u771f\u6b63\u7684\u95ee\u9898\u7a76\u7adf\u5728\u54ea\u91cc","title":"2024\u5e7411\u670828\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8810%E6%97%A5/","text":"","title":"2024\u5e748\u670810\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8811%E6%97%A5/","text":"\u4eca\u665a\u53bb\u56fd\u8d38\u5403\u4e86\u82b1\u76d0\u8857\uff0c\u8001\u677f\u591a\u9001\u4e86\u4e00\u76d8\u8c46\u8150\uff0c\u8fd8\u633a\u597d\u5403\u7684","title":"2024\u5e748\u670811\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8812%E6%97%A5/","text":"\u4ece\u4eca\u5929\u5f00\u59cb\u6211\u53c8\u91cd\u65b0\u6d3b\u4e86\u4e00\u904d\uff0c\u4e54\u5e03\u65af\u8bf4\u8fc7\uff1a\u201c\u628a\u6bcf\u4e00\u5929\u90fd\u5f53\u505a\u751f\u547d\u4e2d\u6700\u540e\u4e00\u5929\u53bb\u751f\u6d3b\uff0c\u603b\u6709\u4e00\u5929\u4f60\u4f1a\u662f\u5bf9\u7684\u3002\u201d\u6211\u80fd\u7406\u89e3\u4ed6\u60f3\u8bf4\u7684\u610f\u601d\u662f\u73cd\u60dc\u65f6\u95f4\uff0c\u4f46\u662f\u5982\u679c\u771f\u7684\u662f\u6700\u540e\u4e00\u5929\uff0c\u6b63\u5e38\u4eba\u5e94\u8be5\u5c31\u4e0d\u4f1a\u5c65\u884c\u6b63\u5e38\u7684\u5de5\u4f5c\u548c\u76ee\u6807\u4e86\uff0c\u6240\u4ee5\u6211\u60f3\u5e94\u8be5\u662f\u628a\u6628\u5929\u5f53\u4f5c\u6700\u540e\u4e00\u5929\u6765\u5ea6\u8fc7\uff0c\u8fd9\u6837\u4eca\u5929\u5c31\u662f\u5929\u8d50\u7684\u793c\u7269\u3002","title":"2024\u5e748\u670812\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/","text":"cs \u6570\u5b66 6042 a good proof must also be clear. Correctness and clarity usually go together several guidelines: 1.state your game plan 2.keep a linear flow 3.a proof is an essay,not a calculation 4.Avoid excessive symbolism 5.revise and simplify When algorithms and protocols only \u201cmostly work\u201d due to reliance on hand-waving arguments, the results can range from problematic to catastrophic \"Hand-waving\" refers to the use of vague or superficial explanations that are not fully grounded in solid reasoning or evidence. It's often used to describe situations where someone glosses over complex details, assumes things will work without proper justification, or relies on intuition rather than rigorous proof. In technical or scientific contexts, \"hand-waving\" can be seen as a warning that the argument or solution might not be reliable or fully thought out. So we really hope that you\u2019ll develop the ability to formulate rock-solid logical arguments that a system actually does what you think it does! \u91d1\u878d \u82f1\u8bed \u5176\u4ed6","title":"2024\u5e748\u670813\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/#cs","text":"","title":"cs"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/#_1","text":"","title":"\u6570\u5b66"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/#6042","text":"a good proof must also be clear. Correctness and clarity usually go together several guidelines: 1.state your game plan 2.keep a linear flow 3.a proof is an essay,not a calculation 4.Avoid excessive symbolism 5.revise and simplify When algorithms and protocols only \u201cmostly work\u201d due to reliance on hand-waving arguments, the results can range from problematic to catastrophic \"Hand-waving\" refers to the use of vague or superficial explanations that are not fully grounded in solid reasoning or evidence. It's often used to describe situations where someone glosses over complex details, assumes things will work without proper justification, or relies on intuition rather than rigorous proof. In technical or scientific contexts, \"hand-waving\" can be seen as a warning that the argument or solution might not be reliable or fully thought out. So we really hope that you\u2019ll develop the ability to formulate rock-solid logical arguments that a system actually does what you think it does!","title":"6042"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/#_2","text":"","title":"\u91d1\u878d"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/#_3","text":"","title":"\u82f1\u8bed"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8813%E6%97%A5/#_4","text":"","title":"\u5176\u4ed6"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%8814%E6%97%A5/","text":"","title":"2024\u5e748\u670814\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%886%E6%97%A5/","text":"\u53d1\u5e03\u4f1a \u73b0\u573a \u4eca\u5929\u53c2\u52a0\u4e86\u534e\u4e3a\u7684\u53d1\u5e03\u4f1a\uff0c\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u53c2\u52a0\u8fd9\u7c7b\u6d3b\u52a8\uff0c\u8fd8\u662f\u5f88\u6fc0\u52a8\u7684\uff0c\u5c24\u5176\u662f\u4e24\u8f86\u4eab\u754cS9\u65b0\u8f66\u4f34\u968f\u7740\u5b8f\u4f1f\u5927\u6c14\u7684\u97f3\u4e50\u7f13\u7f13\u9a76\u51fa\u7684\u65f6\u5019 \u665a\u5bb4 \u665a\u5bb4\u5403\u7684\u4e0d\u9519\uff0c\u5927\u6982\u5750\u4e86\u516d\u4e03\u684c\u4eba\uff0c\u6bcf\u684c\u90fd\u6709\u4e0d\u540c\u804c\u4e1a\u7684\u4eba\uff0c\u6bd4\u5982\u5b66\u751f\u3001\u81ea\u5a92\u4f53\u3001\u8fd8\u6709\u4e00\u4e9b\u534e\u4e3a\u7684\u6280\u672f\u9886\u5934\u4eba","title":"2024\u5e748\u67086\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%886%E6%97%A5/#_1","text":"","title":"\u53d1\u5e03\u4f1a"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%886%E6%97%A5/#_2","text":"\u4eca\u5929\u53c2\u52a0\u4e86\u534e\u4e3a\u7684\u53d1\u5e03\u4f1a\uff0c\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u53c2\u52a0\u8fd9\u7c7b\u6d3b\u52a8\uff0c\u8fd8\u662f\u5f88\u6fc0\u52a8\u7684\uff0c\u5c24\u5176\u662f\u4e24\u8f86\u4eab\u754cS9\u65b0\u8f66\u4f34\u968f\u7740\u5b8f\u4f1f\u5927\u6c14\u7684\u97f3\u4e50\u7f13\u7f13\u9a76\u51fa\u7684\u65f6\u5019","title":"\u73b0\u573a"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%886%E6%97%A5/#_3","text":"\u665a\u5bb4\u5403\u7684\u4e0d\u9519\uff0c\u5927\u6982\u5750\u4e86\u516d\u4e03\u684c\u4eba\uff0c\u6bcf\u684c\u90fd\u6709\u4e0d\u540c\u804c\u4e1a\u7684\u4eba\uff0c\u6bd4\u5982\u5b66\u751f\u3001\u81ea\u5a92\u4f53\u3001\u8fd8\u6709\u4e00\u4e9b\u534e\u4e3a\u7684\u6280\u672f\u9886\u5934\u4eba","title":"\u665a\u5bb4"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%887%E6%97%A5/","text":"\u4eca\u5929\u662f\u65b0\u7684\u4e00\u5929\uff0c\u65e9\u4e0a\u5dee\u70b9\u8fdf\u5230\u4e86 \u8fb9\u4e0a\u8bfe\u8fb9\u505a\u996d\uff0c\u8fd9\u4e00\u665a\u4e0a\u7279\u522b\u5fd9","title":"2024\u5e748\u67087\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/","text":"cs \u52a0\u5bc6\u7b97\u6cd5 \u6570\u5b66 6042\u79bb\u6563\u6570\u5b66 \u4e3b\u8bb2\u4eba\u5bfc\u5e08\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u83b1\u987f,akamai\u516c\u53f8\u7684CEO\uff0c\u8fd9\u662f\u4e00\u5bb6\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u516c\u53f8\uff0c\u4fd7\u79f0CDN\uff0c\u6838\u5fc3\u6280\u672f\u5c31\u662f\u83b1\u987f\u7684\u7f51\u7edc\u5e94\u7528\u548c\u7f51\u7edc\u5b89\u5168\u7b97\u6cd5\uff0c\u89e3\u51b3\u4e86\u7f51\u7edc\u62e5\u5835\u95ee\u9898 leighton map nonnegtive into primes To prove that no polynomial P(x)P(x)P(x) with integer coefficients can map all nonnegative integers to prime numbers unless it is a constant polynomial, we can use a classic argument involving modular arithmetic and Dirichlet's theorem on arithmetic progressions . \u91d1\u878d \u91d1\u878d\u7684\u672c\u8d28\uff0clinsay\u8bb2\u7684\u5976\u8336\u5e97\u7684\u4f8b\u5b50\u975e\u5e38\u597d\uff0c\u5f88\u76f4\u89c2 \u82f1\u8bed \u6211\u7684\u82f1\u8bed\u53e3\u8bed\u592a\u5dee\u4e86\uff0c\u6a21\u4eff\u5370\u5ea6\u8001\u54e5\u8fd8\u53ef\u4ee5\uff0c\u62ff\u4e0d\u51fa\u624b\u554a\uff0c\u5fc5\u987b\u5f97\u7ec3\u4e00\u7ec3\uff0c\u6211\u5728B\u7ad9\u627e\u5230\u4e86\u4e00\u4e2a\u6559\u7a0b\uff0c\u575a\u6301\u6bcf\u5929\u542c\u8bf4\u7ec3 Lisa\u7f8e\u8bed \u5176\u4ed6 \u8461\u8404\u9152 \u4eca\u5929\u770b\u4e86\u5c0f\u6797\u7684\u89c6\u9891\uff0c\u5979\u5728B\u7ad9\u7b2c\u4e00\u7bc7\u89c6\u9891\u5c31\u662f\u8bb2\u8461\u8404\u9152\u7684 \u7b2c\u4e00\u6b21\u77e5\u9053\u8461\u8404\u9152\u7684\u4e39\u5b81\u548c\u9152\u4f53\u7684\u77e5\u8bc6\uff0c\u4e39\u5b81\u662f\u8861\u91cf\u8461\u8404\u9152\u7684\u53e3\u611f\u6da9\u5ea6\uff0c\u5e95\u5c42\u7684\u539f\u56e0\u662f\u9152\u4e2d\u542b\u6709\u7684\u915a\u7c7b\u7269\u8d28\uff0c\u9152\u4f53\u5219\u662f\u9152\u7684\u5165\u53e3\u91cd\u91cf\uff0c\u867d\u7136\u6bd4\u8f83\u7384\u5b66","title":"2024\u5e748\u67088\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#cs","text":"\u52a0\u5bc6\u7b97\u6cd5","title":"cs"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#_1","text":"","title":"\u6570\u5b66"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#6042","text":"\u4e3b\u8bb2\u4eba\u5bfc\u5e08\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u83b1\u987f,akamai\u516c\u53f8\u7684CEO\uff0c\u8fd9\u662f\u4e00\u5bb6\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u516c\u53f8\uff0c\u4fd7\u79f0CDN\uff0c\u6838\u5fc3\u6280\u672f\u5c31\u662f\u83b1\u987f\u7684\u7f51\u7edc\u5e94\u7528\u548c\u7f51\u7edc\u5b89\u5168\u7b97\u6cd5\uff0c\u89e3\u51b3\u4e86\u7f51\u7edc\u62e5\u5835\u95ee\u9898 leighton","title":"6042\u79bb\u6563\u6570\u5b66"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#map-nonnegtive-into-primes","text":"To prove that no polynomial P(x)P(x)P(x) with integer coefficients can map all nonnegative integers to prime numbers unless it is a constant polynomial, we can use a classic argument involving modular arithmetic and Dirichlet's theorem on arithmetic progressions .","title":"map nonnegtive into primes"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#_2","text":"\u91d1\u878d\u7684\u672c\u8d28\uff0clinsay\u8bb2\u7684\u5976\u8336\u5e97\u7684\u4f8b\u5b50\u975e\u5e38\u597d\uff0c\u5f88\u76f4\u89c2","title":"\u91d1\u878d"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#_3","text":"\u6211\u7684\u82f1\u8bed\u53e3\u8bed\u592a\u5dee\u4e86\uff0c\u6a21\u4eff\u5370\u5ea6\u8001\u54e5\u8fd8\u53ef\u4ee5\uff0c\u62ff\u4e0d\u51fa\u624b\u554a\uff0c\u5fc5\u987b\u5f97\u7ec3\u4e00\u7ec3\uff0c\u6211\u5728B\u7ad9\u627e\u5230\u4e86\u4e00\u4e2a\u6559\u7a0b\uff0c\u575a\u6301\u6bcf\u5929\u542c\u8bf4\u7ec3 Lisa\u7f8e\u8bed","title":"\u82f1\u8bed"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#_4","text":"","title":"\u5176\u4ed6"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%888%E6%97%A5/#_5","text":"\u4eca\u5929\u770b\u4e86\u5c0f\u6797\u7684\u89c6\u9891\uff0c\u5979\u5728B\u7ad9\u7b2c\u4e00\u7bc7\u89c6\u9891\u5c31\u662f\u8bb2\u8461\u8404\u9152\u7684 \u7b2c\u4e00\u6b21\u77e5\u9053\u8461\u8404\u9152\u7684\u4e39\u5b81\u548c\u9152\u4f53\u7684\u77e5\u8bc6\uff0c\u4e39\u5b81\u662f\u8861\u91cf\u8461\u8404\u9152\u7684\u53e3\u611f\u6da9\u5ea6\uff0c\u5e95\u5c42\u7684\u539f\u56e0\u662f\u9152\u4e2d\u542b\u6709\u7684\u915a\u7c7b\u7269\u8d28\uff0c\u9152\u4f53\u5219\u662f\u9152\u7684\u5165\u53e3\u91cd\u91cf\uff0c\u867d\u7136\u6bd4\u8f83\u7384\u5b66","title":"\u8461\u8404\u9152"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/","text":"\u4eca\u5929\u65e9\u4e0a\u8d77\u6765\u4ee5\u540e\uff0c\u6ca1\u6709\u6309\u7167\u7ea6\u5b9a\u8d77\u6765\uff0c\u82f9\u679c\u7684\u624b\u73af\u9707\u52a8\u592a\u5dee\u4e86\uff0c\u6ca1\u529e\u6cd5\u628a\u6211\u53eb\u9192\u3002\u5176\u5b9e\u4e0d\u9700\u8981\u4e00\u4e2a\u624b\u8868\uff0c\u5c31\u662f\u88c5\u9970\u4f5c\u7528\u7684\u8bdd\uff0c\u8fd8\u4e0d\u5982\u7528\u624b\u673a\u8bb0\u5f55\uff0c\u95f9\u949f\u7528\u82f9\u679c\u624b\u673a\u9707\u52a8\u5c31\u884c\u4e86\u3002 \u91cd\u70b9\u662f\u6211\u5728\u8fd9\u4e2a\u4e8b\u60c5\u4e0a\u6d6a\u8d39\u4e86\u592a\u591a\u65f6\u95f4\uff0c\u8fd9\u662f\u6700\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u4f60\u770b\u5377\u5377\u5c31\u4e0d\u4f1a\u8fd9\u6837\uff0c\u867d\u7136\u5979\u4e0d\u592a\u4f1a\u7528\uff0c\u4f46\u662f\u4e0d\u4f1a\u5bfc\u81f4\u6d6a\u8d39\u65f6\u95f4\u3002 cs sort sort\u662f\u6700\u57fa\u7840\u7684\u95ee\u9898\u4e86 \u5173\u4e8e\u7a33\u5b9a\u6027 \u7a33\u5b9a\u6027\u662f\u6307\u76f8\u7b49\u7684\u5143\u7d20\u7ecf\u8fc7\u6392\u5e8f\u4e4b\u540e\u76f8\u5bf9\u987a\u5e8f\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u3002 \u62e5\u6709\u7a33\u5b9a\u6027\u8fd9\u4e00\u7279\u6027\u7684\u7b97\u6cd5\u4f1a\u8ba9\u539f\u672c\u6709\u76f8\u7b49\u952e\u503c\u7684\u7eaa\u5f55\u7ef4\u6301\u76f8\u5bf9\u6b21\u5e8f\uff0c\u5373\u5982\u679c\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff0c\u5f53\u6709\u4e24\u4e2a\u76f8\u7b49\u952e\u503c\u7684\u7eaa\u5f55 r\u548cs \uff0c\u4e14\u5728\u539f\u672c\u7684\u5217\u8868\u4e2dr \u51fa\u73b0\u5728s \u4e4b\u524d\uff0c\u5728\u6392\u5e8f\u8fc7\u7684\u5217\u8868\u4e2d r\u4e5f\u5c06\u4f1a\u662f\u5728 s \u4e4b\u524d\u3002 \u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u6570\u5b66 6042 \u56db\u8272\u731c\u60f3\u7684\u9519\u8bef\u7b54\u6848\u5df2\u7ecf\u88ab\u53d1\u8868\u5f88\u591a\u4e86\uff0c\u5176\u4e2d\u4e00\u4e2a\u5341\u5e74\u6ca1\u6709\u88ab\u53d1\u73b0\u51fa\u9519\u8bef\uff0claborious\u610f\u4e3a\u8270\u82e6\u5353\u7edd\u7684 . In fact, just a handful of axioms, called the Zermelo-Fraenkel with Choice axioms(ZFC), together with a few logical deduction rules, appear to be sufficient to derive essentially all of mathematics. ZFC\u516c\u7406\u7cfb\u7edf\uff0c\u662f\u7531\u7b56\u6885\u6d1b\u548c\u5f17\u4f26\u514b\u5c14\u63d0\u51fa\u7684ZF\u7cfb\u7edf\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e0a\u9009\u62e9\u516c\u7406\u6784\u6210\u7684 \u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u610f\u5927\u4e8e2 \u7684\u5076\u6570\u90fd\u80fd\u8868\u793a\u6210\u4e24\u4e2a\u8d28\u6570\u7684\u548c ![[Pasted image 20240809185243.png]] \u8fd9\u95e8\u8bfe\u7684session1 \u4e3b\u8981\u8bb2\u7684\u662f\u4ec0\u4e48\u662fproof\uff0c\u4ee5\u53ca\u600e\u4e48\u505a\u4e00\u4e2a\u5b8c\u5907\u7684proof \u91d1\u878d CPI \u4ec0\u4e48\u662fCPI \u6d88\u8d39\u8005\u7269\u4ef7\u6307\u6570\uff08CPI\uff09\u7528\u4e8e\u8861\u91cf\u7f8e\u56fd\u6d88\u8d39\u8005\u6bcf\u6708\u652f\u4ed8\u7684\u4ef7\u683c\u53d8\u52a8\u3002\u8fd9\u4e2a\u6570\u503c\u662f\u7531\u52b3\u5de5\u7edf\u8ba1\u5c40\uff08BLS\uff09\u6309\u7167\u52a0\u6743\u5e73\u5747\u6570\u8ba1\u7b97\u7684\uff0c\u4f7f\u7528\u4e00\u7bee\u5b50\u4ee3\u8868\u7f8e\u56fd\u6d88\u8d39\u8005\u901a\u5e38\u8d2d\u4e70\u7684\u5546\u54c1\u548c\u670d\u52a1\u7684\u4ef7\u683c\u3002BLS\u53d1\u5e03\u4e86\u4e24\u79cdCPI\u6307\u6570\u2014\u2014\u4e00\u79cd\u662f\u57ce\u5e02\u6d88\u8d39\u8005\u7269\u4ef7\u6307\u6570\uff08CPI-U\uff09\uff0c\u53e6\u4e00\u79cd\u662f\u57ce\u5e02\u5de5\u4eba\u548c\u6587\u5458\u7269\u4ef7\u6307\u6570\uff08CPI-W\uff09\u3002 CPI\u4f7f\u7528\u4e0d\u540c\u7684\u4ef7\u683c\u6837\u672c\u3001\u6307\u6570\u6743\u91cd\u548c\u8c03\u67e5\u6280\u672f\u4e0e\u751f\u4ea7\u8005\u4ef7\u683c\u6307\u6570\uff08PPI\uff09\u4e0d\u540c\uff0c\u540e\u8005\u5e2e\u52a9\u8ba1\u7b97\u7f8e\u56fd\u751f\u4ea7\u8005\u83b7\u5f97\u5546\u54c1\u548c\u670d\u52a1\u7684\u4ef7\u683c\u3002 \u82f1\u8bed \u5143\u97f3\u5206\u4e3atense\u548crelaxed\u4e24\u79cd\uff0c\u5982feet\u548cfit\uff0c\u524d\u8005\u662f\u7d27\u5f20\u7684\uff0c\u540e\u8005\u662f\u653e\u677e\u7684 \u5176\u4ed6 chrome\u7684\u5feb\u6377\u952e\uff0c\u4e4b\u524d\u4e00\u76f4\u4e0d\u77e5\u9053CTRL+w\u5173\u95ed\u6807\u7b7e\u9875\uff0cCTRL+pageUP\u5207\u6362\u6807\u7b7e\u9875\uff0cCTRL+t\u6253\u5f00\u65b0\u7684\u6807\u7b7e\u9875\uff0c\u8fd9\u90fd\u662f\u53ef\u4ee5\u52a0\u5feb\u5de5\u4f5c\u6d41\u7684\u65b9\u6cd5\uff0c\u4e4b\u524d\u4e00\u76f4\u7528\u9f20\u6807\u70b9\u70b9\u70b9\uff0c\u592a\u6d6a\u8d39\u65f6\u95f4\u4e86\uff0c\u6211\u628a\u5feb\u6377\u952e\u7684\u4f4d\u7f6e\u4fdd\u5b58\u5728\u4e0b\u9762","title":"2024\u5e748\u67089\u65e5"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#cs","text":"","title":"cs"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#sort","text":"sort\u662f\u6700\u57fa\u7840\u7684\u95ee\u9898\u4e86 \u5173\u4e8e\u7a33\u5b9a\u6027 \u7a33\u5b9a\u6027\u662f\u6307\u76f8\u7b49\u7684\u5143\u7d20\u7ecf\u8fc7\u6392\u5e8f\u4e4b\u540e\u76f8\u5bf9\u987a\u5e8f\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u3002 \u62e5\u6709\u7a33\u5b9a\u6027\u8fd9\u4e00\u7279\u6027\u7684\u7b97\u6cd5\u4f1a\u8ba9\u539f\u672c\u6709\u76f8\u7b49\u952e\u503c\u7684\u7eaa\u5f55\u7ef4\u6301\u76f8\u5bf9\u6b21\u5e8f\uff0c\u5373\u5982\u679c\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff0c\u5f53\u6709\u4e24\u4e2a\u76f8\u7b49\u952e\u503c\u7684\u7eaa\u5f55 r\u548cs \uff0c\u4e14\u5728\u539f\u672c\u7684\u5217\u8868\u4e2dr \u51fa\u73b0\u5728s \u4e4b\u524d\uff0c\u5728\u6392\u5e8f\u8fc7\u7684\u5217\u8868\u4e2d r\u4e5f\u5c06\u4f1a\u662f\u5728 s \u4e4b\u524d\u3002 \u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002","title":"sort"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#_1","text":"","title":"\u6570\u5b66"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#6042","text":"\u56db\u8272\u731c\u60f3\u7684\u9519\u8bef\u7b54\u6848\u5df2\u7ecf\u88ab\u53d1\u8868\u5f88\u591a\u4e86\uff0c\u5176\u4e2d\u4e00\u4e2a\u5341\u5e74\u6ca1\u6709\u88ab\u53d1\u73b0\u51fa\u9519\u8bef\uff0claborious\u610f\u4e3a\u8270\u82e6\u5353\u7edd\u7684 . In fact, just a handful of axioms, called the Zermelo-Fraenkel with Choice axioms(ZFC), together with a few logical deduction rules, appear to be sufficient to derive essentially all of mathematics. ZFC\u516c\u7406\u7cfb\u7edf\uff0c\u662f\u7531\u7b56\u6885\u6d1b\u548c\u5f17\u4f26\u514b\u5c14\u63d0\u51fa\u7684ZF\u7cfb\u7edf\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e0a\u9009\u62e9\u516c\u7406\u6784\u6210\u7684 \u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u610f\u5927\u4e8e2 \u7684\u5076\u6570\u90fd\u80fd\u8868\u793a\u6210\u4e24\u4e2a\u8d28\u6570\u7684\u548c ![[Pasted image 20240809185243.png]] \u8fd9\u95e8\u8bfe\u7684session1 \u4e3b\u8981\u8bb2\u7684\u662f\u4ec0\u4e48\u662fproof\uff0c\u4ee5\u53ca\u600e\u4e48\u505a\u4e00\u4e2a\u5b8c\u5907\u7684proof","title":"6042"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#_2","text":"","title":"\u91d1\u878d"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#cpi","text":"\u4ec0\u4e48\u662fCPI \u6d88\u8d39\u8005\u7269\u4ef7\u6307\u6570\uff08CPI\uff09\u7528\u4e8e\u8861\u91cf\u7f8e\u56fd\u6d88\u8d39\u8005\u6bcf\u6708\u652f\u4ed8\u7684\u4ef7\u683c\u53d8\u52a8\u3002\u8fd9\u4e2a\u6570\u503c\u662f\u7531\u52b3\u5de5\u7edf\u8ba1\u5c40\uff08BLS\uff09\u6309\u7167\u52a0\u6743\u5e73\u5747\u6570\u8ba1\u7b97\u7684\uff0c\u4f7f\u7528\u4e00\u7bee\u5b50\u4ee3\u8868\u7f8e\u56fd\u6d88\u8d39\u8005\u901a\u5e38\u8d2d\u4e70\u7684\u5546\u54c1\u548c\u670d\u52a1\u7684\u4ef7\u683c\u3002BLS\u53d1\u5e03\u4e86\u4e24\u79cdCPI\u6307\u6570\u2014\u2014\u4e00\u79cd\u662f\u57ce\u5e02\u6d88\u8d39\u8005\u7269\u4ef7\u6307\u6570\uff08CPI-U\uff09\uff0c\u53e6\u4e00\u79cd\u662f\u57ce\u5e02\u5de5\u4eba\u548c\u6587\u5458\u7269\u4ef7\u6307\u6570\uff08CPI-W\uff09\u3002 CPI\u4f7f\u7528\u4e0d\u540c\u7684\u4ef7\u683c\u6837\u672c\u3001\u6307\u6570\u6743\u91cd\u548c\u8c03\u67e5\u6280\u672f\u4e0e\u751f\u4ea7\u8005\u4ef7\u683c\u6307\u6570\uff08PPI\uff09\u4e0d\u540c\uff0c\u540e\u8005\u5e2e\u52a9\u8ba1\u7b97\u7f8e\u56fd\u751f\u4ea7\u8005\u83b7\u5f97\u5546\u54c1\u548c\u670d\u52a1\u7684\u4ef7\u683c\u3002","title":"CPI"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#_3","text":"\u5143\u97f3\u5206\u4e3atense\u548crelaxed\u4e24\u79cd\uff0c\u5982feet\u548cfit\uff0c\u524d\u8005\u662f\u7d27\u5f20\u7684\uff0c\u540e\u8005\u662f\u653e\u677e\u7684","title":"\u82f1\u8bed"},{"location":"me/2024/8/2024%E5%B9%B48%E6%9C%889%E6%97%A5/#_4","text":"chrome\u7684\u5feb\u6377\u952e\uff0c\u4e4b\u524d\u4e00\u76f4\u4e0d\u77e5\u9053CTRL+w\u5173\u95ed\u6807\u7b7e\u9875\uff0cCTRL+pageUP\u5207\u6362\u6807\u7b7e\u9875\uff0cCTRL+t\u6253\u5f00\u65b0\u7684\u6807\u7b7e\u9875\uff0c\u8fd9\u90fd\u662f\u53ef\u4ee5\u52a0\u5feb\u5de5\u4f5c\u6d41\u7684\u65b9\u6cd5\uff0c\u4e4b\u524d\u4e00\u76f4\u7528\u9f20\u6807\u70b9\u70b9\u70b9\uff0c\u592a\u6d6a\u8d39\u65f6\u95f4\u4e86\uff0c\u6211\u628a\u5feb\u6377\u952e\u7684\u4f4d\u7f6e\u4fdd\u5b58\u5728\u4e0b\u9762","title":"\u5176\u4ed6"},{"location":"me/2025/2025%E5%B9%B4/","text":"","title":"2025\u5e74"},{"location":"me/2025/1%E6%9C%88/2025%E5%B9%B41%E6%9C%88/","text":"2025\u5e74\u76841\u6708\u4efd\u76ee\u6807 2025\u5e741\u67081\u65e5 2025\u5e741\u67087\u65e5","title":"2025\u5e741\u6708"},{"location":"me/2025/1%E6%9C%88/2025%E5%B9%B41%E6%9C%881%E6%97%A5/","text":"2025\u5e74\u7684\u7b2c\u4e00\u5929\u5c31\u8fd9\u6837\u8fc7\u53bb\u4e86 \u539f\u4e66 \u4eca\u5929\u770b\u7684\u8fd9\u672c\u4e66\u8ba9\u6211\u60f3\u8d77\u4e86\u81ea\u5df1\u5728\u6d77\u519b\u7684\u65e5\u5b50\uff0c","title":"2025\u5e741\u67081\u65e5"},{"location":"me/2025/1%E6%9C%88/2025%E5%B9%B41%E6%9C%885%E6%97%A5/","text":"i want to creat an app, like tiktok, that uses randomness to help people accomplish what they want to do, step by step,in a random way Politics, history, and all the boring stuff are none of my business, i just want to pursue my own life The feelings of the sensory world are merely genetic imprints left over from early biological imperatives for reproduction. For me, only the vast ocean of knowledge is worth my relentless exploration. Plato believed that the sensory world is transient and imperfect, and that knowledge is the persuit of reason and wisdom, the exploration of eternal truth. Moreover, the sensory world's consumption of time does not lead to cumulative qualitative changes;instead, it raises the threshold of excitement, making people more and more addicted.","title":"2025\u5e741\u67085\u65e5"},{"location":"me/2025/1%E6%9C%88/2025%E5%B9%B41%E6%9C%887%E6%97%A5/","text":"code","title":"2025\u5e741\u67087\u65e5"},{"location":"me/2025/9%E6%9C%88/2025%E5%B9%B49%E6%9C%8813%E6%97%A5/","text":"\u4e0d\u80fd\u6d6a\u8d39\u65f6\u95f4\uff0c\u5bb6\u4eba\u7231\u4eba\u7b49\u4e0d\u8d77\uff0c\u65e9\u4e00\u5929\u81ea\u7531\uff0c\u65e9\u4e00\u5929\u4eab\u798f","title":"2025\u5e749\u670813\u65e5"},{"location":"me/dream/dream/","text":"\u201c\u81ea\u5f8b\u7684\u75db\u82e6\u662f\u6682\u65f6\u7684\uff0c\u4f46\u540e\u6094\u7684\u75db\u82e6\u662f\u7ec8\u8eab\u7684\uff0c\u800c\u4e14\u540e\u6094\u7684\u75db\u82e6\u8fdc\u8fdc\u5927\u4e8e\u52aa\u529b\u7684\u75db\u82e6\u3002\u201d \u52aa\u529b\u7684\u75db\u82e6\u662f\u5177\u4f53\u7684\u3001\u6709\u9650\u7684\uff0c\u6bd4\u5982\u71ac\u591c\u5b66\u4e60\u3001\u575a\u6301\u8bad\u7ec3\u3001\u514b\u670d\u62d6\u5ef6\uff0c\u4f46\u540e\u6094\u7684\u75db\u82e6\u662f\u65e0\u5c3d\u7684\uff0c\u5b83\u4f1a\u5728\u672a\u6765\u7684\u67d0\u4e00\u5929\u731b\u7136\u88ad\u6765\uff0c\u8ba9\u4f60\u61ca\u6094\u4e0d\u5df2\uff0c\u5374\u65e0\u529b\u6539\u53d8\u3002 \u201c\u4e0e\u5176\u65e5\u540e\u75db\u82e6\u4e07\u5206\uff0c\u4e0d\u5982\u73b0\u5728\u62fc\u5c3d\u5168\u529b\u3002\u201d \ud83d\udd25 \u96f7\u519b\uff1a\u201c\u6211\u7279\u522b\u5bb3\u6015\u843d\u540e\uff0c\u6015\u4e00\u65e6\u843d\u540e\uff0c\u6211\u5c31\u8ffd\u4e0d\u4e0a\uff0c\u6211\u4e0d\u662f\u4e00\u4e2a\u5584\u4e8e\u5728\u9006\u5883\u4e2d\u751f\u5b58\u7684\u4eba\u3002\u6211\u4f1a\u5148\u628a\u4e00\u4e2a\u4e8b\u60c5\u60f3\u5f97\u975e\u5e38\u900f\u5f7b\uff0c\u76ee\u7684\u662f\u4e0d\u8ba9\u81ea\u5df1\u9677\u5165\u9006\u5883\uff0c\u6211\u662f\u9996\u5148\u8ba9\u81ea\u5df1\u7acb\u4e8e\u4e0d\u8d25\u4e4b\u5730\uff0c\u7136\u540e\u518d\u51fa\u53d1\u7684\u4eba\u3002\u201d money investment coin stocks targets \u7b2c\u4e00\u4e2a100\u4e07 A9 The purpose family life high school ancestral hall family \u5d06\u5cd2\u5c71 \u4e34\u65f6\u5de5 tour \u4e9a\u6d32 \u9999\u6e2f \u65e5\u672c \u97e9\u56fd \u7f8e\u6d32 \u6b27\u6d32 \u6fb3\u6d32 my presents for my work house car laptop phone watch cuisine development \u65b0\u52a0\u5761 career yh\u8bf4\u5b9e\u4e60\u65e5\u85aa1600 chicken soup","title":"Dream"},{"location":"me/dream/dream/#money","text":"","title":"money"},{"location":"me/dream/dream/#investment","text":"","title":"investment"},{"location":"me/dream/dream/#coin","text":"","title":"coin"},{"location":"me/dream/dream/#stocks","text":"","title":"stocks"},{"location":"me/dream/dream/#targets","text":"\u7b2c\u4e00\u4e2a100\u4e07 A9","title":"targets"},{"location":"me/dream/dream/#the-purpose","text":"","title":"The purpose"},{"location":"me/dream/dream/#family-life","text":"","title":"family life"},{"location":"me/dream/dream/#high-school","text":"","title":"high school"},{"location":"me/dream/dream/#ancestral-hall","text":"","title":"ancestral hall"},{"location":"me/dream/dream/#family","text":"","title":"family"},{"location":"me/dream/dream/#_1","text":"","title":"\u5d06\u5cd2\u5c71"},{"location":"me/dream/dream/#_2","text":"","title":"\u4e34\u65f6\u5de5"},{"location":"me/dream/dream/#tour","text":"","title":"tour"},{"location":"me/dream/dream/#_3","text":"","title":"\u4e9a\u6d32"},{"location":"me/dream/dream/#_4","text":"","title":"\u9999\u6e2f"},{"location":"me/dream/dream/#_5","text":"","title":"\u65e5\u672c"},{"location":"me/dream/dream/#_6","text":"","title":"\u97e9\u56fd"},{"location":"me/dream/dream/#_7","text":"","title":"\u7f8e\u6d32"},{"location":"me/dream/dream/#_8","text":"","title":"\u6b27\u6d32"},{"location":"me/dream/dream/#_9","text":"","title":"\u6fb3\u6d32"},{"location":"me/dream/dream/#my-presents-for-my-work","text":"","title":"my presents for my work"},{"location":"me/dream/dream/#house","text":"","title":"house"},{"location":"me/dream/dream/#car","text":"","title":"car"},{"location":"me/dream/dream/#laptop","text":"","title":"laptop"},{"location":"me/dream/dream/#phone","text":"","title":"phone"},{"location":"me/dream/dream/#watch","text":"","title":"watch"},{"location":"me/dream/dream/#cuisine","text":"","title":"cuisine"},{"location":"me/dream/dream/#development","text":"","title":"development"},{"location":"me/dream/dream/#_10","text":"","title":"\u65b0\u52a0\u5761"},{"location":"me/dream/dream/#career","text":"yh\u8bf4\u5b9e\u4e60\u65e5\u85aa1600","title":"career"},{"location":"me/dream/dream/#chicken-soup","text":"","title":"chicken soup"},{"location":"thu/thu/","text":"\u6e05\u534e\u662f\u4e00\u5757\u5723\u5730","title":"\u6e05\u534e"},{"location":"thu/d1/algo/","text":"\u6570\u5b66\u90e8\u5206 \u56fe\u8bba\u90e8\u5206","title":"\u6570\u5b66\u90e8\u5206"},{"location":"thu/d1/algo/#_1","text":"","title":"\u6570\u5b66\u90e8\u5206"},{"location":"thu/d1/algo/#_2","text":"","title":"\u56fe\u8bba\u90e8\u5206"},{"location":"thu/d1/d1/","text":"\u5927\u4e00\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u5e74\uff0c\u57fa\u672c\u5b9a\u4e0b\u4e86\u5927\u5b66\u7684\u5b66\u4e60\u9ad8\u5ea6\u57fa\u8c03\uff0c\u800c\u4e14\u6c89\u6ca1\u6210\u672c\u975e\u5e38\u5927 \u5927\u4e00\u4e0a\u8bfe\u7a0b \u5927\u4e00\u4e0b\u8bfe\u7a0b \u5927\u4e00\u5c0f\u5b66\u671f \u7a0b\u5e8f\u8bbe\u8ba1 \u7f16\u7a0b\u8bb0\u5f55 \u7b97\u6cd5\u5b66\u4e60 \u5fae\u79ef\u5206 \u5fae\u79ef\u5206 \u7ebf\u6027\u4ee3\u6570 \u7ebf\u6027\u4ee3\u6570 \u79bb\u6563\u6570\u5b66 \u79bb\u6563\u6570\u5b66","title":"\u5927\u4e00"},{"location":"thu/d1/d1/#_1","text":"\u7f16\u7a0b\u8bb0\u5f55 \u7b97\u6cd5\u5b66\u4e60","title":"\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"thu/d1/d1/#_2","text":"\u5fae\u79ef\u5206","title":"\u5fae\u79ef\u5206"},{"location":"thu/d1/d1/#_3","text":"\u7ebf\u6027\u4ee3\u6570","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"thu/d1/d1/#_4","text":"\u79bb\u6563\u6570\u5b66","title":"\u79bb\u6563\u6570\u5b66"},{"location":"thu/d1/noi/","text":"\u5728\u8fd9\u91cc\u89e3\u51b3\u7f16\u7a0b\u548c\u76f8\u5173\u6570\u5b66\u7684\u5b66\u4e60 2025\u5e741\u6708 2025\u5e741\u670818\u65e5 \u4e00\u672c\u901a \u82f9\u679c \u8fd9\u4e2a\u9898\u4e3b\u8981\u662f\u8981\u8bb0\u4f4f\u8fd9\u4e2a\u65b9\u6cd5k=ceil(k); \u4e09\u4e2a\u6570 #include <iostream> #include <algorithm> // \u5305\u542b sort \u51fd\u6570 using namespace std; int main() { int a, b, c; cin >> a >> b >> c; // \u8f93\u5165\u4e09\u4e2a\u6574\u6570 // \u5c06\u4e09\u4e2a\u6570\u653e\u5165\u6570\u7ec4\u4e2d int arr[] = {a, b, c}; // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff08\u9ed8\u8ba4\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff09 sort(arr, arr + 3, greater<int>()); // \u4f7f\u7528 greater<int>() \u5b9e\u73b0\u4ece\u5927\u5230\u5c0f\u6392\u5e8f // \u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c cout << arr[0] << \" \" << arr[1] << \" \" << arr[2] << endl; return 0; } \u653e\u8fdb\u6570\u7ec4\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c // \u5c06\u4e09\u4e2a\u6570\u653e\u5165\u6570\u7ec4\u4e2d int arr[] = {a, b, c}; codeforces \u6c42\u7b2ck\u4f4d \u8fd9\u4e2a\u9898\u6211\u60f3\u66f4\u65b0\u4e00\u4e2acount\u548ck\u4f5c\u6bd4\u8f83\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u641e \u6700\u5feb\u7684\u7b54\u6848 #include <stdio.h> #include <stdlib.h> int main(){ int n,k; scanf(\"%d %d\", &n, &k); int curr, ak=0; for(int i=0;i<n;i++){ scanf(\"%d\", &curr); if (curr==0){ printf(\"%d\", i); exit(0); } if (k==(i+1)){ ak=curr; } if (curr<ak){ printf(\"%d\", i); exit(0); } } printf(\"%d\", n); return 0; } \u6211\u672c\u6765\u5199\u7684\u4ee3\u7801\u662f #include <bits/stdc++.h> using namespace std; int a[55]; int main() { int n,k; cin >> n >> k; for(int i = 1;i <= n;i++) { cin >> a[i]; if(a[i] == 0) { cout << i-1; return 0; } } int count = k; for(int i = k+1;i <= n;i++) { if(a[i] == a[i+1]) count++; } cout << count; return 0; } \u8fc7\u4e0d\u4e86\u7b2c\u4e09\u4e2a\u70b9 2025\u5e741\u670819\u65e5 \u4e00\u672c\u901a \u4e70\u7b14 \u8fd9\u4e2a\u601d\u8def\u592a\u79d2\u4e86 #include<stdio.h> using namespace std; int main() { int a,b,c; int x,y; scanf(\"%d\",&x); c=x/4; y=x%4; switch(y) { case 0: a=0; b=0; break; case 1: a=0; b=1; c--; break; case 2: a=1; b=0; c--; break; case 3: a=1; b=1; c-=2; } printf(\"%d %d %d\",a,b,c); return 0; } \u5728 C++ \u4e2d\uff0c int \u7c7b\u578b\u901a\u5e38\u5360\u7528 4 \u5b57\u8282\uff0832 \u4f4d\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5728 1 MB \u7684\u5185\u5b58\u4e2d\u53ef\u4ee5\u5b58\u653e\u591a\u5c11\u4e2a int \u3002 \u8ba1\u7b97\u8fc7\u7a0b\uff1a 1 MB = 1024 KB 1 KB = 1024 \u5b57\u8282 \u56e0\u6b64\uff0c1 MB = 1024 * 1024 \u5b57\u8282 = 1,048,576 \u5b57\u8282\u3002 \u5982\u679c\u6bcf\u4e2a int \u7c7b\u578b\u5360\u7528 4 \u5b57\u8282\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b58\u653e\u7684 int \u6570\u91cf\u4e3a\uff1a [ \\text{int \u6570\u91cf} = \\frac{1,048,576 \\text{ \u5b57\u8282}}{4 \\text{ \u5b57\u8282/\u4e2a}} = 262,144 \\text{ \u4e2a int} ] \u7ed3\u8bba\uff1a 1 MB \u7684\u5185\u5b58\u53ef\u4ee5\u5b58\u653e 262,144 \u4e2a int \u3002 2025\u5e741\u670820\u65e5 \u4e00\u672c\u901a \u6c42\u4e00\u4e2a\u5c0f\u6570\u7684\u67d0\u4e00\u4f4d #include <iostream> using namespace std; int main() { int a, b, n; cin >> a >> b >> n; // Find the n-th digit after the decimal point a = a % b; // Start with the remainder after dividing a by b for (int i = 1; i < n; ++i) { a *= 10; // Shift the remainder to the left a %= b; // Update the remainder after division } a *= 10; // Shift to get the next digit cout << (a / b) << endl; // Output the n-th digit return 0; } \u8fd9\u4e2a\u529e\u6cd5\u662f\u957f\u9664\u6cd5 2025\u5e741\u670821\u65e5 \u4e00\u672c\u901a \u5feb\u901f\u5e42 #include <iostream> #include <string> using namespace std; // \u5feb\u901f\u5e42\u53d6\u6a21\u51fd\u6570 int fastPowerMod(int base, int exp, int mod) { int result = 1; // \u521d\u59cb\u7ed3\u679c base = base % mod; // \u9632\u6b62 base \u4e00\u5f00\u59cb\u5c31\u8d85\u8fc7 mod while (exp > 0) { if (exp % 2 == 1) { // \u5982\u679c\u6307\u6570\u662f\u5947\u6570 result = (result * base) % mod; } base = (base * base) % mod; // base \u5e73\u65b9 exp /= 2; // \u6307\u6570\u51cf\u534a } return result; } int main() { int a, b; cin >> a >> b; // \u661f\u671f\u540d\u79f0\u6570\u7ec4 string week[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}; // \u8ba1\u7b97 a^b mod 7 int offset = fastPowerMod(a, b, 7); // \u8f93\u51fa\u5bf9\u5e94\u661f\u671f cout << week[offset] << endl; return 0; } \u8f97\u8f6c\u76f8\u9664\u6cd5 #include <iostream> using namespace std; // \u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 int gcd(int a, int b) { while (b != 0) { int temp = a % b; // \u8ba1\u7b97\u4f59\u6570 a = b; // \u66f4\u65b0 a \u4e3a b b = temp; // \u66f4\u65b0 b \u4e3a\u4f59\u6570 } return a; // \u8fd4\u56de\u6700\u5927\u516c\u7ea6\u6570 } int main() { int m, n; cin >> m >> n; // \u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570 cout << gcd(m, n) << endl; // \u8f93\u51fa\u6700\u5927\u516c\u7ea6\u6570 return 0; } 2025\u5e741\u670822\u65e5 \u4e00\u672c\u901a \u7b5b\u6cd5\u6c42\u8d28\u6570 #include <iostream> #include <vector> using namespace std; int main() { int n; cin >> n; // Create a boolean array and initialize all elements to true vector<bool> isPrime(n + 1, true); // 0 and 1 are not prime numbers isPrime[0] = isPrime[1] = false; // Sieve of Eratosthenes for (int i = 2; i * i <= n; i++) { if (isPrime[i]) { // Mark all multiples of i as non-prime for (int j = i * i; j <= n; j += i) { isPrime[j] = false; } } } // Output all prime numbers for (int i = 2; i <= n; i++) { if (isPrime[i]) { cout << i << endl; } } return 0; } \u5f00\u5173\u706f \u5f00\u5173\u706f #include <iostream> #include <vector> #include <sstream> using namespace std; int main() { int N, M; cin >> N >> M; // Initializing all lights to \"True\" (on state) vector<bool> lights(N, true); // Process the toggling operations for (int person = 1; person <= M; person++) { for (int i = person - 1; i < N; i += person) { lights[i] = !lights[i]; // Toggle the light } } // Collect and output the indices of the lights that are off vector<int> off_lights; for (int i = 0; i < N; i++) { if (!lights[i]) { off_lights.push_back(i + 1); // Store the 1-based index } } // Output the result stringstream result; for (size_t i = 0; i < off_lights.size(); i++) { if (i > 0) result << \",\"; result << off_lights[i]; } cout << result.str() << endl; return 0; } \u7edd\u5bf9\u5dee #include <iostream> #include <vector> #include <algorithm> using namespace std; int main() { int M; cin >> M; // Read the number of integers vector<int> numbers(M); // Create a vector to store the numbers // Read the sequence of numbers for (int i = 0; i < M; i++) { cin >> numbers[i]; } // Find the maximum and minimum values int max_value = *max_element(numbers.begin(), numbers.end()); int min_value = *min_element(numbers.begin(), numbers.end()); // Output the difference between the maximum and minimum values cout << max_value - min_value << endl; return 0; } \u86c7\u5f62\u586b\u6570 #include<bits/stdc++.h> using namespace std; int a[101][101]; int main() { int n; cin>>n; int i=0; int j=n-1; int sum=1; int k=0; int g=0; while(sum<=n*n) { if(k==0){ while(i<=n-1-g) { a[i++][j]=sum; sum++; } i--; j--; } else if(k==1){ while(j>=g){ a[i][j--]=sum++; } j++; i--; } else if(k==2) { while(i>=g){ a[i--][j]=sum++; } i++; j++; } else{ while(j<=n-g-2){ a[i][j++]=sum++; } j--; i++; } k++; if(k>4){ k=0; g++; } } for(i=0;i<n;i++) { for(j=0;j<n;j++) { cout<<a[i][j]<<\" \"; } cout<<endl; } return 0; } 2025\u5e741\u670824\u65e5 \u4e00\u672c\u901a \u539f\u6765\u9a6c\u8d5b\u514b\u662f\u8fd9\u4e48\u5f04\u5f97 \u4e2d\u95f4\u5404\u50cf\u7d20\u70b9\u65b0\u7070\u5ea6\u503c\u4e3a\u8be5\u50cf\u7d20\u70b9\u53ca\u5176\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u56db\u4e2a\u50cf\u7d20\u70b9\u539f\u7070\u5ea6\u503c\u7684\u5e73\u5747(\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570)\u3002 \u5b57\u7b26\u4e32\u6392\u5e8f chuan #include <iostream> #include <vector> #include <algorithm> // \u5305\u542bsort\u51fd\u6570 using namespace std; int main() { int n; cin >> n; // \u8bfb\u53d6\u56fd\u5bb6\u6570\u91cf vector<string> countries(n); // \u7528vector\u5b58\u50a8\u56fd\u5bb6\u540d\u79f0 // \u8bfb\u53d6\u6bcf\u4e2a\u56fd\u5bb6\u7684\u540d\u79f0 for (int i = 0; i < n; ++i) { cin >> countries[i]; } // \u5bf9\u56fd\u5bb6\u540d\u79f0\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f sort(countries.begin(), countries.end()); // \u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c for (const string& country : countries) { cout << country << endl; } return 0; } \u5faa\u73af\u5b57\u4e32\u5305\u542b\u7684\u95ee\u9898 t \u672c\u6765ai\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u590d\u5236\u4e00\u904d\u5934\u5c3e\u76f8\u63a5\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u957f\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u540e\u9762\u4e32\u7684\u6bcd\u4e32\uff0c\u4f46\u662f\u8bc4\u6d4b\u7684\u65f6\u5019\u53d1\u73b0\u6709\u9519\u8bef \u6700\u540e\u8bc1\u660e\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u5faa\u73af #include<iostream> using std::cin; using std::cout; #include<string> using std::string; int main() { string s01, s02, s1, s2; cin >> s01 >> s02; //\u9ed8\u8ba4\u7b2c\u4e00\u4e2a\u4e3a\u957f\u5b57\u7b26\u4e32 if (s01.size() > s02.size()) { s1 = s01; s2 = s02; } else { s1 = s02; s2 = s01; } //\u5faa\u73af\u904d\u5386\u5224\u65ad\uff0c\u6ce8\u610f\u5bf9\u5e94\u4e0b\u6807\u5373\u53ef for (int i = 0; i < s1.size(); ++i) { if (s1[i] == s2[0]) { int index = 0; if (i < s1.size() - 1)index = i + 1; for (int j = 1; j < s2.size(); ++j) { if (s1[index] != s2[j])break; if (j == s2.size() - 1) { cout << \"true\"; exit(1); } if (index == s1.size() - 1)index = 0; else index++; } } if (i == s1.size() - 1) { cout << \"false\"; exit(1); } } } 2025\u5e742\u67087\u65e5 \u4e00\u672c\u901a http://ybt.ssoier.cn:8088/problem_show.php?pid=1307 \u8fd9\u9053\u9898\u5b9e\u73b0\u5927\u6570\u9ad8\u7cbe\u5ea6\u4e58\u6cd5 string\u65b9\u6cd5 /****************************************************************************** Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS Code, Compile, Run and Debug online from anywhere in world. *******************************************************************************/ #include <bits/stdc++.h> using namespace std; int main() { string m,n; cin >> m >> n; int len1 = m.size(); int len2 = n.size(); vector<int> res(len1+len2,0); for(int i = len1-1;i>=0;i--) { for(int j = len2-1;j>=0;j--) { int temp = (m[i] - '0')*(n[j] - '0') + res[i+j+1]; res[i+j+1] = temp%10; res[i+j] += temp/10; //\u8fd9\u91cc\u9519\u4e86\uff0c\u5e94\u8be5\u662f\u9012\u589e\u7684\uff0c\u5c11\u4e86+= } } string a = \"\"; for(int i = 0;i < res.size();i++) { if(!(a.empty() && res[i] == 0)) //\u8fd9\u91cc\u4e0d\u80fd\u662f'0',\u56e0\u4e3ares\u662f\u4e00\u4e2aint\u6570\u7ec4 { a += res[i] + '0'; } } if(a.empty()) cout << \"0\"; else cout << a; return 0; } char\u6570\u7ec4\u65b9\u6cd5 /****************************************************************************** Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS Code, Compile, Run and Debug online from anywhere in world. *******************************************************************************/ #include <bits/stdc++.h> using namespace std; const int MAX_LEN = 200; int main() { char m[MAX_LEN],n[MAX_LEN]; cin >> m >> n; int len1 = strlen(m); int len2 = strlen(n); int res[MAX_LEN] = {0}; //\u521d\u59cb\u5316\u4e3a\u96f6\u6570\u7ec4 for(int i = len1-1;i>=0;i--) { for(int j = len2-1;j>=0;j--) { int temp = (m[i] - '0')*(n[j] - '0') + res[i+j+1]; res[i+j+1] = temp%10; res[i+j] += temp/10; //\u8fd9\u91cc\u9519\u4e86\uff0c\u5e94\u8be5\u662f\u9012\u589e\u7684\uff0c\u5c11\u4e86+= } } int start = 0; while(start < len1+len2-1 && res[start] == 0) //0 \u00d7 123 = 0\uff0c\u5e94\u8be5\u8f93\u51fa 0\uff0c\u800c\u4e0d\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u662fstart < len1+len2-1,\u81f3\u5c11\u4fdd\u7559\u4e00\u4e2a0 start++; for(int i = start;i < len1+len2;i++) cout << res[i]; return 0; }","title":"Noi"},{"location":"thu/d1/noi/#20251","text":"","title":"2025\u5e741\u6708"},{"location":"thu/d1/noi/#2025118","text":"","title":"2025\u5e741\u670818\u65e5"},{"location":"thu/d1/noi/#_1","text":"\u82f9\u679c \u8fd9\u4e2a\u9898\u4e3b\u8981\u662f\u8981\u8bb0\u4f4f\u8fd9\u4e2a\u65b9\u6cd5k=ceil(k); \u4e09\u4e2a\u6570 #include <iostream> #include <algorithm> // \u5305\u542b sort \u51fd\u6570 using namespace std; int main() { int a, b, c; cin >> a >> b >> c; // \u8f93\u5165\u4e09\u4e2a\u6574\u6570 // \u5c06\u4e09\u4e2a\u6570\u653e\u5165\u6570\u7ec4\u4e2d int arr[] = {a, b, c}; // \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff08\u9ed8\u8ba4\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff09 sort(arr, arr + 3, greater<int>()); // \u4f7f\u7528 greater<int>() \u5b9e\u73b0\u4ece\u5927\u5230\u5c0f\u6392\u5e8f // \u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c cout << arr[0] << \" \" << arr[1] << \" \" << arr[2] << endl; return 0; } \u653e\u8fdb\u6570\u7ec4\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c // \u5c06\u4e09\u4e2a\u6570\u653e\u5165\u6570\u7ec4\u4e2d int arr[] = {a, b, c};","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#codeforces","text":"\u6c42\u7b2ck\u4f4d \u8fd9\u4e2a\u9898\u6211\u60f3\u66f4\u65b0\u4e00\u4e2acount\u548ck\u4f5c\u6bd4\u8f83\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u641e \u6700\u5feb\u7684\u7b54\u6848 #include <stdio.h> #include <stdlib.h> int main(){ int n,k; scanf(\"%d %d\", &n, &k); int curr, ak=0; for(int i=0;i<n;i++){ scanf(\"%d\", &curr); if (curr==0){ printf(\"%d\", i); exit(0); } if (k==(i+1)){ ak=curr; } if (curr<ak){ printf(\"%d\", i); exit(0); } } printf(\"%d\", n); return 0; } \u6211\u672c\u6765\u5199\u7684\u4ee3\u7801\u662f #include <bits/stdc++.h> using namespace std; int a[55]; int main() { int n,k; cin >> n >> k; for(int i = 1;i <= n;i++) { cin >> a[i]; if(a[i] == 0) { cout << i-1; return 0; } } int count = k; for(int i = k+1;i <= n;i++) { if(a[i] == a[i+1]) count++; } cout << count; return 0; } \u8fc7\u4e0d\u4e86\u7b2c\u4e09\u4e2a\u70b9","title":"codeforces"},{"location":"thu/d1/noi/#2025119","text":"","title":"2025\u5e741\u670819\u65e5"},{"location":"thu/d1/noi/#_2","text":"\u4e70\u7b14 \u8fd9\u4e2a\u601d\u8def\u592a\u79d2\u4e86 #include<stdio.h> using namespace std; int main() { int a,b,c; int x,y; scanf(\"%d\",&x); c=x/4; y=x%4; switch(y) { case 0: a=0; b=0; break; case 1: a=0; b=1; c--; break; case 2: a=1; b=0; c--; break; case 3: a=1; b=1; c-=2; } printf(\"%d %d %d\",a,b,c); return 0; } \u5728 C++ \u4e2d\uff0c int \u7c7b\u578b\u901a\u5e38\u5360\u7528 4 \u5b57\u8282\uff0832 \u4f4d\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5728 1 MB \u7684\u5185\u5b58\u4e2d\u53ef\u4ee5\u5b58\u653e\u591a\u5c11\u4e2a int \u3002","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#_3","text":"1 MB = 1024 KB 1 KB = 1024 \u5b57\u8282 \u56e0\u6b64\uff0c1 MB = 1024 * 1024 \u5b57\u8282 = 1,048,576 \u5b57\u8282\u3002 \u5982\u679c\u6bcf\u4e2a int \u7c7b\u578b\u5360\u7528 4 \u5b57\u8282\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b58\u653e\u7684 int \u6570\u91cf\u4e3a\uff1a [ \\text{int \u6570\u91cf} = \\frac{1,048,576 \\text{ \u5b57\u8282}}{4 \\text{ \u5b57\u8282/\u4e2a}} = 262,144 \\text{ \u4e2a int} ]","title":"\u8ba1\u7b97\u8fc7\u7a0b\uff1a"},{"location":"thu/d1/noi/#_4","text":"1 MB \u7684\u5185\u5b58\u53ef\u4ee5\u5b58\u653e 262,144 \u4e2a int \u3002","title":"\u7ed3\u8bba\uff1a"},{"location":"thu/d1/noi/#2025120","text":"","title":"2025\u5e741\u670820\u65e5"},{"location":"thu/d1/noi/#_5","text":"\u6c42\u4e00\u4e2a\u5c0f\u6570\u7684\u67d0\u4e00\u4f4d #include <iostream> using namespace std; int main() { int a, b, n; cin >> a >> b >> n; // Find the n-th digit after the decimal point a = a % b; // Start with the remainder after dividing a by b for (int i = 1; i < n; ++i) { a *= 10; // Shift the remainder to the left a %= b; // Update the remainder after division } a *= 10; // Shift to get the next digit cout << (a / b) << endl; // Output the n-th digit return 0; } \u8fd9\u4e2a\u529e\u6cd5\u662f\u957f\u9664\u6cd5","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#2025121","text":"","title":"2025\u5e741\u670821\u65e5"},{"location":"thu/d1/noi/#_6","text":"\u5feb\u901f\u5e42 #include <iostream> #include <string> using namespace std; // \u5feb\u901f\u5e42\u53d6\u6a21\u51fd\u6570 int fastPowerMod(int base, int exp, int mod) { int result = 1; // \u521d\u59cb\u7ed3\u679c base = base % mod; // \u9632\u6b62 base \u4e00\u5f00\u59cb\u5c31\u8d85\u8fc7 mod while (exp > 0) { if (exp % 2 == 1) { // \u5982\u679c\u6307\u6570\u662f\u5947\u6570 result = (result * base) % mod; } base = (base * base) % mod; // base \u5e73\u65b9 exp /= 2; // \u6307\u6570\u51cf\u534a } return result; } int main() { int a, b; cin >> a >> b; // \u661f\u671f\u540d\u79f0\u6570\u7ec4 string week[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}; // \u8ba1\u7b97 a^b mod 7 int offset = fastPowerMod(a, b, 7); // \u8f93\u51fa\u5bf9\u5e94\u661f\u671f cout << week[offset] << endl; return 0; } \u8f97\u8f6c\u76f8\u9664\u6cd5 #include <iostream> using namespace std; // \u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 int gcd(int a, int b) { while (b != 0) { int temp = a % b; // \u8ba1\u7b97\u4f59\u6570 a = b; // \u66f4\u65b0 a \u4e3a b b = temp; // \u66f4\u65b0 b \u4e3a\u4f59\u6570 } return a; // \u8fd4\u56de\u6700\u5927\u516c\u7ea6\u6570 } int main() { int m, n; cin >> m >> n; // \u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570 cout << gcd(m, n) << endl; // \u8f93\u51fa\u6700\u5927\u516c\u7ea6\u6570 return 0; }","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#2025122","text":"","title":"2025\u5e741\u670822\u65e5"},{"location":"thu/d1/noi/#_7","text":"\u7b5b\u6cd5\u6c42\u8d28\u6570 #include <iostream> #include <vector> using namespace std; int main() { int n; cin >> n; // Create a boolean array and initialize all elements to true vector<bool> isPrime(n + 1, true); // 0 and 1 are not prime numbers isPrime[0] = isPrime[1] = false; // Sieve of Eratosthenes for (int i = 2; i * i <= n; i++) { if (isPrime[i]) { // Mark all multiples of i as non-prime for (int j = i * i; j <= n; j += i) { isPrime[j] = false; } } } // Output all prime numbers for (int i = 2; i <= n; i++) { if (isPrime[i]) { cout << i << endl; } } return 0; }","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#_8","text":"\u5f00\u5173\u706f #include <iostream> #include <vector> #include <sstream> using namespace std; int main() { int N, M; cin >> N >> M; // Initializing all lights to \"True\" (on state) vector<bool> lights(N, true); // Process the toggling operations for (int person = 1; person <= M; person++) { for (int i = person - 1; i < N; i += person) { lights[i] = !lights[i]; // Toggle the light } } // Collect and output the indices of the lights that are off vector<int> off_lights; for (int i = 0; i < N; i++) { if (!lights[i]) { off_lights.push_back(i + 1); // Store the 1-based index } } // Output the result stringstream result; for (size_t i = 0; i < off_lights.size(); i++) { if (i > 0) result << \",\"; result << off_lights[i]; } cout << result.str() << endl; return 0; }","title":"\u5f00\u5173\u706f"},{"location":"thu/d1/noi/#_9","text":"#include <iostream> #include <vector> #include <algorithm> using namespace std; int main() { int M; cin >> M; // Read the number of integers vector<int> numbers(M); // Create a vector to store the numbers // Read the sequence of numbers for (int i = 0; i < M; i++) { cin >> numbers[i]; } // Find the maximum and minimum values int max_value = *max_element(numbers.begin(), numbers.end()); int min_value = *min_element(numbers.begin(), numbers.end()); // Output the difference between the maximum and minimum values cout << max_value - min_value << endl; return 0; }","title":"\u7edd\u5bf9\u5dee"},{"location":"thu/d1/noi/#_10","text":"#include<bits/stdc++.h> using namespace std; int a[101][101]; int main() { int n; cin>>n; int i=0; int j=n-1; int sum=1; int k=0; int g=0; while(sum<=n*n) { if(k==0){ while(i<=n-1-g) { a[i++][j]=sum; sum++; } i--; j--; } else if(k==1){ while(j>=g){ a[i][j--]=sum++; } j++; i--; } else if(k==2) { while(i>=g){ a[i--][j]=sum++; } i++; j++; } else{ while(j<=n-g-2){ a[i][j++]=sum++; } j--; i++; } k++; if(k>4){ k=0; g++; } } for(i=0;i<n;i++) { for(j=0;j<n;j++) { cout<<a[i][j]<<\" \"; } cout<<endl; } return 0; }","title":"\u86c7\u5f62\u586b\u6570"},{"location":"thu/d1/noi/#2025124","text":"","title":"2025\u5e741\u670824\u65e5"},{"location":"thu/d1/noi/#_11","text":"\u539f\u6765\u9a6c\u8d5b\u514b\u662f\u8fd9\u4e48\u5f04\u5f97 \u4e2d\u95f4\u5404\u50cf\u7d20\u70b9\u65b0\u7070\u5ea6\u503c\u4e3a\u8be5\u50cf\u7d20\u70b9\u53ca\u5176\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u56db\u4e2a\u50cf\u7d20\u70b9\u539f\u7070\u5ea6\u503c\u7684\u5e73\u5747(\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570)\u3002","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#_12","text":"chuan #include <iostream> #include <vector> #include <algorithm> // \u5305\u542bsort\u51fd\u6570 using namespace std; int main() { int n; cin >> n; // \u8bfb\u53d6\u56fd\u5bb6\u6570\u91cf vector<string> countries(n); // \u7528vector\u5b58\u50a8\u56fd\u5bb6\u540d\u79f0 // \u8bfb\u53d6\u6bcf\u4e2a\u56fd\u5bb6\u7684\u540d\u79f0 for (int i = 0; i < n; ++i) { cin >> countries[i]; } // \u5bf9\u56fd\u5bb6\u540d\u79f0\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f sort(countries.begin(), countries.end()); // \u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c for (const string& country : countries) { cout << country << endl; } return 0; }","title":"\u5b57\u7b26\u4e32\u6392\u5e8f"},{"location":"thu/d1/noi/#_13","text":"t \u672c\u6765ai\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u590d\u5236\u4e00\u904d\u5934\u5c3e\u76f8\u63a5\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u4e2a\u957f\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u540e\u9762\u4e32\u7684\u6bcd\u4e32\uff0c\u4f46\u662f\u8bc4\u6d4b\u7684\u65f6\u5019\u53d1\u73b0\u6709\u9519\u8bef \u6700\u540e\u8bc1\u660e\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u5faa\u73af #include<iostream> using std::cin; using std::cout; #include<string> using std::string; int main() { string s01, s02, s1, s2; cin >> s01 >> s02; //\u9ed8\u8ba4\u7b2c\u4e00\u4e2a\u4e3a\u957f\u5b57\u7b26\u4e32 if (s01.size() > s02.size()) { s1 = s01; s2 = s02; } else { s1 = s02; s2 = s01; } //\u5faa\u73af\u904d\u5386\u5224\u65ad\uff0c\u6ce8\u610f\u5bf9\u5e94\u4e0b\u6807\u5373\u53ef for (int i = 0; i < s1.size(); ++i) { if (s1[i] == s2[0]) { int index = 0; if (i < s1.size() - 1)index = i + 1; for (int j = 1; j < s2.size(); ++j) { if (s1[index] != s2[j])break; if (j == s2.size() - 1) { cout << \"true\"; exit(1); } if (index == s1.size() - 1)index = 0; else index++; } } if (i == s1.size() - 1) { cout << \"false\"; exit(1); } } }","title":"\u5faa\u73af\u5b57\u4e32\u5305\u542b\u7684\u95ee\u9898"},{"location":"thu/d1/noi/#202527","text":"","title":"2025\u5e742\u67087\u65e5"},{"location":"thu/d1/noi/#_14","text":"http://ybt.ssoier.cn:8088/problem_show.php?pid=1307 \u8fd9\u9053\u9898\u5b9e\u73b0\u5927\u6570\u9ad8\u7cbe\u5ea6\u4e58\u6cd5","title":"\u4e00\u672c\u901a"},{"location":"thu/d1/noi/#string","text":"/****************************************************************************** Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS Code, Compile, Run and Debug online from anywhere in world. *******************************************************************************/ #include <bits/stdc++.h> using namespace std; int main() { string m,n; cin >> m >> n; int len1 = m.size(); int len2 = n.size(); vector<int> res(len1+len2,0); for(int i = len1-1;i>=0;i--) { for(int j = len2-1;j>=0;j--) { int temp = (m[i] - '0')*(n[j] - '0') + res[i+j+1]; res[i+j+1] = temp%10; res[i+j] += temp/10; //\u8fd9\u91cc\u9519\u4e86\uff0c\u5e94\u8be5\u662f\u9012\u589e\u7684\uff0c\u5c11\u4e86+= } } string a = \"\"; for(int i = 0;i < res.size();i++) { if(!(a.empty() && res[i] == 0)) //\u8fd9\u91cc\u4e0d\u80fd\u662f'0',\u56e0\u4e3ares\u662f\u4e00\u4e2aint\u6570\u7ec4 { a += res[i] + '0'; } } if(a.empty()) cout << \"0\"; else cout << a; return 0; }","title":"string\u65b9\u6cd5"},{"location":"thu/d1/noi/#char","text":"/****************************************************************************** Welcome to GDB Online. GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS Code, Compile, Run and Debug online from anywhere in world. *******************************************************************************/ #include <bits/stdc++.h> using namespace std; const int MAX_LEN = 200; int main() { char m[MAX_LEN],n[MAX_LEN]; cin >> m >> n; int len1 = strlen(m); int len2 = strlen(n); int res[MAX_LEN] = {0}; //\u521d\u59cb\u5316\u4e3a\u96f6\u6570\u7ec4 for(int i = len1-1;i>=0;i--) { for(int j = len2-1;j>=0;j--) { int temp = (m[i] - '0')*(n[j] - '0') + res[i+j+1]; res[i+j+1] = temp%10; res[i+j] += temp/10; //\u8fd9\u91cc\u9519\u4e86\uff0c\u5e94\u8be5\u662f\u9012\u589e\u7684\uff0c\u5c11\u4e86+= } } int start = 0; while(start < len1+len2-1 && res[start] == 0) //0 \u00d7 123 = 0\uff0c\u5e94\u8be5\u8f93\u51fa 0\uff0c\u800c\u4e0d\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u662fstart < len1+len2-1,\u81f3\u5c11\u4fdd\u7559\u4e00\u4e2a0 start++; for(int i = start;i < len1+len2;i++) cout << res[i]; return 0; }","title":"char\u6570\u7ec4\u65b9\u6cd5"},{"location":"thu/d1/d1s/%E5%BE%AE%E7%A7%AF%E5%88%86/wjf/","text":"\u5fae\u79ef\u5206\u5f97\u611f\u8c22\u5d14\u5976\u5976\uff0c\u771f\u7684\u5f88\u611f\u8c22\u5979\uff0c\u6559\u5b66\u5f88\u8ba4\u771f\uff0c\u5bf9\u6211\u4eec\u90fd\u975e\u5e38\u597d\uff0c\u4e0d\u50cfyp","title":"Wjf"},{"location":"thu/d1/d1s/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/lssx/","text":"\u8fd9\u95e8\u8bfe\u4f5c\u4e1a\u597d\u50cf\u8865\u4ea4\u4e86\uff0c\u6700\u540e\u671f\u672b\u8003\u8bd5\u6700\u540e\u4e00\u9053\u9898\u4ed6\u95ee\u6211\u5199\u51fa\u6765\u4e86\u6ca1\uff0c\u6211\u8bf4\u5199\u51fa\u6765\u4e86\uff0c\u4f46\u662f\u597d\u50cf\u505a\u6cd5\u4e0d\u5bf9\u554a $$ x_{1} + x_{2} = y $$","title":"Lssx"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/cxsj/","text":"\u8fd9\u95e8\u8bfe\u60f3\u8d77\u6765\u662f18\u5e74\u4e86\uff0c\u5f53\u65f6\u5c31\u662f\u56e0\u4e3a\u9009\u8bfe\u4e0d\u8ba4\u771f\uff0c\u6ca1\u6709\u548c\u5ba4\u53cb\u4e00\u8d77\u9009\u8bfe\uff0c\u5bfc\u81f4\u9009\u4e86\u8f6f\u9662\u7684\u8bfe\uff0c\u90a3\u4e2a\u505a\u6e38\u620f\uff0c\u8ba9\u6211\u611f\u89c9\u6709\u4e9b\u8fc7\u4e8e\u5b8f\u5927 CODE_PRACTICE","title":"Cxsj"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/code/","text":"this is a place to store practice code C++ C++ python java","title":"Code"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/code/#c","text":"C++","title":"C++"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/code/#python","text":"","title":"python"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/code/#java","text":"","title":"java"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/cpp/cpp/","text":"part1 cpp\u57fa\u7840 \u51fd\u6570 #include <iostream> using namespace std; int sum(int x) { int res = 0; for(int i = 1;i <= x;i++) { res += i; } return res; } int main() { int n; cin >> n; int homes = 2; while(homes <= n) { int s1 = sum(homes); int myhome = 1; while(myhome <= homes) { if(s1 - 3*myhome == n) { cout << myhome << \" \" << homes; } myhome++; } homes++; } return 0; } #include <iostream> #include <cmath> using namespace std; typedef long long ll; long long max(long long a,long long b) { if(a>b) return a; return b; } bool isprime(long long x) { if(x < 2) { return false; } ll limit = sqrt(x); for(int i = 2;i <= limit;i++) { if(x % i == 0) return false; } return true; } int main() { ll n; cin >> n; long long res = 0; for(ll i = 2;i <= n/2 ;i++) // \u8fd9\u91cc\u4e0d\u662fn\u7684\u5e73\u65b9\uff0c\u800c\u662fn\u7684\u4e00\u534a { if(isprime(i) && isprime(n-i)) { res = max(res,i*(n-i)); } } cout << res; return 0; } part2 \u57fa\u7840\u7b97\u6cd5 part3 \u6570\u636e\u7ed3\u6784","title":"Cpp"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/cpp/cpp/#part1-cpp","text":"","title":"part1 cpp\u57fa\u7840"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/cpp/cpp/#_1","text":"#include <iostream> using namespace std; int sum(int x) { int res = 0; for(int i = 1;i <= x;i++) { res += i; } return res; } int main() { int n; cin >> n; int homes = 2; while(homes <= n) { int s1 = sum(homes); int myhome = 1; while(myhome <= homes) { if(s1 - 3*myhome == n) { cout << myhome << \" \" << homes; } myhome++; } homes++; } return 0; } #include <iostream> #include <cmath> using namespace std; typedef long long ll; long long max(long long a,long long b) { if(a>b) return a; return b; } bool isprime(long long x) { if(x < 2) { return false; } ll limit = sqrt(x); for(int i = 2;i <= limit;i++) { if(x % i == 0) return false; } return true; } int main() { ll n; cin >> n; long long res = 0; for(ll i = 2;i <= n/2 ;i++) // \u8fd9\u91cc\u4e0d\u662fn\u7684\u5e73\u65b9\uff0c\u800c\u662fn\u7684\u4e00\u534a { if(isprime(i) && isprime(n-i)) { res = max(res,i*(n-i)); } } cout << res; return 0; }","title":"\u51fd\u6570"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/cpp/cpp/#part2","text":"","title":"part2 \u57fa\u7840\u7b97\u6cd5"},{"location":"thu/d1/d1s/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/code/cpp/cpp/#part3","text":"","title":"part3 \u6570\u636e\u7ed3\u6784"},{"location":"thu/d1/d1s/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/xxds/","text":"\u5927\u4e00\u7684\u7ebf\u6027\u4ee3\u6570\u662f\u6768\u6676\u4e0a\u7684\uff0c\u8bb2\u7684\u4e5f\u662f\u5f88\u50ac\u7720\uff0c\u540e\u67652\u7684\u65f6\u5019\u4e0a\u7684\u662f\u4e00\u4e2a\u5f88\u5e74\u8f7b\u7684\u8001\u5e08\uff0c\u5fd8\u8bb0\u53eb\u4ec0\u4e48\u4e86\uff0c\u597d\u50cf\u662f\u90a3\u4e2a\u4e18\u6210\u6850\u9886\u5bfc\u7684\u6570\u5b66\u4e2d\u5fc3\u91cc\u9762\u7684 // Create a function to fetch data from an API","title":"Xxds"},{"location":"thu/d1/d1s/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/gilbert/preface/","text":"i dont know the meaning \u4ee5\u4e0b\u662f\u7ffb\u8bd1\u540e\u7684\u77e9\u9635\u672f\u8bed\uff0c\u5e76\u5305\u542b\u82f1\u6587\u540d\u79f0\uff1a A - \u4efb\u610f\u77e9\u9635 (Any Matrix) B - \u57fa\u7840\u77e9\u9635 (Basis Matrix) C - \u4f59\u5b50\u77e9\u9635 (Cofactor Matrix) D - \u5bf9\u89d2\u77e9\u9635 (Diagonal Matrix) E - \u6d88\u5143\u77e9\u9635 (Elimination Matrix) F - \u5085\u91cc\u53f6\u77e9\u9635 (Fourier Matrix) G - \u54c8\u8fbe\u739b\u77e9\u9635 (Hadamard Matrix) H - \u5355\u4f4d\u77e9\u9635 (Identity Matrix) I - \u4e54\u4e39\u77e9\u9635 (Jordan Matrix) J - \u521a\u5ea6\u77e9\u9635 (Stiffness Matrix) K - \u4e0b\u4e09\u89d2\u77e9\u9635 (Lower Triangular Matrix) L - \u9a6c\u5c14\u53ef\u592b\u77e9\u9635 (Markov Matrix) M - \u96f6\u7a7a\u95f4\u77e9\u9635 (Nullspace Matrix) N - \u6392\u5217\u77e9\u9635 (Permutation Matrix) O - \u6295\u5f71\u77e9\u9635 (Projection Matrix) P - \u6b63\u4ea4\u77e9\u9635 (Orthogonal Matrix) Q - \u4e0a\u4e09\u89d2\u77e9\u9635 (Upper Triangular Matrix) R - \u7b80\u5316\u9636\u68af\u77e9\u9635 (Reduced Echelon Matrix) S - \u5bf9\u79f0\u77e9\u9635 (Symmetric Matrix) T - \u7ebf\u6027\u53d8\u6362 (Linear Transformation) U - \u4e0a\u4e09\u89d2\u77e9\u9635 (Upper Triangular Matrix) V - \u5de6\u5947\u5f02\u5411\u91cf (Left Singular Vectors) X - \u53f3\u5947\u5f02\u5411\u91cf (Right Singular Vectors) \u039b - \u7279\u5f81\u5411\u91cf\u77e9\u9635 (Eigenvector Matrix) \u03a3 - \u7279\u5f81\u503c\u77e9\u9635 (Eigenvalue Matrix) \u8fd9\u4e9b\u662f\u77e9\u9635\u76f8\u5173\u7684\u672f\u8bed\uff0c\u5de6\u8fb9\u662f\u4e2d\u6587\uff0c\u53f3\u8fb9\u662f\u5bf9\u5e94\u7684\u82f1\u6587\u540d\u3002","title":"Preface"},{"location":"thu/d1/noi/code/code/","text":"\u6211\u4eca\u59292025\u5e741\u670816\u65e5 \u770b\u4e86codeforces\u4e0a\u5f88\u591a\u5927\u795e\u7684\u4ee3\u7801\uff0c\u4ece\u4eca\u5929\u5f00\u59cb\u5728\u4e0a\u9762\u505a\u9898\uff0c\u5b66\u4e60\u5148\u8fdb\u7cbe\u5bc6\u7684\u4ee3\u7801\u6280\u80fd","title":"Code"},{"location":"thu/d1/noi/code/yibentong/biji/1/","text":"\u9898\u76ee\u5206\u6790 \u672c\u9898\u8981\u6c42\u8ba1\u7b97\u7ed9\u5b9a\u4e24\u70b9 ( A(X_a, Y_a) ) \u548c ( B(X_b, Y_b) ) \u4e4b\u95f4\u7684\u7ebf\u6bb5\u957f\u5ea6\u3002\u53ef\u4ee5\u4f7f\u7528 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f \u6765\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\uff1a [ d = \\sqrt{(X_b - X_a)^2 + (Y_b - Y_a)^2} ] \u5176\u4e2d\uff1a - ( (X_a, Y_a) ) \u548c ( (X_b, Y_b) ) \u5206\u522b\u662f\u70b9 A \u548c B \u7684\u5750\u6807\u3002 - \u8ba1\u7b97\u7ed3\u679c\u9700\u8981\u4fdd\u7559\u5c0f\u6570\u70b9\u540e 3 \u4f4d\u3002 \u601d\u8def \u8bfb\u53d6\u8f93\u5165\u7684\u5750\u6807\u503c\u3002 \u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u516c\u5f0f\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u8f93\u51fa\u7ed3\u679c\uff0c\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\u3002 C++\u4ee3\u7801\u5b9e\u73b0 #include <iostream> #include <cmath> // for sqrt and pow #include <iomanip> // for setprecision using namespace std; int main() { double Xa, Ya, Xb, Yb; // \u8f93\u5165\u70b9A\u7684\u5750\u6807 cin >> Xa >> Ya; // \u8f93\u5165\u70b9B\u7684\u5750\u6807 cin >> Xb >> Yb; // \u8ba1\u7b97\u7ebf\u6bb5AB\u7684\u957f\u5ea6 double distance = sqrt(pow(Xb - Xa, 2) + pow(Yb - Ya, 2)); // \u8f93\u51fa\u7ed3\u679c\uff0c\u4fdd\u7559\u5c0f\u6570\u70b9\u540e3\u4f4d cout << fixed << setprecision(3) << distance << endl; return 0; } \u89e3\u91ca \u8f93\u5165\uff1a \u6211\u4eec\u9996\u5148\u8bfb\u53d6\u70b9 A \u548c\u70b9 B \u7684\u5750\u6807\u3002 \u8ba1\u7b97\uff1a \u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f sqrt(pow(Xb - Xa, 2) + pow(Yb - Ya, 2)) \u6765\u8ba1\u7b97\u7ebf\u6bb5 AB \u7684\u957f\u5ea6\u3002 \u8f93\u51fa\uff1a \u4f7f\u7528 setprecision(3) \u4fdd\u8bc1\u8f93\u51fa\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\uff0c fixed \u786e\u4fdd\u8f93\u51fa\u56fa\u5b9a\u7684\u5c0f\u6570\u4f4d\u6570\u3002 \u793a\u4f8b \u8f93\u5165 1 1 2 2 \u8f93\u51fa 1.414 \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u56e0\u4e3a\u53ea\u8fdb\u884c\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u7b97\u672f\u8fd0\u7b97\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u53ea\u4f7f\u7528\u4e86\u5e38\u6570\u7ea7\u522b\u7684\u989d\u5916\u7a7a\u95f4\u3002","title":"1"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_1","text":"\u672c\u9898\u8981\u6c42\u8ba1\u7b97\u7ed9\u5b9a\u4e24\u70b9 ( A(X_a, Y_a) ) \u548c ( B(X_b, Y_b) ) \u4e4b\u95f4\u7684\u7ebf\u6bb5\u957f\u5ea6\u3002\u53ef\u4ee5\u4f7f\u7528 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f \u6765\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\uff1a [ d = \\sqrt{(X_b - X_a)^2 + (Y_b - Y_a)^2} ] \u5176\u4e2d\uff1a - ( (X_a, Y_a) ) \u548c ( (X_b, Y_b) ) \u5206\u522b\u662f\u70b9 A \u548c B \u7684\u5750\u6807\u3002 - \u8ba1\u7b97\u7ed3\u679c\u9700\u8981\u4fdd\u7559\u5c0f\u6570\u70b9\u540e 3 \u4f4d\u3002","title":"\u9898\u76ee\u5206\u6790"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_2","text":"\u8bfb\u53d6\u8f93\u5165\u7684\u5750\u6807\u503c\u3002 \u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u516c\u5f0f\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u8f93\u51fa\u7ed3\u679c\uff0c\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\u3002","title":"\u601d\u8def"},{"location":"thu/d1/noi/code/yibentong/biji/1/#c","text":"#include <iostream> #include <cmath> // for sqrt and pow #include <iomanip> // for setprecision using namespace std; int main() { double Xa, Ya, Xb, Yb; // \u8f93\u5165\u70b9A\u7684\u5750\u6807 cin >> Xa >> Ya; // \u8f93\u5165\u70b9B\u7684\u5750\u6807 cin >> Xb >> Yb; // \u8ba1\u7b97\u7ebf\u6bb5AB\u7684\u957f\u5ea6 double distance = sqrt(pow(Xb - Xa, 2) + pow(Yb - Ya, 2)); // \u8f93\u51fa\u7ed3\u679c\uff0c\u4fdd\u7559\u5c0f\u6570\u70b9\u540e3\u4f4d cout << fixed << setprecision(3) << distance << endl; return 0; }","title":"C++\u4ee3\u7801\u5b9e\u73b0"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_3","text":"\u8f93\u5165\uff1a \u6211\u4eec\u9996\u5148\u8bfb\u53d6\u70b9 A \u548c\u70b9 B \u7684\u5750\u6807\u3002 \u8ba1\u7b97\uff1a \u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f sqrt(pow(Xb - Xa, 2) + pow(Yb - Ya, 2)) \u6765\u8ba1\u7b97\u7ebf\u6bb5 AB \u7684\u957f\u5ea6\u3002 \u8f93\u51fa\uff1a \u4f7f\u7528 setprecision(3) \u4fdd\u8bc1\u8f93\u51fa\u4fdd\u7559\u4e09\u4f4d\u5c0f\u6570\uff0c fixed \u786e\u4fdd\u8f93\u51fa\u56fa\u5b9a\u7684\u5c0f\u6570\u4f4d\u6570\u3002","title":"\u89e3\u91ca"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_4","text":"","title":"\u793a\u4f8b"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_5","text":"1 1 2 2","title":"\u8f93\u5165"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_6","text":"1.414","title":"\u8f93\u51fa"},{"location":"thu/d1/noi/code/yibentong/biji/1/#_7","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u56e0\u4e3a\u53ea\u8fdb\u884c\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u7b97\u672f\u8fd0\u7b97\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u53ea\u4f7f\u7528\u4e86\u5e38\u6570\u7ea7\u522b\u7684\u989d\u5916\u7a7a\u95f4\u3002","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"thu/d1/noi/math/math/","text":"2025\u5e741\u670816\u65e5 \u4eca\u5929\u5f00\u59cb\u4ed4\u7ec6\u7814\u7a76\u300a\u6570\u5b66\u4e00\u672c\u901a\u300b\u7684\u5185\u5bb9\uff0c\u6211\u53d1\u73b0\u867d\u7136\u8fd9\u4e2a\u662f\u7ed9\u5907\u6218NOI\u7684\u4eba\u51c6\u5907\u7684\uff0c\u4f46\u662f\u5185\u5bb9\u771f\u7684\u975e\u5e38\u5168\u9762\uff0c\u6d89\u53ca\u5230\u6570\u5b66\u7684\u65b9\u65b9\u9762\u9762\uff0c\u5305\u62ec\u5f88\u591a\u6bd4\u8f83\u7e41\u6742\u7684\uff0c\u4f8b\u5982\u7fa4\u73af\u57df\u7b49\u7b49","title":"Math"},{"location":"thu/d2/d2/","text":"\u5927\u4e8c\u4e0a \u5927\u4e8c\u4e0a\u8bfe\u7a0b \u5927\u4e8c\u4e0b\u8bfe\u7a0b \u5927\u4e8c\u5c0f\u5b66\u671f \u5927\u4e8c\u4e0b \u6570\u5b57\u903b\u8f91\u7535\u8def \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u7cfb\u7edf\u7ed3\u6784 \u4eba\u5de5\u667a\u80fd\u5bfc\u8bba","title":"\u5927\u4e8c"},{"location":"thu/d2/d2/#_1","text":"\u5927\u4e8c\u4e0a\u8bfe\u7a0b \u5927\u4e8c\u4e0b\u8bfe\u7a0b \u5927\u4e8c\u5c0f\u5b66\u671f","title":"\u5927\u4e8c\u4e0a"},{"location":"thu/d2/d2/#_2","text":"\u6570\u5b57\u903b\u8f91\u7535\u8def \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u7cfb\u7edf\u7ed3\u6784 \u4eba\u5de5\u667a\u80fd\u5bfc\u8bba","title":"\u5927\u4e8c\u4e0b"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/1/","text":"By ZZUZXY OS: linux \u4e0b\u8f7d\u5de5\u7a0b git clone https://github.com/Strive-for-excellence/ACM-template.git \u5b89\u88c5 latex, sudo apt-get install texlive \u9664latex\u6587\u4ef6\u5939\u5916\u5176\u4ed6\u90fd\u53ef\u4ee5\u4fee\u6539\u66ff\u6362,\u6ce8\u610f\u6587\u4ef6\u4ee5.cpp \u7ed3\u5c3e \u5728\u547d\u4ee4\u884c\u4e0b\u8fdb\u5165latex\u6587\u4ef6\u5939","title":"Index"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/1/latex%20for%20ACM-template/","text":"https://www.jianshu.com/p/28552706e811 \u65b9\u6cd5 http://latextopdf.com/ latex \u8f6c\u6362\u6210\u4e3a pdf https://www.cnblogs.com/palayutm/p/6444833.html#e69bb4e696b0_1 \u65b9\u6cd5 https://blog.csdn.net/jasison/article/details/45643103","title":"latex for ACM template"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/1/1%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/readme/","text":"\u5b57\u7b26\u4e32\u5e38\u7528\u7b97\u6cd5","title":"Readme"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/1/2%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"\u603b\u7ed3\u5355\u8c03\u961f\u5217\u4f18\u5316dp\u7684\u4e00\u4e9b\u9898\u76ee 1 \u70fd\u706b\u4f20\u9012","title":"Index"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/1/5%20%E5%87%A0%E4%BD%95/readme/","text":"\u51e0\u4f55\u6a21\u677f\uff0c\u5206\u4e8c\u7ef4\u548c\u4e09\u7ef4","title":"Readme"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/0-%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/","text":"\u4e00\u5207\u7684\u5f00\u59cb \u5b8f\u5b9a\u4e49 \u9700\u8981 C++11 #include <bits/stdc++.h> using namespace std; using LL = long long; #define FOR(i, x, y) for (decay<decltype(y)>::type i = (x), _##i = (y); i < _##i; ++i) #define FORD(i, x, y) for (decay<decltype(x)>::type i = (x), _##i = (y); i > _##i; --i) #ifdef zerol #define dbg(x...) do { cout << \"\\033[32;1m\" << #x << \" -> \"; err(x); } while (0) void err() { cout << \"\\033[39;0m\" << endl; } template<template<typename...> class T, typename t, typename... A> void err(T<t> a, A... x) { for (auto v: a) cout << v << ' '; err(x...); } template<typename T, typename... A> void err(T a, A... x) { cout << a << ' '; err(x...); } #else #define dbg(...) #endif // ----------------------------------------------------------------------------- \u66f4\u591a\u914d\u8272\uff1a 33 \u9ec4\u8272 34 \u84dd\u8272 31 \u6a59\u8272 POJ/BZOJ version #include <cstdio> #include <iostream> #include <algorithm> #include <cmath> #include <string> #include <vector> #include <set> #include <queue> #include <cstring> #include <cassert> using namespace std; typedef long long LL; #define FOR(i, x, y) for (LL i = (x), _##i = (y); i < _##i; ++i) #define FORD(i, x, y) for (LL i = (x), _##i = (y); i > _##i; --i) #ifdef zerol #define dbg(args...) do { cout << \"\\033[32;1m\" << #args<< \" -> \"; err(args); } while (0) void err() { cout << \"\\033[39;0m\" << endl; } template<typename T, typename... Args> void err(T a, Args... args) { cout << a << ' '; err(args...); } #else #define dbg(...) #endif // ----------------------------------------------------------------------------- CMakeLists.txt (for CLion) set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O2 -Dzerol -Wall\") HDU Assert Patch #ifdef ONLINE_JUDGE #define assert(condition) do if (!condition) exit(*(int*)0); while (0) #endif \u5feb\u901f\u8bfb inline char nc() { static char buf[100000], *p1 = buf, *p2 = buf; return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++; } template <typename T> bool rn(T& v) { static char ch; while (ch != EOF && !isdigit(ch)) ch = nc(); if (ch == EOF) return false; for (v = 0; isdigit(ch); ch = nc()) v = v * 10 + ch - '0'; return true; } template <typename T> void o(T p) { static int stk[70], tp; if (p == 0) { putchar('0'); return; } if (p < 0) { p = -p; putchar('-'); } while (p) stk[++tp] = p % 10, p /= 10; while (tp) putchar(stk[tp--] + '0'); } \u9700\u8981\u521d\u59cb\u5316 \u9700\u8981\u4e00\u6b21\u8bfb\u5165 \u4e0d\u652f\u6301\u8d1f\u6570 const int MAXS = 100 * 1024 * 1024; char buf[MAXS]; template<typename T> inline bool read(T& x) { static char* p = buf; x = 0; while (*p && !isdigit(*p)) ++p; if (!*p) return false; while (isdigit(*p)) x = x * 10 + *p++ - 48; return true; } fread(buf, 1, MAXS, stdin); \u5bf9\u62cd #!/usr/bin/env bash g++ -o r main.cpp -O2 -std=c++11 g++ -o std std.cpp -O2 -std=c++11 while true; do python gen.py > in ./std < in > stdout ./r < in > out if test $? -ne 0; then exit 0 fi if diff stdout out; then printf \"AC\\n\" else printf \"GG\\n\" exit 0 fi done \u5feb\u901f\u7f16\u8bd1\u8fd0\u884c \uff08\u914d\u5408\u65e0\u63d2\u4ef6 VSC\uff09 #!/bin/bash g++ $1.cpp -o $1 -O2 -std=c++14 -Wall -Dzerol -g if $? -eq 0; then ./$1 fi \u4e3a\u4ec0\u4e48 C++ \u4e0d\u81ea\u5e26\u8fd9\u4e2a\uff1f LL bin(LL x, LL n, LL MOD) { LL ret = MOD != 1; for (x %= MOD; n; n >>= 1, x = x * x % MOD) if (n & 1) ret = ret * x % MOD; return ret; } inline LL get_inv(LL x, LL p) { return bin(x, p - 2, p); }","title":"\u4e00\u5207\u7684\u5f00\u59cb"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/0-%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/#_1","text":"","title":"\u4e00\u5207\u7684\u5f00\u59cb"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/0-%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/#_2","text":"\u9700\u8981 C++11 #include <bits/stdc++.h> using namespace std; using LL = long long; #define FOR(i, x, y) for (decay<decltype(y)>::type i = (x), _##i = (y); i < _##i; ++i) #define FORD(i, x, y) for (decay<decltype(x)>::type i = (x), _##i = (y); i > _##i; --i) #ifdef zerol #define dbg(x...) do { cout << \"\\033[32;1m\" << #x << \" -> \"; err(x); } while (0) void err() { cout << \"\\033[39;0m\" << endl; } template<template<typename...> class T, typename t, typename... A> void err(T<t> a, A... x) { for (auto v: a) cout << v << ' '; err(x...); } template<typename T, typename... A> void err(T a, A... x) { cout << a << ' '; err(x...); } #else #define dbg(...) #endif // ----------------------------------------------------------------------------- \u66f4\u591a\u914d\u8272\uff1a 33 \u9ec4\u8272 34 \u84dd\u8272 31 \u6a59\u8272 POJ/BZOJ version #include <cstdio> #include <iostream> #include <algorithm> #include <cmath> #include <string> #include <vector> #include <set> #include <queue> #include <cstring> #include <cassert> using namespace std; typedef long long LL; #define FOR(i, x, y) for (LL i = (x), _##i = (y); i < _##i; ++i) #define FORD(i, x, y) for (LL i = (x), _##i = (y); i > _##i; --i) #ifdef zerol #define dbg(args...) do { cout << \"\\033[32;1m\" << #args<< \" -> \"; err(args); } while (0) void err() { cout << \"\\033[39;0m\" << endl; } template<typename T, typename... Args> void err(T a, Args... args) { cout << a << ' '; err(args...); } #else #define dbg(...) #endif // ----------------------------------------------------------------------------- CMakeLists.txt (for CLion) set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O2 -Dzerol -Wall\") HDU Assert Patch #ifdef ONLINE_JUDGE #define assert(condition) do if (!condition) exit(*(int*)0); while (0) #endif","title":"\u5b8f\u5b9a\u4e49"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/0-%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/#_3","text":"inline char nc() { static char buf[100000], *p1 = buf, *p2 = buf; return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++; } template <typename T> bool rn(T& v) { static char ch; while (ch != EOF && !isdigit(ch)) ch = nc(); if (ch == EOF) return false; for (v = 0; isdigit(ch); ch = nc()) v = v * 10 + ch - '0'; return true; } template <typename T> void o(T p) { static int stk[70], tp; if (p == 0) { putchar('0'); return; } if (p < 0) { p = -p; putchar('-'); } while (p) stk[++tp] = p % 10, p /= 10; while (tp) putchar(stk[tp--] + '0'); } \u9700\u8981\u521d\u59cb\u5316 \u9700\u8981\u4e00\u6b21\u8bfb\u5165 \u4e0d\u652f\u6301\u8d1f\u6570 const int MAXS = 100 * 1024 * 1024; char buf[MAXS]; template<typename T> inline bool read(T& x) { static char* p = buf; x = 0; while (*p && !isdigit(*p)) ++p; if (!*p) return false; while (isdigit(*p)) x = x * 10 + *p++ - 48; return true; } fread(buf, 1, MAXS, stdin);","title":"\u5feb\u901f\u8bfb"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/0-%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/#_4","text":"#!/usr/bin/env bash g++ -o r main.cpp -O2 -std=c++11 g++ -o std std.cpp -O2 -std=c++11 while true; do python gen.py > in ./std < in > stdout ./r < in > out if test $? -ne 0; then exit 0 fi if diff stdout out; then printf \"AC\\n\" else printf \"GG\\n\" exit 0 fi done \u5feb\u901f\u7f16\u8bd1\u8fd0\u884c \uff08\u914d\u5408\u65e0\u63d2\u4ef6 VSC\uff09 #!/bin/bash g++ $1.cpp -o $1 -O2 -std=c++14 -Wall -Dzerol -g if $? -eq 0; then ./$1 fi","title":"\u5bf9\u62cd"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/0-%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/#c","text":"LL bin(LL x, LL n, LL MOD) { LL ret = MOD != 1; for (x %= MOD; n; n >>= 1, x = x * x % MOD) if (n & 1) ret = ret * x % MOD; return ret; } inline LL get_inv(LL x, LL p) { return bin(x, p - 2, p); }","title":"\u4e3a\u4ec0\u4e48 C++ \u4e0d\u81ea\u5e26\u8fd9\u4e2a\uff1f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u6570\u636e\u7ed3\u6784 ST \u8868 \u4e8c\u7ef4 int f[maxn][maxn][10][10]; inline int highbit(int x) { return 31 - __builtin_clz(x); } inline int calc(int x, int y, int xx, int yy, int p, int q) { return max( max(f[x][y][p][q], f[xx - (1 << p) + 1][yy - (1 << q) + 1][p][q]), max(f[xx - (1 << p) + 1][y][p][q], f[x][yy - (1 << q) + 1][p][q]) ); } void init() { FOR (x, 0, highbit(n) + 1) FOR (y, 0, highbit(m) + 1) FOR (i, 0, n - (1 << x) + 1) FOR (j, 0, m - (1 << y) + 1) { if (!x && !y) { f[i][j][x][y] = a[i][j]; continue; } f[i][j][x][y] = calc( i, j, i + (1 << x) - 1, j + (1 << y) - 1, max(x - 1, 0), max(y - 1, 0) ); } } inline int get_max(int x, int y, int xx, int yy) { return calc(x, y, xx, yy, highbit(xx - x + 1), highbit(yy - y + 1)); } \u4e00\u7ef4 struct RMQ { int f[22][M]; inline int highbit(int x) { return 31 - __builtin_clz(x); } void init(int* v, int n) { FOR (i, 0, n) f[0][i] = v[i]; FOR (x, 1, highbit(n) + 1) FOR (i, 0, n - (1 << x) + 1) f[x][i] = min(f[x - 1][i], f[x - 1][i + (1 << (x - 1))]); } int get_min(int l, int r) { assert(l <= r); int t = highbit(r - l + 1); return min(f[t][l], f[t][r - (1 << t) + 1]); } } rmq; \u7ebf\u6bb5\u6811 \u666e\u9002 namespace sg { struct Q { LL setv; explicit Q(LL setv = -1): setv(setv) {} void operator += (const Q& q) { if (q.setv != -1) setv = q.setv; } }; struct P { LL min; explicit P(LL min = INF): min(min) {} void up(Q& q) { if (q.setv != -1) min = q.setv; } }; template<typename T> P operator & (T&& a, T&& b) { return P(min(a.min, b.min)); } P p[maxn << 2]; Q q[maxn << 2]; #define lson o * 2, l, (l + r) / 2 #define rson o * 2 + 1, (l + r) / 2 + 1, r void up(int o, int l, int r) { if (l == r) p[o] = P(); else p[o] = p[o * 2] & p[o * 2 + 1]; p[o].up(q[o]); } void down(int o, int l, int r) { q[o * 2] += q[o]; q[o * 2 + 1] += q[o]; q[o] = Q(); up(lson); up(rson); } template<typename T> void build(T&& f, int o = 1, int l = 1, int r = n) { if (l == r) q[o] = f(l); else { build(f, lson); build(f, rson); q[o] = Q(); } up(o, l, r); } P query(int ql, int qr, int o = 1, int l = 1, int r = n) { if (ql > r || l > qr) return P(); if (ql <= l && r <= qr) return p[o]; down(o, l, r); return query(ql, qr, lson) & query(ql, qr, rson); } void update(int ql, int qr, const Q& v, int o = 1, int l = 1, int r = n) { if (ql > r || l > qr) return; if (ql <= l && r <= qr) q[o] += v; else { down(o, l, r); update(ql, qr, v, lson); update(ql, qr, v, rson); } up(o, l, r); } } SET + ADD struct IntervalTree { #define ls o * 2, l, m #define rs o * 2 + 1, m + 1, r static const LL M = maxn * 4, RS = 1E18 - 1; LL addv[M], setv[M], minv[M], maxv[M], sumv[M]; void init() { memset(addv, 0, sizeof addv); fill(setv, setv + M, RS); memset(minv, 0, sizeof minv); memset(maxv, 0, sizeof maxv); memset(sumv, 0, sizeof sumv); } void maintain(LL o, LL l, LL r) { if (l < r) { LL lc = o * 2, rc = o * 2 + 1; sumv[o] = sumv[lc] + sumv[rc]; minv[o] = min(minv[lc], minv[rc]); maxv[o] = max(maxv[lc], maxv[rc]); } else sumv[o] = minv[o] = maxv[o] = 0; if (setv[o] != RS) { minv[o] = maxv[o] = setv[o]; sumv[o] = setv[o] * (r - l + 1); } if (addv[o]) { minv[o] += addv[o]; maxv[o] += addv[o]; sumv[o] += addv[o] * (r - l + 1); } } void build(LL o, LL l, LL r) { if (l == r) addv[o] = a[l]; else { LL m = (l + r) / 2; build(ls); build(rs); } maintain(o, l, r); } void pushdown(LL o) { LL lc = o * 2, rc = o * 2 + 1; if (setv[o] != RS) { setv[lc] = setv[rc] = setv[o]; addv[lc] = addv[rc] = 0; setv[o] = RS; } if (addv[o]) { addv[lc] += addv[o]; addv[rc] += addv[o]; addv[o] = 0; } } void update(LL p, LL q, LL o, LL l, LL r, LL v, LL op) { if (p <= r && l <= q) if (p <= l && r <= q) { if (op == 2) { setv[o] = v; addv[o] = 0; } else addv[o] += v; } else { pushdown(o); LL m = (l + r) / 2; update(p, q, ls, v, op); update(p, q, rs, v, op); } maintain(o, l, r); } void query(LL p, LL q, LL o, LL l, LL r, LL add, LL& ssum, LL& smin, LL& smax) { if (p > r || l > q) return; if (setv[o] != RS) { LL v = setv[o] + add + addv[o]; ssum += v * (min(r, q) - max(l, p) + 1); smin = min(smin, v); smax = max(smax, v); } else if (p <= l && r <= q) { ssum += sumv[o] + add * (r - l + 1); smin = min(smin, minv[o] + add); smax = max(smax, maxv[o] + add); } else { LL m = (l + r) / 2; query(p, q, ls, add + addv[o], ssum, smin, smax); query(p, q, rs, add + addv[o], ssum, smin, smax); } } } IT; \u5747\u644a\u590d\u6742\u5ea6\u7ebf\u6bb5\u6811 \u533a\u95f4\u53d6 min\uff0c\u533a\u95f4\u6c42\u548c\u3002 namespace R { #define lson o * 2, l, (l + r) / 2 #define rson o * 2 + 1, (l + r) / 2 + 1, r int m1[N], m2[N], cm1[N]; LL sum[N]; void up(int o) { int lc = o * 2, rc = lc + 1; m1[o] = max(m1[lc], m1[rc]); sum[o] = sum[lc] + sum[rc]; if (m1[lc] == m1[rc]) { cm1[o] = cm1[lc] + cm1[rc]; m2[o] = max(m2[lc], m2[rc]); } else { cm1[o] = m1[lc] > m1[rc] ? cm1[lc] : cm1[rc]; m2[o] = max(min(m1[lc], m1[rc]), max(m2[lc], m2[rc])); } } void mod(int o, int x) { if (x >= m1[o]) return; assert(x > m2[o]); sum[o] -= 1LL * (m1[o] - x) * cm1[o]; m1[o] = x; } void down(int o) { int lc = o * 2, rc = lc + 1; mod(lc, m1[o]); mod(rc, m1[o]); } void build(int o, int l, int r) { if (l == r) { int t; read(t); sum[o] = m1[o] = t; m2[o] = -INF; cm1[o] = 1; } else { build(lson); build(rson); up(o); } } void update(int ql, int qr, int x, int o, int l, int r) { if (r < ql || qr < l || m1[o] <= x) return; if (ql <= l && r <= qr && m2[o] < x) { mod(o, x); return; } down(o); update(ql, qr, x, lson); update(ql, qr, x, rson); up(o); } int qmax(int ql, int qr, int o, int l, int r) { if (r < ql || qr < l) return -INF; if (ql <= l && r <= qr) return m1[o]; down(o); return max(qmax(ql, qr, lson), qmax(ql, qr, rson)); } LL qsum(int ql, int qr, int o, int l, int r) { if (r < ql || qr < l) return 0; if (ql <= l && r <= qr) return sum[o]; down(o); return qsum(ql, qr, lson) + qsum(ql, qr, rson); } } \u6301\u4e45\u5316\u7ebf\u6bb5\u6811 ADD namespace tree { #define mid ((l + r) >> 1) #define lson ql, qr, l, mid #define rson ql, qr, mid + 1, r struct P { LL add, sum; int ls, rs; } tr[maxn * 45 * 2]; int sz = 1; int N(LL add, int l, int r, int ls, int rs) { tr[sz] = {add, tr[ls].sum + tr[rs].sum + add * (len[r] - len[l - 1]), ls, rs}; return sz++; } int update(int o, int ql, int qr, int l, int r, LL add) { if (ql > r || l > qr) return o; const P& t = tr[o]; if (ql <= l && r <= qr) return N(add + t.add, l, r, t.ls, t.rs); return N(t.add, l, r, update(t.ls, lson, add), update(t.rs, rson, add)); } LL query(int o, int ql, int qr, int l, int r, LL add = 0) { if (ql > r || l > qr) return 0; const P& t = tr[o]; if (ql <= l && r <= qr) return add * (len[r] - len[l - 1]) + t.sum; return query(t.ls, lson, add + t.add) + query(t.rs, rson, add + t.add); } } K-D Tree \u6700\u4f18\u5316\u95ee\u9898\u4e00\u5b9a\u8981\u7528\u5168\u5c40\u53d8\u91cf\u5927\u529b\u526a\u679d\uff0c\u800c\u4e14\u5de6\u53f3\u513f\u5b50\u5148\u9012\u5f52\u6f5c\u529b\u5927\u7684 \u7ef4\u62a4\u4fe1\u606f \u5e26\u91cd\u6784\uff08\u9002\u5408\u5728\u7ebf\uff09 \u63d2\u5165\u65f6\u5de6\u53f3\u513f\u5b50\u8981\u6807\u8bb0\u4e3a null \u3002 namespace kd { const int K = 2, inf = 1E9, M = N; const double lim = 0.7; struct P { int d[K], l[K], r[K], sz, val; LL sum; P *ls, *rs; P* up() { sz = ls->sz + rs->sz + 1; sum = ls->sum + rs->sum + val; FOR (i, 0, K) { l[i] = min(d[i], min(ls->l[i], rs->l[i])); r[i] = max(d[i], max(ls->r[i], rs->r[i])); } return this; } } pool[M], *null = new P, *pit = pool; static P *tmp[M], **pt; void init() { null->ls = null->rs = null; FOR (i, 0, K) null->l[i] = inf, null->r[i] = -inf; null->sum = null->val = 0; null->sz = 0; } P* build(P** l, P** r, int d = 0) { // [l, r) if (d == K) d = 0; if (l >= r) return null; P** m = l + (r - l) / 2; assert(l <= m && m < r); nth_element(l, m, r, [&](const P* a, const P* b){ return a->d[d] < b->d[d]; }); P* o = *m; o->ls = build(l, m, d + 1); o->rs = build(m + 1, r, d + 1); return o->up(); } P* Build() { pt = tmp; FOR (it, pool, pit) *pt++ = it; return build(tmp, pt); } inline bool inside(int p[], int q[], int l[], int r[]) { FOR (i, 0, K) if (r[i] < q[i] || p[i] < l[i]) return false; return true; } LL query(P* o, int l[], int r[]) { if (o == null) return 0; FOR (i, 0, K) if (o->r[i] < l[i] || r[i] < o->l[i]) return 0; if (inside(o->l, o->r, l, r)) return o->sum; return query(o->ls, l, r) + query(o->rs, l, r) + (inside(o->d, o->d, l, r) ? o->val : 0); } void dfs(P* o) { if (o == null) return; *pt++ = o; dfs(o->ls); dfs(o->rs); } P* ins(P* o, P* x, int d = 0) { if (d == K) d = 0; if (o == null) return x->up(); P*& oo = x->d[d] <= o->d[d] ? o->ls : o->rs; if (oo->sz > o->sz * lim) { pt = tmp; dfs(o); *pt++ = x; return build(tmp, pt, d); } oo = ins(oo, x, d + 1); return o->up(); } } \u7ef4\u62a4\u4fe1\u606f \u5e26\u4fee\u6539\uff08\u9002\u5408\u79bb\u7ebf\uff09 namespace kd { const int K = 3, inf = 1E9, M = N << 3; extern struct P* null; struct P { int d[K], l[K], r[K], val; int Max; P *ls, *rs, *fa; P* up() { Max = max(val, max(ls->Max, rs->Max)); FOR (i, 0, K) { l[i] = min(d[i], min(ls->l[i], rs->l[i])); r[i] = max(d[i], max(ls->r[i], rs->r[i])); } return ls->fa = rs->fa = this; } } pool[M], *null = new P, *pit = pool; void upd(P* o, int val) { o->val = val; for (; o != null; o = o->fa) o->Max = max(o->Max, val); } static P *tmp[M], **pt; void init() { null->ls = null->rs = null; FOR (i, 0, K) null->l[i] = inf, null->r[i] = -inf; null->Max = null->val = 0; } P* build(P** l, P** r, int d = 0) { // [l, r) if (d == K) d = 0; if (l >= r) return null; P** m = l + (r - l) / 2; assert(l <= m && m < r); nth_element(l, m, r, [&](const P* a, const P* b){ return a->d[d] < b->d[d]; }); P* o = *m; o->ls = build(l, m, d + 1); o->rs = build(m + 1, r, d + 1); return o->up(); } P* Build() { pt = tmp; FOR (it, pool, pit) *pt++ = it; P* ret = build(tmp, pt); ret->fa = null; return ret; } inline bool inside(int p[], int q[], int l[], int r[]) { FOR (i, 0, K) if (r[i] < q[i] || p[i] < l[i]) return false; return true; } int query(P* o, int l[], int r[]) { if (o == null) return 0; FOR (i, 0, K) if (o->r[i] < l[i] || r[i] < o->l[i]) return 0; if (inside(o->l, o->r, l, r)) return o->Max; int ret = 0; if (o->val > ret && inside(o->d, o->d, l, r)) ret = max(ret, o->val); if (o->ls->Max > ret) ret = max(ret, query(o->ls, l, r)); if (o->rs->Max > ret) ret = max(ret, query(o->rs, l, r)); return ret; } } \u6700\u8fd1\u70b9\u5bf9 \u8981\u7528\u5168\u5c40\u53d8\u91cf\u5927\u529b\u526a\u679d namespace kd { const int K = 3; const int M = N; const int inf = 1E9 + 100; struct P { int d[K]; int l[K], r[K]; P *ls, *rs; P* up() { FOR (i, 0, K) { l[i] = min(d[i], min(ls->l[i], rs->l[i])); r[i] = max(d[i], max(ls->r[i], rs->r[i])); } return this; } } pool[M], *null = new P, *pit = pool; static P *tmp[M], **pt; void init() { null->ls = null->rs = null; FOR (i, 0, K) null->l[i] = inf, null->r[i] = -inf; } P* build(P** l, P** r, int d = 0) { // [l, r) if (d == K) d = 0; if (l >= r) return null; P** m = l + (r - l) / 2; nth_element(l, m, r, [&](const P* a, const P* b){ return a->d[d] < b->d[d]; }); P* o = *m; o->ls = build(l, m, d + 1); o->rs = build(m + 1, r, d + 1); return o->up(); } LL eval(P* o, int d[]) { // ... } LL dist(int d1[], int d2[]) { // ... } LL S; LL query(P* o, int d[]) { if (o == null) return 0; S = max(S, dist(o->d, d)); LL mdl = eval(o->ls, d), mdr = eval(o->rs, d); if (mdl < mdr) { if (S > mdl) S = max(S, query(o->ls, d)); if (S > mdr) S = max(S, query(o->rs, d)); } else { if (S > mdr) S = max(S, query(o->rs, d)); if (S > mdl) S = max(S, query(o->ls, d)); } return S; } P* Build() { pt = tmp; FOR (it, pool, pit) *pt++ = it; return build(tmp, pt); } } \u6811\u72b6\u6570\u7ec4 \u6ce8\u610f\uff1a0 \u662f\u65e0\u6548\u4e0b\u6807 namespace bit { LL c[M]; inline int lowbit(int x) { return x & -x; } void add(int x, LL v) { for (int i = x; i < M; i += lowbit(i)) c[i] += v; } LL sum(int x) { LL ret = 0; for (int i = x; i > 0; i -= lowbit(i)) ret += c[i]; return ret; } int kth(LL k) { int p = 0; for (int lim = 1 << 20; lim; lim /= 2) if (p + lim < M && c[p + lim] < k) { p += lim; k -= c[p]; } return p + 1; } LL sum(int l, int r) { return sum(r) - sum(l - 1); } void add(int l, int r, LL v) { add(l, v); add(r + 1, -v); } } \u533a\u95f4\u4fee\u6539 & \u533a\u95f4\u67e5\u8be2\uff08\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u524d\u7f00\u548c\u7684\u524d\u7f00\u548c\uff09 namespace bit { int c[maxn], cc[maxn]; inline int lowbit(int x) { return x & -x; } void add(int x, int v) { for (int i = x; i <= n; i += lowbit(i)) { c[i] += v; cc[i] += x * v; } } void add(int l, int r, int v) { add(l, v); add(r + 1, -v); } int sum(int x) { int ret = 0; for (int i = x; i > 0; i -= lowbit(i)) ret += (x + 1) * c[i] - cc[i]; return ret; } int sum(int l, int r) { return sum(r) - sum(l - 1); } } \u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u524d\u7f00\u548c\u7684\u524d\u7f00\u548c\u7684\u524d\u7f00\u548c\uff08\u6709\u7528\u624d\u602a\uff09 namespace bit { LL c[N], cc[N], ccc[N]; inline LL lowbit(LL x) { return x & -x; } void add(LL x, LL v) { for (LL i = x; i < N; i += lowbit(i)) { c[i] = (c[i] + v) % MOD; cc[i] = (cc[i] + x * v) % MOD; ccc[i] = (ccc[i] + x * x % MOD * v) % MOD; } } void add(LL l, LL r, LL v) { add(l, v); add(r + 1, -v); } LL sum(LL x) { static LL INV2 = (MOD + 1) / 2; LL ret = 0; for (LL i = x; i > 0; i -= lowbit(i)) ret += (x + 1) * (x + 2) % MOD * c[i] % MOD - (2 * x + 3) * cc[i] % MOD + ccc[i]; return ret % MOD * INV2 % MOD; } LL sum(LL l, LL r) { return sum(r) - sum(l - 1); } } \u4e09\u7ef4 inline int lowbit(int x) { return x & -x; } void update(int x, int y, int z, int d) { for (int i = x; i <= n; i += lowbit(i)) for (int j = y; j <= n; j += lowbit(j)) for (int k = z; k <= n; k += lowbit(k)) c[i][j][k] += d; } LL query(int x, int y, int z) { LL ret = 0; for (int i = x; i > 0; i -= lowbit(i)) for (int j = y; j > 0; j -= lowbit(j)) for (int k = z; k > 0; k -= lowbit(k)) ret += c[i][j][k]; return ret; } LL solve(int x, int y, int z, int xx, int yy, int zz) { return query(xx, yy, zz) - query(xx, yy, z - 1) - query(xx, y - 1, zz) - query(x - 1, yy, zz) + query(xx, y - 1, z - 1) + query(x - 1, yy, z - 1) + query(x - 1, y - 1, zz) - query(x - 1, y - 1, z - 1); \u4e3b\u5e2d\u6811 \u6b63\u5e38\u4e3b\u5e2d\u6811 namespace tree { #define mid ((l + r) >> 1) #define lson l, mid #define rson mid + 1, r const int MAGIC = M * 30; struct P { int sum, ls, rs; } tr[MAGIC] = {{0, 0, 0}}; int sz = 1; int N(int sum, int ls, int rs) { if (sz == MAGIC) assert(0); tr[sz] = {sum, ls, rs}; return sz++; } int ins(int o, int x, int v, int l = 1, int r = ls) { if (x < l || x > r) return o; const P& t = tr[o]; if (l == r) return N(t.sum + v, 0, 0); return N(t.sum + v, ins(t.ls, x, v, lson), ins(t.rs, x, v, rson)); } int query(int o, int ql, int qr, int l = 1, int r = ls) { if (ql > r || l > qr) return 0; const P& t = tr[o]; if (ql <= l && r <= qr) return t.sum; return query(t.ls, ql, qr, lson) + query(t.rs, ql, qr, rson); } } \u7b2c k \u5927 struct TREE { #define mid ((l + r) >> 1) #define lson l, mid #define rson mid + 1, r struct P { int w, ls, rs; } tr[maxn * 20]; int sz = 1; TREE() { tr[0] = {0, 0, 0}; } int N(int w, int ls, int rs) { tr[sz] = {w, ls, rs}; return sz++; } int ins(int tt, int l, int r, int x) { if (x < l || r < x) return tt; const P& t = tr[tt]; if (l == r) return N(t.w + 1, 0, 0); return N(t.w + 1, ins(t.ls, lson, x), ins(t.rs, rson, x)); } int query(int pp, int qq, int l, int r, int k) { // (pp, qq] if (l == r) return l; const P &p = tr[pp], &q = tr[qq]; int w = tr[q.ls].w - tr[p.ls].w; if (k <= w) return query(p.ls, q.ls, lson, k); else return query(p.rs, q.rs, rson, k - w); } } tree; \u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811 typedef vector<int> VI; struct TREE { #define mid ((l + r) >> 1) #define lson l, mid #define rson mid + 1, r struct P { int w, ls, rs; } tr[maxn * 20 * 20]; int sz = 1; TREE() { tr[0] = {0, 0, 0}; } int N(int w, int ls, int rs) { tr[sz] = {w, ls, rs}; return sz++; } int add(int tt, int l, int r, int x, int d) { if (x < l || r < x) return tt; const P& t = tr[tt]; if (l == r) return N(t.w + d, 0, 0); return N(t.w + d, add(t.ls, lson, x, d), add(t.rs, rson, x, d)); } int ls_sum(const VI& rt) { int ret = 0; FOR (i, 0, rt.size()) ret += tr[tr[rt[i]].ls].w; return ret; } inline void ls(VI& rt) { transform(rt.begin(), rt.end(), rt.begin(), [&](int x)->int{ return tr[x].ls; }); } inline void rs(VI& rt) { transform(rt.begin(), rt.end(), rt.begin(), [&](int x)->int{ return tr[x].rs; }); } int query(VI& p, VI& q, int l, int r, int k) { if (l == r) return l; int w = ls_sum(q) - ls_sum(p); if (k <= w) { ls(p); ls(q); return query(p, q, lson, k); } else { rs(p); rs(q); return query(p, q, rson, k - w); } } } tree; struct BIT { int root[maxn]; void init() { memset(root, 0, sizeof root); } inline int lowbit(int x) { return x & -x; } void update(int p, int x, int d) { for (int i = p; i <= m; i += lowbit(i)) root[i] = tree.add(root[i], 1, m, x, d); } int query(int l, int r, int k) { VI p, q; for (int i = l - 1; i > 0; i -= lowbit(i)) p.push_back(root[i]); for (int i = r; i > 0; i -= lowbit(i)) q.push_back(root[i]); return tree.query(p, q, 1, m, k); } } bit; void init() { m = 10000; tree.sz = 1; bit.init(); FOR (i, 1, m + 1) bit.update(i, a[i], 1); } \u5de6\u504f\u6811 namespace LTree { extern struct P* null, *pit; queue<P*> trash; const int M = 1E5 + 100; struct P { P *ls, *rs; LL v; int d; void operator delete (void* ptr) { trash.push((P*)ptr); } void* operator new(size_t size) { if (trash.empty()) return pit++; void* ret = trash.front(); trash.pop(); return ret; } void prt() { if (this == null) return; cout << v << ' '; ls->prt(); rs->prt(); } } pool[M], *pit = pool, *null = new P{0, 0, -1, -1}; P* N(LL v) { return new P{null, null, v, 0}; } P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (a->v > b->v) swap(a, b); a->rs = merge(a->rs, b); if (a->ls->d < a->rs->d) swap(a->ls, a->rs); a->d = a->rs->d + 1; return a; } LL pop(P*& o) { LL ret = o->v; P* t = o; o = merge(o->ls, o->rs); delete t; return ret; } } \u53ef\u6301\u4e45\u5316 namespace LTree { extern struct P* null, *pit; queue<P*> trash; const int M = 1E6 + 100; struct P { P *ls, *rs; LL v; int d; void operator delete (void* ptr) { trash.push((P*)ptr); } void* operator new(size_t size) { if (trash.empty()) return pit++; void* ret = trash.front(); trash.pop(); return ret; } } pool[M], *pit = pool, *null = new P{0, 0, -1, -1}; P* N(LL v, P* ls = null, P* rs = null) { if (ls->d < rs->d) swap(ls, rs); return new P{ls, rs, v, rs->d + 1}; } P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (a->v < b->v) return N(a->v, a->ls, merge(a->rs, b)); else return N(b->v, b->ls, merge(b->rs, a)); } LL pop(P*& o) { LL ret = o->v; o = merge(o->ls, o->rs); return ret; } } Treap \u975e\u65cb Treap v \u5c0f\u6839\u5806 \u6a21\u677f\u9898 bzoj 3224 lower \u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u7684\u662f\u7b2c\u51e0\u4e2a (0-based) upper \u7b2c\u4e00\u4e2a\u5927\u4e8e\u7684\u662f\u7b2c\u51e0\u4e2a (0-based) split \u5de6\u4fa7\u5206\u5272\u51fa rk \u4e2a\u5143\u7d20 \u6811\u5957\u6811 \u7565 namespace treap { const int M = maxn * 17; extern struct P* const null; struct P { P *ls, *rs; int v, sz; unsigned rd; P(int v): ls(null), rs(null), v(v), sz(1), rd(rnd()) {} P(): sz(0) {} P* up() { sz = ls->sz + rs->sz + 1; return this; } int lower(int v) { if (this == null) return 0; return this->v >= v ? ls->lower(v) : rs->lower(v) + ls->sz + 1; } int upper(int v) { if (this == null) return 0; return this->v > v ? ls->upper(v) : rs->upper(v) + ls->sz + 1; } } *const null = new P, pool[M], *pit = pool; P* merge(P* l, P* r) { if (l == null) return r; if (r == null) return l; if (l->rd < r->rd) { l->rs = merge(l->rs, r); return l->up(); } else { r->ls = merge(l, r->ls); return r->up(); } } void split(P* o, int rk, P*& l, P*& r) { if (o == null) { l = r = null; return; } if (o->ls->sz >= rk) { split(o->ls, rk, l, o->ls); r = o->up(); } else { split(o->rs, rk - o->ls->sz - 1, o->rs, r); l = o->up(); } } } \u6301\u4e45\u5316 Treap namespace treap { const int M = maxn * 17 * 12; extern struct P* const null, *pit; struct P { P *ls, *rs; int v, sz; LL sum; P(P* ls, P* rs, int v): ls(ls), rs(rs), v(v), sz(ls->sz + rs->sz + 1), sum(ls->sum + rs->sum + v) {} P() {} void* operator new(size_t _) { return pit++; } template<typename T> int rk(int v, T&& cmp) { if (this == null) return 0; return cmp(this->v, v) ? ls->rk(v, cmp) : rs->rk(v, cmp) + ls->sz + 1; } int lower(int v) { return rk(v, greater_equal<int>()); } int upper(int v) { return rk(v, greater<int>()); } } pool[M], *pit = pool, *const null = new P; P* merge(P* l, P* r) { if (l == null) return r; if (r == null) return l; if (rnd() % (l->sz + r->sz) < l->sz) return new P{l->ls, merge(l->rs, r), l->v}; else return new P{merge(l, r->ls), r->rs, r->v}; } void split(P* o, int rk, P*& l, P*& r) { if (o == null) { l = r = null; return; } if (o->ls->sz >= rk) { split(o->ls, rk, l, r); r = new P{r, o->rs, o->v}; } else { split(o->rs, rk - o->ls->sz - 1, l, r); l = new P{o->ls, l, o->v}; } } } \u5e26 pushdown \u7684\u6301\u4e45\u5316 Treap \u6ce8\u610f\u4efb\u4f55\u4fee\u6539\u64cd\u4f5c\u524d\u4e00\u5b9a\u8981 FIX int now; namespace Treap { const int M = 10000000; extern struct P* const null, *pit; struct P { P *ls, *rs; int sz, time; LL cnt, sc, pos, add; bool rev; P* up() { sz = ls->sz + rs->sz + 1; sc = ls->sc + rs->sc + cnt; return this; } // MOD P* check() { if (time == now) return this; P* t = new(pit++) P; *t = *this; t->time = now; return t; }; P* _do_rev() { rev ^= 1; add *= -1; pos *= -1; swap(ls, rs); return this; } // MOD P* _do_add(LL v) { add += v; pos += v; return this; } // MOD P* do_rev() { if (this == null) return this; return check()->_do_rev(); } // FIX & MOD P* do_add(LL v) { if (this == null) return this; return check()->_do_add(v); } // FIX & MOD P* _down() { // MOD if (rev) { ls = ls->do_rev(); rs = rs->do_rev(); rev = 0; } if (add) { ls = ls->do_add(add); rs = rs->do_add(add); add = 0; } return this; } P* down() { return check()->_down(); } // FIX & MOD void _split(LL p, P*& l, P*& r) { // MOD if (pos >= p) { ls->split(p, l, r); ls = r; r = up(); } else { rs->split(p, l, r); rs = l; l = up(); } } void split(LL p, P*& l, P*& r) { // FIX & MOD if (this == null) l = r = null; else down()->_split(p, l, r); } } pool[M], *pit = pool, *const null = new P; P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (rand() % (a->sz + b->sz) < a->sz) { a = a->down(); a->rs = merge(a->rs, b); return a->up(); } else { b = b->down(); b->ls = merge(a, b->ls); return b->up(); } } } Treap-\u5e8f\u5217 \u533a\u95f4 ADD\uff0cSUM namespace treap { const int M = 8E5 + 100; extern struct P*const null; struct P { P *ls, *rs; int sz, val, add, sum; P(int v, P* ls = null, P* rs = null): ls(ls), rs(rs), sz(1), val(v), add(0), sum(v) {} P(): sz(0), val(0), add(0), sum(0) {} P* up() { assert(this != null); sz = ls->sz + rs->sz + 1; sum = ls->sum + rs->sum + val + add * sz; return this; } void upd(int v) { if (this == null) return; add += v; sum += sz * v; } P* down() { if (add) { ls->upd(add); rs->upd(add); val += add; add = 0; } return this; } P* select(int rk) { if (rk == ls->sz + 1) return this; return ls->sz >= rk ? ls->select(rk) : rs->select(rk - ls->sz - 1); } } pool[M], *pit = pool, *const null = new P, *rt = null; P* merge(P* a, P* b) { if (a == null) return b->up(); if (b == null) return a->up(); if (rand() % (a->sz + b->sz) < a->sz) { a->down()->rs = merge(a->rs, b); return a->up(); } else { b->down()->ls = merge(a, b->ls); return b->up(); } } void split(P* o, int rk, P*& l, P*& r) { if (o == null) { l = r = null; return; } o->down(); if (o->ls->sz >= rk) { split(o->ls, rk, l, o->ls); r = o->up(); } else { split(o->rs, rk - o->ls->sz - 1, o->rs, r); l = o->up(); } } inline void insert(int k, int v) { P *l, *r; split(rt, k - 1, l, r); rt = merge(merge(l, new (pit++) P(v)), r); } inline void erase(int k) { P *l, *r, *_, *t; split(rt, k - 1, l, t); split(t, 1, _, r); rt = merge(l, r); } P* build(int l, int r, int* a) { if (l > r) return null; if (l == r) return new(pit++) P(a[l]); int m = (l + r) / 2; return (new(pit++) P(a[m], build(l, m - 1, a), build(m + 1, r, a)))->up(); } }; \u533a\u95f4 REVERSE\uff0cADD\uff0cMIN namespace treap { extern struct P*const null; struct P { P *ls, *rs; int sz, v, add, m; bool flip; P(int v, P* ls = null, P* rs = null): ls(ls), rs(rs), sz(1), v(v), add(0), m(v), flip(0) {} P(): sz(0), v(INF), m(INF) {} void upd(int v) { if (this == null) return; add += v; m += v; } void rev() { if (this == null) return; swap(ls, rs); flip ^= 1; } P* up() { assert(this != null); sz = ls->sz + rs->sz + 1; m = min(min(ls->m, rs->m), v) + add; return this; } P* down() { if (add) { ls->upd(add); rs->upd(add); v += add; add = 0; } if (flip) { ls->rev(); rs->rev(); flip = 0; } return this; } P* select(int k) { if (ls->sz + 1 == k) return this; if (ls->sz >= k) return ls->select(k); return rs->select(k - ls->sz - 1); } } pool[M], *const null = new P, *pit = pool, *rt = null; P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (rnd() % (a->sz + b->sz) < a->sz) { a->down()->rs = merge(a->rs, b); return a->up(); } else { b->down()->ls = merge(a, b->ls); return b->up(); } } void split(P* o, int k, P*& l, P*& r) { if (o == null) { l = r = null; return; } o->down(); if (o->ls->sz >= k) { split(o->ls, k, l, o->ls); r = o->up(); } else { split(o->rs, k - o->ls->sz - 1, o->rs, r); l = o->up(); } } P* build(int l, int r, int* v) { if (l > r) return null; int m = (l + r) >> 1; return (new (pit++) P(v[m], build(l, m - 1, v), build(m + 1, r, v)))->up(); } void go(int x, int y, void f(P*&)) { P *l, *m, *r; split(rt, y, l, r); split(l, x - 1, l, m); f(m); rt = merge(merge(l, m), r); } } using namespace treap; int a[maxn], n, x, y, Q, v, k, d; char s[100]; int main() { cin >> n; FOR (i, 1, n + 1) scanf(\"%d\", &a[i]); rt = build(1, n, a); cin >> Q; while (Q--) { scanf(\"%s\", s); if (s[0] == 'A') { scanf(\"%d%d%d\", &x, &y, &v); go(x, y, [](P*& o){ o->upd(v); }); } else if (s[0] == 'R' && s[3] == 'E') { scanf(\"%d%d\", &x, &y); go(x, y, [](P*& o){ o->rev(); }); } else if (s[0] == 'R' && s[3] == 'O') { scanf(\"%d%d%d\", &x, &y, &d); d %= y - x + 1; go(x, y, [](P*& o){ P *l, *r; split(o, o->sz - d, l, r); o = merge(r, l); }); } else if (s[0] == 'I') { scanf(\"%d%d\", &k, &v); go(k + 1, k, [](P*& o){ o = new (pit++) P(v); }); } else if (s[0] == 'D') { scanf(\"%d\", &k); go(k, k, [](P*& o){ o = null; }); } else if (s[0] == 'M') { scanf(\"%d%d\", &x, &y); go(x, y, [](P*& o) { printf(\"%d\\n\", o->m); }); } } } \u6301\u4e45\u5316 namespace treap { struct P; extern P*const null; P* N(P* ls, P* rs, LL v, bool fill); struct P { P *const ls, *const rs; const int sz, v; const LL sum; bool fill; int cnt; void split(int k, P*& l, P*& r) { if (this == null) { l = r = null; return; } if (ls->sz >= k) { ls->split(k, l, r); r = N(r, rs, v, fill); } else { rs->split(k - ls->sz - fill, l, r); l = N(ls, l, v, fill); } } } *const null = new P{0, 0, 0, 0, 0, 0, 1}; P* N(P* ls, P* rs, LL v, bool fill) { ls->cnt++; rs->cnt++; return new P{ls, rs, ls->sz + rs->sz + fill, v, ls->sum + rs->sum + v, fill, 1}; } P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (rand() % (a->sz + b->sz) < a->sz) return N(a->ls, merge(a->rs, b), a->v, a->fill); else return N(merge(a, b->ls), b->rs, b->v, b->fill); } void go(P* o, int x, int y, P*& l, P*& m, P*& r) { o->split(y, l, r); l->split(x - 1, l, m); } } \u53ef\u56de\u6eda\u5e76\u67e5\u96c6 \u6ce8\u610f\u8fd9\u4e2a\u4e0d\u662f\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6 \u67e5\u627e\u65f6\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29 \u590d\u6742\u5ea6\u9760\u6309\u79e9\u5408\u5e76\u89e3\u51b3 namespace uf { int fa[maxn], sz[maxn]; int undo[maxn], top; void init() { memset(fa, -1, sizeof fa); memset(sz, 0, sizeof sz); top = 0; } int findset(int x) { while (fa[x] != -1) x = fa[x]; return x; } bool join(int x, int y) { x = findset(x); y = findset(y); if (x == y) return false; if (sz[x] > sz[y]) swap(x, y); undo[top++] = x; fa[x] = y; sz[y] += sz[x] + 1; return true; } inline int checkpoint() { return top; } void rewind(int t) { while (top > t) { int x = undo[--top]; sz[fa[x]] -= sz[x] + 1; fa[x] = -1; } } } \u821e\u8e48\u94fe \u6ce8\u610f link \u7684 y \u7684\u8303\u56f4\u662f [1, n] \u6ce8\u610f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u66ff\u6362\u6389 memset \u7cbe\u786e\u8986\u76d6 struct P { P *L, *R, *U, *D; int x, y; }; const int INF = 1E9; struct DLX { #define TR(i, D, s) for (P* i = s->D; i != s; i = i->D) static const int M = 2E5; P pool[M], *h[M], *r[M], *pit; int sz[M]; bool solved; stack<int> ans; void init(int n) { pit = pool; ++n; solved = false; while (!ans.empty()) ans.pop(); memset(r, 0, sizeof r); memset(sz, 0, sizeof sz); FOR (i, 0, n) h[i] = new (pit++) P; FOR (i, 0, n) { h[i]->L = h[(i + n - 1) % n]; h[i]->R = h[(i + 1) % n]; h[i]->U = h[i]->D = h[i]; h[i]->y = i; } } void link(int x, int y) { sz[y]++; auto p = new (pit++) P; p->x = x; p->y = y; p->U = h[y]->U; p->D = h[y]; p->D->U = p->U->D = p; if (!r[x]) r[x] = p->L = p->R = p; else { p->L = r[x]; p->R = r[x]->R; p->L->R = p->R->L = p; } } void remove(P* p) { p->L->R = p->R; p->R->L = p->L; TR (i, D, p) TR (j, R, i) { j->D->U = j->U; j->U->D = j->D; sz[j->y]--; } } void recall(P* p) { p->L->R = p->R->L = p; TR (i, U, p) TR (j, L, i) { j->D->U = j->U->D = j; sz[j->y]++; } } bool dfs(int d) { if (solved) return true; if (h[0]->R == h[0]) return solved = true; int m = INF; P* c; TR (i, R, h[0]) if (sz[i->y] < m) { m = sz[i->y]; c = i; } remove(c); TR (i, D, c) { ans.push(i->x); TR (j, R, i) remove(h[j->y]); if (dfs(d + 1)) return true; TR (j, L, i) recall(h[j->y]); ans.pop(); } recall(c); return false; } } dlx; \u53ef\u91cd\u590d\u8986\u76d6 struct P { P *L, *R, *U, *D; int x, y; }; const int INF = 1E9; struct DLX { #define TR(i, D, s) for (P* i = s->D; i != s; i = i->D) static const int M = 2E5; P pool[M], *h[M], *r[M], *pit; int sz[M], vis[M], ans, clk; void init(int n) { clk = 0; ans = INF; pit = pool; ++n; memset(r, 0, sizeof r); memset(sz, 0, sizeof sz); memset(vis, -1, sizeof vis); FOR (i, 0, n) h[i] = new (pit++) P; FOR (i, 0, n) { h[i]->L = h[(i + n - 1) % n]; h[i]->R = h[(i + 1) % n]; h[i]->U = h[i]->D = h[i]; h[i]->y = i; } } void link(int x, int y) { sz[y]++; auto p = new (pit++) P; p->x = x; p->y = y; p->U = h[y]->U; p->D = h[y]; p->D->U = p->U->D = p; if (!r[x]) r[x] = p->L = p->R = p; else { p->L = r[x]; p->R = r[x]->R; p->L->R = p->R->L = p; } } void remove(P* p) { TR (i, D, p) { i->L->R = i->R; i->R->L = i->L; } } void recall(P* p) { TR (i, U, p) i->L->R = i->R->L = i; } int eval() { ++clk; int ret = 0; TR (i, R, h[0]) if (vis[i->y] != clk) { ++ret; vis[i->y] = clk; TR (j, D, i) TR (k, R, j) vis[k->y] = clk; } return ret; } void dfs(int d) { if (h[0]->R == h[0]) { ans = min(ans, d); return; } if (eval() + d >= ans) return; P* c; int m = INF; TR (i, R, h[0]) if (sz[i->y] < m) { m = sz[i->y]; c = i; } TR (i, D, c) { remove(i); TR (j, R, i) remove(j); dfs(d + 1); TR (j, L, i) recall(j); recall(i); } } } dlx; CDQ \u5206\u6cbb const int maxn = 2E5 + 100; struct P { int x, y; int* f; bool d1, d2; } a[maxn], b[maxn], c[maxn]; int f[maxn]; void go2(int l, int r) { if (l + 1 == r) return; int m = (l + r) >> 1; go2(l, m); go2(m, r); FOR (i, l, m) b[i].d2 = 0; FOR (i, m, r) b[i].d2 = 1; merge(b + l, b + m, b + m, b + r, c + l, [](const P& a, const P& b)->bool { if (a.y != b.y) return a.y < b.y; return a.d2 > b.d2; }); int mx = -1; FOR (i, l, r) { if (c[i].d1 && c[i].d2) *c[i].f = max(*c[i].f, mx + 1); if (!c[i].d1 && !c[i].d2) mx = max(mx, *c[i].f); } FOR (i, l, r) b[i] = c[i]; } void go1(int l, int r) { // [l, r) if (l + 1 == r) return; int m = (l + r) >> 1; go1(l, m); FOR (i, l, m) a[i].d1 = 0; FOR (i, m, r) a[i].d1 = 1; copy(a + l, a + r, b + l); sort(b + l, b + r, [](const P& a, const P& b)->bool { if (a.x != b.x) return a.x < b.x; return a.d1 > b.d1; }); go2(l, r); go1(m, r); } k \u7ef4 LIS struct P { int v[K]; LL f; bool d[K]; } o[N << 10]; P* a[K][N << 10]; int k; void go(int now, int l, int r) { if (now == 0) { if (l + 1 == r) return; int m = (l + r) / 2; go(now, l, m); FOR (i, l, m) a[now][i]->d[now] = 0; FOR (i, m, r) a[now][i]->d[now] = 1; copy(a[now] + l, a[now] + r, a[now + 1] + l); sort(a[now + 1] + l, a[now + 1] + r, [now](const P* a, const P* b){ if (a->v[now] != b->v[now]) return a->v[now] < b->v[now]; return a->d[now] > b->d[now]; }); go(now + 1, l, r); go(now, m, r); } else { if (l + 1 == r) return; int m = (l + r) / 2; go(now, l, m); go(now, m, r); FOR (i, l, m) a[now][i]->d[now] = 0; FOR (i, m, r) a[now][i]->d[now] = 1; merge(a[now] + l, a[now] + m, a[now] + m, a[now] + r, a[now + 1] + l, [now](const P* a, const P* b){ if (a->v[now] != b->v[now]) return a->v[now] < b->v[now]; return a->d[now] > b->d[now]; }); copy(a[now + 1] + l, a[now + 1] + r, a[now] + l); if (now < k - 2) { go(now + 1, l, r); } else { LL sum = 0; FOR (i, l, r) { dbg(a[now][i]->v[0], a[now][i]->v[1], a[now][i]->f, a[now][i]->d[0], a[now][i]->d[1]); int cnt = 0; FOR (j, 0, now + 1) cnt += a[now][i]->d[j]; if (cnt == 0) { sum += a[now][i]->f; } else if (cnt == now + 1) { a[now][i]->f = (a[now][i]->f + sum) % MOD; } } } } } \u7b1b\u5361\u5c14\u6811 void build(const vector<int>& a) { static P *stack[M], *x, *last; int p = 0; FOR (i, 0, a.size()) { x = new P(i + 1, a[i]); last = null; while (p && stack[p - 1]->v > x->v) { stack[p - 1]->maintain(); last = stack[--p]; } if (p) stack[p - 1]->rs = x; x->ls = last; stack[p++] = x; } while (p) stack[--p]->maintain(); rt = stack[0]; } void build() { static int s[N], last; int p = 0; FOR (x, 1, n + 1) { last = 0; while (p && val[s[p - 1]] > val[x]) last = s[--p]; if (p) G[s[p - 1]][1] = x; if (last) G[x][0] = last; s[p++] = x; } rt = s[0]; } Trie \u4e8c\u8fdb\u5236 Trie namespace trie { const int M = 31; int ch[N * M][2], sz; void init() { memset(ch, 0, sizeof ch); sz = 2; } void ins(LL x) { int u = 1; FORD (i, M, -1) { bool b = x & (1LL << i); if (!ch[u][b]) ch[u][b] = sz++; u = ch[u][b]; } } } \u6301\u4e45\u5316\u4e8c\u8fdb\u5236 Trie sz=1 struct P { int w, ls, rs; }; P tr[M] = {{0, 0, 0}}; int sz; int _new(int w, int ls, int rs) { tr[sz] = {w, ls, rs}; return sz++; } int ins(int oo, int v, int d = 30) { P& o = tr[oo]; if (d == -1) return _new(o.w + 1, 0, 0); bool u = v & (1 << d); return _new(o.w + 1, u == 0 ? ins(o.ls, v, d - 1) : o.ls, u == 1 ? ins(o.rs, v, d - 1) : o.rs); } int query(int pp, int qq, int v, int d = 30) { if (d == -1) return 0; bool u = v & (1 << d); P &p = tr[pp], &q = tr[qq]; int lw = tr[q.ls].w - tr[p.ls].w; int rw = tr[q.rs].w - tr[p.rs].w; int ret = 0; if (u == 0) { if (rw) { ret += 1 << d; ret += query(p.rs, q.rs, v, d - 1); } else ret += query(p.ls, q.ls, v, d - 1); } else { if (lw) { ret += 1 << d; ret += query(p.ls, q.ls, v, d - 1); } else ret += query(p.rs, q.rs, v, d - 1); } return ret; } exSTL \u4f18\u5148\u961f\u5217 binary_heap_tag pairing_heap_tag \u652f\u6301\u4fee\u6539 thin_heap_tag \u5982\u679c\u4fee\u6539\u53ea\u6709 increase \u5219\u8f83\u5feb\uff0c\u4e0d\u652f\u6301 join #include<ext/pb_ds/priority_queue.hpp> using namespace __gnu_pbds; typedef __gnu_pbds::priority_queue<LL, less<LL>, pairing_heap_tag> PQ; __gnu_pbds::priority_queue<int, cmp, pairing_heap_tag>::point_iterator it; PQ pq, pq2; int main() { auto it = pq.push(2); pq.push(3); assert(pq.top() == 3); pq.modify(it, 4); assert(pq.top() == 4); pq2.push(5); pq.join(pq2); assert(pq.top() == 5); } \u5e73\u8861\u6811 ov_tree_tag rb_tree_tag splay_tree_tag mapped: null_type \u6216 null_mapped_type\uff08\u65e7\u7248\u672c\uff09 \u4e3a\u7a7a Node_Update \u4e3a tree_order_statistics_node_update \u65f6\u624d\u53ef\u4ee5 find_by_order & order_of_key find_by_order \u627e order + 1 \u5c0f\u7684\u5143\u7d20 \uff08\u5176\u5b9e\u90fd\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\uff0c\u6216\u8005\u6709 order \u4e2a\u5143\u7d20\u6bd4\u5b83\u5c0f\u7684 key order_of_key \u6709\u591a\u5c11\u4e2a\u6bd4 r_key \u5c0f\u7684\u5143\u7d20 join & split #include <ext/pb_ds/assoc_container.hpp> using namespace __gnu_pbds; using Tree = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>; Tree t; \u6301\u4e45\u5316\u5e73\u8861\u6811 #include <ext/rope> using namespace __gnu_cxx; rope<int> s; int main() { FOR (i, 0, 5) s.push_back(i); // 0 1 2 3 4 s.replace(1, 2, s); // 0 (0 1 2 3 4) 3 4 auto ss = s.substr(2, 2); // 1 2\u3001 s.erase(2, 2); // 0 1 4 s.insert(2, s); // equal to s.replace(2, 0, s) assert(s[2] == s.at(2)); // 2 } \u54c8\u5e0c\u8868 #include<ext/pb_ds/assoc_container.hpp> #include<ext/pb_ds/hash_policy.hpp> using namespace __gnu_pbds; gp_hash_table<int, int> mp; cc_hash_table<int, int> mp; Link-Cut Tree \u56fe\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u5728\u4f38\u5c55\u6811\u4e2d\u4e0d\u4e00\u5b9a\u662f\u7236\u5b50\u5173\u7cfb \u9047\u4e8b\u4e0d\u51b3 make_root \u8dd1\u5de6\u53f3\u513f\u5b50\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0 down namespace lct { extern struct P *const null; const int M = N; struct P { P *fa, *ls, *rs; int v, maxv; bool rev; bool has_fa() { return fa->ls == this || fa->rs == this; } bool d() { return fa->ls == this; } P*& c(bool x) { return x ? ls : rs; } void do_rev() { if (this == null) return; rev ^= 1; swap(ls, rs); } P* up() { maxv = max(v, max(ls->maxv, rs->maxv)); return this; } void down() { if (rev) { rev = 0; ls->do_rev(); rs->do_rev(); } } void all_down() { if (has_fa()) fa->all_down(); down(); } } *const null = new P{0, 0, 0, 0, 0, 0}, pool[M], *pit = pool; void rot(P* o) { bool dd = o->d(); P *f = o->fa, *t = o->c(!dd); if (f->has_fa()) f->fa->c(f->d()) = o; o->fa = f->fa; if (t != null) t->fa = f; f->c(dd) = t; o->c(!dd) = f->up(); f->fa = o; } void splay(P* o) { o->all_down(); while (o->has_fa()) { if (o->fa->has_fa()) rot(o->d() ^ o->fa->d() ? o : o->fa); rot(o); } o->up(); } void access(P* u, P* v = null) { if (u == null) return; splay(u); u->rs = v; access(u->up()->fa, u); } void make_root(P* o) { access(o); splay(o); o->do_rev(); } void split(P* o, P* u) { make_root(o); access(u); splay(u); } void link(P* u, P* v) { make_root(u); u->fa = v; } void cut(P* u, P* v) { split(u, v); u->fa = v->ls = null; v->up(); } bool adj(P* u, P* v) { split(u, v); return v->ls == u && u->ls == null && u->rs == null; } bool linked(P* u, P* v) { split(u, v); return u == v || u->fa != null; } P* findrt(P* o) { access(o); splay(o); while (o->ls != null) o = o->ls; return o; } P* findfa(P* rt, P* u) { split(rt, u); u = u->ls; while (u->rs != null) { u = u->rs; u->down(); } return u; } } \u7ef4\u62a4\u5b50\u6811\u5927\u5c0f P* up() { sz = ls->sz + rs->sz + _sz + 1; return this; } void access(P* u, P* v = null) { if (u == null) return; splay(u); u->_sz += u->rs->sz - v->sz; u->rs = v; access(u->up()->fa, u); } void link(P* u, P* v) { split(u, v); u->fa = v; v->_sz += u->sz; v->up(); } \u83ab\u961f [l, r) while (l > q.l) mv(--l, 1); while (r < q.r) mv(r++, 1); while (l < q.l) mv(l++, -1); while (r > q.r) mv(--r, -1); \u6811\u4e0a\u83ab\u961f \u6ce8\u610f\u521d\u59cb\u72b6\u6001 u = v = 1, flip(1) struct Q { int u, v, idx; bool operator < (const Q& b) const { const Q& a = *this; return blk[a.u] < blk[b.u] || (blk[a.u] == blk[b.u] && in[a.v] < in[b.v]); } }; void dfs(int u = 1, int d = 0) { static int S[maxn], sz = 0, blk_cnt = 0, clk = 0; in[u] = clk++; dep[u] = d; int btm = sz; for (int v: G[u]) { if (v == fa[u]) continue; fa[v] = u; dfs(v, d + 1); if (sz - btm >= B) { while (sz > btm) blk[S[--sz]] = blk_cnt; ++blk_cnt; } } S[sz++] = u; if (u == 1) while (sz) blk[S[--sz]] = blk_cnt - 1; } void flip(int k) { dbg(k); if (vis[k]) { // ... } else { // ... } vis[k] ^= 1; } void go(int& k) { if (bug == -1) { if (vis[k] && !vis[fa[k]]) bug = k; if (!vis[k] && vis[fa[k]]) bug = fa[k]; } flip(k); k = fa[k]; } void mv(int a, int b) { bug = -1; if (vis[b]) bug = b; if (dep[a] < dep[b]) swap(a, b); while (dep[a] > dep[b]) go(a); while (a != b) { go(a); go(b); } go(a); go(bug); } for (Q& q: query) { mv(u, q.u); u = q.u; mv(v, q.v); v = q.v; ans[q.idx] = Ans; }","title":"\u6570\u636e\u7ed3\u6784"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#st","text":"\u4e8c\u7ef4 int f[maxn][maxn][10][10]; inline int highbit(int x) { return 31 - __builtin_clz(x); } inline int calc(int x, int y, int xx, int yy, int p, int q) { return max( max(f[x][y][p][q], f[xx - (1 << p) + 1][yy - (1 << q) + 1][p][q]), max(f[xx - (1 << p) + 1][y][p][q], f[x][yy - (1 << q) + 1][p][q]) ); } void init() { FOR (x, 0, highbit(n) + 1) FOR (y, 0, highbit(m) + 1) FOR (i, 0, n - (1 << x) + 1) FOR (j, 0, m - (1 << y) + 1) { if (!x && !y) { f[i][j][x][y] = a[i][j]; continue; } f[i][j][x][y] = calc( i, j, i + (1 << x) - 1, j + (1 << y) - 1, max(x - 1, 0), max(y - 1, 0) ); } } inline int get_max(int x, int y, int xx, int yy) { return calc(x, y, xx, yy, highbit(xx - x + 1), highbit(yy - y + 1)); } \u4e00\u7ef4 struct RMQ { int f[22][M]; inline int highbit(int x) { return 31 - __builtin_clz(x); } void init(int* v, int n) { FOR (i, 0, n) f[0][i] = v[i]; FOR (x, 1, highbit(n) + 1) FOR (i, 0, n - (1 << x) + 1) f[x][i] = min(f[x - 1][i], f[x - 1][i + (1 << (x - 1))]); } int get_min(int l, int r) { assert(l <= r); int t = highbit(r - l + 1); return min(f[t][l], f[t][r - (1 << t) + 1]); } } rmq;","title":"ST \u8868"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u666e\u9002 namespace sg { struct Q { LL setv; explicit Q(LL setv = -1): setv(setv) {} void operator += (const Q& q) { if (q.setv != -1) setv = q.setv; } }; struct P { LL min; explicit P(LL min = INF): min(min) {} void up(Q& q) { if (q.setv != -1) min = q.setv; } }; template<typename T> P operator & (T&& a, T&& b) { return P(min(a.min, b.min)); } P p[maxn << 2]; Q q[maxn << 2]; #define lson o * 2, l, (l + r) / 2 #define rson o * 2 + 1, (l + r) / 2 + 1, r void up(int o, int l, int r) { if (l == r) p[o] = P(); else p[o] = p[o * 2] & p[o * 2 + 1]; p[o].up(q[o]); } void down(int o, int l, int r) { q[o * 2] += q[o]; q[o * 2 + 1] += q[o]; q[o] = Q(); up(lson); up(rson); } template<typename T> void build(T&& f, int o = 1, int l = 1, int r = n) { if (l == r) q[o] = f(l); else { build(f, lson); build(f, rson); q[o] = Q(); } up(o, l, r); } P query(int ql, int qr, int o = 1, int l = 1, int r = n) { if (ql > r || l > qr) return P(); if (ql <= l && r <= qr) return p[o]; down(o, l, r); return query(ql, qr, lson) & query(ql, qr, rson); } void update(int ql, int qr, const Q& v, int o = 1, int l = 1, int r = n) { if (ql > r || l > qr) return; if (ql <= l && r <= qr) q[o] += v; else { down(o, l, r); update(ql, qr, v, lson); update(ql, qr, v, rson); } up(o, l, r); } } SET + ADD struct IntervalTree { #define ls o * 2, l, m #define rs o * 2 + 1, m + 1, r static const LL M = maxn * 4, RS = 1E18 - 1; LL addv[M], setv[M], minv[M], maxv[M], sumv[M]; void init() { memset(addv, 0, sizeof addv); fill(setv, setv + M, RS); memset(minv, 0, sizeof minv); memset(maxv, 0, sizeof maxv); memset(sumv, 0, sizeof sumv); } void maintain(LL o, LL l, LL r) { if (l < r) { LL lc = o * 2, rc = o * 2 + 1; sumv[o] = sumv[lc] + sumv[rc]; minv[o] = min(minv[lc], minv[rc]); maxv[o] = max(maxv[lc], maxv[rc]); } else sumv[o] = minv[o] = maxv[o] = 0; if (setv[o] != RS) { minv[o] = maxv[o] = setv[o]; sumv[o] = setv[o] * (r - l + 1); } if (addv[o]) { minv[o] += addv[o]; maxv[o] += addv[o]; sumv[o] += addv[o] * (r - l + 1); } } void build(LL o, LL l, LL r) { if (l == r) addv[o] = a[l]; else { LL m = (l + r) / 2; build(ls); build(rs); } maintain(o, l, r); } void pushdown(LL o) { LL lc = o * 2, rc = o * 2 + 1; if (setv[o] != RS) { setv[lc] = setv[rc] = setv[o]; addv[lc] = addv[rc] = 0; setv[o] = RS; } if (addv[o]) { addv[lc] += addv[o]; addv[rc] += addv[o]; addv[o] = 0; } } void update(LL p, LL q, LL o, LL l, LL r, LL v, LL op) { if (p <= r && l <= q) if (p <= l && r <= q) { if (op == 2) { setv[o] = v; addv[o] = 0; } else addv[o] += v; } else { pushdown(o); LL m = (l + r) / 2; update(p, q, ls, v, op); update(p, q, rs, v, op); } maintain(o, l, r); } void query(LL p, LL q, LL o, LL l, LL r, LL add, LL& ssum, LL& smin, LL& smax) { if (p > r || l > q) return; if (setv[o] != RS) { LL v = setv[o] + add + addv[o]; ssum += v * (min(r, q) - max(l, p) + 1); smin = min(smin, v); smax = max(smax, v); } else if (p <= l && r <= q) { ssum += sumv[o] + add * (r - l + 1); smin = min(smin, minv[o] + add); smax = max(smax, maxv[o] + add); } else { LL m = (l + r) / 2; query(p, q, ls, add + addv[o], ssum, smin, smax); query(p, q, rs, add + addv[o], ssum, smin, smax); } } } IT;","title":"\u7ebf\u6bb5\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","text":"\u533a\u95f4\u53d6 min\uff0c\u533a\u95f4\u6c42\u548c\u3002 namespace R { #define lson o * 2, l, (l + r) / 2 #define rson o * 2 + 1, (l + r) / 2 + 1, r int m1[N], m2[N], cm1[N]; LL sum[N]; void up(int o) { int lc = o * 2, rc = lc + 1; m1[o] = max(m1[lc], m1[rc]); sum[o] = sum[lc] + sum[rc]; if (m1[lc] == m1[rc]) { cm1[o] = cm1[lc] + cm1[rc]; m2[o] = max(m2[lc], m2[rc]); } else { cm1[o] = m1[lc] > m1[rc] ? cm1[lc] : cm1[rc]; m2[o] = max(min(m1[lc], m1[rc]), max(m2[lc], m2[rc])); } } void mod(int o, int x) { if (x >= m1[o]) return; assert(x > m2[o]); sum[o] -= 1LL * (m1[o] - x) * cm1[o]; m1[o] = x; } void down(int o) { int lc = o * 2, rc = lc + 1; mod(lc, m1[o]); mod(rc, m1[o]); } void build(int o, int l, int r) { if (l == r) { int t; read(t); sum[o] = m1[o] = t; m2[o] = -INF; cm1[o] = 1; } else { build(lson); build(rson); up(o); } } void update(int ql, int qr, int x, int o, int l, int r) { if (r < ql || qr < l || m1[o] <= x) return; if (ql <= l && r <= qr && m2[o] < x) { mod(o, x); return; } down(o); update(ql, qr, x, lson); update(ql, qr, x, rson); up(o); } int qmax(int ql, int qr, int o, int l, int r) { if (r < ql || qr < l) return -INF; if (ql <= l && r <= qr) return m1[o]; down(o); return max(qmax(ql, qr, lson), qmax(ql, qr, rson)); } LL qsum(int ql, int qr, int o, int l, int r) { if (r < ql || qr < l) return 0; if (ql <= l && r <= qr) return sum[o]; down(o); return qsum(ql, qr, lson) + qsum(ql, qr, rson); } }","title":"\u5747\u644a\u590d\u6742\u5ea6\u7ebf\u6bb5\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","text":"ADD namespace tree { #define mid ((l + r) >> 1) #define lson ql, qr, l, mid #define rson ql, qr, mid + 1, r struct P { LL add, sum; int ls, rs; } tr[maxn * 45 * 2]; int sz = 1; int N(LL add, int l, int r, int ls, int rs) { tr[sz] = {add, tr[ls].sum + tr[rs].sum + add * (len[r] - len[l - 1]), ls, rs}; return sz++; } int update(int o, int ql, int qr, int l, int r, LL add) { if (ql > r || l > qr) return o; const P& t = tr[o]; if (ql <= l && r <= qr) return N(add + t.add, l, r, t.ls, t.rs); return N(t.add, l, r, update(t.ls, lson, add), update(t.rs, rson, add)); } LL query(int o, int ql, int qr, int l, int r, LL add = 0) { if (ql > r || l > qr) return 0; const P& t = tr[o]; if (ql <= l && r <= qr) return add * (len[r] - len[l - 1]) + t.sum; return query(t.ls, lson, add + t.add) + query(t.rs, rson, add + t.add); } }","title":"\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#k-d-tree","text":"\u6700\u4f18\u5316\u95ee\u9898\u4e00\u5b9a\u8981\u7528\u5168\u5c40\u53d8\u91cf\u5927\u529b\u526a\u679d\uff0c\u800c\u4e14\u5de6\u53f3\u513f\u5b50\u5148\u9012\u5f52\u6f5c\u529b\u5927\u7684 \u7ef4\u62a4\u4fe1\u606f \u5e26\u91cd\u6784\uff08\u9002\u5408\u5728\u7ebf\uff09 \u63d2\u5165\u65f6\u5de6\u53f3\u513f\u5b50\u8981\u6807\u8bb0\u4e3a null \u3002 namespace kd { const int K = 2, inf = 1E9, M = N; const double lim = 0.7; struct P { int d[K], l[K], r[K], sz, val; LL sum; P *ls, *rs; P* up() { sz = ls->sz + rs->sz + 1; sum = ls->sum + rs->sum + val; FOR (i, 0, K) { l[i] = min(d[i], min(ls->l[i], rs->l[i])); r[i] = max(d[i], max(ls->r[i], rs->r[i])); } return this; } } pool[M], *null = new P, *pit = pool; static P *tmp[M], **pt; void init() { null->ls = null->rs = null; FOR (i, 0, K) null->l[i] = inf, null->r[i] = -inf; null->sum = null->val = 0; null->sz = 0; } P* build(P** l, P** r, int d = 0) { // [l, r) if (d == K) d = 0; if (l >= r) return null; P** m = l + (r - l) / 2; assert(l <= m && m < r); nth_element(l, m, r, [&](const P* a, const P* b){ return a->d[d] < b->d[d]; }); P* o = *m; o->ls = build(l, m, d + 1); o->rs = build(m + 1, r, d + 1); return o->up(); } P* Build() { pt = tmp; FOR (it, pool, pit) *pt++ = it; return build(tmp, pt); } inline bool inside(int p[], int q[], int l[], int r[]) { FOR (i, 0, K) if (r[i] < q[i] || p[i] < l[i]) return false; return true; } LL query(P* o, int l[], int r[]) { if (o == null) return 0; FOR (i, 0, K) if (o->r[i] < l[i] || r[i] < o->l[i]) return 0; if (inside(o->l, o->r, l, r)) return o->sum; return query(o->ls, l, r) + query(o->rs, l, r) + (inside(o->d, o->d, l, r) ? o->val : 0); } void dfs(P* o) { if (o == null) return; *pt++ = o; dfs(o->ls); dfs(o->rs); } P* ins(P* o, P* x, int d = 0) { if (d == K) d = 0; if (o == null) return x->up(); P*& oo = x->d[d] <= o->d[d] ? o->ls : o->rs; if (oo->sz > o->sz * lim) { pt = tmp; dfs(o); *pt++ = x; return build(tmp, pt, d); } oo = ins(oo, x, d + 1); return o->up(); } } \u7ef4\u62a4\u4fe1\u606f \u5e26\u4fee\u6539\uff08\u9002\u5408\u79bb\u7ebf\uff09 namespace kd { const int K = 3, inf = 1E9, M = N << 3; extern struct P* null; struct P { int d[K], l[K], r[K], val; int Max; P *ls, *rs, *fa; P* up() { Max = max(val, max(ls->Max, rs->Max)); FOR (i, 0, K) { l[i] = min(d[i], min(ls->l[i], rs->l[i])); r[i] = max(d[i], max(ls->r[i], rs->r[i])); } return ls->fa = rs->fa = this; } } pool[M], *null = new P, *pit = pool; void upd(P* o, int val) { o->val = val; for (; o != null; o = o->fa) o->Max = max(o->Max, val); } static P *tmp[M], **pt; void init() { null->ls = null->rs = null; FOR (i, 0, K) null->l[i] = inf, null->r[i] = -inf; null->Max = null->val = 0; } P* build(P** l, P** r, int d = 0) { // [l, r) if (d == K) d = 0; if (l >= r) return null; P** m = l + (r - l) / 2; assert(l <= m && m < r); nth_element(l, m, r, [&](const P* a, const P* b){ return a->d[d] < b->d[d]; }); P* o = *m; o->ls = build(l, m, d + 1); o->rs = build(m + 1, r, d + 1); return o->up(); } P* Build() { pt = tmp; FOR (it, pool, pit) *pt++ = it; P* ret = build(tmp, pt); ret->fa = null; return ret; } inline bool inside(int p[], int q[], int l[], int r[]) { FOR (i, 0, K) if (r[i] < q[i] || p[i] < l[i]) return false; return true; } int query(P* o, int l[], int r[]) { if (o == null) return 0; FOR (i, 0, K) if (o->r[i] < l[i] || r[i] < o->l[i]) return 0; if (inside(o->l, o->r, l, r)) return o->Max; int ret = 0; if (o->val > ret && inside(o->d, o->d, l, r)) ret = max(ret, o->val); if (o->ls->Max > ret) ret = max(ret, query(o->ls, l, r)); if (o->rs->Max > ret) ret = max(ret, query(o->rs, l, r)); return ret; } } \u6700\u8fd1\u70b9\u5bf9 \u8981\u7528\u5168\u5c40\u53d8\u91cf\u5927\u529b\u526a\u679d namespace kd { const int K = 3; const int M = N; const int inf = 1E9 + 100; struct P { int d[K]; int l[K], r[K]; P *ls, *rs; P* up() { FOR (i, 0, K) { l[i] = min(d[i], min(ls->l[i], rs->l[i])); r[i] = max(d[i], max(ls->r[i], rs->r[i])); } return this; } } pool[M], *null = new P, *pit = pool; static P *tmp[M], **pt; void init() { null->ls = null->rs = null; FOR (i, 0, K) null->l[i] = inf, null->r[i] = -inf; } P* build(P** l, P** r, int d = 0) { // [l, r) if (d == K) d = 0; if (l >= r) return null; P** m = l + (r - l) / 2; nth_element(l, m, r, [&](const P* a, const P* b){ return a->d[d] < b->d[d]; }); P* o = *m; o->ls = build(l, m, d + 1); o->rs = build(m + 1, r, d + 1); return o->up(); } LL eval(P* o, int d[]) { // ... } LL dist(int d1[], int d2[]) { // ... } LL S; LL query(P* o, int d[]) { if (o == null) return 0; S = max(S, dist(o->d, d)); LL mdl = eval(o->ls, d), mdr = eval(o->rs, d); if (mdl < mdr) { if (S > mdl) S = max(S, query(o->ls, d)); if (S > mdr) S = max(S, query(o->rs, d)); } else { if (S > mdr) S = max(S, query(o->rs, d)); if (S > mdl) S = max(S, query(o->ls, d)); } return S; } P* Build() { pt = tmp; FOR (it, pool, pit) *pt++ = it; return build(tmp, pt); } }","title":"K-D Tree"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","text":"\u6ce8\u610f\uff1a0 \u662f\u65e0\u6548\u4e0b\u6807 namespace bit { LL c[M]; inline int lowbit(int x) { return x & -x; } void add(int x, LL v) { for (int i = x; i < M; i += lowbit(i)) c[i] += v; } LL sum(int x) { LL ret = 0; for (int i = x; i > 0; i -= lowbit(i)) ret += c[i]; return ret; } int kth(LL k) { int p = 0; for (int lim = 1 << 20; lim; lim /= 2) if (p + lim < M && c[p + lim] < k) { p += lim; k -= c[p]; } return p + 1; } LL sum(int l, int r) { return sum(r) - sum(l - 1); } void add(int l, int r, LL v) { add(l, v); add(r + 1, -v); } } \u533a\u95f4\u4fee\u6539 & \u533a\u95f4\u67e5\u8be2\uff08\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u524d\u7f00\u548c\u7684\u524d\u7f00\u548c\uff09 namespace bit { int c[maxn], cc[maxn]; inline int lowbit(int x) { return x & -x; } void add(int x, int v) { for (int i = x; i <= n; i += lowbit(i)) { c[i] += v; cc[i] += x * v; } } void add(int l, int r, int v) { add(l, v); add(r + 1, -v); } int sum(int x) { int ret = 0; for (int i = x; i > 0; i -= lowbit(i)) ret += (x + 1) * c[i] - cc[i]; return ret; } int sum(int l, int r) { return sum(r) - sum(l - 1); } } \u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u524d\u7f00\u548c\u7684\u524d\u7f00\u548c\u7684\u524d\u7f00\u548c\uff08\u6709\u7528\u624d\u602a\uff09 namespace bit { LL c[N], cc[N], ccc[N]; inline LL lowbit(LL x) { return x & -x; } void add(LL x, LL v) { for (LL i = x; i < N; i += lowbit(i)) { c[i] = (c[i] + v) % MOD; cc[i] = (cc[i] + x * v) % MOD; ccc[i] = (ccc[i] + x * x % MOD * v) % MOD; } } void add(LL l, LL r, LL v) { add(l, v); add(r + 1, -v); } LL sum(LL x) { static LL INV2 = (MOD + 1) / 2; LL ret = 0; for (LL i = x; i > 0; i -= lowbit(i)) ret += (x + 1) * (x + 2) % MOD * c[i] % MOD - (2 * x + 3) * cc[i] % MOD + ccc[i]; return ret % MOD * INV2 % MOD; } LL sum(LL l, LL r) { return sum(r) - sum(l - 1); } } \u4e09\u7ef4 inline int lowbit(int x) { return x & -x; } void update(int x, int y, int z, int d) { for (int i = x; i <= n; i += lowbit(i)) for (int j = y; j <= n; j += lowbit(j)) for (int k = z; k <= n; k += lowbit(k)) c[i][j][k] += d; } LL query(int x, int y, int z) { LL ret = 0; for (int i = x; i > 0; i -= lowbit(i)) for (int j = y; j > 0; j -= lowbit(j)) for (int k = z; k > 0; k -= lowbit(k)) ret += c[i][j][k]; return ret; } LL solve(int x, int y, int z, int xx, int yy, int zz) { return query(xx, yy, zz) - query(xx, yy, z - 1) - query(xx, y - 1, zz) - query(x - 1, yy, zz) + query(xx, y - 1, z - 1) + query(x - 1, yy, z - 1) + query(x - 1, y - 1, zz) - query(x - 1, y - 1, z - 1);","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","text":"\u6b63\u5e38\u4e3b\u5e2d\u6811 namespace tree { #define mid ((l + r) >> 1) #define lson l, mid #define rson mid + 1, r const int MAGIC = M * 30; struct P { int sum, ls, rs; } tr[MAGIC] = {{0, 0, 0}}; int sz = 1; int N(int sum, int ls, int rs) { if (sz == MAGIC) assert(0); tr[sz] = {sum, ls, rs}; return sz++; } int ins(int o, int x, int v, int l = 1, int r = ls) { if (x < l || x > r) return o; const P& t = tr[o]; if (l == r) return N(t.sum + v, 0, 0); return N(t.sum + v, ins(t.ls, x, v, lson), ins(t.rs, x, v, rson)); } int query(int o, int ql, int qr, int l = 1, int r = ls) { if (ql > r || l > qr) return 0; const P& t = tr[o]; if (ql <= l && r <= qr) return t.sum; return query(t.ls, ql, qr, lson) + query(t.rs, ql, qr, rson); } } \u7b2c k \u5927 struct TREE { #define mid ((l + r) >> 1) #define lson l, mid #define rson mid + 1, r struct P { int w, ls, rs; } tr[maxn * 20]; int sz = 1; TREE() { tr[0] = {0, 0, 0}; } int N(int w, int ls, int rs) { tr[sz] = {w, ls, rs}; return sz++; } int ins(int tt, int l, int r, int x) { if (x < l || r < x) return tt; const P& t = tr[tt]; if (l == r) return N(t.w + 1, 0, 0); return N(t.w + 1, ins(t.ls, lson, x), ins(t.rs, rson, x)); } int query(int pp, int qq, int l, int r, int k) { // (pp, qq] if (l == r) return l; const P &p = tr[pp], &q = tr[qq]; int w = tr[q.ls].w - tr[p.ls].w; if (k <= w) return query(p.ls, q.ls, lson, k); else return query(p.rs, q.rs, rson, k - w); } } tree; \u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811 typedef vector<int> VI; struct TREE { #define mid ((l + r) >> 1) #define lson l, mid #define rson mid + 1, r struct P { int w, ls, rs; } tr[maxn * 20 * 20]; int sz = 1; TREE() { tr[0] = {0, 0, 0}; } int N(int w, int ls, int rs) { tr[sz] = {w, ls, rs}; return sz++; } int add(int tt, int l, int r, int x, int d) { if (x < l || r < x) return tt; const P& t = tr[tt]; if (l == r) return N(t.w + d, 0, 0); return N(t.w + d, add(t.ls, lson, x, d), add(t.rs, rson, x, d)); } int ls_sum(const VI& rt) { int ret = 0; FOR (i, 0, rt.size()) ret += tr[tr[rt[i]].ls].w; return ret; } inline void ls(VI& rt) { transform(rt.begin(), rt.end(), rt.begin(), [&](int x)->int{ return tr[x].ls; }); } inline void rs(VI& rt) { transform(rt.begin(), rt.end(), rt.begin(), [&](int x)->int{ return tr[x].rs; }); } int query(VI& p, VI& q, int l, int r, int k) { if (l == r) return l; int w = ls_sum(q) - ls_sum(p); if (k <= w) { ls(p); ls(q); return query(p, q, lson, k); } else { rs(p); rs(q); return query(p, q, rson, k - w); } } } tree; struct BIT { int root[maxn]; void init() { memset(root, 0, sizeof root); } inline int lowbit(int x) { return x & -x; } void update(int p, int x, int d) { for (int i = p; i <= m; i += lowbit(i)) root[i] = tree.add(root[i], 1, m, x, d); } int query(int l, int r, int k) { VI p, q; for (int i = l - 1; i > 0; i -= lowbit(i)) p.push_back(root[i]); for (int i = r; i > 0; i -= lowbit(i)) q.push_back(root[i]); return tree.query(p, q, 1, m, k); } } bit; void init() { m = 10000; tree.sz = 1; bit.init(); FOR (i, 1, m + 1) bit.update(i, a[i], 1); }","title":"\u4e3b\u5e2d\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","text":"namespace LTree { extern struct P* null, *pit; queue<P*> trash; const int M = 1E5 + 100; struct P { P *ls, *rs; LL v; int d; void operator delete (void* ptr) { trash.push((P*)ptr); } void* operator new(size_t size) { if (trash.empty()) return pit++; void* ret = trash.front(); trash.pop(); return ret; } void prt() { if (this == null) return; cout << v << ' '; ls->prt(); rs->prt(); } } pool[M], *pit = pool, *null = new P{0, 0, -1, -1}; P* N(LL v) { return new P{null, null, v, 0}; } P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (a->v > b->v) swap(a, b); a->rs = merge(a->rs, b); if (a->ls->d < a->rs->d) swap(a->ls, a->rs); a->d = a->rs->d + 1; return a; } LL pop(P*& o) { LL ret = o->v; P* t = o; o = merge(o->ls, o->rs); delete t; return ret; } } \u53ef\u6301\u4e45\u5316 namespace LTree { extern struct P* null, *pit; queue<P*> trash; const int M = 1E6 + 100; struct P { P *ls, *rs; LL v; int d; void operator delete (void* ptr) { trash.push((P*)ptr); } void* operator new(size_t size) { if (trash.empty()) return pit++; void* ret = trash.front(); trash.pop(); return ret; } } pool[M], *pit = pool, *null = new P{0, 0, -1, -1}; P* N(LL v, P* ls = null, P* rs = null) { if (ls->d < rs->d) swap(ls, rs); return new P{ls, rs, v, rs->d + 1}; } P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (a->v < b->v) return N(a->v, a->ls, merge(a->rs, b)); else return N(b->v, b->ls, merge(b->rs, a)); } LL pop(P*& o) { LL ret = o->v; o = merge(o->ls, o->rs); return ret; } }","title":"\u5de6\u504f\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#treap","text":"\u975e\u65cb Treap v \u5c0f\u6839\u5806 \u6a21\u677f\u9898 bzoj 3224 lower \u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u7684\u662f\u7b2c\u51e0\u4e2a (0-based) upper \u7b2c\u4e00\u4e2a\u5927\u4e8e\u7684\u662f\u7b2c\u51e0\u4e2a (0-based) split \u5de6\u4fa7\u5206\u5272\u51fa rk \u4e2a\u5143\u7d20 \u6811\u5957\u6811 \u7565 namespace treap { const int M = maxn * 17; extern struct P* const null; struct P { P *ls, *rs; int v, sz; unsigned rd; P(int v): ls(null), rs(null), v(v), sz(1), rd(rnd()) {} P(): sz(0) {} P* up() { sz = ls->sz + rs->sz + 1; return this; } int lower(int v) { if (this == null) return 0; return this->v >= v ? ls->lower(v) : rs->lower(v) + ls->sz + 1; } int upper(int v) { if (this == null) return 0; return this->v > v ? ls->upper(v) : rs->upper(v) + ls->sz + 1; } } *const null = new P, pool[M], *pit = pool; P* merge(P* l, P* r) { if (l == null) return r; if (r == null) return l; if (l->rd < r->rd) { l->rs = merge(l->rs, r); return l->up(); } else { r->ls = merge(l, r->ls); return r->up(); } } void split(P* o, int rk, P*& l, P*& r) { if (o == null) { l = r = null; return; } if (o->ls->sz >= rk) { split(o->ls, rk, l, o->ls); r = o->up(); } else { split(o->rs, rk - o->ls->sz - 1, o->rs, r); l = o->up(); } } } \u6301\u4e45\u5316 Treap namespace treap { const int M = maxn * 17 * 12; extern struct P* const null, *pit; struct P { P *ls, *rs; int v, sz; LL sum; P(P* ls, P* rs, int v): ls(ls), rs(rs), v(v), sz(ls->sz + rs->sz + 1), sum(ls->sum + rs->sum + v) {} P() {} void* operator new(size_t _) { return pit++; } template<typename T> int rk(int v, T&& cmp) { if (this == null) return 0; return cmp(this->v, v) ? ls->rk(v, cmp) : rs->rk(v, cmp) + ls->sz + 1; } int lower(int v) { return rk(v, greater_equal<int>()); } int upper(int v) { return rk(v, greater<int>()); } } pool[M], *pit = pool, *const null = new P; P* merge(P* l, P* r) { if (l == null) return r; if (r == null) return l; if (rnd() % (l->sz + r->sz) < l->sz) return new P{l->ls, merge(l->rs, r), l->v}; else return new P{merge(l, r->ls), r->rs, r->v}; } void split(P* o, int rk, P*& l, P*& r) { if (o == null) { l = r = null; return; } if (o->ls->sz >= rk) { split(o->ls, rk, l, r); r = new P{r, o->rs, o->v}; } else { split(o->rs, rk - o->ls->sz - 1, l, r); l = new P{o->ls, l, o->v}; } } } \u5e26 pushdown \u7684\u6301\u4e45\u5316 Treap \u6ce8\u610f\u4efb\u4f55\u4fee\u6539\u64cd\u4f5c\u524d\u4e00\u5b9a\u8981 FIX int now; namespace Treap { const int M = 10000000; extern struct P* const null, *pit; struct P { P *ls, *rs; int sz, time; LL cnt, sc, pos, add; bool rev; P* up() { sz = ls->sz + rs->sz + 1; sc = ls->sc + rs->sc + cnt; return this; } // MOD P* check() { if (time == now) return this; P* t = new(pit++) P; *t = *this; t->time = now; return t; }; P* _do_rev() { rev ^= 1; add *= -1; pos *= -1; swap(ls, rs); return this; } // MOD P* _do_add(LL v) { add += v; pos += v; return this; } // MOD P* do_rev() { if (this == null) return this; return check()->_do_rev(); } // FIX & MOD P* do_add(LL v) { if (this == null) return this; return check()->_do_add(v); } // FIX & MOD P* _down() { // MOD if (rev) { ls = ls->do_rev(); rs = rs->do_rev(); rev = 0; } if (add) { ls = ls->do_add(add); rs = rs->do_add(add); add = 0; } return this; } P* down() { return check()->_down(); } // FIX & MOD void _split(LL p, P*& l, P*& r) { // MOD if (pos >= p) { ls->split(p, l, r); ls = r; r = up(); } else { rs->split(p, l, r); rs = l; l = up(); } } void split(LL p, P*& l, P*& r) { // FIX & MOD if (this == null) l = r = null; else down()->_split(p, l, r); } } pool[M], *pit = pool, *const null = new P; P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (rand() % (a->sz + b->sz) < a->sz) { a = a->down(); a->rs = merge(a->rs, b); return a->up(); } else { b = b->down(); b->ls = merge(a, b->ls); return b->up(); } } }","title":"Treap"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#treap-","text":"\u533a\u95f4 ADD\uff0cSUM namespace treap { const int M = 8E5 + 100; extern struct P*const null; struct P { P *ls, *rs; int sz, val, add, sum; P(int v, P* ls = null, P* rs = null): ls(ls), rs(rs), sz(1), val(v), add(0), sum(v) {} P(): sz(0), val(0), add(0), sum(0) {} P* up() { assert(this != null); sz = ls->sz + rs->sz + 1; sum = ls->sum + rs->sum + val + add * sz; return this; } void upd(int v) { if (this == null) return; add += v; sum += sz * v; } P* down() { if (add) { ls->upd(add); rs->upd(add); val += add; add = 0; } return this; } P* select(int rk) { if (rk == ls->sz + 1) return this; return ls->sz >= rk ? ls->select(rk) : rs->select(rk - ls->sz - 1); } } pool[M], *pit = pool, *const null = new P, *rt = null; P* merge(P* a, P* b) { if (a == null) return b->up(); if (b == null) return a->up(); if (rand() % (a->sz + b->sz) < a->sz) { a->down()->rs = merge(a->rs, b); return a->up(); } else { b->down()->ls = merge(a, b->ls); return b->up(); } } void split(P* o, int rk, P*& l, P*& r) { if (o == null) { l = r = null; return; } o->down(); if (o->ls->sz >= rk) { split(o->ls, rk, l, o->ls); r = o->up(); } else { split(o->rs, rk - o->ls->sz - 1, o->rs, r); l = o->up(); } } inline void insert(int k, int v) { P *l, *r; split(rt, k - 1, l, r); rt = merge(merge(l, new (pit++) P(v)), r); } inline void erase(int k) { P *l, *r, *_, *t; split(rt, k - 1, l, t); split(t, 1, _, r); rt = merge(l, r); } P* build(int l, int r, int* a) { if (l > r) return null; if (l == r) return new(pit++) P(a[l]); int m = (l + r) / 2; return (new(pit++) P(a[m], build(l, m - 1, a), build(m + 1, r, a)))->up(); } }; \u533a\u95f4 REVERSE\uff0cADD\uff0cMIN namespace treap { extern struct P*const null; struct P { P *ls, *rs; int sz, v, add, m; bool flip; P(int v, P* ls = null, P* rs = null): ls(ls), rs(rs), sz(1), v(v), add(0), m(v), flip(0) {} P(): sz(0), v(INF), m(INF) {} void upd(int v) { if (this == null) return; add += v; m += v; } void rev() { if (this == null) return; swap(ls, rs); flip ^= 1; } P* up() { assert(this != null); sz = ls->sz + rs->sz + 1; m = min(min(ls->m, rs->m), v) + add; return this; } P* down() { if (add) { ls->upd(add); rs->upd(add); v += add; add = 0; } if (flip) { ls->rev(); rs->rev(); flip = 0; } return this; } P* select(int k) { if (ls->sz + 1 == k) return this; if (ls->sz >= k) return ls->select(k); return rs->select(k - ls->sz - 1); } } pool[M], *const null = new P, *pit = pool, *rt = null; P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (rnd() % (a->sz + b->sz) < a->sz) { a->down()->rs = merge(a->rs, b); return a->up(); } else { b->down()->ls = merge(a, b->ls); return b->up(); } } void split(P* o, int k, P*& l, P*& r) { if (o == null) { l = r = null; return; } o->down(); if (o->ls->sz >= k) { split(o->ls, k, l, o->ls); r = o->up(); } else { split(o->rs, k - o->ls->sz - 1, o->rs, r); l = o->up(); } } P* build(int l, int r, int* v) { if (l > r) return null; int m = (l + r) >> 1; return (new (pit++) P(v[m], build(l, m - 1, v), build(m + 1, r, v)))->up(); } void go(int x, int y, void f(P*&)) { P *l, *m, *r; split(rt, y, l, r); split(l, x - 1, l, m); f(m); rt = merge(merge(l, m), r); } } using namespace treap; int a[maxn], n, x, y, Q, v, k, d; char s[100]; int main() { cin >> n; FOR (i, 1, n + 1) scanf(\"%d\", &a[i]); rt = build(1, n, a); cin >> Q; while (Q--) { scanf(\"%s\", s); if (s[0] == 'A') { scanf(\"%d%d%d\", &x, &y, &v); go(x, y, [](P*& o){ o->upd(v); }); } else if (s[0] == 'R' && s[3] == 'E') { scanf(\"%d%d\", &x, &y); go(x, y, [](P*& o){ o->rev(); }); } else if (s[0] == 'R' && s[3] == 'O') { scanf(\"%d%d%d\", &x, &y, &d); d %= y - x + 1; go(x, y, [](P*& o){ P *l, *r; split(o, o->sz - d, l, r); o = merge(r, l); }); } else if (s[0] == 'I') { scanf(\"%d%d\", &k, &v); go(k + 1, k, [](P*& o){ o = new (pit++) P(v); }); } else if (s[0] == 'D') { scanf(\"%d\", &k); go(k, k, [](P*& o){ o = null; }); } else if (s[0] == 'M') { scanf(\"%d%d\", &x, &y); go(x, y, [](P*& o) { printf(\"%d\\n\", o->m); }); } } } \u6301\u4e45\u5316 namespace treap { struct P; extern P*const null; P* N(P* ls, P* rs, LL v, bool fill); struct P { P *const ls, *const rs; const int sz, v; const LL sum; bool fill; int cnt; void split(int k, P*& l, P*& r) { if (this == null) { l = r = null; return; } if (ls->sz >= k) { ls->split(k, l, r); r = N(r, rs, v, fill); } else { rs->split(k - ls->sz - fill, l, r); l = N(ls, l, v, fill); } } } *const null = new P{0, 0, 0, 0, 0, 0, 1}; P* N(P* ls, P* rs, LL v, bool fill) { ls->cnt++; rs->cnt++; return new P{ls, rs, ls->sz + rs->sz + fill, v, ls->sum + rs->sum + v, fill, 1}; } P* merge(P* a, P* b) { if (a == null) return b; if (b == null) return a; if (rand() % (a->sz + b->sz) < a->sz) return N(a->ls, merge(a->rs, b), a->v, a->fill); else return N(merge(a, b->ls), b->rs, b->v, b->fill); } void go(P* o, int x, int y, P*& l, P*& m, P*& r) { o->split(y, l, r); l->split(x - 1, l, m); } }","title":"Treap-\u5e8f\u5217"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","text":"\u6ce8\u610f\u8fd9\u4e2a\u4e0d\u662f\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6 \u67e5\u627e\u65f6\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29 \u590d\u6742\u5ea6\u9760\u6309\u79e9\u5408\u5e76\u89e3\u51b3 namespace uf { int fa[maxn], sz[maxn]; int undo[maxn], top; void init() { memset(fa, -1, sizeof fa); memset(sz, 0, sizeof sz); top = 0; } int findset(int x) { while (fa[x] != -1) x = fa[x]; return x; } bool join(int x, int y) { x = findset(x); y = findset(y); if (x == y) return false; if (sz[x] > sz[y]) swap(x, y); undo[top++] = x; fa[x] = y; sz[y] += sz[x] + 1; return true; } inline int checkpoint() { return top; } void rewind(int t) { while (top > t) { int x = undo[--top]; sz[fa[x]] -= sz[x] + 1; fa[x] = -1; } } }","title":"\u53ef\u56de\u6eda\u5e76\u67e5\u96c6"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","text":"\u6ce8\u610f link \u7684 y \u7684\u8303\u56f4\u662f [1, n] \u6ce8\u610f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u66ff\u6362\u6389 memset \u7cbe\u786e\u8986\u76d6 struct P { P *L, *R, *U, *D; int x, y; }; const int INF = 1E9; struct DLX { #define TR(i, D, s) for (P* i = s->D; i != s; i = i->D) static const int M = 2E5; P pool[M], *h[M], *r[M], *pit; int sz[M]; bool solved; stack<int> ans; void init(int n) { pit = pool; ++n; solved = false; while (!ans.empty()) ans.pop(); memset(r, 0, sizeof r); memset(sz, 0, sizeof sz); FOR (i, 0, n) h[i] = new (pit++) P; FOR (i, 0, n) { h[i]->L = h[(i + n - 1) % n]; h[i]->R = h[(i + 1) % n]; h[i]->U = h[i]->D = h[i]; h[i]->y = i; } } void link(int x, int y) { sz[y]++; auto p = new (pit++) P; p->x = x; p->y = y; p->U = h[y]->U; p->D = h[y]; p->D->U = p->U->D = p; if (!r[x]) r[x] = p->L = p->R = p; else { p->L = r[x]; p->R = r[x]->R; p->L->R = p->R->L = p; } } void remove(P* p) { p->L->R = p->R; p->R->L = p->L; TR (i, D, p) TR (j, R, i) { j->D->U = j->U; j->U->D = j->D; sz[j->y]--; } } void recall(P* p) { p->L->R = p->R->L = p; TR (i, U, p) TR (j, L, i) { j->D->U = j->U->D = j; sz[j->y]++; } } bool dfs(int d) { if (solved) return true; if (h[0]->R == h[0]) return solved = true; int m = INF; P* c; TR (i, R, h[0]) if (sz[i->y] < m) { m = sz[i->y]; c = i; } remove(c); TR (i, D, c) { ans.push(i->x); TR (j, R, i) remove(h[j->y]); if (dfs(d + 1)) return true; TR (j, L, i) recall(h[j->y]); ans.pop(); } recall(c); return false; } } dlx; \u53ef\u91cd\u590d\u8986\u76d6 struct P { P *L, *R, *U, *D; int x, y; }; const int INF = 1E9; struct DLX { #define TR(i, D, s) for (P* i = s->D; i != s; i = i->D) static const int M = 2E5; P pool[M], *h[M], *r[M], *pit; int sz[M], vis[M], ans, clk; void init(int n) { clk = 0; ans = INF; pit = pool; ++n; memset(r, 0, sizeof r); memset(sz, 0, sizeof sz); memset(vis, -1, sizeof vis); FOR (i, 0, n) h[i] = new (pit++) P; FOR (i, 0, n) { h[i]->L = h[(i + n - 1) % n]; h[i]->R = h[(i + 1) % n]; h[i]->U = h[i]->D = h[i]; h[i]->y = i; } } void link(int x, int y) { sz[y]++; auto p = new (pit++) P; p->x = x; p->y = y; p->U = h[y]->U; p->D = h[y]; p->D->U = p->U->D = p; if (!r[x]) r[x] = p->L = p->R = p; else { p->L = r[x]; p->R = r[x]->R; p->L->R = p->R->L = p; } } void remove(P* p) { TR (i, D, p) { i->L->R = i->R; i->R->L = i->L; } } void recall(P* p) { TR (i, U, p) i->L->R = i->R->L = i; } int eval() { ++clk; int ret = 0; TR (i, R, h[0]) if (vis[i->y] != clk) { ++ret; vis[i->y] = clk; TR (j, D, i) TR (k, R, j) vis[k->y] = clk; } return ret; } void dfs(int d) { if (h[0]->R == h[0]) { ans = min(ans, d); return; } if (eval() + d >= ans) return; P* c; int m = INF; TR (i, R, h[0]) if (sz[i->y] < m) { m = sz[i->y]; c = i; } TR (i, D, c) { remove(i); TR (j, R, i) remove(j); dfs(d + 1); TR (j, L, i) recall(j); recall(i); } } } dlx;","title":"\u821e\u8e48\u94fe"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#cdq","text":"const int maxn = 2E5 + 100; struct P { int x, y; int* f; bool d1, d2; } a[maxn], b[maxn], c[maxn]; int f[maxn]; void go2(int l, int r) { if (l + 1 == r) return; int m = (l + r) >> 1; go2(l, m); go2(m, r); FOR (i, l, m) b[i].d2 = 0; FOR (i, m, r) b[i].d2 = 1; merge(b + l, b + m, b + m, b + r, c + l, [](const P& a, const P& b)->bool { if (a.y != b.y) return a.y < b.y; return a.d2 > b.d2; }); int mx = -1; FOR (i, l, r) { if (c[i].d1 && c[i].d2) *c[i].f = max(*c[i].f, mx + 1); if (!c[i].d1 && !c[i].d2) mx = max(mx, *c[i].f); } FOR (i, l, r) b[i] = c[i]; } void go1(int l, int r) { // [l, r) if (l + 1 == r) return; int m = (l + r) >> 1; go1(l, m); FOR (i, l, m) a[i].d1 = 0; FOR (i, m, r) a[i].d1 = 1; copy(a + l, a + r, b + l); sort(b + l, b + r, [](const P& a, const P& b)->bool { if (a.x != b.x) return a.x < b.x; return a.d1 > b.d1; }); go2(l, r); go1(m, r); } k \u7ef4 LIS struct P { int v[K]; LL f; bool d[K]; } o[N << 10]; P* a[K][N << 10]; int k; void go(int now, int l, int r) { if (now == 0) { if (l + 1 == r) return; int m = (l + r) / 2; go(now, l, m); FOR (i, l, m) a[now][i]->d[now] = 0; FOR (i, m, r) a[now][i]->d[now] = 1; copy(a[now] + l, a[now] + r, a[now + 1] + l); sort(a[now + 1] + l, a[now + 1] + r, [now](const P* a, const P* b){ if (a->v[now] != b->v[now]) return a->v[now] < b->v[now]; return a->d[now] > b->d[now]; }); go(now + 1, l, r); go(now, m, r); } else { if (l + 1 == r) return; int m = (l + r) / 2; go(now, l, m); go(now, m, r); FOR (i, l, m) a[now][i]->d[now] = 0; FOR (i, m, r) a[now][i]->d[now] = 1; merge(a[now] + l, a[now] + m, a[now] + m, a[now] + r, a[now + 1] + l, [now](const P* a, const P* b){ if (a->v[now] != b->v[now]) return a->v[now] < b->v[now]; return a->d[now] > b->d[now]; }); copy(a[now + 1] + l, a[now + 1] + r, a[now] + l); if (now < k - 2) { go(now + 1, l, r); } else { LL sum = 0; FOR (i, l, r) { dbg(a[now][i]->v[0], a[now][i]->v[1], a[now][i]->f, a[now][i]->d[0], a[now][i]->d[1]); int cnt = 0; FOR (j, 0, now + 1) cnt += a[now][i]->d[j]; if (cnt == 0) { sum += a[now][i]->f; } else if (cnt == now + 1) { a[now][i]->f = (a[now][i]->f + sum) % MOD; } } } } }","title":"CDQ \u5206\u6cbb"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_10","text":"void build(const vector<int>& a) { static P *stack[M], *x, *last; int p = 0; FOR (i, 0, a.size()) { x = new P(i + 1, a[i]); last = null; while (p && stack[p - 1]->v > x->v) { stack[p - 1]->maintain(); last = stack[--p]; } if (p) stack[p - 1]->rs = x; x->ls = last; stack[p++] = x; } while (p) stack[--p]->maintain(); rt = stack[0]; } void build() { static int s[N], last; int p = 0; FOR (x, 1, n + 1) { last = 0; while (p && val[s[p - 1]] > val[x]) last = s[--p]; if (p) G[s[p - 1]][1] = x; if (last) G[x][0] = last; s[p++] = x; } rt = s[0]; }","title":"\u7b1b\u5361\u5c14\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#trie","text":"\u4e8c\u8fdb\u5236 Trie namespace trie { const int M = 31; int ch[N * M][2], sz; void init() { memset(ch, 0, sizeof ch); sz = 2; } void ins(LL x) { int u = 1; FORD (i, M, -1) { bool b = x & (1LL << i); if (!ch[u][b]) ch[u][b] = sz++; u = ch[u][b]; } } } \u6301\u4e45\u5316\u4e8c\u8fdb\u5236 Trie sz=1 struct P { int w, ls, rs; }; P tr[M] = {{0, 0, 0}}; int sz; int _new(int w, int ls, int rs) { tr[sz] = {w, ls, rs}; return sz++; } int ins(int oo, int v, int d = 30) { P& o = tr[oo]; if (d == -1) return _new(o.w + 1, 0, 0); bool u = v & (1 << d); return _new(o.w + 1, u == 0 ? ins(o.ls, v, d - 1) : o.ls, u == 1 ? ins(o.rs, v, d - 1) : o.rs); } int query(int pp, int qq, int v, int d = 30) { if (d == -1) return 0; bool u = v & (1 << d); P &p = tr[pp], &q = tr[qq]; int lw = tr[q.ls].w - tr[p.ls].w; int rw = tr[q.rs].w - tr[p.rs].w; int ret = 0; if (u == 0) { if (rw) { ret += 1 << d; ret += query(p.rs, q.rs, v, d - 1); } else ret += query(p.ls, q.ls, v, d - 1); } else { if (lw) { ret += 1 << d; ret += query(p.ls, q.ls, v, d - 1); } else ret += query(p.rs, q.rs, v, d - 1); } return ret; }","title":"Trie"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#exstl","text":"","title":"exSTL"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_11","text":"binary_heap_tag pairing_heap_tag \u652f\u6301\u4fee\u6539 thin_heap_tag \u5982\u679c\u4fee\u6539\u53ea\u6709 increase \u5219\u8f83\u5feb\uff0c\u4e0d\u652f\u6301 join #include<ext/pb_ds/priority_queue.hpp> using namespace __gnu_pbds; typedef __gnu_pbds::priority_queue<LL, less<LL>, pairing_heap_tag> PQ; __gnu_pbds::priority_queue<int, cmp, pairing_heap_tag>::point_iterator it; PQ pq, pq2; int main() { auto it = pq.push(2); pq.push(3); assert(pq.top() == 3); pq.modify(it, 4); assert(pq.top() == 4); pq2.push(5); pq.join(pq2); assert(pq.top() == 5); }","title":"\u4f18\u5148\u961f\u5217"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_12","text":"ov_tree_tag rb_tree_tag splay_tree_tag mapped: null_type \u6216 null_mapped_type\uff08\u65e7\u7248\u672c\uff09 \u4e3a\u7a7a Node_Update \u4e3a tree_order_statistics_node_update \u65f6\u624d\u53ef\u4ee5 find_by_order & order_of_key find_by_order \u627e order + 1 \u5c0f\u7684\u5143\u7d20 \uff08\u5176\u5b9e\u90fd\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\uff0c\u6216\u8005\u6709 order \u4e2a\u5143\u7d20\u6bd4\u5b83\u5c0f\u7684 key order_of_key \u6709\u591a\u5c11\u4e2a\u6bd4 r_key \u5c0f\u7684\u5143\u7d20 join & split #include <ext/pb_ds/assoc_container.hpp> using namespace __gnu_pbds; using Tree = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>; Tree t;","title":"\u5e73\u8861\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_13","text":"#include <ext/rope> using namespace __gnu_cxx; rope<int> s; int main() { FOR (i, 0, 5) s.push_back(i); // 0 1 2 3 4 s.replace(1, 2, s); // 0 (0 1 2 3 4) 3 4 auto ss = s.substr(2, 2); // 1 2\u3001 s.erase(2, 2); // 0 1 4 s.insert(2, s); // equal to s.replace(2, 0, s) assert(s[2] == s.at(2)); // 2 }","title":"\u6301\u4e45\u5316\u5e73\u8861\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_14","text":"#include<ext/pb_ds/assoc_container.hpp> #include<ext/pb_ds/hash_policy.hpp> using namespace __gnu_pbds; gp_hash_table<int, int> mp; cc_hash_table<int, int> mp;","title":"\u54c8\u5e0c\u8868"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#link-cut-tree","text":"\u56fe\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u5728\u4f38\u5c55\u6811\u4e2d\u4e0d\u4e00\u5b9a\u662f\u7236\u5b50\u5173\u7cfb \u9047\u4e8b\u4e0d\u51b3 make_root \u8dd1\u5de6\u53f3\u513f\u5b50\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0 down namespace lct { extern struct P *const null; const int M = N; struct P { P *fa, *ls, *rs; int v, maxv; bool rev; bool has_fa() { return fa->ls == this || fa->rs == this; } bool d() { return fa->ls == this; } P*& c(bool x) { return x ? ls : rs; } void do_rev() { if (this == null) return; rev ^= 1; swap(ls, rs); } P* up() { maxv = max(v, max(ls->maxv, rs->maxv)); return this; } void down() { if (rev) { rev = 0; ls->do_rev(); rs->do_rev(); } } void all_down() { if (has_fa()) fa->all_down(); down(); } } *const null = new P{0, 0, 0, 0, 0, 0}, pool[M], *pit = pool; void rot(P* o) { bool dd = o->d(); P *f = o->fa, *t = o->c(!dd); if (f->has_fa()) f->fa->c(f->d()) = o; o->fa = f->fa; if (t != null) t->fa = f; f->c(dd) = t; o->c(!dd) = f->up(); f->fa = o; } void splay(P* o) { o->all_down(); while (o->has_fa()) { if (o->fa->has_fa()) rot(o->d() ^ o->fa->d() ? o : o->fa); rot(o); } o->up(); } void access(P* u, P* v = null) { if (u == null) return; splay(u); u->rs = v; access(u->up()->fa, u); } void make_root(P* o) { access(o); splay(o); o->do_rev(); } void split(P* o, P* u) { make_root(o); access(u); splay(u); } void link(P* u, P* v) { make_root(u); u->fa = v; } void cut(P* u, P* v) { split(u, v); u->fa = v->ls = null; v->up(); } bool adj(P* u, P* v) { split(u, v); return v->ls == u && u->ls == null && u->rs == null; } bool linked(P* u, P* v) { split(u, v); return u == v || u->fa != null; } P* findrt(P* o) { access(o); splay(o); while (o->ls != null) o = o->ls; return o; } P* findfa(P* rt, P* u) { split(rt, u); u = u->ls; while (u->rs != null) { u = u->rs; u->down(); } return u; } } \u7ef4\u62a4\u5b50\u6811\u5927\u5c0f P* up() { sz = ls->sz + rs->sz + _sz + 1; return this; } void access(P* u, P* v = null) { if (u == null) return; splay(u); u->_sz += u->rs->sz - v->sz; u->rs = v; access(u->up()->fa, u); } void link(P* u, P* v) { split(u, v); u->fa = v; v->_sz += u->sz; v->up(); }","title":"Link-Cut Tree"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_15","text":"[l, r) while (l > q.l) mv(--l, 1); while (r < q.r) mv(r++, 1); while (l < q.l) mv(l++, -1); while (r > q.r) mv(--r, -1); \u6811\u4e0a\u83ab\u961f \u6ce8\u610f\u521d\u59cb\u72b6\u6001 u = v = 1, flip(1) struct Q { int u, v, idx; bool operator < (const Q& b) const { const Q& a = *this; return blk[a.u] < blk[b.u] || (blk[a.u] == blk[b.u] && in[a.v] < in[b.v]); } }; void dfs(int u = 1, int d = 0) { static int S[maxn], sz = 0, blk_cnt = 0, clk = 0; in[u] = clk++; dep[u] = d; int btm = sz; for (int v: G[u]) { if (v == fa[u]) continue; fa[v] = u; dfs(v, d + 1); if (sz - btm >= B) { while (sz > btm) blk[S[--sz]] = blk_cnt; ++blk_cnt; } } S[sz++] = u; if (u == 1) while (sz) blk[S[--sz]] = blk_cnt - 1; } void flip(int k) { dbg(k); if (vis[k]) { // ... } else { // ... } vis[k] ^= 1; } void go(int& k) { if (bug == -1) { if (vis[k] && !vis[fa[k]]) bug = k; if (!vis[k] && vis[fa[k]]) bug = fa[k]; } flip(k); k = fa[k]; } void mv(int a, int b) { bug = -1; if (vis[b]) bug = b; if (dep[a] < dep[b]) swap(a, b); while (dep[a] > dep[b]) go(a); while (a != b) { go(a); go(b); } go(a); go(bug); } for (Q& q: query) { mv(u, q.u); u = q.u; mv(v, q.v); v = q.v; ans[q.idx] = Ans; }","title":"\u83ab\u961f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/","text":"\u6570\u5b66 \u77e9\u9635\u8fd0\u7b97 struct Mat { static const LL M = 2; LL v[M][M]; Mat() { memset(v, 0, sizeof v); } void eye() { FOR (i, 0, M) v[i][i] = 1; } LL* operator [] (LL x) { return v[x]; } const LL* operator [] (LL x) const { return v[x]; } Mat operator * (const Mat& B) { const Mat& A = *this; Mat ret; FOR (k, 0, M) FOR (i, 0, M) if (A[i][k]) FOR (j, 0, M) ret[i][j] = (ret[i][j] + A[i][k] * B[k][j]) % MOD; return ret; } Mat pow(LL n) const { Mat A = *this, ret; ret.eye(); for (; n; n >>= 1, A = A * A) if (n & 1) ret = ret * A; return ret; } Mat operator + (const Mat& B) { const Mat& A = *this; Mat ret; FOR (i, 0, M) FOR (j, 0, M) ret[i][j] = (A[i][j] + B[i][j]) % MOD; return ret; } void prt() const { FOR (i, 0, M) FOR (j, 0, M) printf(\"%lld%c\", (*this)[i][j], j == M - 1 ? '\\n' : ' '); } }; \u7b5b \u7ebf\u6027\u7b5b const LL p_max = 1E6 + 100; LL pr[p_max], p_sz; void get_prime() { static bool vis[p_max]; FOR (i, 2, p_max) { if (!vis[i]) pr[p_sz++] = i; FOR (j, 0, p_sz) { if (pr[j] * i >= p_max) break; vis[pr[j] * i] = 1; if (i % pr[j] == 0) break; } } } \u7ebf\u6027\u7b5b+\u6b27\u62c9\u51fd\u6570 const LL p_max = 1E5 + 100; LL phi[p_max]; void get_phi() { phi[1] = 1; static bool vis[p_max]; static LL prime[p_max], p_sz, d; FOR (i, 2, p_max) { if (!vis[i]) { prime[p_sz++] = i; phi[i] = i - 1; } for (LL j = 0; j < p_sz && (d = i * prime[j]) < p_max; ++j) { vis[d] = 1; if (i % prime[j] == 0) { phi[d] = phi[i] * prime[j]; break; } else phi[d] = phi[i] * (prime[j] - 1); } } } \u7ebf\u6027\u7b5b+\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 const LL p_max = 1E5 + 100; LL mu[p_max]; void get_mu() { mu[1] = 1; static bool vis[p_max]; static LL prime[p_max], p_sz, d; FOR (i, 2, p_max) { if (!vis[i]) { prime[p_sz++] = i; mu[i] = -1; } for (LL j = 0; j < p_sz && (d = i * prime[j]) < p_max; ++j) { vis[d] = 1; if (i % prime[j] == 0) { mu[d] = 0; break; } else mu[d] = -mu[i]; } } } \u4e9a\u7ebf\u6027\u7b5b min_25 namespace min25 { const int M = 1E6 + 100; LL B, N; // g(x) inline LL pg(LL x) { return 1; } inline LL ph(LL x) { return x % MOD; } // Sum[g(i),{x,2,x}] inline LL psg(LL x) { return x % MOD - 1; } inline LL psh(LL x) { static LL inv2 = (MOD + 1) / 2; x %= MOD; return x * (x + 1) % MOD * inv2 % MOD - 1; } // f(pp=p^k) inline LL fpk(LL p, LL e, LL pp) { return (pp - pp / p) % MOD; } // f(p) = fgh(g(p), h(p)) inline LL fgh(LL g, LL h) { return h - g; } LL pr[M], pc, sg[M], sh[M]; void get_prime(LL n) { static bool vis[M]; pc = 0; FOR (i, 2, n + 1) { if (!vis[i]) { pr[pc++] = i; sg[pc] = (sg[pc - 1] + pg(i)) % MOD; sh[pc] = (sh[pc - 1] + ph(i)) % MOD; } FOR (j, 0, pc) { if (pr[j] * i > n) break; vis[pr[j] * i] = 1; if (i % pr[j] == 0) break; } } } LL w[M]; LL id1[M], id2[M], h[M], g[M]; inline LL id(LL x) { return x <= B ? id1[x] : id2[N / x]; } LL go(LL x, LL k) { if (x <= 1 || (k >= 0 && pr[k] > x)) return 0; LL t = id(x); LL ans = fgh((g[t] - sg[k + 1]), (h[t] - sh[k + 1])); FOR (i, k + 1, pc) { LL p = pr[i]; if (p * p > x) break; ans -= fgh(pg(p), ph(p)); for (LL pp = p, e = 1; pp <= x; ++e, pp = pp * p) ans += fpk(p, e, pp) * (1 + go(x / pp, i)) % MOD; } return ans % MOD; } LL solve(LL _N) { N = _N; B = sqrt(N + 0.5); get_prime(B); int sz = 0; for (LL l = 1, v, r; l <= N; l = r + 1) { v = N / l; r = N / v; w[sz] = v; g[sz] = psg(v); h[sz] = psh(v); if (v <= B) id1[v] = sz; else id2[r] = sz; sz++; } FOR (k, 0, pc) { LL p = pr[k]; FOR (i, 0, sz) { LL v = w[i]; if (p * p > v) break; LL t = id(v / p); g[i] = (g[i] - (g[t] - sg[k]) * pg(p)) % MOD; h[i] = (h[i] - (h[t] - sh[k]) * ph(p)) % MOD; } } return (go(N, -1) % MOD + MOD + 1) % MOD; } pair<LL, LL> sump(LL l, LL r) { return {h[id(r)] - h[id(l - 1)], g[id(r)] - g[id(l - 1)]}; } } \u675c\u6559\u7b5b \u6c42 $S(n)=\\sum_{i=1}^n f(i)$\uff0c\u5176\u4e2d $f$ \u662f\u4e00\u4e2a\u79ef\u6027\u51fd\u6570\u3002 \u6784\u9020\u4e00\u4e2a\u79ef\u6027\u51fd\u6570 $g$\uff0c\u90a3\u4e48\u7531 $(f g)(n)=\\sum_{d|n}f(d)g(\\frac{n}{d})$\uff0c\u5f97\u5230 $f(n)=(f g)(n)-\\sum_{d|n,d<n}f(d)g(\\frac{n}{d})$\u3002 \\begin{eqnarray} g(1)S(n)&=&\\sum_{i=1}^n (f g)(i)-\\sum_{i= 1}^{n}\\sum_{d|i,d<i}f(d)g(\\frac{n}{d}) \\ &\\overset{t=\\frac{i}{d}}{=}& \\sum_{i=1}^n (f g)(i)-\\sum_{t=2}^{n} g(t) S(\\lfloor \\frac{n}{t} \\rfloor) \\end{eqnarray} \u5f53\u7136\uff0c\u8981\u80fd\u591f\u7531\u6b64\u8ba1\u7b97 $S(n)$\uff0c\u4f1a\u5bf9 $f,g$ \u63d0\u51fa\u4e00\u4e9b\u8981\u6c42\uff1a $f*g$ \u8981\u80fd\u591f\u5feb\u901f\u6c42\u524d\u7f00\u548c\u3002 $g$ \u8981\u80fd\u591f\u5feb\u901f\u6c42\u5206\u6bb5\u548c\uff08\u524d\u7f00\u548c\uff09\u3002 \u5bf9\u4e8e\u6b63\u5e38\u7684\u79ef\u6027\u51fd\u6570 $g(1)=1$\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u5728\u9884\u5904\u7406 $S(n)$ \u524d $n^{\\frac{2}{3}}$ \u9879\u7684\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6\u662f $O(n^{\\frac{2}{3}})$\u3002 namespace dujiao { const int M = 5E6; LL f[M] = {0, 1}; void init() { static bool vis[M]; static LL pr[M], p_sz, d; FOR (i, 2, M) { if (!vis[i]) { pr[p_sz++] = i; f[i] = -1; } FOR (j, 0, p_sz) { if ((d = pr[j] * i) >= M) break; vis[d] = 1; if (i % pr[j] == 0) { f[d] = 0; break; } else f[d] = -f[i]; } } FOR (i, 2, M) f[i] += f[i - 1]; } inline LL s_fg(LL n) { return 1; } inline LL s_g(LL n) { return n; } LL N, rd[M]; bool vis[M]; LL go(LL n) { if (n < M) return f[n]; LL id = N / n; if (vis[id]) return rd[id]; vis[id] = true; LL& ret = rd[id] = s_fg(n); for (LL l = 2, v, r; l <= n; l = r + 1) { v = n / l; r = n / v; ret -= (s_g(r) - s_g(l - 1)) * go(v); } return ret; } LL solve(LL n) { N = n; memset(vis, 0, sizeof vis); return go(n); } } \u7d20\u6570\u6d4b\u8bd5 \u524d\u7f6e\uff1a \u5feb\u901f\u4e58\u3001\u5feb\u901f\u5e42 int \u8303\u56f4\u5185\u53ea\u9700\u68c0\u67e5 2, 7, 61 long long \u8303\u56f4 2, 325, 9375, 28178, 450775, 9780504, 1795265022 3E15\u5185 2, 2570940, 880937, 610386380, 4130785767 4E13\u5185 2, 2570940, 211991001, 3749873356 http://miller-rabin.appspot.com/ bool checkQ(LL a, LL n) { if (n == 2) return 1; if (n == 1 || !(n & 1)) return 0; LL d = n - 1; while (!(d & 1)) d >>= 1; LL t = bin(a, d, n); // \u4e0d\u4e00\u5b9a\u9700\u8981\u5feb\u901f\u4e58 while (d != n - 1 && t != 1 && t != n - 1) { t = mul(t, t, n); d <<= 1; } return t == n - 1 || d & 1; } bool primeQ(LL n) { static vector<LL> t = {2, 325, 9375, 28178, 450775, 9780504, 1795265022}; if (n <= 1) return false; for (LL k: t) if (!checkQ(k, n)) return false; return true; } Pollard-Rho mt19937 mt(time(0)); LL pollard_rho(LL n, LL c) { LL x = uniform_int_distribution<LL>(1, n - 1)(mt), y = x; auto f = [&](LL v) { LL t = mul(v, v, n) + c; return t < n ? t : t - n; }; while (1) { x = f(x); y = f(f(y)); if (x == y) return n; LL d = gcd(abs(x - y), n); if (d != 1) return d; } } LL fac[100], fcnt; void get_fac(LL n, LL cc = 19260817) { if (n == 4) { fac[fcnt++] = 2; fac[fcnt++] = 2; return; } if (primeQ(n)) { fac[fcnt++] = n; return; } LL p = n; while (p == n) p = pollard_rho(n, --cc); get_fac(p); get_fac(n / p); } void go_fac(LL n) { fcnt = 0; if (n > 1) get_fac(n); } BM \u7ebf\u6027\u9012\u63a8 namespace BerlekampMassey { using V = vector<LL>; inline void up(LL& a, LL b) { (a += b) %= MOD; } V mul(const V&a, const V& b, const V& m, int k) { V r; r.resize(2 * k - 1); FOR (i, 0, k) FOR (j, 0, k) up(r[i + j], a[i] * b[j]); FORD (i, k - 2, -1) { FOR (j, 0, k) up(r[i + j], r[i + k] * m[j]); r.pop_back(); } return r; } V pow(LL n, const V& m) { int k = (int) m.size() - 1; assert (m[k] == -1 || m[k] == MOD - 1); V r(k), x(k); r[0] = x[1] = 1; for (; n; n >>= 1, x = mul(x, x, m, k)) if (n & 1) r = mul(x, r, m, k); return r; } LL go(const V& a, const V& x, LL n) { // a: (-1, a1, a2, ..., ak).reverse // x: x1, x2, ..., xk // x[n] = sum[a[i]*x[n-i],{i,1,k}] int k = (int) a.size() - 1; if (n <= k) return x[n - 1]; if (a.size() == 2) return x[0] * bin(a[0], n - 1, MOD) % MOD; V r = pow(n - 1, a); LL ans = 0; FOR (i, 0, k) up(ans, r[i] * x[i]); return (ans + MOD) % MOD; } V BM(const V& x) { V C{-1}, B{-1}; LL L = 0, m = 1, b = 1; FOR (n, 0, x.size()) { LL d = 0; FOR (i, 0, L + 1) up(d, C[i] * x[n - i]); if (d == 0) { ++m; continue; } V T = C; LL c = MOD - d * get_inv(b, MOD) % MOD; FOR (_, C.size(), B.size() + m) C.push_back(0); FOR (i, 0, B.size()) up(C[i + m], c * B[i]); if (2 * L > n) { ++m; continue; } L = n + 1 - L; B.swap(T); b = d; m = 1; } reverse(C.begin(), C.end()); return C; } } \u6269\u5c55\u6b27\u51e0\u91cc\u5f97 \u6c42 $ax+by=gcd(a,b)$ \u7684\u4e00\u7ec4\u89e3 \u5982\u679c $a$ \u548c $b$ \u4e92\u7d20\uff0c\u90a3\u4e48 $x$ \u662f $a$ \u5728\u6a21 $b$ \u4e0b\u7684\u9006\u5143 \u6ce8\u610f $x$ \u548c $y$ \u53ef\u80fd\u662f\u8d1f\u6570 LL ex_gcd(LL a, LL b, LL &x, LL &y) { if (b == 0) { x = 1; y = 0; return a; } LL ret = ex_gcd(b, a % b, y, x); y -= a / b * x; return ret; } \u5361\u5e38\u6b27\u51e0\u91cc\u5f97 inline int ctz(LL x) { return __builtin_ctzll(x); } LL gcd(LL a, LL b) { if (!a) return b; if (!b) return a; int t = ctz(a | b); a >>= ctz(a); do { b >>= ctz(b); if (a > b) swap(a, b); b -= a; } while (b); return a << t; } \u7c7b\u6b27\u51e0\u91cc\u5f97 $m = \\lfloor \\frac{an+b}{c} \\rfloor$. $f(a,b,c,n)=\\sum_{i=0}^n\\lfloor\\frac{ai+b}{c}\\rfloor$: \u5f53 $a \\ge c$ or $b \\ge c$ \u65f6\uff0c$f(a,b,c,n)=(\\frac{a}{c})n(n+1)/2+(\\frac{b}{c})(n+1)+f(a \\bmod c,b \\bmod c,c,n)$\uff1b\u5426\u5219 $f(a,b,c,n)=nm-f(c,c-b-1,a,m-1)$\u3002 $g(a,b,c,n)=\\sum_{i=0}^n i \\lfloor\\frac{ai+b}{c}\\rfloor$: \u5f53 $a \\ge c$ or $b \\ge c$ \u65f6\uff0c$g(a,b,c,n)=(\\frac{a}{c})n(n+1)(2n+1)/6+(\\frac{b}{c})n(n+1)/2+g(a \\bmod c,b \\bmod c,c,n)$\uff1b\u5426\u5219 $g(a,b,c,n)=\\frac{1}{2} (n(n+1)m-f(c,c-b-1,a,m-1)-h(c,c-b-1,a,m-1))$\u3002 $h(a,b,c,n)=\\sum_{i=0}^n\\lfloor \\frac{ai+b}{c} \\rfloor^2$: \u5f53 $a \\ge c$ or $b \\ge c$ \u65f6\uff0c$h(a,b,c,n)=(\\frac{a}{c})^2 n(n+1)(2n+1)/6 +(\\frac{b}{c})^2 (n+1)+(\\frac{a}{c})(\\frac{b}{c})n(n+1)+h(a \\bmod c, b \\bmod c,c,n)+2(\\frac{a}{c})g(a \\bmod c,b \\bmod c,c,n)+2(\\frac{b}{c})f(a \\bmod c,b \\bmod c,c,n)$\uff1b\u5426\u5219 $h(a,b,c,n)=nm(m+1)-2g(c,c-b-1,a,m-1)-2f(c,c-b-1,a,m-1)-f(a,b,c,n)$\u3002 \u9006\u5143 \u5982\u679c $p$ \u4e0d\u662f\u7d20\u6570\uff0c\u4f7f\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97 \u524d\u7f6e\u6a21\u677f\uff1a\u5feb\u901f\u5e42 / \u6269\u5c55\u6b27\u51e0\u91cc\u5f97 inline LL get_inv(LL x, LL p) { return bin(x, p - 2, p); } LL get_inv(LL a, LL M) { static LL x, y; assert(exgcd(a, M, x, y) == 1); return (x % M + M) % M; } \u9884\u5904\u7406 1~n \u7684\u9006\u5143 LL inv[N]; void inv_init(LL n, LL p) { inv[1] = 1; FOR (i, 2, n) inv[i] = (p - p / i) * inv[p % i] % p; } \u9884\u5904\u7406\u9636\u4e58\u53ca\u5176\u9006\u5143 LL invf[M], fac[M] = {1}; void fac_inv_init(LL n, LL p) { FOR (i, 1, n) fac[i] = i * fac[i - 1] % p; invf[n - 1] = bin(fac[n - 1], p - 2, p); FORD (i, n - 2, -1) invf[i] = invf[i + 1] * (i + 1) % p; } \u7ec4\u5408\u6570 \u5982\u679c\u6570\u8f83\u5c0f\uff0c\u6a21\u8f83\u5927\u65f6\u4f7f\u7528\u9006\u5143 \u524d\u7f6e\u6a21\u677f\uff1a\u9006\u5143-\u9884\u5904\u7406\u9636\u4e58\u53ca\u5176\u9006\u5143 inline LL C(LL n, LL m) { // n >= m >= 0 return n < m || m < 0 ? 0 : fac[n] * invf[m] % MOD * invf[n - m] % MOD; } \u5982\u679c\u6a21\u6570\u8f83\u5c0f\uff0c\u6570\u5b57\u8f83\u5927\uff0c\u4f7f\u7528 Lucas \u5b9a\u7406 \u524d\u7f6e\u6a21\u677f\u53ef\u90091\uff1a\u6c42\u7ec4\u5408\u6570 \uff08\u5982\u679c\u4f7f\u7528\u9636\u4e58\u9006\u5143\uff0c\u9700 fac_inv_init(MOD, MOD); \uff09 \u524d\u7f6e\u6a21\u677f\u53ef\u90092\uff1a\u6a21\u6570\u4e0d\u56fa\u5b9a\u4e0b\u4f7f\u7528\uff0c\u65e0\u6cd5\u5355\u72ec\u4f7f\u7528\u3002 LL C(LL n, LL m) { // m >= n >= 0 if (m - n < n) n = m - n; if (n < 0) return 0; LL ret = 1; FOR (i, 1, n + 1) ret = ret * (m - n + i) % MOD * bin(i, MOD - 2, MOD) % MOD; return ret; } LL Lucas(LL n, LL m) { // m >= n >= 0 return m ? C(n % MOD, m % MOD) * Lucas(n / MOD, m / MOD) % MOD : 1; } \u7ec4\u5408\u6570\u9884\u5904\u7406 LL C[M][M]; void init_C(int n) { FOR (i, 0, n) { C[i][0] = C[i][i] = 1; FOR (j, 1, i) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD; } } \u65af\u7279\u7075\u6570 \u7b2c\u4e00\u7c7b\u65af\u7279\u7075\u6570 \u7edd\u5bf9\u503c\u662f $n$ \u4e2a\u5143\u7d20\u5212\u5206\u4e3a $k$ \u4e2a\u73af\u6392\u5217\u7684\u65b9\u6848\u6570\u3002 $s(n,k)=s(n-1,k-1)+(n-1)s(n-1,k)$ \u7b2c\u4e8c\u7c7b\u65af\u7279\u7075\u6570 $n$ \u4e2a\u5143\u7d20\u5212\u5206\u4e3a $k$ \u4e2a\u7b49\u4ef7\u7c7b\u7684\u65b9\u6848\u6570 $S(n, k)=S(n-1,k-1)+kS(n-1, k)$ S[0][0] = 1; FOR (i, 1, N) FOR (j, 1, i + 1) S[i][j] = (S[i - 1][j - 1] + j * S[i - 1][j]) % MOD; FFT & NTT & FWT NTT LL wn[N << 2], rev[N << 2]; int NTT_init(int n_) { int step = 0; int n = 1; for ( ; n < n_; n <<= 1) ++step; FOR (i, 1, n) rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (step - 1)); int g = bin(G, (MOD - 1) / n, MOD); wn[0] = 1; for (int i = 1; i <= n; ++i) wn[i] = wn[i - 1] * g % MOD; return n; } void NTT(LL a[], int n, int f) { FOR (i, 0, n) if (i < rev[i]) std::swap(a[i], a[rev[i]]); for (int k = 1; k < n; k <<= 1) { for (int i = 0; i < n; i += (k << 1)) { int t = n / (k << 1); FOR (j, 0, k) { LL w = f == 1 ? wn[t * j] : wn[n - t * j]; LL x = a[i + j]; LL y = a[i + j + k] * w % MOD; a[i + j] = (x + y) % MOD; a[i + j + k] = (x - y + MOD) % MOD; } } } if (f == -1) { LL ninv = get_inv(n, MOD); FOR (i, 0, n) a[i] = a[i] * ninv % MOD; } } FFT n \u9700\u8865\u6210 2 \u7684\u5e42 \uff08n \u5fc5\u987b\u8d85\u8fc7 a \u548c b \u7684\u6700\u9ad8\u6307\u6570\u4e4b\u548c\uff09 typedef double LD; const LD PI = acos(-1); struct C { LD r, i; C(LD r = 0, LD i = 0): r(r), i(i) {} }; C operator + (const C& a, const C& b) { return C(a.r + b.r, a.i + b.i); } C operator - (const C& a, const C& b) { return C(a.r - b.r, a.i - b.i); } C operator * (const C& a, const C& b) { return C(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r); } void FFT(C x[], int n, int p) { for (int i = 0, t = 0; i < n; ++i) { if (i > t) swap(x[i], x[t]); for (int j = n >> 1; (t ^= j) < j; j >>= 1); } for (int h = 2; h <= n; h <<= 1) { C wn(cos(p * 2 * PI / h), sin(p * 2 * PI / h)); for (int i = 0; i < n; i += h) { C w(1, 0), u; for (int j = i, k = h >> 1; j < i + k; ++j) { u = x[j + k] * w; x[j + k] = x[j] - u; x[j] = x[j] + u; w = w * wn; } } } if (p == -1) FOR (i, 0, n) x[i].r /= n; } void conv(C a[], C b[], int n) { FFT(a, n, 1); FFT(b, n, 1); FOR (i, 0, n) a[i] = a[i] * b[i]; FFT(a, n, -1); } FWT $C_k=\\sum_{i \\oplus j=k} A_i B_j$ FWT \u5b8c\u540e\u9700\u8981\u5148\u6a21\u4e00\u904d template<typename T> void fwt(LL a[], int n, T f) { for (int d = 1; d < n; d *= 2) for (int i = 0, t = d * 2; i < n; i += t) FOR (j, 0, d) f(a[i + j], a[i + j + d]); } void AND(LL& a, LL& b) { a += b; } void OR(LL& a, LL& b) { b += a; } void XOR (LL& a, LL& b) { LL x = a, y = b; a = (x + y) % MOD; b = (x - y + MOD) % MOD; } void rAND(LL& a, LL& b) { a -= b; } void rOR(LL& a, LL& b) { b -= a; } void rXOR(LL& a, LL& b) { static LL INV2 = (MOD + 1) / 2; LL x = a, y = b; a = (x + y) * INV2 % MOD; b = (x - y + MOD) * INV2 % MOD; } FWT \u5b50\u96c6\u5377\u79ef a[popcount(x)][x] = A[x] b[popcount(x)][x] = B[x] fwt(a[i]) fwt(b[i]) c[i + j][x] += a[i][x] * b[j][x] rfwt(c[i]) ans[x] = c[popcount(x)][x] simpson \u81ea\u9002\u5e94\u79ef\u5206 LD simpson(LD l, LD r) { LD c = (l + r) / 2; return (f(l) + 4 * f(c) + f(r)) * (r - l) / 6; } LD asr(LD l, LD r, LD eps, LD S) { LD m = (l + r) / 2; LD L = simpson(l, m), R = simpson(m, r); if (fabs(L + R - S) < 15 * eps) return L + R + (L + R - S) / 15; return asr(l, m, eps / 2, L) + asr(m, r, eps / 2, R); } LD asr(LD l, LD r, LD eps) { return asr(l, r, eps, simpson(l, r)); } FWT template<typename T> void fwt(LL a[], int n, T f) { for (int d = 1; d < n; d *= 2) for (int i = 0, t = d * 2; i < n; i += t) FOR (j, 0, d) f(a[i + j], a[i + j + d]); } auto f = [](LL& a, LL& b) { // xor LL x = a, y = b; a = (x + y) % MOD; b = (x - y + MOD) % MOD; }; \u5feb\u901f\u4e58 LL mul(LL a, LL b, LL m) { LL ret = 0; while (b) { if (b & 1) { ret += a; if (ret >= m) ret -= m; } a += a; if (a >= m) a -= m; b >>= 1; } return ret; } O(1) LL mul(LL u, LL v, LL p) { return (u * v - LL((long double) u * v / p) * p + p) % p; } LL mul(LL u, LL v, LL p) { // \u5361\u5e38 LL t = u * v - LL((long double) u * v / p) * p; return t < 0 ? t + p : t; } \u5feb\u901f\u5e42 \u5982\u679c\u6a21\u6570\u662f\u7d20\u6570\uff0c\u5219\u53ef\u5728\u51fd\u6570\u4f53\u5185\u52a0\u4e0a n %= MOD - 1; \uff08\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff09\u3002 LL bin(LL x, LL n, LL MOD) { LL ret = MOD != 1; for (x %= MOD; n; n >>= 1, x = x * x % MOD) if (n & 1) ret = ret * x % MOD; return ret; } \u9632\u7206 LL \u524d\u7f6e\u6a21\u677f\uff1a\u5feb\u901f\u4e58 LL bin(LL x, LL n, LL MOD) { LL ret = MOD != 1; for (x %= MOD; n; n >>= 1, x = mul(x, x, MOD)) if (n & 1) ret = mul(ret, x, MOD); return ret; } \u9ad8\u65af\u6d88\u5143 n - \u65b9\u7a0b\u4e2a\u6570\uff0cm - \u53d8\u91cf\u4e2a\u6570\uff0c a \u662f n * (m + 1) \u7684\u589e\u5e7f\u77e9\u9635\uff0cfree \u662f\u5426\u4e3a\u81ea\u7531\u53d8\u91cf \u8fd4\u56de\u81ea\u7531\u53d8\u91cf\u4e2a\u6570\uff0c-1 \u65e0\u89e3 \u6d6e\u70b9\u6570\u7248\u672c typedef double LD; const LD eps = 1E-10; const int maxn = 2000 + 10; int n, m; LD a[maxn][maxn], x[maxn]; bool free_x[maxn]; inline int sgn(LD x) { return (x > eps) - (x < -eps); } int gauss(LD a[maxn][maxn], int n, int m) { memset(free_x, 1, sizeof free_x); memset(x, 0, sizeof x); int r = 0, c = 0; while (r < n && c < m) { int m_r = r; FOR (i, r + 1, n) if (fabs(a[i][c]) > fabs(a[m_r][c])) m_r = i; if (m_r != r) FOR (j, c, m + 1) swap(a[r][j], a[m_r][j]); if (!sgn(a[r][c])) { a[r][c] = 0; ++c; continue; } FOR (i, r + 1, n) if (a[i][c]) { LD t = a[i][c] / a[r][c]; FOR (j, c, m + 1) a[i][j] -= a[r][j] * t; } ++r; ++c; } FOR (i, r, n) if (sgn(a[i][m])) return -1; if (r < m) { FORD (i, r - 1, -1) { int f_cnt = 0, k = -1; FOR (j, 0, m) if (sgn(a[i][j]) && free_x[j]) { ++f_cnt; k = j; } if(f_cnt > 0) continue; LD s = a[i][m]; FOR (j, 0, m) if (j != k) s -= a[i][j] * x[j]; x[k] = s / a[i][k]; free_x[k] = 0; } return m - r; } FORD (i, m - 1, -1) { LD s = a[i][m]; FOR (j, i + 1, m) s -= a[i][j] * x[j]; x[i] = s / a[i][i]; } return 0; } \u6570\u636e 3 4 1 1 -2 2 2 -3 5 1 4 -1 1 5 5 0 -1 7 // many 3 4 1 1 -2 2 2 -3 5 1 4 -1 -1 5 5 0 -1 0 2 // no 3 4 1 1 -2 2 2 -3 5 1 4 -1 1 5 5 0 1 0 7 // one \u8d28\u56e0\u6570\u5206\u89e3 \u524d\u7f6e\u6a21\u677f\uff1a\u7d20\u6570\u7b5b \u5e26\u6307\u6570 LL factor[30], f_sz, factor_exp[30]; void get_factor(LL x) { f_sz = 0; LL t = sqrt(x + 0.5); for (LL i = 0; pr[i] <= t; ++i) if (x % pr[i] == 0) { factor_exp[f_sz] = 0; while (x % pr[i] == 0) { x /= pr[i]; ++factor_exp[f_sz]; } factor[f_sz++] = pr[i]; } if (x > 1) { factor_exp[f_sz] = 1; factor[f_sz++] = x; } } \u4e0d\u5e26\u6307\u6570 LL factor[30], f_sz; void get_factor(LL x) { f_sz = 0; LL t = sqrt(x + 0.5); for (LL i = 0; pr[i] <= t; ++i) if (x % pr[i] == 0) { factor[f_sz++] = pr[i]; while (x % pr[i] == 0) x /= pr[i]; } if (x > 1) factor[f_sz++] = x; } \u539f\u6839 \u524d\u7f6e\u6a21\u677f\uff1a\u7d20\u6570\u7b5b\uff0c\u5feb\u901f\u5e42\uff0c\u5206\u89e3\u8d28\u56e0\u6570 \u8981\u6c42 p \u4e3a\u8d28\u6570 LL find_smallest_primitive_root(LL p) { get_factor(p - 1); FOR (i, 2, p) { bool flag = true; FOR (j, 0, f_sz) if (bin(i, (p - 1) / factor[j], p) == 1) { flag = false; break; } if (flag) return i; } assert(0); return -1; } \u516c\u5f0f \u4e00\u4e9b\u6570\u8bba\u516c\u5f0f \u5f53 $x\\geq\\phi(p)$ \u65f6\u6709 $a^x\\equiv a^{x \\; mod \\; \\phi(p) + \\phi(p)}\\pmod p$ $\\mu^2(n)=\\sum_{d^2|n} \\mu(d)$ $\\sum_{d|n} \\varphi(d)=n$ $\\sum_{d|n} 2^{\\omega(d)}=\\sigma_0(n^2)$\uff0c\u5176\u4e2d $\\omega$ \u662f\u4e0d\u540c\u7d20\u56e0\u5b50\u4e2a\u6570 $\\sum_{d|n} \\mu^2(d)=2^{\\omega(d)}$ \u4e00\u4e9b\u6570\u8bba\u51fd\u6570\u6c42\u548c\u7684\u4f8b\u5b50 $\\sum_{i=1}^n i[gcd(i, n)=1] = \\frac {n \\varphi(n) + [n=1]}{2}$ $\\sum_{i=1}^n \\sum_{j=1}^m [gcd(i,j)=x]=\\sum_d \\mu(d) \\lfloor \\frac n {dx} \\rfloor \\lfloor \\frac m {dx} \\rfloor$ $\\sum_{i=1}^n \\sum_{j=1}^m gcd(i, j) = \\sum_{i=1}^n \\sum_{j=1}^m \\sum_{d|gcd(i,j)} \\varphi(d) = \\sum_{d} \\varphi(d) \\lfloor \\frac nd \\rfloor \\lfloor \\frac md \\rfloor$ $S(n)=\\sum_{i=1}^n \\mu(i)=1-\\sum_{i=1}^n \\sum_{d|i,d < i}\\mu(d) \\overset{t=\\frac id}{=} 1-\\sum_{t=2}^nS(\\lfloor \\frac nt \\rfloor)$ \u5229\u7528 $[n=1] = \\sum_{d|n} \\mu(d)$ $S(n)=\\sum_{i=1}^n \\varphi(i)=\\sum_{i=1}^n i-\\sum_{i=1}^n \\sum_{d|i,d<i} \\varphi(i)\\overset{t=\\frac id}{=} \\frac {i(i+1)}{2} - \\sum_{t=2}^n S(\\frac n t)$ \u5229\u7528 $n = \\sum_{d|n} \\varphi(d)$ $\\sum_{i=1}^n \\mu^2(i) = \\sum_{i=1}^n \\sum_{d^2|n} \\mu(d)=\\sum_{d=1}^{\\lfloor \\sqrt n \\rfloor}\\mu(d) \\lfloor \\frac n {d^2} \\rfloor$ $\\sum_{i=1}^n \\sum_{j=1}^n gcd^2(i, j)= \\sum_{d} d^2 \\sum_{t} \\mu(t) \\lfloor \\frac n{dt} \\rfloor ^2 \\ \\overset{x=dt}{=} \\sum_{x} \\lfloor \\frac nx \\rfloor ^ 2 \\sum_{d|x} d^2 \\mu(\\frac xd)$ $\\sum_{i=1}^n \\varphi(i)=\\frac 12 \\sum_{i=1}^n \\sum_{j=1}^n [i \\perp j] - 1=\\frac 12 \\sum_{i=1}^n \\mu(i) \\cdot\\lfloor \\frac n i \\rfloor ^2-1$ \u6590\u6ce2\u90a3\u5951\u6570\u5217\u6027\u8d28 $F_{a+b}=F_{a-1} \\cdot F_b+F_a \\cdot F_{b+1}$ $F_1+F_3+\\dots +F_{2n-1} = F_{2n},F_2 + F_4 + \\dots + F_{2n} = F_{2n + 1} - 1$ $\\sum_{i=1}^n F_i = F_{n+2} - 1$ $\\sum_{i=1}^n F_i^2 = F_n \\cdot F_{n+1}$ $F_n^2=(-1)^{n-1} + F_{n-1} \\cdot F_{n+1}$ $gcd(F_a, F_b)=F_{gcd(a, b)}$ \u6a21 $n$ \u5468\u671f\uff08\u76ae\u8428\u8bfa\u5468\u671f\uff09 $\\pi(p^k) = p^{k-1} \\pi(p)$ $\\pi(nm) = lcm(\\pi(n), \\pi(m)), \\forall n \\perp m$ $\\pi(2)=3, \\pi(5)=20$ $\\forall p \\equiv \\pm 1\\pmod {10}, \\pi(p)|p-1$ $\\forall p \\equiv \\pm 2\\pmod {5}, \\pi(p)|2p+2$ \u5e38\u89c1\u751f\u6210\u51fd\u6570 $(1+ax)^n=\\sum_{k=0}^n \\binom {n}{k} a^kx^k$ $\\dfrac{1-x^{r+1}}{1-x}=\\sum_{k=0}^nx^k$ $\\dfrac1{1-ax}=\\sum_{k=0}^{\\infty}a^kx^k$ $\\dfrac 1{(1-x)^2}=\\sum_{k=0}^{\\infty}(k+1)x^k$ $\\dfrac1{(1-x)^n}=\\sum_{k=0}^{\\infty} \\binom{n+k-1}{k}x^k$ $e^x=\\sum_{k=0}^{\\infty}\\dfrac{x^k}{k!}$ $\\ln(1+x)=\\sum_{k=0}^{\\infty}\\dfrac{(-1)^{k+1}}{k}x^k$ \u4f69\u5c14\u65b9\u7a0b \u82e5\u4e00\u4e2a\u4e22\u756a\u56fe\u65b9\u7a0b\u5177\u6709\u4ee5\u4e0b\u7684\u5f62\u5f0f\uff1a$x^2 - ny^2= 1$\u3002\u4e14 $n$ \u4e3a\u6b63\u6574\u6570\uff0c\u5219\u79f0\u6b64\u4e8c\u5143\u4e8c\u6b21\u4e0d\u5b9a\u65b9\u7a0b\u4e3a \u4f69\u5c14\u65b9\u7a0b \u3002 \u82e5 $n$ \u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd9\u4e2a\u65b9\u7a0b\u5f0f\u53ea\u6709\u5e73\u51e1\u89e3 $(\\pm 1,0)$\uff08\u5b9e\u9645\u4e0a\u5bf9\u4efb\u610f\u7684 $n$\uff0c$(\\pm 1,0)$ \u90fd\u662f\u89e3\uff09\u3002\u5bf9\u4e8e\u5176\u4f59\u60c5\u51b5\uff0c\u62c9\u683c\u6717\u65e5\u8bc1\u660e\u4e86\u4f69\u5c14\u65b9\u7a0b\u603b\u6709\u975e\u5e73\u51e1\u89e3\u3002\u800c\u8fd9\u4e9b\u89e3\u53ef\u7531 $\\sqrt{n}$ \u7684\u8fde\u5206\u6570\u6c42\u51fa\u3002 $x = [a_0; a_1, a_2, a_3]=x = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{a_3 + \\cfrac{1}{\\ddots\\,}}}}$ \u8bbe $\\tfrac{p_i}{q_i}$ \u662f $\\sqrt{n}$ \u7684\u8fde\u5206\u6570\u8868\u793a\uff1a$[a_{0}; a_{1}, a_{2}, a_{3}, \\,\\ldots ]$ \u7684\u6e10\u8fd1\u5206\u6570\u5217\uff0c\u7531\u8fde\u5206\u6570\u7406\u8bba\u77e5\u5b58\u5728 $i$ \u4f7f\u5f97 $(p_i,q_i)$ \u4e3a\u4f69\u5c14\u65b9\u7a0b\u7684\u89e3\u3002\u53d6\u5176\u4e2d\u6700\u5c0f\u7684 $i$\uff0c\u5c06\u5bf9\u5e94\u7684 $(p_i,q_i)$ \u79f0\u4e3a\u4f69\u5c14\u65b9\u7a0b\u7684\u57fa\u672c\u89e3\uff0c\u6216\u6700\u5c0f\u89e3\uff0c\u8bb0\u4f5c $(x_1,y_1)$\uff0c\u5219\u6240\u6709\u7684\u89e3 $(x_i,y_i)$ \u53ef\u8868\u793a\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a$x_{i}+y_{i}{\\sqrt n}=(x_{1}+y_{1}{\\sqrt n})^{i}$\u3002\u6216\u8005\u7531\u4ee5\u4e0b\u7684\u9012\u56de\u5173\u7cfb\u5f0f\u5f97\u5230\uff1a $\\displaystyle x_{i+1} = x_1 x_i + n y_1 y_i$, $\\displaystyle y_{{i+1}}=x_{1}y_{i}+y_{1}x_{i}$\u3002 \u4f46\u662f\uff1a \u4f69\u5c14\u65b9\u7a0b\u5343\u4e07\u4e0d\u8981\u53bb\u63a8\uff08\u867d\u7136\u63a8\u8d77\u6765\u5f88\u6709\u8da3\uff0c\u4f46\u7ed3\u679c\u4e0d\u4e00\u5b9a\u597d\u770b\uff0c\u4f1a\u662f\u4e24\u4e2a\u5f0f\u5b50\uff09\u3002\u8bb0\u4f4f\u4f69\u5c14\u65b9\u7a0b\u7ed3\u679c\u7684\u5f62\u5f0f\u901a\u5e38\u662f $a_n=ka_{n\u22121}\u2212a_{n\u22122}$\uff08$a_{n\u22122}$ \u524d\u7684\u7cfb\u6570\u901a\u5e38\u662f $\u22121$\uff09\u3002\u66b4\u529b / \u51d1\u51fa\u4e24\u4e2a\u57fa\u7840\u89e3\u4e4b\u540e\u52a0\u4e0a\u4e00\u4e2a $0$\uff0c\u5bb9\u6613\u89e3\u51fa $k$ \u5e76\u9a8c\u8bc1\u3002 Burnside & Polya $|X/G|={\\frac {1}{|G|}}\\sum _{{g\\in G}}|X^{g}|$ \u6ce8\uff1a$X^g$ \u662f $g$ \u4e0b\u7684\u4e0d\u52a8\u70b9\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u591a\u5c11\u79cd\u4e1c\u897f\u7528 $g$ \u4f5c\u7528\u4e4b\u540e\u53ef\u4ee5\u4fdd\u6301\u4e0d\u53d8\u3002 $|Y^X/G| = \\frac{1}{|G|}\\sum_{g \\in G} m^{c(g)}$ \u6ce8\uff1a\u7528 $m$ \u79cd\u989c\u8272\u67d3\u8272\uff0c\u7136\u540e\u5bf9\u4e8e\u67d0\u4e00\u79cd\u7f6e\u6362 $g$\uff0c\u6709 $c(g)$ \u4e2a\u7f6e\u6362\u73af\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7f6e\u6362\u540e\u989c\u8272\u4ecd\u7136\u76f8\u540c\uff0c\u6bcf\u4e2a\u7f6e\u6362\u73af\u5fc5\u987b\u67d3\u6210\u540c\u8272\u3002 \u76ae\u514b\u5b9a\u7406 $2S = 2a+b-2$ $S$ \u591a\u8fb9\u5f62\u9762\u79ef $a$ \u591a\u8fb9\u5f62\u5185\u90e8\u70b9\u6570 $b$ \u591a\u8fb9\u5f62\u8fb9\u4e0a\u70b9\u6570 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 $g(n) = \\sum_{d|n} f(d) \\Leftrightarrow f(n) = \\sum_{d|n} \\mu (d) g( \\frac{n}{d})$ $f(n)=\\sum_{n|d}g(d) \\Leftrightarrow g(n)=\\sum_{n|d} \\mu(\\frac{d}{n}) f(d)$ \u4f4e\u9636\u7b49\u5e42\u6c42\u548c $\\sum_{i=1}^{n} i^{1} = \\frac{n(n+1)}{2} = \\frac{1}{2}n^2 +\\frac{1}{2} n$ $\\sum_{i=1}^{n} i^{2} = \\frac{n(n+1)(2n+1)}{6} = \\frac{1}{3}n^3 + \\frac{1}{2}n^2 + \\frac{1}{6}n$ $\\sum_{i=1}^{n} i^{3} = \\left[\\frac{n(n+1)}{2}\\right]^{2} = \\frac{1}{4}n^4 + \\frac{1}{2}n^3 + \\frac{1}{4}n^2$ $\\sum_{i=1}^{n} i^{4} = \\frac{n(n+1)(2n+1)(3n^2+3n-1)}{30} = \\frac{1}{5}n^5 + \\frac{1}{2}n^4 + \\frac{1}{3}n^3 - \\frac{1}{30}n$ $\\sum_{i=1}^{n} i^{5} = \\frac{n^{2}(n+1)^{2}(2n^2+2n-1)}{12} = \\frac{1}{6}n^6 + \\frac{1}{2}n^5 + \\frac{5}{12}n^4 - \\frac{1}{12}n^2$ \u4e00\u4e9b\u7ec4\u5408\u516c\u5f0f \u9519\u6392\u516c\u5f0f\uff1a$D_1=0,D_2=1,D_n=(n-1)(D_{n-1} + D_{n-2})=n!(\\frac 1{2!}-\\frac 1{3!}+\\dots + (-1)^n\\frac 1{n!})=\\lfloor \\frac{n!}e + 0.5 \\rfloor$ \u5361\u5854\u5170\u6570\uff08$n$ \u5bf9\u62ec\u53f7\u5408\u6cd5\u65b9\u6848\u6570\uff0c$n$ \u4e2a\u7ed3\u70b9\u4e8c\u53c9\u6811\u4e2a\u6570\uff0c$n\\times n$ \u65b9\u683c\u4e2d\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u7684\u5355\u8c03\u8def\u5f84\u6570\uff0c\u51f8 $n+2$ \u8fb9\u5f62\u7684\u4e09\u89d2\u5f62\u5212\u5206\u6570\uff0c$n$ \u4e2a\u5143\u7d20\u7684\u5408\u6cd5\u51fa\u6808\u5e8f\u5217\u6570\uff09\uff1a$C_n=\\frac 1{n+1}\\binom {2n}n=\\frac{(2n)!}{(n+1)!n!}$ \u4e8c\u6b21\u5269\u4f59 URAL 1132 LL q1, q2, w; struct P { // x + y * sqrt(w) LL x, y; }; P pmul(const P& a, const P& b, LL p) { P res; res.x = (a.x * b.x + a.y * b.y % p * w) % p; res.y = (a.x * b.y + a.y * b.x) % p; return res; } P bin(P x, LL n, LL MOD) { P ret = {1, 0}; for (; n; n >>= 1, x = pmul(x, x, MOD)) if (n & 1) ret = pmul(ret, x, MOD); return ret; } LL Legendre(LL a, LL p) { return bin(a, (p - 1) >> 1, p); } LL equation_solve(LL b, LL p) { if (p == 2) return 1; if ((Legendre(b, p) + 1) % p == 0) return -1; LL a; while (true) { a = rand() % p; w = ((a * a - b) % p + p) % p; if ((Legendre(w, p) + 1) % p == 0) break; } return bin({a, 1}, (p + 1) >> 1, p).x; } int main() { int T; cin >> T; while (T--) { LL a, p; cin >> a >> p; a = a % p; LL x = equation_solve(a, p); if (x == -1) { puts(\"No root\"); } else { LL y = p - x; if (x == y) cout << x << endl; else cout << min(x, y) << \" \" << max(x, y) << endl; } } } \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u65e0\u89e3\u8fd4\u56de -1 \u524d\u7f6e\u6a21\u677f\uff1a\u6269\u5c55\u6b27\u51e0\u91cc\u5f97 LL CRT(LL *m, LL *r, LL n) { if (!n) return 0; LL M = m[0], R = r[0], x, y, d; FOR (i, 1, n) { d = ex_gcd(M, m[i], x, y); if ((r[i] - R) % d) return -1; x = (r[i] - R) / d * x % (m[i] / d); // \u9632\u7206 LL // x = mul((r[i] - R) / d, x, m[i] / d); R += x * M; M = M / d * m[i]; R %= M; } return R >= 0 ? R : R + M; } \u4f2f\u52aa\u5229\u6570\u548c\u7b49\u5e42\u6c42\u548c \u9884\u5904\u7406\u9006\u5143 \u9884\u5904\u7406\u7ec4\u5408\u6570 $\\sum_{i=0}^n i^k = \\frac{1}{k+1} \\sum_{i=0}^k \\binom{k+1}{i} B_{k+1-i} (n+1)^i$. \u4e5f\u53ef\u4ee5 $\\sum_{i=0}^n i^k = \\frac{1}{k+1} \\sum_{i=0}^k \\binom{k+1}{i} B^+_{k+1-i} n^i$\u3002\u533a\u522b\u5728\u4e8e $B^+_1 =1/2$\u3002(\u5fc3\u6001\u5d29\u4e86) namespace Bernoulli { const int M = 100; LL inv[M] = {-1, 1}; void inv_init(LL n, LL p) { FOR (i, 2, n) inv[i] = (p - p / i) * inv[p % i] % p; } LL C[M][M]; void init_C(int n) { FOR (i, 0, n) { C[i][0] = C[i][i] = 1; FOR (j, 1, i) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD; } } LL B[M] = {1}; void init() { inv_init(M, MOD); init_C(M); FOR (i, 1, M - 1) { LL& s = B[i] = 0; FOR (j, 0, i) s += C[i + 1][j] * B[j] % MOD; s = (s % MOD * -inv[i + 1] % MOD + MOD) % MOD; } } LL p[M] = {1}; LL go(LL n, LL k) { n %= MOD; if (k == 0) return n; FOR (i, 1, k + 2) p[i] = p[i - 1] * (n + 1) % MOD; LL ret = 0; FOR (i, 1, k + 2) ret += C[k + 1][i] * B[k + 1 - i] % MOD * p[i] % MOD; ret = ret % MOD * inv[k + 1] % MOD; return ret; } } \u5355\u7eaf\u5f62 \u8981\u6c42\u6709\u57fa\u672c\u89e3\uff0c\u4e5f\u5c31\u662f x \u4e3a\u96f6\u5411\u91cf\u53ef\u884c v \u8981\u521d\u59cb\u5316\u4e3a 0\uff0cn \u8868\u793a\u5411\u91cf\u957f\u5ea6\uff0cm \u8868\u793a\u7ea6\u675f\u4e2a\u6570 // min{ b x } / max { c x } // A x >= c / A x <= b // x >= 0 namespace lp { int n, m; double a[M][N], b[M], c[N], v; void pivot(int l, int e) { b[l] /= a[l][e]; FOR (j, 0, n) if (j != e) a[l][j] /= a[l][e]; a[l][e] = 1 / a[l][e]; FOR (i, 0, m) if (i != l && fabs(a[i][e]) > 0) { b[i] -= a[i][e] * b[l]; FOR (j, 0, n) if (j != e) a[i][j] -= a[i][e] * a[l][j]; a[i][e] = -a[i][e] * a[l][e]; } v += c[e] * b[l]; FOR (j, 0, n) if (j != e) c[j] -= c[e] * a[l][j]; c[e] = -c[e] * a[l][e]; } double simplex() { while (1) { v = 0; int e = -1, l = -1; FOR (i, 0, n) if (c[i] > eps) { e = i; break; } if (e == -1) return v; double t = INF; FOR (i, 0, m) if (a[i][e] > eps && t > b[i] / a[i][e]) { t = b[i] / a[i][e]; l = i; } if (l == -1) return INF; pivot(l, e); } } } \u79bb\u6563\u5bf9\u6570 BSGS \u6a21\u6570\u4e3a\u7d20\u6570 LL BSGS(LL a, LL b, LL p) { // a^x = b (mod p) a %= p; if (!a && !b) return 1; if (!a) return -1; static map<LL, LL> mp; mp.clear(); LL m = sqrt(p + 1.5); LL v = 1; FOR (i, 1, m + 1) { v = v * a % p; mp[v * b % p] = i; } LL vv = v; FOR (i, 1, m + 1) { auto it = mp.find(vv); if (it != mp.end()) return i * m - it->second; vv = vv * v % p; } return -1; } exBSGS \u6a21\u6570\u53ef\u4ee5\u975e\u7d20\u6570 LL exBSGS(LL a, LL b, LL p) { // a^x = b (mod p) a %= p; b %= p; if (a == 0) return b > 1 ? -1 : b == 0 && p != 1; LL c = 0, q = 1; while (1) { LL g = __gcd(a, p); if (g == 1) break; if (b == 1) return c; if (b % g) return -1; ++c; b /= g; p /= g; q = a / g * q % p; } static map<LL, LL> mp; mp.clear(); LL m = sqrt(p + 1.5); LL v = 1; FOR (i, 1, m + 1) { v = v * a % p; mp[v * b % p] = i; } FOR (i, 1, m + 1) { q = q * v % p; auto it = mp.find(q); if (it != mp.end()) return i * m - it->second + c; } return -1; } \u6570\u8bba\u5206\u5757 $f(i) = \\lfloor \\frac{n}{i} \\rfloor=v$ \u65f6 $i$ \u7684\u53d6\u503c\u8303\u56f4\u662f $[l,r]$\u3002 for (LL l = 1, v, r; l <= N; l = r + 1) { v = N / l; r = N / v; } \u535a\u5f08 Nim \u6e38\u620f\uff1a\u6bcf\u8f6e\u4ece\u82e5\u5e72\u5806\u77f3\u5b50\u4e2d\u7684\u4e00\u5806\u53d6\u8d70\u82e5\u5e72\u9897\u3002\u5148\u624b\u5fc5\u80dc\u6761\u4ef6\u4e3a\u77f3\u5b50\u6570\u91cf\u5f02\u6216\u548c\u975e\u96f6\u3002 \u9636\u68af Nim \u6e38\u620f\uff1a\u53ef\u4ee5\u9009\u62e9\u9636\u68af\u4e0a\u67d0\u4e00\u5806\u4e2d\u7684\u82e5\u5e72\u9897\u5411\u4e0b\u63a8\u52a8\u4e00\u7ea7\uff0c\u76f4\u5230\u5168\u90e8\u63a8\u4e0b\u53bb\u3002\u5148\u624b\u5fc5\u80dc\u6761\u4ef6\u662f\u5947\u6570\u9636\u68af\u7684\u5f02\u6216\u548c\u975e\u96f6\uff08\u5bf9\u4e8e\u5076\u6570\u9636\u68af\u7684\u64cd\u4f5c\u53ef\u4ee5\u6a21\u4eff\uff09\u3002 Anti-SG\uff1a\u65e0\u6cd5\u64cd\u4f5c\u8005\u80dc\u3002\u5148\u624b\u5fc5\u80dc\u7684\u6761\u4ef6\u662f\uff1a SG \u4e0d\u4e3a 0 \u4e14\u67d0\u4e2a\u5355\u4e00\u6e38\u620f\u7684 SG \u5927\u4e8e 1 \u3002 SG \u4e3a 0 \u4e14\u6ca1\u6709\u5355\u4e00\u6e38\u620f\u7684 SG \u5927\u4e8e 1\u3002 Every-SG\uff1a\u5bf9\u6240\u6709\u5355\u4e00\u6e38\u620f\u90fd\u8981\u64cd\u4f5c\u3002\u5148\u624b\u5fc5\u80dc\u7684\u6761\u4ef6\u662f\u5355\u4e00\u6e38\u620f\u4e2d\u7684\u6700\u5927 step \u4e3a\u5947\u6570\u3002 \u5bf9\u4e8e\u7ec8\u6b62\u72b6\u6001 step \u4e3a 0 \u5bf9\u4e8e SG \u4e3a 0 \u7684\u72b6\u6001\uff0cstep \u662f\u6700\u5927\u540e\u7ee7 step +1 \u5bf9\u4e8e SG \u975e 0 \u7684\u72b6\u6001\uff0cstep \u662f\u6700\u5c0f\u540e\u7ee7 step +1 \u6811\u4e0a\u5220\u8fb9\uff1a\u53f6\u5b50 SG \u4e3a 0\uff0c\u975e\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6240\u6709\u5b50\u7ed3\u70b9\u7684 SG \u503c\u52a0 1 \u540e\u7684\u5f02\u6216\u548c\u3002 \u5c1d\u8bd5\uff1a \u6253\u8868\u627e\u89c4\u5f8b \u5bfb\u627e\u4e00\u7c7b\u5fc5\u80dc\u6001\uff08\u5982\u5bf9\u79f0\u5c40\u9762\uff09 \u76f4\u63a5\u535a\u5f08 dp","title":"\u6570\u5b66"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_1","text":"","title":"\u6570\u5b66"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_2","text":"struct Mat { static const LL M = 2; LL v[M][M]; Mat() { memset(v, 0, sizeof v); } void eye() { FOR (i, 0, M) v[i][i] = 1; } LL* operator [] (LL x) { return v[x]; } const LL* operator [] (LL x) const { return v[x]; } Mat operator * (const Mat& B) { const Mat& A = *this; Mat ret; FOR (k, 0, M) FOR (i, 0, M) if (A[i][k]) FOR (j, 0, M) ret[i][j] = (ret[i][j] + A[i][k] * B[k][j]) % MOD; return ret; } Mat pow(LL n) const { Mat A = *this, ret; ret.eye(); for (; n; n >>= 1, A = A * A) if (n & 1) ret = ret * A; return ret; } Mat operator + (const Mat& B) { const Mat& A = *this; Mat ret; FOR (i, 0, M) FOR (j, 0, M) ret[i][j] = (A[i][j] + B[i][j]) % MOD; return ret; } void prt() const { FOR (i, 0, M) FOR (j, 0, M) printf(\"%lld%c\", (*this)[i][j], j == M - 1 ? '\\n' : ' '); } };","title":"\u77e9\u9635\u8fd0\u7b97"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_3","text":"\u7ebf\u6027\u7b5b const LL p_max = 1E6 + 100; LL pr[p_max], p_sz; void get_prime() { static bool vis[p_max]; FOR (i, 2, p_max) { if (!vis[i]) pr[p_sz++] = i; FOR (j, 0, p_sz) { if (pr[j] * i >= p_max) break; vis[pr[j] * i] = 1; if (i % pr[j] == 0) break; } } } \u7ebf\u6027\u7b5b+\u6b27\u62c9\u51fd\u6570 const LL p_max = 1E5 + 100; LL phi[p_max]; void get_phi() { phi[1] = 1; static bool vis[p_max]; static LL prime[p_max], p_sz, d; FOR (i, 2, p_max) { if (!vis[i]) { prime[p_sz++] = i; phi[i] = i - 1; } for (LL j = 0; j < p_sz && (d = i * prime[j]) < p_max; ++j) { vis[d] = 1; if (i % prime[j] == 0) { phi[d] = phi[i] * prime[j]; break; } else phi[d] = phi[i] * (prime[j] - 1); } } } \u7ebf\u6027\u7b5b+\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 const LL p_max = 1E5 + 100; LL mu[p_max]; void get_mu() { mu[1] = 1; static bool vis[p_max]; static LL prime[p_max], p_sz, d; FOR (i, 2, p_max) { if (!vis[i]) { prime[p_sz++] = i; mu[i] = -1; } for (LL j = 0; j < p_sz && (d = i * prime[j]) < p_max; ++j) { vis[d] = 1; if (i % prime[j] == 0) { mu[d] = 0; break; } else mu[d] = -mu[i]; } } }","title":"\u7b5b"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_4","text":"","title":"\u4e9a\u7ebf\u6027\u7b5b"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#min_25","text":"namespace min25 { const int M = 1E6 + 100; LL B, N; // g(x) inline LL pg(LL x) { return 1; } inline LL ph(LL x) { return x % MOD; } // Sum[g(i),{x,2,x}] inline LL psg(LL x) { return x % MOD - 1; } inline LL psh(LL x) { static LL inv2 = (MOD + 1) / 2; x %= MOD; return x * (x + 1) % MOD * inv2 % MOD - 1; } // f(pp=p^k) inline LL fpk(LL p, LL e, LL pp) { return (pp - pp / p) % MOD; } // f(p) = fgh(g(p), h(p)) inline LL fgh(LL g, LL h) { return h - g; } LL pr[M], pc, sg[M], sh[M]; void get_prime(LL n) { static bool vis[M]; pc = 0; FOR (i, 2, n + 1) { if (!vis[i]) { pr[pc++] = i; sg[pc] = (sg[pc - 1] + pg(i)) % MOD; sh[pc] = (sh[pc - 1] + ph(i)) % MOD; } FOR (j, 0, pc) { if (pr[j] * i > n) break; vis[pr[j] * i] = 1; if (i % pr[j] == 0) break; } } } LL w[M]; LL id1[M], id2[M], h[M], g[M]; inline LL id(LL x) { return x <= B ? id1[x] : id2[N / x]; } LL go(LL x, LL k) { if (x <= 1 || (k >= 0 && pr[k] > x)) return 0; LL t = id(x); LL ans = fgh((g[t] - sg[k + 1]), (h[t] - sh[k + 1])); FOR (i, k + 1, pc) { LL p = pr[i]; if (p * p > x) break; ans -= fgh(pg(p), ph(p)); for (LL pp = p, e = 1; pp <= x; ++e, pp = pp * p) ans += fpk(p, e, pp) * (1 + go(x / pp, i)) % MOD; } return ans % MOD; } LL solve(LL _N) { N = _N; B = sqrt(N + 0.5); get_prime(B); int sz = 0; for (LL l = 1, v, r; l <= N; l = r + 1) { v = N / l; r = N / v; w[sz] = v; g[sz] = psg(v); h[sz] = psh(v); if (v <= B) id1[v] = sz; else id2[r] = sz; sz++; } FOR (k, 0, pc) { LL p = pr[k]; FOR (i, 0, sz) { LL v = w[i]; if (p * p > v) break; LL t = id(v / p); g[i] = (g[i] - (g[t] - sg[k]) * pg(p)) % MOD; h[i] = (h[i] - (h[t] - sh[k]) * ph(p)) % MOD; } } return (go(N, -1) % MOD + MOD + 1) % MOD; } pair<LL, LL> sump(LL l, LL r) { return {h[id(r)] - h[id(l - 1)], g[id(r)] - g[id(l - 1)]}; } }","title":"min_25"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_5","text":"\u6c42 $S(n)=\\sum_{i=1}^n f(i)$\uff0c\u5176\u4e2d $f$ \u662f\u4e00\u4e2a\u79ef\u6027\u51fd\u6570\u3002 \u6784\u9020\u4e00\u4e2a\u79ef\u6027\u51fd\u6570 $g$\uff0c\u90a3\u4e48\u7531 $(f g)(n)=\\sum_{d|n}f(d)g(\\frac{n}{d})$\uff0c\u5f97\u5230 $f(n)=(f g)(n)-\\sum_{d|n,d<n}f(d)g(\\frac{n}{d})$\u3002 \\begin{eqnarray} g(1)S(n)&=&\\sum_{i=1}^n (f g)(i)-\\sum_{i= 1}^{n}\\sum_{d|i,d<i}f(d)g(\\frac{n}{d}) \\ &\\overset{t=\\frac{i}{d}}{=}& \\sum_{i=1}^n (f g)(i)-\\sum_{t=2}^{n} g(t) S(\\lfloor \\frac{n}{t} \\rfloor) \\end{eqnarray} \u5f53\u7136\uff0c\u8981\u80fd\u591f\u7531\u6b64\u8ba1\u7b97 $S(n)$\uff0c\u4f1a\u5bf9 $f,g$ \u63d0\u51fa\u4e00\u4e9b\u8981\u6c42\uff1a $f*g$ \u8981\u80fd\u591f\u5feb\u901f\u6c42\u524d\u7f00\u548c\u3002 $g$ \u8981\u80fd\u591f\u5feb\u901f\u6c42\u5206\u6bb5\u548c\uff08\u524d\u7f00\u548c\uff09\u3002 \u5bf9\u4e8e\u6b63\u5e38\u7684\u79ef\u6027\u51fd\u6570 $g(1)=1$\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u5728\u9884\u5904\u7406 $S(n)$ \u524d $n^{\\frac{2}{3}}$ \u9879\u7684\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6\u662f $O(n^{\\frac{2}{3}})$\u3002 namespace dujiao { const int M = 5E6; LL f[M] = {0, 1}; void init() { static bool vis[M]; static LL pr[M], p_sz, d; FOR (i, 2, M) { if (!vis[i]) { pr[p_sz++] = i; f[i] = -1; } FOR (j, 0, p_sz) { if ((d = pr[j] * i) >= M) break; vis[d] = 1; if (i % pr[j] == 0) { f[d] = 0; break; } else f[d] = -f[i]; } } FOR (i, 2, M) f[i] += f[i - 1]; } inline LL s_fg(LL n) { return 1; } inline LL s_g(LL n) { return n; } LL N, rd[M]; bool vis[M]; LL go(LL n) { if (n < M) return f[n]; LL id = N / n; if (vis[id]) return rd[id]; vis[id] = true; LL& ret = rd[id] = s_fg(n); for (LL l = 2, v, r; l <= n; l = r + 1) { v = n / l; r = n / v; ret -= (s_g(r) - s_g(l - 1)) * go(v); } return ret; } LL solve(LL n) { N = n; memset(vis, 0, sizeof vis); return go(n); } }","title":"\u675c\u6559\u7b5b"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_6","text":"\u524d\u7f6e\uff1a \u5feb\u901f\u4e58\u3001\u5feb\u901f\u5e42 int \u8303\u56f4\u5185\u53ea\u9700\u68c0\u67e5 2, 7, 61 long long \u8303\u56f4 2, 325, 9375, 28178, 450775, 9780504, 1795265022 3E15\u5185 2, 2570940, 880937, 610386380, 4130785767 4E13\u5185 2, 2570940, 211991001, 3749873356 http://miller-rabin.appspot.com/ bool checkQ(LL a, LL n) { if (n == 2) return 1; if (n == 1 || !(n & 1)) return 0; LL d = n - 1; while (!(d & 1)) d >>= 1; LL t = bin(a, d, n); // \u4e0d\u4e00\u5b9a\u9700\u8981\u5feb\u901f\u4e58 while (d != n - 1 && t != 1 && t != n - 1) { t = mul(t, t, n); d <<= 1; } return t == n - 1 || d & 1; } bool primeQ(LL n) { static vector<LL> t = {2, 325, 9375, 28178, 450775, 9780504, 1795265022}; if (n <= 1) return false; for (LL k: t) if (!checkQ(k, n)) return false; return true; }","title":"\u7d20\u6570\u6d4b\u8bd5"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#pollard-rho","text":"mt19937 mt(time(0)); LL pollard_rho(LL n, LL c) { LL x = uniform_int_distribution<LL>(1, n - 1)(mt), y = x; auto f = [&](LL v) { LL t = mul(v, v, n) + c; return t < n ? t : t - n; }; while (1) { x = f(x); y = f(f(y)); if (x == y) return n; LL d = gcd(abs(x - y), n); if (d != 1) return d; } } LL fac[100], fcnt; void get_fac(LL n, LL cc = 19260817) { if (n == 4) { fac[fcnt++] = 2; fac[fcnt++] = 2; return; } if (primeQ(n)) { fac[fcnt++] = n; return; } LL p = n; while (p == n) p = pollard_rho(n, --cc); get_fac(p); get_fac(n / p); } void go_fac(LL n) { fcnt = 0; if (n > 1) get_fac(n); }","title":"Pollard-Rho"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#bm","text":"namespace BerlekampMassey { using V = vector<LL>; inline void up(LL& a, LL b) { (a += b) %= MOD; } V mul(const V&a, const V& b, const V& m, int k) { V r; r.resize(2 * k - 1); FOR (i, 0, k) FOR (j, 0, k) up(r[i + j], a[i] * b[j]); FORD (i, k - 2, -1) { FOR (j, 0, k) up(r[i + j], r[i + k] * m[j]); r.pop_back(); } return r; } V pow(LL n, const V& m) { int k = (int) m.size() - 1; assert (m[k] == -1 || m[k] == MOD - 1); V r(k), x(k); r[0] = x[1] = 1; for (; n; n >>= 1, x = mul(x, x, m, k)) if (n & 1) r = mul(x, r, m, k); return r; } LL go(const V& a, const V& x, LL n) { // a: (-1, a1, a2, ..., ak).reverse // x: x1, x2, ..., xk // x[n] = sum[a[i]*x[n-i],{i,1,k}] int k = (int) a.size() - 1; if (n <= k) return x[n - 1]; if (a.size() == 2) return x[0] * bin(a[0], n - 1, MOD) % MOD; V r = pow(n - 1, a); LL ans = 0; FOR (i, 0, k) up(ans, r[i] * x[i]); return (ans + MOD) % MOD; } V BM(const V& x) { V C{-1}, B{-1}; LL L = 0, m = 1, b = 1; FOR (n, 0, x.size()) { LL d = 0; FOR (i, 0, L + 1) up(d, C[i] * x[n - i]); if (d == 0) { ++m; continue; } V T = C; LL c = MOD - d * get_inv(b, MOD) % MOD; FOR (_, C.size(), B.size() + m) C.push_back(0); FOR (i, 0, B.size()) up(C[i + m], c * B[i]); if (2 * L > n) { ++m; continue; } L = n + 1 - L; B.swap(T); b = d; m = 1; } reverse(C.begin(), C.end()); return C; } }","title":"BM \u7ebf\u6027\u9012\u63a8"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_7","text":"\u6c42 $ax+by=gcd(a,b)$ \u7684\u4e00\u7ec4\u89e3 \u5982\u679c $a$ \u548c $b$ \u4e92\u7d20\uff0c\u90a3\u4e48 $x$ \u662f $a$ \u5728\u6a21 $b$ \u4e0b\u7684\u9006\u5143 \u6ce8\u610f $x$ \u548c $y$ \u53ef\u80fd\u662f\u8d1f\u6570 LL ex_gcd(LL a, LL b, LL &x, LL &y) { if (b == 0) { x = 1; y = 0; return a; } LL ret = ex_gcd(b, a % b, y, x); y -= a / b * x; return ret; } \u5361\u5e38\u6b27\u51e0\u91cc\u5f97 inline int ctz(LL x) { return __builtin_ctzll(x); } LL gcd(LL a, LL b) { if (!a) return b; if (!b) return a; int t = ctz(a | b); a >>= ctz(a); do { b >>= ctz(b); if (a > b) swap(a, b); b -= a; } while (b); return a << t; }","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_8","text":"$m = \\lfloor \\frac{an+b}{c} \\rfloor$. $f(a,b,c,n)=\\sum_{i=0}^n\\lfloor\\frac{ai+b}{c}\\rfloor$: \u5f53 $a \\ge c$ or $b \\ge c$ \u65f6\uff0c$f(a,b,c,n)=(\\frac{a}{c})n(n+1)/2+(\\frac{b}{c})(n+1)+f(a \\bmod c,b \\bmod c,c,n)$\uff1b\u5426\u5219 $f(a,b,c,n)=nm-f(c,c-b-1,a,m-1)$\u3002 $g(a,b,c,n)=\\sum_{i=0}^n i \\lfloor\\frac{ai+b}{c}\\rfloor$: \u5f53 $a \\ge c$ or $b \\ge c$ \u65f6\uff0c$g(a,b,c,n)=(\\frac{a}{c})n(n+1)(2n+1)/6+(\\frac{b}{c})n(n+1)/2+g(a \\bmod c,b \\bmod c,c,n)$\uff1b\u5426\u5219 $g(a,b,c,n)=\\frac{1}{2} (n(n+1)m-f(c,c-b-1,a,m-1)-h(c,c-b-1,a,m-1))$\u3002 $h(a,b,c,n)=\\sum_{i=0}^n\\lfloor \\frac{ai+b}{c} \\rfloor^2$: \u5f53 $a \\ge c$ or $b \\ge c$ \u65f6\uff0c$h(a,b,c,n)=(\\frac{a}{c})^2 n(n+1)(2n+1)/6 +(\\frac{b}{c})^2 (n+1)+(\\frac{a}{c})(\\frac{b}{c})n(n+1)+h(a \\bmod c, b \\bmod c,c,n)+2(\\frac{a}{c})g(a \\bmod c,b \\bmod c,c,n)+2(\\frac{b}{c})f(a \\bmod c,b \\bmod c,c,n)$\uff1b\u5426\u5219 $h(a,b,c,n)=nm(m+1)-2g(c,c-b-1,a,m-1)-2f(c,c-b-1,a,m-1)-f(a,b,c,n)$\u3002","title":"\u7c7b\u6b27\u51e0\u91cc\u5f97"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_9","text":"\u5982\u679c $p$ \u4e0d\u662f\u7d20\u6570\uff0c\u4f7f\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97 \u524d\u7f6e\u6a21\u677f\uff1a\u5feb\u901f\u5e42 / \u6269\u5c55\u6b27\u51e0\u91cc\u5f97 inline LL get_inv(LL x, LL p) { return bin(x, p - 2, p); } LL get_inv(LL a, LL M) { static LL x, y; assert(exgcd(a, M, x, y) == 1); return (x % M + M) % M; } \u9884\u5904\u7406 1~n \u7684\u9006\u5143 LL inv[N]; void inv_init(LL n, LL p) { inv[1] = 1; FOR (i, 2, n) inv[i] = (p - p / i) * inv[p % i] % p; } \u9884\u5904\u7406\u9636\u4e58\u53ca\u5176\u9006\u5143 LL invf[M], fac[M] = {1}; void fac_inv_init(LL n, LL p) { FOR (i, 1, n) fac[i] = i * fac[i - 1] % p; invf[n - 1] = bin(fac[n - 1], p - 2, p); FORD (i, n - 2, -1) invf[i] = invf[i + 1] * (i + 1) % p; }","title":"\u9006\u5143"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_10","text":"\u5982\u679c\u6570\u8f83\u5c0f\uff0c\u6a21\u8f83\u5927\u65f6\u4f7f\u7528\u9006\u5143 \u524d\u7f6e\u6a21\u677f\uff1a\u9006\u5143-\u9884\u5904\u7406\u9636\u4e58\u53ca\u5176\u9006\u5143 inline LL C(LL n, LL m) { // n >= m >= 0 return n < m || m < 0 ? 0 : fac[n] * invf[m] % MOD * invf[n - m] % MOD; } \u5982\u679c\u6a21\u6570\u8f83\u5c0f\uff0c\u6570\u5b57\u8f83\u5927\uff0c\u4f7f\u7528 Lucas \u5b9a\u7406 \u524d\u7f6e\u6a21\u677f\u53ef\u90091\uff1a\u6c42\u7ec4\u5408\u6570 \uff08\u5982\u679c\u4f7f\u7528\u9636\u4e58\u9006\u5143\uff0c\u9700 fac_inv_init(MOD, MOD); \uff09 \u524d\u7f6e\u6a21\u677f\u53ef\u90092\uff1a\u6a21\u6570\u4e0d\u56fa\u5b9a\u4e0b\u4f7f\u7528\uff0c\u65e0\u6cd5\u5355\u72ec\u4f7f\u7528\u3002 LL C(LL n, LL m) { // m >= n >= 0 if (m - n < n) n = m - n; if (n < 0) return 0; LL ret = 1; FOR (i, 1, n + 1) ret = ret * (m - n + i) % MOD * bin(i, MOD - 2, MOD) % MOD; return ret; } LL Lucas(LL n, LL m) { // m >= n >= 0 return m ? C(n % MOD, m % MOD) * Lucas(n / MOD, m / MOD) % MOD : 1; } \u7ec4\u5408\u6570\u9884\u5904\u7406 LL C[M][M]; void init_C(int n) { FOR (i, 0, n) { C[i][0] = C[i][i] = 1; FOR (j, 1, i) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD; } }","title":"\u7ec4\u5408\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_11","text":"","title":"\u65af\u7279\u7075\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_12","text":"\u7edd\u5bf9\u503c\u662f $n$ \u4e2a\u5143\u7d20\u5212\u5206\u4e3a $k$ \u4e2a\u73af\u6392\u5217\u7684\u65b9\u6848\u6570\u3002 $s(n,k)=s(n-1,k-1)+(n-1)s(n-1,k)$","title":"\u7b2c\u4e00\u7c7b\u65af\u7279\u7075\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_13","text":"$n$ \u4e2a\u5143\u7d20\u5212\u5206\u4e3a $k$ \u4e2a\u7b49\u4ef7\u7c7b\u7684\u65b9\u6848\u6570 $S(n, k)=S(n-1,k-1)+kS(n-1, k)$ S[0][0] = 1; FOR (i, 1, N) FOR (j, 1, i + 1) S[i][j] = (S[i - 1][j - 1] + j * S[i - 1][j]) % MOD;","title":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u7075\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#fft-ntt-fwt","text":"","title":"FFT &amp; NTT &amp; FWT"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#ntt","text":"LL wn[N << 2], rev[N << 2]; int NTT_init(int n_) { int step = 0; int n = 1; for ( ; n < n_; n <<= 1) ++step; FOR (i, 1, n) rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (step - 1)); int g = bin(G, (MOD - 1) / n, MOD); wn[0] = 1; for (int i = 1; i <= n; ++i) wn[i] = wn[i - 1] * g % MOD; return n; } void NTT(LL a[], int n, int f) { FOR (i, 0, n) if (i < rev[i]) std::swap(a[i], a[rev[i]]); for (int k = 1; k < n; k <<= 1) { for (int i = 0; i < n; i += (k << 1)) { int t = n / (k << 1); FOR (j, 0, k) { LL w = f == 1 ? wn[t * j] : wn[n - t * j]; LL x = a[i + j]; LL y = a[i + j + k] * w % MOD; a[i + j] = (x + y) % MOD; a[i + j + k] = (x - y + MOD) % MOD; } } } if (f == -1) { LL ninv = get_inv(n, MOD); FOR (i, 0, n) a[i] = a[i] * ninv % MOD; } }","title":"NTT"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#fft","text":"n \u9700\u8865\u6210 2 \u7684\u5e42 \uff08n \u5fc5\u987b\u8d85\u8fc7 a \u548c b \u7684\u6700\u9ad8\u6307\u6570\u4e4b\u548c\uff09 typedef double LD; const LD PI = acos(-1); struct C { LD r, i; C(LD r = 0, LD i = 0): r(r), i(i) {} }; C operator + (const C& a, const C& b) { return C(a.r + b.r, a.i + b.i); } C operator - (const C& a, const C& b) { return C(a.r - b.r, a.i - b.i); } C operator * (const C& a, const C& b) { return C(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r); } void FFT(C x[], int n, int p) { for (int i = 0, t = 0; i < n; ++i) { if (i > t) swap(x[i], x[t]); for (int j = n >> 1; (t ^= j) < j; j >>= 1); } for (int h = 2; h <= n; h <<= 1) { C wn(cos(p * 2 * PI / h), sin(p * 2 * PI / h)); for (int i = 0; i < n; i += h) { C w(1, 0), u; for (int j = i, k = h >> 1; j < i + k; ++j) { u = x[j + k] * w; x[j + k] = x[j] - u; x[j] = x[j] + u; w = w * wn; } } } if (p == -1) FOR (i, 0, n) x[i].r /= n; } void conv(C a[], C b[], int n) { FFT(a, n, 1); FFT(b, n, 1); FOR (i, 0, n) a[i] = a[i] * b[i]; FFT(a, n, -1); }","title":"FFT"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#fwt","text":"$C_k=\\sum_{i \\oplus j=k} A_i B_j$ FWT \u5b8c\u540e\u9700\u8981\u5148\u6a21\u4e00\u904d template<typename T> void fwt(LL a[], int n, T f) { for (int d = 1; d < n; d *= 2) for (int i = 0, t = d * 2; i < n; i += t) FOR (j, 0, d) f(a[i + j], a[i + j + d]); } void AND(LL& a, LL& b) { a += b; } void OR(LL& a, LL& b) { b += a; } void XOR (LL& a, LL& b) { LL x = a, y = b; a = (x + y) % MOD; b = (x - y + MOD) % MOD; } void rAND(LL& a, LL& b) { a -= b; } void rOR(LL& a, LL& b) { b -= a; } void rXOR(LL& a, LL& b) { static LL INV2 = (MOD + 1) / 2; LL x = a, y = b; a = (x + y) * INV2 % MOD; b = (x - y + MOD) * INV2 % MOD; } FWT \u5b50\u96c6\u5377\u79ef a[popcount(x)][x] = A[x] b[popcount(x)][x] = B[x] fwt(a[i]) fwt(b[i]) c[i + j][x] += a[i][x] * b[j][x] rfwt(c[i]) ans[x] = c[popcount(x)][x]","title":"FWT"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#simpson","text":"LD simpson(LD l, LD r) { LD c = (l + r) / 2; return (f(l) + 4 * f(c) + f(r)) * (r - l) / 6; } LD asr(LD l, LD r, LD eps, LD S) { LD m = (l + r) / 2; LD L = simpson(l, m), R = simpson(m, r); if (fabs(L + R - S) < 15 * eps) return L + R + (L + R - S) / 15; return asr(l, m, eps / 2, L) + asr(m, r, eps / 2, R); } LD asr(LD l, LD r, LD eps) { return asr(l, r, eps, simpson(l, r)); } FWT template<typename T> void fwt(LL a[], int n, T f) { for (int d = 1; d < n; d *= 2) for (int i = 0, t = d * 2; i < n; i += t) FOR (j, 0, d) f(a[i + j], a[i + j + d]); } auto f = [](LL& a, LL& b) { // xor LL x = a, y = b; a = (x + y) % MOD; b = (x - y + MOD) % MOD; };","title":"simpson \u81ea\u9002\u5e94\u79ef\u5206"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_14","text":"LL mul(LL a, LL b, LL m) { LL ret = 0; while (b) { if (b & 1) { ret += a; if (ret >= m) ret -= m; } a += a; if (a >= m) a -= m; b >>= 1; } return ret; } O(1) LL mul(LL u, LL v, LL p) { return (u * v - LL((long double) u * v / p) * p + p) % p; } LL mul(LL u, LL v, LL p) { // \u5361\u5e38 LL t = u * v - LL((long double) u * v / p) * p; return t < 0 ? t + p : t; }","title":"\u5feb\u901f\u4e58"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_15","text":"\u5982\u679c\u6a21\u6570\u662f\u7d20\u6570\uff0c\u5219\u53ef\u5728\u51fd\u6570\u4f53\u5185\u52a0\u4e0a n %= MOD - 1; \uff08\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff09\u3002 LL bin(LL x, LL n, LL MOD) { LL ret = MOD != 1; for (x %= MOD; n; n >>= 1, x = x * x % MOD) if (n & 1) ret = ret * x % MOD; return ret; } \u9632\u7206 LL \u524d\u7f6e\u6a21\u677f\uff1a\u5feb\u901f\u4e58 LL bin(LL x, LL n, LL MOD) { LL ret = MOD != 1; for (x %= MOD; n; n >>= 1, x = mul(x, x, MOD)) if (n & 1) ret = mul(ret, x, MOD); return ret; }","title":"\u5feb\u901f\u5e42"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_16","text":"n - \u65b9\u7a0b\u4e2a\u6570\uff0cm - \u53d8\u91cf\u4e2a\u6570\uff0c a \u662f n * (m + 1) \u7684\u589e\u5e7f\u77e9\u9635\uff0cfree \u662f\u5426\u4e3a\u81ea\u7531\u53d8\u91cf \u8fd4\u56de\u81ea\u7531\u53d8\u91cf\u4e2a\u6570\uff0c-1 \u65e0\u89e3 \u6d6e\u70b9\u6570\u7248\u672c typedef double LD; const LD eps = 1E-10; const int maxn = 2000 + 10; int n, m; LD a[maxn][maxn], x[maxn]; bool free_x[maxn]; inline int sgn(LD x) { return (x > eps) - (x < -eps); } int gauss(LD a[maxn][maxn], int n, int m) { memset(free_x, 1, sizeof free_x); memset(x, 0, sizeof x); int r = 0, c = 0; while (r < n && c < m) { int m_r = r; FOR (i, r + 1, n) if (fabs(a[i][c]) > fabs(a[m_r][c])) m_r = i; if (m_r != r) FOR (j, c, m + 1) swap(a[r][j], a[m_r][j]); if (!sgn(a[r][c])) { a[r][c] = 0; ++c; continue; } FOR (i, r + 1, n) if (a[i][c]) { LD t = a[i][c] / a[r][c]; FOR (j, c, m + 1) a[i][j] -= a[r][j] * t; } ++r; ++c; } FOR (i, r, n) if (sgn(a[i][m])) return -1; if (r < m) { FORD (i, r - 1, -1) { int f_cnt = 0, k = -1; FOR (j, 0, m) if (sgn(a[i][j]) && free_x[j]) { ++f_cnt; k = j; } if(f_cnt > 0) continue; LD s = a[i][m]; FOR (j, 0, m) if (j != k) s -= a[i][j] * x[j]; x[k] = s / a[i][k]; free_x[k] = 0; } return m - r; } FORD (i, m - 1, -1) { LD s = a[i][m]; FOR (j, i + 1, m) s -= a[i][j] * x[j]; x[i] = s / a[i][i]; } return 0; } \u6570\u636e 3 4 1 1 -2 2 2 -3 5 1 4 -1 1 5 5 0 -1 7 // many 3 4 1 1 -2 2 2 -3 5 1 4 -1 -1 5 5 0 -1 0 2 // no 3 4 1 1 -2 2 2 -3 5 1 4 -1 1 5 5 0 1 0 7 // one","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_17","text":"\u524d\u7f6e\u6a21\u677f\uff1a\u7d20\u6570\u7b5b \u5e26\u6307\u6570 LL factor[30], f_sz, factor_exp[30]; void get_factor(LL x) { f_sz = 0; LL t = sqrt(x + 0.5); for (LL i = 0; pr[i] <= t; ++i) if (x % pr[i] == 0) { factor_exp[f_sz] = 0; while (x % pr[i] == 0) { x /= pr[i]; ++factor_exp[f_sz]; } factor[f_sz++] = pr[i]; } if (x > 1) { factor_exp[f_sz] = 1; factor[f_sz++] = x; } } \u4e0d\u5e26\u6307\u6570 LL factor[30], f_sz; void get_factor(LL x) { f_sz = 0; LL t = sqrt(x + 0.5); for (LL i = 0; pr[i] <= t; ++i) if (x % pr[i] == 0) { factor[f_sz++] = pr[i]; while (x % pr[i] == 0) x /= pr[i]; } if (x > 1) factor[f_sz++] = x; }","title":"\u8d28\u56e0\u6570\u5206\u89e3"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_18","text":"\u524d\u7f6e\u6a21\u677f\uff1a\u7d20\u6570\u7b5b\uff0c\u5feb\u901f\u5e42\uff0c\u5206\u89e3\u8d28\u56e0\u6570 \u8981\u6c42 p \u4e3a\u8d28\u6570 LL find_smallest_primitive_root(LL p) { get_factor(p - 1); FOR (i, 2, p) { bool flag = true; FOR (j, 0, f_sz) if (bin(i, (p - 1) / factor[j], p) == 1) { flag = false; break; } if (flag) return i; } assert(0); return -1; }","title":"\u539f\u6839"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_19","text":"","title":"\u516c\u5f0f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_20","text":"\u5f53 $x\\geq\\phi(p)$ \u65f6\u6709 $a^x\\equiv a^{x \\; mod \\; \\phi(p) + \\phi(p)}\\pmod p$ $\\mu^2(n)=\\sum_{d^2|n} \\mu(d)$ $\\sum_{d|n} \\varphi(d)=n$ $\\sum_{d|n} 2^{\\omega(d)}=\\sigma_0(n^2)$\uff0c\u5176\u4e2d $\\omega$ \u662f\u4e0d\u540c\u7d20\u56e0\u5b50\u4e2a\u6570 $\\sum_{d|n} \\mu^2(d)=2^{\\omega(d)}$","title":"\u4e00\u4e9b\u6570\u8bba\u516c\u5f0f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_21","text":"$\\sum_{i=1}^n i[gcd(i, n)=1] = \\frac {n \\varphi(n) + [n=1]}{2}$ $\\sum_{i=1}^n \\sum_{j=1}^m [gcd(i,j)=x]=\\sum_d \\mu(d) \\lfloor \\frac n {dx} \\rfloor \\lfloor \\frac m {dx} \\rfloor$ $\\sum_{i=1}^n \\sum_{j=1}^m gcd(i, j) = \\sum_{i=1}^n \\sum_{j=1}^m \\sum_{d|gcd(i,j)} \\varphi(d) = \\sum_{d} \\varphi(d) \\lfloor \\frac nd \\rfloor \\lfloor \\frac md \\rfloor$ $S(n)=\\sum_{i=1}^n \\mu(i)=1-\\sum_{i=1}^n \\sum_{d|i,d < i}\\mu(d) \\overset{t=\\frac id}{=} 1-\\sum_{t=2}^nS(\\lfloor \\frac nt \\rfloor)$ \u5229\u7528 $[n=1] = \\sum_{d|n} \\mu(d)$ $S(n)=\\sum_{i=1}^n \\varphi(i)=\\sum_{i=1}^n i-\\sum_{i=1}^n \\sum_{d|i,d<i} \\varphi(i)\\overset{t=\\frac id}{=} \\frac {i(i+1)}{2} - \\sum_{t=2}^n S(\\frac n t)$ \u5229\u7528 $n = \\sum_{d|n} \\varphi(d)$ $\\sum_{i=1}^n \\mu^2(i) = \\sum_{i=1}^n \\sum_{d^2|n} \\mu(d)=\\sum_{d=1}^{\\lfloor \\sqrt n \\rfloor}\\mu(d) \\lfloor \\frac n {d^2} \\rfloor$ $\\sum_{i=1}^n \\sum_{j=1}^n gcd^2(i, j)= \\sum_{d} d^2 \\sum_{t} \\mu(t) \\lfloor \\frac n{dt} \\rfloor ^2 \\ \\overset{x=dt}{=} \\sum_{x} \\lfloor \\frac nx \\rfloor ^ 2 \\sum_{d|x} d^2 \\mu(\\frac xd)$ $\\sum_{i=1}^n \\varphi(i)=\\frac 12 \\sum_{i=1}^n \\sum_{j=1}^n [i \\perp j] - 1=\\frac 12 \\sum_{i=1}^n \\mu(i) \\cdot\\lfloor \\frac n i \\rfloor ^2-1$","title":"\u4e00\u4e9b\u6570\u8bba\u51fd\u6570\u6c42\u548c\u7684\u4f8b\u5b50"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_22","text":"$F_{a+b}=F_{a-1} \\cdot F_b+F_a \\cdot F_{b+1}$ $F_1+F_3+\\dots +F_{2n-1} = F_{2n},F_2 + F_4 + \\dots + F_{2n} = F_{2n + 1} - 1$ $\\sum_{i=1}^n F_i = F_{n+2} - 1$ $\\sum_{i=1}^n F_i^2 = F_n \\cdot F_{n+1}$ $F_n^2=(-1)^{n-1} + F_{n-1} \\cdot F_{n+1}$ $gcd(F_a, F_b)=F_{gcd(a, b)}$ \u6a21 $n$ \u5468\u671f\uff08\u76ae\u8428\u8bfa\u5468\u671f\uff09 $\\pi(p^k) = p^{k-1} \\pi(p)$ $\\pi(nm) = lcm(\\pi(n), \\pi(m)), \\forall n \\perp m$ $\\pi(2)=3, \\pi(5)=20$ $\\forall p \\equiv \\pm 1\\pmod {10}, \\pi(p)|p-1$ $\\forall p \\equiv \\pm 2\\pmod {5}, \\pi(p)|2p+2$","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6027\u8d28"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_23","text":"$(1+ax)^n=\\sum_{k=0}^n \\binom {n}{k} a^kx^k$ $\\dfrac{1-x^{r+1}}{1-x}=\\sum_{k=0}^nx^k$ $\\dfrac1{1-ax}=\\sum_{k=0}^{\\infty}a^kx^k$ $\\dfrac 1{(1-x)^2}=\\sum_{k=0}^{\\infty}(k+1)x^k$ $\\dfrac1{(1-x)^n}=\\sum_{k=0}^{\\infty} \\binom{n+k-1}{k}x^k$ $e^x=\\sum_{k=0}^{\\infty}\\dfrac{x^k}{k!}$ $\\ln(1+x)=\\sum_{k=0}^{\\infty}\\dfrac{(-1)^{k+1}}{k}x^k$","title":"\u5e38\u89c1\u751f\u6210\u51fd\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_24","text":"\u82e5\u4e00\u4e2a\u4e22\u756a\u56fe\u65b9\u7a0b\u5177\u6709\u4ee5\u4e0b\u7684\u5f62\u5f0f\uff1a$x^2 - ny^2= 1$\u3002\u4e14 $n$ \u4e3a\u6b63\u6574\u6570\uff0c\u5219\u79f0\u6b64\u4e8c\u5143\u4e8c\u6b21\u4e0d\u5b9a\u65b9\u7a0b\u4e3a \u4f69\u5c14\u65b9\u7a0b \u3002 \u82e5 $n$ \u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd9\u4e2a\u65b9\u7a0b\u5f0f\u53ea\u6709\u5e73\u51e1\u89e3 $(\\pm 1,0)$\uff08\u5b9e\u9645\u4e0a\u5bf9\u4efb\u610f\u7684 $n$\uff0c$(\\pm 1,0)$ \u90fd\u662f\u89e3\uff09\u3002\u5bf9\u4e8e\u5176\u4f59\u60c5\u51b5\uff0c\u62c9\u683c\u6717\u65e5\u8bc1\u660e\u4e86\u4f69\u5c14\u65b9\u7a0b\u603b\u6709\u975e\u5e73\u51e1\u89e3\u3002\u800c\u8fd9\u4e9b\u89e3\u53ef\u7531 $\\sqrt{n}$ \u7684\u8fde\u5206\u6570\u6c42\u51fa\u3002 $x = [a_0; a_1, a_2, a_3]=x = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{a_3 + \\cfrac{1}{\\ddots\\,}}}}$ \u8bbe $\\tfrac{p_i}{q_i}$ \u662f $\\sqrt{n}$ \u7684\u8fde\u5206\u6570\u8868\u793a\uff1a$[a_{0}; a_{1}, a_{2}, a_{3}, \\,\\ldots ]$ \u7684\u6e10\u8fd1\u5206\u6570\u5217\uff0c\u7531\u8fde\u5206\u6570\u7406\u8bba\u77e5\u5b58\u5728 $i$ \u4f7f\u5f97 $(p_i,q_i)$ \u4e3a\u4f69\u5c14\u65b9\u7a0b\u7684\u89e3\u3002\u53d6\u5176\u4e2d\u6700\u5c0f\u7684 $i$\uff0c\u5c06\u5bf9\u5e94\u7684 $(p_i,q_i)$ \u79f0\u4e3a\u4f69\u5c14\u65b9\u7a0b\u7684\u57fa\u672c\u89e3\uff0c\u6216\u6700\u5c0f\u89e3\uff0c\u8bb0\u4f5c $(x_1,y_1)$\uff0c\u5219\u6240\u6709\u7684\u89e3 $(x_i,y_i)$ \u53ef\u8868\u793a\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a$x_{i}+y_{i}{\\sqrt n}=(x_{1}+y_{1}{\\sqrt n})^{i}$\u3002\u6216\u8005\u7531\u4ee5\u4e0b\u7684\u9012\u56de\u5173\u7cfb\u5f0f\u5f97\u5230\uff1a $\\displaystyle x_{i+1} = x_1 x_i + n y_1 y_i$, $\\displaystyle y_{{i+1}}=x_{1}y_{i}+y_{1}x_{i}$\u3002 \u4f46\u662f\uff1a \u4f69\u5c14\u65b9\u7a0b\u5343\u4e07\u4e0d\u8981\u53bb\u63a8\uff08\u867d\u7136\u63a8\u8d77\u6765\u5f88\u6709\u8da3\uff0c\u4f46\u7ed3\u679c\u4e0d\u4e00\u5b9a\u597d\u770b\uff0c\u4f1a\u662f\u4e24\u4e2a\u5f0f\u5b50\uff09\u3002\u8bb0\u4f4f\u4f69\u5c14\u65b9\u7a0b\u7ed3\u679c\u7684\u5f62\u5f0f\u901a\u5e38\u662f $a_n=ka_{n\u22121}\u2212a_{n\u22122}$\uff08$a_{n\u22122}$ \u524d\u7684\u7cfb\u6570\u901a\u5e38\u662f $\u22121$\uff09\u3002\u66b4\u529b / \u51d1\u51fa\u4e24\u4e2a\u57fa\u7840\u89e3\u4e4b\u540e\u52a0\u4e0a\u4e00\u4e2a $0$\uff0c\u5bb9\u6613\u89e3\u51fa $k$ \u5e76\u9a8c\u8bc1\u3002","title":"\u4f69\u5c14\u65b9\u7a0b"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#burnside-polya","text":"$|X/G|={\\frac {1}{|G|}}\\sum _{{g\\in G}}|X^{g}|$ \u6ce8\uff1a$X^g$ \u662f $g$ \u4e0b\u7684\u4e0d\u52a8\u70b9\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u591a\u5c11\u79cd\u4e1c\u897f\u7528 $g$ \u4f5c\u7528\u4e4b\u540e\u53ef\u4ee5\u4fdd\u6301\u4e0d\u53d8\u3002 $|Y^X/G| = \\frac{1}{|G|}\\sum_{g \\in G} m^{c(g)}$ \u6ce8\uff1a\u7528 $m$ \u79cd\u989c\u8272\u67d3\u8272\uff0c\u7136\u540e\u5bf9\u4e8e\u67d0\u4e00\u79cd\u7f6e\u6362 $g$\uff0c\u6709 $c(g)$ \u4e2a\u7f6e\u6362\u73af\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7f6e\u6362\u540e\u989c\u8272\u4ecd\u7136\u76f8\u540c\uff0c\u6bcf\u4e2a\u7f6e\u6362\u73af\u5fc5\u987b\u67d3\u6210\u540c\u8272\u3002","title":"Burnside &amp; Polya"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_25","text":"$2S = 2a+b-2$ $S$ \u591a\u8fb9\u5f62\u9762\u79ef $a$ \u591a\u8fb9\u5f62\u5185\u90e8\u70b9\u6570 $b$ \u591a\u8fb9\u5f62\u8fb9\u4e0a\u70b9\u6570","title":"\u76ae\u514b\u5b9a\u7406"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_26","text":"$g(n) = \\sum_{d|n} f(d) \\Leftrightarrow f(n) = \\sum_{d|n} \\mu (d) g( \\frac{n}{d})$ $f(n)=\\sum_{n|d}g(d) \\Leftrightarrow g(n)=\\sum_{n|d} \\mu(\\frac{d}{n}) f(d)$","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_27","text":"$\\sum_{i=1}^{n} i^{1} = \\frac{n(n+1)}{2} = \\frac{1}{2}n^2 +\\frac{1}{2} n$ $\\sum_{i=1}^{n} i^{2} = \\frac{n(n+1)(2n+1)}{6} = \\frac{1}{3}n^3 + \\frac{1}{2}n^2 + \\frac{1}{6}n$ $\\sum_{i=1}^{n} i^{3} = \\left[\\frac{n(n+1)}{2}\\right]^{2} = \\frac{1}{4}n^4 + \\frac{1}{2}n^3 + \\frac{1}{4}n^2$ $\\sum_{i=1}^{n} i^{4} = \\frac{n(n+1)(2n+1)(3n^2+3n-1)}{30} = \\frac{1}{5}n^5 + \\frac{1}{2}n^4 + \\frac{1}{3}n^3 - \\frac{1}{30}n$ $\\sum_{i=1}^{n} i^{5} = \\frac{n^{2}(n+1)^{2}(2n^2+2n-1)}{12} = \\frac{1}{6}n^6 + \\frac{1}{2}n^5 + \\frac{5}{12}n^4 - \\frac{1}{12}n^2$","title":"\u4f4e\u9636\u7b49\u5e42\u6c42\u548c"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_28","text":"\u9519\u6392\u516c\u5f0f\uff1a$D_1=0,D_2=1,D_n=(n-1)(D_{n-1} + D_{n-2})=n!(\\frac 1{2!}-\\frac 1{3!}+\\dots + (-1)^n\\frac 1{n!})=\\lfloor \\frac{n!}e + 0.5 \\rfloor$ \u5361\u5854\u5170\u6570\uff08$n$ \u5bf9\u62ec\u53f7\u5408\u6cd5\u65b9\u6848\u6570\uff0c$n$ \u4e2a\u7ed3\u70b9\u4e8c\u53c9\u6811\u4e2a\u6570\uff0c$n\\times n$ \u65b9\u683c\u4e2d\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u7684\u5355\u8c03\u8def\u5f84\u6570\uff0c\u51f8 $n+2$ \u8fb9\u5f62\u7684\u4e09\u89d2\u5f62\u5212\u5206\u6570\uff0c$n$ \u4e2a\u5143\u7d20\u7684\u5408\u6cd5\u51fa\u6808\u5e8f\u5217\u6570\uff09\uff1a$C_n=\\frac 1{n+1}\\binom {2n}n=\\frac{(2n)!}{(n+1)!n!}$","title":"\u4e00\u4e9b\u7ec4\u5408\u516c\u5f0f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_29","text":"URAL 1132 LL q1, q2, w; struct P { // x + y * sqrt(w) LL x, y; }; P pmul(const P& a, const P& b, LL p) { P res; res.x = (a.x * b.x + a.y * b.y % p * w) % p; res.y = (a.x * b.y + a.y * b.x) % p; return res; } P bin(P x, LL n, LL MOD) { P ret = {1, 0}; for (; n; n >>= 1, x = pmul(x, x, MOD)) if (n & 1) ret = pmul(ret, x, MOD); return ret; } LL Legendre(LL a, LL p) { return bin(a, (p - 1) >> 1, p); } LL equation_solve(LL b, LL p) { if (p == 2) return 1; if ((Legendre(b, p) + 1) % p == 0) return -1; LL a; while (true) { a = rand() % p; w = ((a * a - b) % p + p) % p; if ((Legendre(w, p) + 1) % p == 0) break; } return bin({a, 1}, (p + 1) >> 1, p).x; } int main() { int T; cin >> T; while (T--) { LL a, p; cin >> a >> p; a = a % p; LL x = equation_solve(a, p); if (x == -1) { puts(\"No root\"); } else { LL y = p - x; if (x == y) cout << x << endl; else cout << min(x, y) << \" \" << max(x, y) << endl; } } }","title":"\u4e8c\u6b21\u5269\u4f59"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_30","text":"\u65e0\u89e3\u8fd4\u56de -1 \u524d\u7f6e\u6a21\u677f\uff1a\u6269\u5c55\u6b27\u51e0\u91cc\u5f97 LL CRT(LL *m, LL *r, LL n) { if (!n) return 0; LL M = m[0], R = r[0], x, y, d; FOR (i, 1, n) { d = ex_gcd(M, m[i], x, y); if ((r[i] - R) % d) return -1; x = (r[i] - R) / d * x % (m[i] / d); // \u9632\u7206 LL // x = mul((r[i] - R) / d, x, m[i] / d); R += x * M; M = M / d * m[i]; R %= M; } return R >= 0 ? R : R + M; }","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_31","text":"\u9884\u5904\u7406\u9006\u5143 \u9884\u5904\u7406\u7ec4\u5408\u6570 $\\sum_{i=0}^n i^k = \\frac{1}{k+1} \\sum_{i=0}^k \\binom{k+1}{i} B_{k+1-i} (n+1)^i$. \u4e5f\u53ef\u4ee5 $\\sum_{i=0}^n i^k = \\frac{1}{k+1} \\sum_{i=0}^k \\binom{k+1}{i} B^+_{k+1-i} n^i$\u3002\u533a\u522b\u5728\u4e8e $B^+_1 =1/2$\u3002(\u5fc3\u6001\u5d29\u4e86) namespace Bernoulli { const int M = 100; LL inv[M] = {-1, 1}; void inv_init(LL n, LL p) { FOR (i, 2, n) inv[i] = (p - p / i) * inv[p % i] % p; } LL C[M][M]; void init_C(int n) { FOR (i, 0, n) { C[i][0] = C[i][i] = 1; FOR (j, 1, i) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD; } } LL B[M] = {1}; void init() { inv_init(M, MOD); init_C(M); FOR (i, 1, M - 1) { LL& s = B[i] = 0; FOR (j, 0, i) s += C[i + 1][j] * B[j] % MOD; s = (s % MOD * -inv[i + 1] % MOD + MOD) % MOD; } } LL p[M] = {1}; LL go(LL n, LL k) { n %= MOD; if (k == 0) return n; FOR (i, 1, k + 2) p[i] = p[i - 1] * (n + 1) % MOD; LL ret = 0; FOR (i, 1, k + 2) ret += C[k + 1][i] * B[k + 1 - i] % MOD * p[i] % MOD; ret = ret % MOD * inv[k + 1] % MOD; return ret; } }","title":"\u4f2f\u52aa\u5229\u6570\u548c\u7b49\u5e42\u6c42\u548c"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_32","text":"\u8981\u6c42\u6709\u57fa\u672c\u89e3\uff0c\u4e5f\u5c31\u662f x \u4e3a\u96f6\u5411\u91cf\u53ef\u884c v \u8981\u521d\u59cb\u5316\u4e3a 0\uff0cn \u8868\u793a\u5411\u91cf\u957f\u5ea6\uff0cm \u8868\u793a\u7ea6\u675f\u4e2a\u6570 // min{ b x } / max { c x } // A x >= c / A x <= b // x >= 0 namespace lp { int n, m; double a[M][N], b[M], c[N], v; void pivot(int l, int e) { b[l] /= a[l][e]; FOR (j, 0, n) if (j != e) a[l][j] /= a[l][e]; a[l][e] = 1 / a[l][e]; FOR (i, 0, m) if (i != l && fabs(a[i][e]) > 0) { b[i] -= a[i][e] * b[l]; FOR (j, 0, n) if (j != e) a[i][j] -= a[i][e] * a[l][j]; a[i][e] = -a[i][e] * a[l][e]; } v += c[e] * b[l]; FOR (j, 0, n) if (j != e) c[j] -= c[e] * a[l][j]; c[e] = -c[e] * a[l][e]; } double simplex() { while (1) { v = 0; int e = -1, l = -1; FOR (i, 0, n) if (c[i] > eps) { e = i; break; } if (e == -1) return v; double t = INF; FOR (i, 0, m) if (a[i][e] > eps && t > b[i] / a[i][e]) { t = b[i] / a[i][e]; l = i; } if (l == -1) return INF; pivot(l, e); } } }","title":"\u5355\u7eaf\u5f62"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_33","text":"","title":"\u79bb\u6563\u5bf9\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#bsgs","text":"\u6a21\u6570\u4e3a\u7d20\u6570 LL BSGS(LL a, LL b, LL p) { // a^x = b (mod p) a %= p; if (!a && !b) return 1; if (!a) return -1; static map<LL, LL> mp; mp.clear(); LL m = sqrt(p + 1.5); LL v = 1; FOR (i, 1, m + 1) { v = v * a % p; mp[v * b % p] = i; } LL vv = v; FOR (i, 1, m + 1) { auto it = mp.find(vv); if (it != mp.end()) return i * m - it->second; vv = vv * v % p; } return -1; }","title":"BSGS"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#exbsgs","text":"\u6a21\u6570\u53ef\u4ee5\u975e\u7d20\u6570 LL exBSGS(LL a, LL b, LL p) { // a^x = b (mod p) a %= p; b %= p; if (a == 0) return b > 1 ? -1 : b == 0 && p != 1; LL c = 0, q = 1; while (1) { LL g = __gcd(a, p); if (g == 1) break; if (b == 1) return c; if (b % g) return -1; ++c; b /= g; p /= g; q = a / g * q % p; } static map<LL, LL> mp; mp.clear(); LL m = sqrt(p + 1.5); LL v = 1; FOR (i, 1, m + 1) { v = v * a % p; mp[v * b % p] = i; } FOR (i, 1, m + 1) { q = q * v % p; auto it = mp.find(q); if (it != mp.end()) return i * m - it->second + c; } return -1; }","title":"exBSGS"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_34","text":"$f(i) = \\lfloor \\frac{n}{i} \\rfloor=v$ \u65f6 $i$ \u7684\u53d6\u503c\u8303\u56f4\u662f $[l,r]$\u3002 for (LL l = 1, v, r; l <= N; l = r + 1) { v = N / l; r = N / v; }","title":"\u6570\u8bba\u5206\u5757"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/2-%E6%95%B0%E5%AD%A6/#_35","text":"Nim \u6e38\u620f\uff1a\u6bcf\u8f6e\u4ece\u82e5\u5e72\u5806\u77f3\u5b50\u4e2d\u7684\u4e00\u5806\u53d6\u8d70\u82e5\u5e72\u9897\u3002\u5148\u624b\u5fc5\u80dc\u6761\u4ef6\u4e3a\u77f3\u5b50\u6570\u91cf\u5f02\u6216\u548c\u975e\u96f6\u3002 \u9636\u68af Nim \u6e38\u620f\uff1a\u53ef\u4ee5\u9009\u62e9\u9636\u68af\u4e0a\u67d0\u4e00\u5806\u4e2d\u7684\u82e5\u5e72\u9897\u5411\u4e0b\u63a8\u52a8\u4e00\u7ea7\uff0c\u76f4\u5230\u5168\u90e8\u63a8\u4e0b\u53bb\u3002\u5148\u624b\u5fc5\u80dc\u6761\u4ef6\u662f\u5947\u6570\u9636\u68af\u7684\u5f02\u6216\u548c\u975e\u96f6\uff08\u5bf9\u4e8e\u5076\u6570\u9636\u68af\u7684\u64cd\u4f5c\u53ef\u4ee5\u6a21\u4eff\uff09\u3002 Anti-SG\uff1a\u65e0\u6cd5\u64cd\u4f5c\u8005\u80dc\u3002\u5148\u624b\u5fc5\u80dc\u7684\u6761\u4ef6\u662f\uff1a SG \u4e0d\u4e3a 0 \u4e14\u67d0\u4e2a\u5355\u4e00\u6e38\u620f\u7684 SG \u5927\u4e8e 1 \u3002 SG \u4e3a 0 \u4e14\u6ca1\u6709\u5355\u4e00\u6e38\u620f\u7684 SG \u5927\u4e8e 1\u3002 Every-SG\uff1a\u5bf9\u6240\u6709\u5355\u4e00\u6e38\u620f\u90fd\u8981\u64cd\u4f5c\u3002\u5148\u624b\u5fc5\u80dc\u7684\u6761\u4ef6\u662f\u5355\u4e00\u6e38\u620f\u4e2d\u7684\u6700\u5927 step \u4e3a\u5947\u6570\u3002 \u5bf9\u4e8e\u7ec8\u6b62\u72b6\u6001 step \u4e3a 0 \u5bf9\u4e8e SG \u4e3a 0 \u7684\u72b6\u6001\uff0cstep \u662f\u6700\u5927\u540e\u7ee7 step +1 \u5bf9\u4e8e SG \u975e 0 \u7684\u72b6\u6001\uff0cstep \u662f\u6700\u5c0f\u540e\u7ee7 step +1 \u6811\u4e0a\u5220\u8fb9\uff1a\u53f6\u5b50 SG \u4e3a 0\uff0c\u975e\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6240\u6709\u5b50\u7ed3\u70b9\u7684 SG \u503c\u52a0 1 \u540e\u7684\u5f02\u6216\u548c\u3002 \u5c1d\u8bd5\uff1a \u6253\u8868\u627e\u89c4\u5f8b \u5bfb\u627e\u4e00\u7c7b\u5fc5\u80dc\u6001\uff08\u5982\u5bf9\u79f0\u5c40\u9762\uff09 \u76f4\u63a5\u535a\u5f08 dp","title":"\u535a\u5f08"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/","text":"\u56fe\u8bba LCA \u500d\u589e void dfs(int u, int fa) { pa[u][0] = fa; dep[u] = dep[fa] + 1; FOR (i, 1, SP) pa[u][i] = pa[pa[u][i - 1]][i - 1]; for (int& v: G[u]) { if (v == fa) continue; dfs(v, u); } } int lca(int u, int v) { if (dep[u] < dep[v]) swap(u, v); int t = dep[u] - dep[v]; FOR (i, 0, SP) if (t & (1 << i)) u = pa[u][i]; FORD (i, SP - 1, -1) { int uu = pa[u][i], vv = pa[v][i]; if (uu != vv) { u = uu; v = vv; } } return u == v ? u : pa[u][0]; } \u7f51\u7edc\u6d41 \u6700\u5927\u6d41 struct E { int to, cp; E(int to, int cp): to(to), cp(cp) {} }; struct Dinic { static const int M = 1E5 * 5; int m, s, t; vector<E> edges; vector<int> G[M]; int d[M]; int cur[M]; void init(int n, int s, int t) { this->s = s; this->t = t; for (int i = 0; i <= n; i++) G[i].clear(); edges.clear(); m = 0; } void addedge(int u, int v, int cap) { edges.emplace_back(v, cap); edges.emplace_back(u, 0); G[u].push_back(m++); G[v].push_back(m++); } bool BFS() { memset(d, 0, sizeof d); queue<int> Q; Q.push(s); d[s] = 1; while (!Q.empty()) { int x = Q.front(); Q.pop(); for (int& i: G[x]) { E &e = edges[i]; if (!d[e.to] && e.cp > 0) { d[e.to] = d[x] + 1; Q.push(e.to); } } } return d[t]; } int DFS(int u, int cp) { if (u == t || !cp) return cp; int tmp = cp, f; for (int& i = cur[u]; i < G[u].size(); i++) { E& e = edges[G[u][i]]; if (d[u] + 1 == d[e.to]) { f = DFS(e.to, min(cp, e.cp)); e.cp -= f; edges[G[u][i] ^ 1].cp += f; cp -= f; if (!cp) break; } } return tmp - cp; } int go() { int flow = 0; while (BFS()) { memset(cur, 0, sizeof cur); flow += DFS(s, INF); } return flow; } } DC; \u8d39\u7528\u6d41 struct E { int from, to, cp, v; E() {} E(int f, int t, int cp, int v) : from(f), to(t), cp(cp), v(v) {} }; struct MCMF { int n, m, s, t; vector<E> edges; vector<int> G[M]; bool inq[M]; int d[M], p[M], a[M]; void init(int _n, int _s, int _t) { n = _n; s = _s; t = _t; FOR (i, 0, n + 1) G[i].clear(); edges.clear(); m = 0; } void addedge(int from, int to, int cap, int cost) { edges.emplace_back(from, to, cap, cost); edges.emplace_back(to, from, 0, -cost); G[from].push_back(m++); G[to].push_back(m++); } bool BellmanFord(int &flow, int &cost) { FOR (i, 0, n + 1) d[i] = INF; memset(inq, 0, sizeof inq); d[s] = 0, a[s] = INF, inq[s] = true; queue<int> Q; Q.push(s); while (!Q.empty()) { int u = Q.front(); Q.pop(); inq[u] = false; for (int& idx: G[u]) { E &e = edges[idx]; if (e.cp && d[e.to] > d[u] + e.v) { d[e.to] = d[u] + e.v; p[e.to] = idx; a[e.to] = min(a[u], e.cp); if (!inq[e.to]) { Q.push(e.to); inq[e.to] = true; } } } } if (d[t] == INF) return false; flow += a[t]; cost += a[t] * d[t]; int u = t; while (u != s) { edges[p[u]].cp -= a[t]; edges[p[u] ^ 1].cp += a[t]; u = edges[p[u]].from; } return true; } int go() { int flow = 0, cost = 0; while (BellmanFord(flow, cost)); return cost; } } MM; zkw \u8d39\u7528\u6d41\uff08\u4ee3\u7801\u957f\u5ea6\u6ca1\u6709\u4f18\u52bf\uff09 \u4e0d\u5141\u8bb8\u6709\u8d1f\u6743\u8fb9 struct E { int to, cp, v; E() {} E(int to, int cp, int v): to(to), cp(cp), v(v) {} }; struct MCMF { int n, m, s, t, cost, D; vector<E> edges; vector<int> G[N]; bool vis[N]; void init(int _n, int _s, int _t) { n = _n; s = _s; t = _t; FOR (i, 0, n + 1) G[i].clear(); edges.clear(); m = 0; } void addedge(int from, int to, int cap, int cost) { edges.emplace_back(to, cap, cost); edges.emplace_back(from, 0, -cost); G[from].push_back(m++); G[to].push_back(m++); } int aug(int u, int cp) { if (u == t) { cost += D * cp; return cp; } vis[u] = true; int tmp = cp; for (int idx: G[u]) { E& e = edges[idx]; if (e.cp && !e.v && !vis[e.to]) { int f = aug(e.to, min(cp, e.cp)); e.cp -= f; edges[idx ^ 1].cp += f; cp -= f; if (!cp) break; } } return tmp - cp; } bool modlabel() { int d = INF; FOR (u, 0, n + 1) if (vis[u]) for (int& idx: G[u]) { E& e = edges[idx]; if (e.cp && !vis[e.to]) d = min(d, e.v); } if (d == INF) return false; FOR (u, 0, n + 1) if (vis[u]) for (int& idx: G[u]) { edges[idx].v -= d; edges[idx ^ 1].v += d; } D += d; return true; } int go(int k) { cost = D = 0; int flow = 0; while (true) { memset(vis, 0, sizeof vis); int t = aug(s, INF); if (!t && !modlabel()) break; flow += t; } return cost; } } MM; \u5e26\u4e0b\u754c\u7f51\u7edc\u6d41\uff1a \u65e0\u6e90\u6c47\uff1a$u \\rightarrow v$ \u8fb9\u5bb9\u91cf\u4e3a $[l,r]$\uff0c\u8fde\u5bb9\u91cf $r-l$\uff0c\u865a\u62df\u6e90\u70b9\u5230 $v$ \u8fde $l$\uff0c$u$ \u5230\u865a\u62df\u6c47\u70b9\u8fde $l$\u3002 \u6709\u6e90\u6c47\uff1a\u4e3a\u4e86\u8ba9\u6d41\u80fd\u5faa\u73af\u4f7f\u7528\uff0c\u8fde $T \\rightarrow S$\uff0c\u5bb9\u91cf $\\infty$\u3002 \u6700\u5927\u6d41\uff1a\u8dd1\u5b8c\u53ef\u884c\u6d41\u540e\uff0c\u52a0 $S' \\rightarrow S$\uff0c$T \\rightarrow T'$\uff0c\u6700\u5927\u6d41\u5c31\u662f\u7b54\u6848\uff08$T \\rightarrow S$ \u7684\u6d41\u91cf\u81ea\u52a8\u9000\u56de\u53bb\u4e86\uff0c\u8fd9\u4e00\u90e8\u5206\u5c31\u662f\u4e0b\u754c\u90e8\u5206\u7684\u6d41\u91cf\uff09\u3002 \u6700\u5c0f\u6d41\uff1a$T$ \u5230 $S$ \u7684\u90a3\u6761\u8fb9\u7684\u5b9e\u9645\u6d41\u91cf\uff0c\u51cf\u53bb\u5220\u6389\u90a3\u6761\u8fb9\u540e $T$ \u5230 $S$ \u7684\u6700\u5927\u6d41\u3002 \u7f51\u4e0a\u8bf4\u53ef\u80fd\u4f1a\u51cf\u6210\u8d1f\u7684\uff0c\u8fd8\u8981\u6709\u9650\u5730\u4f9b\u5e94 $S$ \u4e4b\u540e\uff0c\u518d\u8dd1\u4e00\u904d $S$ \u5230 $T$ \u7684\u3002 \u8d39\u7528\u6d41\uff1a\u5fc5\u8981\u7684\u90e8\u5206\uff08\u4e0b\u754c\u4ee5\u4e0b\u7684\uff09\u4e0d\u8981\u94b1\uff0c\u5269\u4e0b\u7684\u6309\u7167\u6700\u5927\u6d41\u3002 \u6811\u4e0a\u8def\u5f84\u4ea4 int intersection(int x, int y, int xx, int yy) { int t[4] = {lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)}; sort(t, t + 4); int r = lca(x, y), rr = lca(xx, yy); if (dep[t[0]] < min(dep[r], dep[rr]) || dep[t[2]] < max(dep[r], dep[rr])) return 0; int tt = lca(t[2], t[3]); int ret = 1 + dep[t[2]] + dep[t[3]] - dep[tt] * 2; return ret; } \u6811\u4e0a\u70b9\u5206\u6cbb int get_rt(int u) { static int q[N], fa[N], sz[N], mx[N]; int p = 0, cur = -1; q[p++] = u; fa[u] = -1; while (++cur < p) { u = q[cur]; mx[u] = 0; sz[u] = 1; for (int& v: G[u]) if (!vis[v] && v != fa[u]) fa[q[p++] = v] = u; } FORD (i, p - 1, -1) { u = q[i]; mx[u] = max(mx[u], p - sz[u]); if (mx[u] * 2 <= p) return u; sz[fa[u]] += sz[u]; mx[fa[u]] = max(mx[fa[u]], sz[u]); } assert(0); } void dfs(int u) { u = get_rt(u); vis[u] = true; get_dep(u, -1, 0); // ... for (E& e: G[u]) { int v = e.to; if (vis[v]) continue; // ... dfs(v); } } \u52a8\u6001\u70b9\u5206\u6cbb const int N = 15E4 + 100, INF = 1E9; struct E { int to, d; }; vector<E> G[N]; int n, Q, w[N]; LL A, ans; bool vis[N]; int sz[N]; int get_rt(int u) { static int q[N], fa[N], sz[N], mx[N]; int p = 0, cur = -1; q[p++] = u; fa[u] = -1; while (++cur < p) { u = q[cur]; mx[u] = 0; sz[u] = 1; for (int& v: G[u]) if (!vis[v] && v != fa[u]) fa[q[p++] = v] = u; } FORD (i, p - 1, -1) { u = q[i]; mx[u] = max(mx[u], p - sz[u]); if (mx[u] * 2 <= p) return u; sz[fa[u]] += sz[u]; mx[fa[u]] = max(mx[fa[u]], sz[u]); } assert(0); } int dep[N], md[N]; void get_dep(int u, int fa, int d) { dep[u] = d; md[u] = 0; for (E& e: G[u]) { int v = e.to; if (vis[v] || v == fa) continue; get_dep(v, u, d + e.d); md[u] = max(md[u], md[v] + 1); } } struct P { int w; LL s; }; using VP = vector<P>; struct R { VP *rt, *rt2; int dep; }; VP pool[N << 1], *pit = pool; vector<R> tr[N]; void go(int u, int fa, VP* rt, VP* rt2) { tr[u].push_back({rt, rt2, dep[u]}); for (E& e: G[u]) { int v = e.to; if (v == fa || vis[v]) continue; go(v, u, rt, rt2); } } void dfs(int u) { u = get_rt(u); vis[u] = true; get_dep(u, -1, 0); VP* rt = pit++; tr[u].push_back({rt, nullptr, 0}); for (E& e: G[u]) { int v = e.to; if (vis[v]) continue; go(v, u, rt, pit++); dfs(v); } } bool cmp(const P& a, const P& b) { return a.w < b.w; } LL query(VP& p, int d, int l, int r) { l = lower_bound(p.begin(), p.end(), P{l, -1}, cmp) - p.begin(); r = upper_bound(p.begin(), p.end(), P{r, -1}, cmp) - p.begin() - 1; return p[r].s - p[l - 1].s + 1LL * (r - l + 1) * d; } int main() { cin >> n >> Q >> A; FOR (i, 1, n + 1) scanf(\"%d\", &w[i]); FOR (_, 1, n) { int u, v, d; scanf(\"%d%d%d\", &u, &v, &d); G[u].push_back({v, d}); G[v].push_back({u, d}); } dfs(1); FOR (i, 1, n + 1) for (R& x: tr[i]) { x.rt->push_back({w[i], x.dep}); if (x.rt2) x.rt2->push_back({w[i], x.dep}); } FOR (it, pool, pit) { it->push_back({-INF, 0}); sort(it->begin(), it->end(), cmp); FOR (i, 1, it->size()) (*it)[i].s += (*it)[i - 1].s; } while (Q--) { int u; LL a, b; scanf(\"%d%lld%lld\", &u, &a, &b); a = (a + ans) % A; b = (b + ans) % A; int l = min(a, b), r = max(a, b); ans = 0; for (R& x: tr[u]) { ans += query(*(x.rt), x.dep, l, r); if (x.rt2) ans -= query(*(x.rt2), x.dep, l, r); } printf(\"%lld\\n\", ans); } } \u6811\u94fe\u5256\u5206 \u521d\u59cb\u5316\u9700\u8981\u6e05\u7a7a clk \u4f7f\u7528 hld::predfs(1, 1); hld::dfs(1, 1); int fa[N], dep[N], idx[N], out[N], ridx[N]; namespace hld { int sz[N], son[N], top[N], clk; void predfs(int u, int d) { dep[u] = d; sz[u] = 1; int& maxs = son[u] = -1; for (int& v: G[u]) { if (v == fa[u]) continue; fa[v] = u; predfs(v, d + 1); sz[u] += sz[v]; if (maxs == -1 || sz[v] > sz[maxs]) maxs = v; } } void dfs(int u, int tp) { top[u] = tp; idx[u] = ++clk; ridx[clk] = u; if (son[u] != -1) dfs(son[u], tp); for (int& v: G[u]) if (v != fa[u] && v != son[u]) dfs(v, v); out[u] = clk; } template<typename T> int go(int u, int v, T&& f = [](int, int) {}) { int uu = top[u], vv = top[v]; while (uu != vv) { if (dep[uu] < dep[vv]) { swap(uu, vv); swap(u, v); } f(idx[uu], idx[u]); u = fa[uu]; uu = top[u]; } if (dep[u] < dep[v]) swap(u, v); // choose one // f(idx[v], idx[u]); // if (u != v) f(idx[v] + 1, idx[u]); return v; } int up(int u, int d) { while (d) { if (dep[u] - dep[top[u]] < d) { d -= dep[u] - dep[top[u]]; u = top[u]; } else return ridx[idx[u] - d]; u = fa[u]; --d; } return u; } int finds(int u, int rt) { // \u627e u \u5728 rt \u7684\u54ea\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u4e2d while (top[u] != top[rt]) { u = top[u]; if (fa[u] == rt) return u; u = fa[u]; } return ridx[idx[rt] + 1]; } } \u4e8c\u5206\u56fe\u5339\u914d \u6700\u5c0f\u8986\u76d6\u6570 = \u6700\u5927\u5339\u914d\u6570 \u6700\u5927\u72ec\u7acb\u96c6 = \u9876\u70b9\u6570 - \u4e8c\u5206\u56fe\u5339\u914d\u6570 DAG \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570 = \u7ed3\u70b9\u6570 - \u62c6\u70b9\u540e\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570 struct MaxMatch { int n; vector<int> G[N]; int vis[N], left[N], clk; void init(int n) { this->n = n; FOR (i, 0, n + 1) G[i].clear(); memset(left, -1, sizeof left); memset(vis, -1, sizeof vis); } bool dfs(int u) { for (int v: G[u]) if (vis[v] != clk) { vis[v] = clk; if (left[v] == -1 || dfs(left[v])) { left[v] = u; return true; } } return false; } int match() { int ret = 0; for (clk = 0; clk <= n; ++clk) if (dfs(clk)) ++ret; return ret; } } MM; \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d KM ($O(n^3)$) namespace R { const int M = 400 + 5; const int INF = 2E9; int n; int w[M][M], kx[M], ky[M], py[M], vy[M], slk[M], pre[M]; LL KM() { FOR (i, 1, n + 1) FOR (j, 1, n + 1) kx[i] = max(kx[i], w[i][j]); FOR (i, 1, n + 1) { fill(vy, vy + n + 1, 0); fill(slk, slk + n + 1, INF); fill(pre, pre + n + 1, 0); int k = 0, p = -1; for (py[k = 0] = i; py[k]; k = p) { int d = INF; vy[k] = 1; int x = py[k]; FOR (j, 1, n + 1) if (!vy[j]) { int t = kx[x] + ky[j] - w[x][j]; if (t < slk[j]) { slk[j] = t; pre[j] = k; } if (slk[j] < d) { d = slk[j]; p = j; } } FOR (j, 0, n + 1) if (vy[j]) { kx[py[j]] -= d; ky[j] += d; } else slk[j] -= d; } for (; k; k = pre[k]) py[k] = py[pre[k]]; } LL ans = 0; FOR (i, 1, n + 1) ans += kx[i] + ky[i]; return ans; } } \u865a\u6811 void go(vector<int>& V, int& k) { int u = V[k]; f[u] = 0; dbg(u, k); for (auto& e: G[u]) { int v = e.to; if (v == pa[u][0]) continue; while (k + 1 < V.size()) { int to = V[k + 1]; if (in[to] <= out[v]) { go(V, ++k); if (key[to]) f[u] += w[to]; else f[u] += min(f[to], (LL)w[to]); } else break; } } dbg(u, f[u]); } inline bool cmp(int a, int b) { return in[a] < in[b]; } LL solve(vector<int>& V) { static vector<int> a; a.clear(); for (int& x: V) a.push_back(x); sort(a.begin(), a.end(), cmp); FOR (i, 1, a.size()) a.push_back(lca(a[i], a[i - 1])); a.push_back(1); sort(a.begin(), a.end(), cmp); a.erase(unique(a.begin(), a.end()), a.end()); dbg(a); int tmp; go(a, tmp = 0); return f[1]; } \u6b27\u62c9\u8def\u5f84 int S[N << 1], top; Edge edges[N << 1]; set<int> G[N]; void DFS(int u) { S[top++] = u; for (int eid: G[u]) { int v = edges[eid].get_other(u); G[u].erase(eid); G[v].erase(eid); DFS(v); return; } } void fleury(int start) { int u = start; top = 0; path.clear(); S[top++] = u; while (top) { u = S[--top]; if (!G[u].empty()) DFS(u); else path.push_back(u); } } \u5f3a\u8fde\u901a\u5206\u91cf\u4e0e 2-SAT int n, m; vector<int> G[N], rG[N], vs; int used[N], cmp[N]; void add_edge(int from, int to) { G[from].push_back(to); rG[to].push_back(from); } void dfs(int v) { used[v] = true; for (int u: G[v]) { if (!used[u]) dfs(u); } vs.push_back(v); } void rdfs(int v, int k) { used[v] = true; cmp[v] = k; for (int u: rG[v]) if (!used[u]) rdfs(u, k); } int scc() { memset(used, 0, sizeof(used)); vs.clear(); for (int v = 0; v < n; ++v) if (!used[v]) dfs(v); memset(used, 0, sizeof(used)); int k = 0; for (int i = (int) vs.size() - 1; i >= 0; --i) if (!used[vs[i]]) rdfs(vs[i], k++); return k; } int main() { cin >> n >> m; n *= 2; for (int i = 0; i < m; ++i) { int a, b; cin >> a >> b; add_edge(a - 1, (b - 1) ^ 1); add_edge(b - 1, (a - 1) ^ 1); } scc(); for (int i = 0; i < n; i += 2) { if (cmp[i] == cmp[i + 1]) { puts(\"NIE\"); return 0; } } for (int i = 0; i < n; i += 2) { if (cmp[i] > cmp[i + 1]) printf(\"%d\\n\", i + 1); else printf(\"%d\\n\", i + 2); } } \u62d3\u6251\u6392\u5e8f vector<int> toporder(int n) { vector<int> orders; queue<int> q; for (int i = 0; i < n; i++) if (!deg[i]) { q.push(i); orders.push_back(i); } while (!q.empty()) { int u = q.front(); q.pop(); for (int v: G[u]) if (!--deg[v]) { q.push(v); orders.push_back(v); } } return orders; } \u4e00\u822c\u56fe\u5339\u914d \u5e26\u82b1\u6811\u3002\u590d\u6742\u5ea6 $O(n^3)$\u3002 int n; vector<int> G[N]; int fa[N], mt[N], pre[N], mk[N]; int lca_clk, lca_mk[N]; pair<int, int> ce[N]; void connect(int u, int v) { mt[u] = v; mt[v] = u; } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } void flip(int s, int u) { if (s == u) return; if (mk[u] == 2) { int v1 = ce[u].first, v2 = ce[u].second; flip(mt[u], v1); flip(s, v2); connect(v1, v2); } else { flip(s, pre[mt[u]]); connect(pre[mt[u]], mt[u]); } } int get_lca(int u, int v) { lca_clk++; for (u = find(u), v = find(v); ; u = find(pre[u]), v = find(pre[v])) { if (u && lca_mk[u] == lca_clk) return u; lca_mk[u] = lca_clk; if (v && lca_mk[v] == lca_clk) return v; lca_mk[v] = lca_clk; } } void access(int u, int p, const pair<int, int>& c, vector<int>& q) { for (u = find(u); u != p; u = find(pre[u])) { if (mk[u] == 2) { ce[u] = c; q.push_back(u); } fa[find(u)] = find(p); } } bool aug(int s) { fill(mk, mk + n + 1, 0); fill(pre, pre + n + 1, 0); iota(fa, fa + n + 1, 0); vector<int> q = {s}; mk[s] = 1; int t = 0; for (int t = 0; t < (int) q.size(); ++t) { // q size can be changed int u = q[t]; for (int &v: G[u]) { if (find(v) == find(u)) continue; if (!mk[v] && !mt[v]) { flip(s, u); connect(u, v); return true; } else if (!mk[v]) { int w = mt[v]; mk[v] = 2; mk[w] = 1; pre[w] = v; pre[v] = u; q.push_back(w); } else if (mk[find(v)] == 1) { int p = get_lca(u, v); access(u, p, {u, v}, q); access(v, p, {v, u}, q); } } } return false; } int match() { fill(mt + 1, mt + n + 1, 0); lca_clk = 0; int ans = 0; FOR (i, 1, n + 1) if (!mt[i]) ans += aug(i); return ans; } int main() { int m; cin >> n >> m; while (m--) { int u, v; scanf(\"%d%d\", &u, &v); G[u].push_back(v); G[v].push_back(u); } printf(\"%d\\n\", match()); FOR (i, 1, n + 1) printf(\"%d%c\", mt[i], i == _i - 1 ? '\\n' : ' '); return 0; } Tarjan \u5272\u70b9 \u5224\u65ad\u5272\u70b9 \u6ce8\u610f\u539f\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a int dfn[N], low[N], clk; void init() { clk = 0; memset(dfn, 0, sizeof dfn); } void tarjan(int u, int fa) { low[u] = dfn[u] = ++clk; int cc = fa != -1; for (int& v: G[u]) { if (v == fa) continue; if (!dfn[v]) { tarjan(v, u); low[u] = min(low[u], low[v]); cc += low[v] >= dfn[u]; } else low[u] = min(low[u], dfn[v]); } if (cc > 1) // ... } \u6865 \u6ce8\u610f\u539f\u56fe\u4e0d\u8fde\u901a\u548c\u91cd\u8fb9 int dfn[N], low[N], clk; void init() { memset(dfn, 0, sizeof dfn); clk = 0; } void tarjan(int u, int fa) { low[u] = dfn[u] = ++clk; int _fst = 0; for (E& e: G[u]) { int v = e.to; if (v == fa && ++_fst == 1) continue; if (!dfn[v]) { tarjan(v, u); if (low[v] > dfn[u]) // ... low[u] = min(low[u], low[v]); } else low[u] = min(low[u], dfn[v]); } } \u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9 int low[N], dfn[N], clk, B, bl[N]; vector<int> bcc[N]; void init() { B = clk = 0; memset(dfn, 0, sizeof dfn); } void tarjan(int u) { static int st[N], p; static bool in[N]; dfn[u] = low[u] = ++clk; st[p++] = u; in[u] = true; for (int& v: G[u]) { if (!dfn[v]) { tarjan(v); low[u] = min(low[u], low[v]); } else if (in[v]) low[u] = min(low[u], dfn[v]); } if (dfn[u] == low[u]) { while (1) { int x = st[--p]; in[x] = false; bl[x] = B; bcc[B].push_back(x); if (x == u) break; } ++B; } } \u70b9\u53cc\u8fde\u901a\u5206\u91cf / \u5e7f\u4e49\u5706\u65b9\u6811 \u6570\u7ec4\u5f00\u4e24\u500d \u4e00\u6761\u8fb9\u4e5f\u88ab\u8ba1\u5165\u70b9\u53cc\u4e86\uff08\u9002\u5408\u62ff\u6765\u5efa\u5706\u65b9\u6811\uff09\uff0c\u53ef\u4ee5\u7528 \u70b9\u6570 <= \u8fb9\u6570 \u8fc7\u6ee4 struct E { int to, nxt; } e[N]; int hd[N], ecnt; void addedge(int u, int v) { e[ecnt] = {v, hd[u]}; hd[u] = ecnt++; } int low[N], dfn[N], clk, B, bno[N]; vector<int> bc[N], be[N]; bool vise[N]; void init() { memset(vise, 0, sizeof vise); memset(hd, -1, sizeof hd); memset(dfn, 0, sizeof dfn); memset(bno, -1, sizeof bno); B = clk = ecnt = 0; } void tarjan(int u, int feid) { static int st[N], p; static auto add = [&](int x) { if (bno[x] != B) { bno[x] = B; bc[B].push_back(x); } }; low[u] = dfn[u] = ++clk; for (int i = hd[u]; ~i; i = e[i].nxt) { if ((feid ^ i) == 1) continue; if (!vise[i]) { st[p++] = i; vise[i] = vise[i ^ 1] = true; } int v = e[i].to; if (!dfn[v]) { tarjan(v, i); low[u] = min(low[u], low[v]); if (low[v] >= dfn[u]) { bc[B].clear(); be[B].clear(); while (1) { int eid = st[--p]; add(e[eid].to); add(e[eid ^ 1].to); be[B].push_back(eid); if ((eid ^ i) <= 1) break; } ++B; } } else low[u] = min(low[u], dfn[v]); } } \u5706\u65b9\u6811 \u4ece\u4ed9\u4eba\u638c\u5efa\u5706\u65b9\u6811 N \u81f3\u5c11\u8fb9\u6570 \u00d7 2 vector<int> G[N]; int nn; struct E { int to, nxt; }; namespace C { E e[N * 2]; int hd[N], ecnt; void addedge(int u, int v) { e[ecnt] = {v, hd[u]}; hd[u] = ecnt++; } int idx[N], clk, fa[N]; bool ring[N]; void init() { ecnt = 0; memset(hd, -1, sizeof hd); clk = 0; } void dfs(int u, int feid) { idx[u] = ++clk; for (int i = hd[u]; ~i; i = e[i].nxt) { if ((i ^ feid) == 1) continue; int v = e[i].to; if (!idx[v]) { fa[v] = u; ring[u] = false; dfs(v, i); if (!ring[u]) { G[u].push_back(v); G[v].push_back(u); } } else if (idx[v] < idx[u]) { ++nn; G[nn].push_back(v); G[v].push_back(nn); // \u5f3a\u884c\u628a\u73af\u7684\u6839\u653e\u5728\u6700\u524d\u9762 for (int x = u; x != v; x = fa[x]) { ring[x] = true; G[nn].push_back(x); G[x].push_back(nn); } ring[v] = true; } } } } \u6700\u5c0f\u6811\u5f62\u56fe \u4f1a\u7be1\u6539\u8fb9\u3002 vector<E> edges; int in[N], id[N], pre[N], vis[N]; // a copy of n is needed LL zl_tree(int rt, int n) { LL ans = 0; int v, _n = n; while (1) { fill(in, in + n, INF); for (E &e: edges) { if (e.u != e.v && e.w < in[e.v]) { pre[e.v] = e.u; in[e.v] = e.w; } } FOR (i, 0, n) if (i != rt && in[i] == INF) return -1; int tn = 0; fill(id, id + _n, -1); fill(vis, vis + _n, -1); in[rt] = 0; FOR (i, 0, n) { ans += in[v = i]; while (vis[v] != i && id[v] == -1 && v != rt) { vis[v] = i; v = pre[v]; } if (v != rt && id[v] == -1) { for (int u = pre[v]; u != v; u = pre[u]) id[u] = tn; id[v] = tn++; } } if (tn == 0) break; FOR (i, 0, n) if (id[i] == -1) id[i] = tn++; for (int i = 0; i < (int) edges.size(); ) { auto &e = edges[i]; v = e.v; e.u = id[e.u]; e.v = id[e.v]; if (e.u != e.v) { e.w -= in[v]; i++; } else { swap(e, edges.back()); edges.pop_back(); } } n = tn; rt = id[rt]; } return ans; } \u5dee\u5206\u7ea6\u675f \u4e00\u4e2a\u7cfb\u7edf $n$ \u4e2a\u53d8\u91cf\u548c $m$ \u4e2a\u7ea6\u675f\u6761\u4ef6\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u5f62\u5982 $x_j-x_i \\le b_k$\u3002\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u90fd\u5f62\u5982\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u4e0d\u7b49\u5f0f $d_u-d_v \\le w_{u,v}$\u3002\u56e0\u6b64\u8fde\u4e00\u6761\u8fb9 $(i,j,b_k)$ \u5efa\u56fe\u3002 \u82e5\u8981\u4f7f\u5f97\u6240\u6709\u91cf\u4e24\u4e24\u7684\u503c\u6700\u63a5\u8fd1\uff0c\u6e90\u70b9\u5230\u5404\u70b9\u7684\u8ddd\u79bb\u521d\u59cb\u6210 $0$\uff0c\u8dd1\u6700\u8fdc\u8def\u3002 \u82e5\u8981\u4f7f\u5f97\u67d0\u4e00\u53d8\u91cf\u4e0e\u5176\u4ed6\u53d8\u91cf\u7684\u5dee\u5c3d\u53ef\u80fd\u5927\uff0c\u5219\u6e90\u70b9\u5230\u5404\u70b9\u8ddd\u79bb\u521d\u59cb\u5316\u6210 $\\infty$\uff0c\u8dd1\u6700\u77ed\u8def\u3002 \u4e09\u5143\u73af\u3001\u56db\u5143\u73af \u56db\u5143\u73af \u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u56db\u5143\u73af\uff0c\u5c06\u7b54\u6848\u7edf\u8ba1\u5728\u5ea6\u6570\u6700\u5927\u7684\u70b9 $b$ \u4e0a\u3002\u8003\u8651\u679a\u4e3e\u70b9 $u$\uff0c\u7136\u540e\u679a\u4e3e\u4e0e\u5176\u76f8\u90bb\u7684\u70b9 $v$\uff0c\u7136\u540e\u518d\u679a\u4e3e\u6240\u6709\u5ea6\u6570\u6bd4 $v$ \u5927\u7684\u4e0e $v$ \u76f8\u90bb\u7684\u70b9\uff0c\u8fd9\u4e9b\u70b9\u663e\u7136\u90fd\u53ef\u80fd\u4f5c\u4e3a $b$ \u70b9\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u8ba1\u7b97\u4e4b\u524d $b$ \u88ab\u679a\u4e3e\u591a\u5c11\u6b21\uff0c\u7b54\u6848\u52a0\u4e0a\u8ba1\u6570\u5668\u7684\u503c\uff0c\u7136\u540e\u8ba1\u6570\u5668\u52a0\u4e00\u3002 \u679a\u4e3e\u5b8c $u$ \u4e4b\u540e\uff0c\u6211\u4eec\u7528\u548c\u679a\u4e3e\u65f6\u4e00\u6837\u7684\u65b9\u6cd5\u6765\u6e05\u7a7a\u8ba1\u6570\u5668\u5c31\u597d\u4e86\u3002 \u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u4e0e\u5176\u76f4\u63a5\u76f8\u8fde\u7684\u5ea6\u6570\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u70b9\u6700\u591a\u53ea\u6709 $\\sqrt{2m}$ \u4e2a\u3002\u6240\u4ee5\u590d\u6742\u5ea6 $O(m \\sqrt{m})$\u3002 LL cycle4() { LL ans = 0; iota(kth, kth + n + 1, 0); sort(kth, kth + n, [&](int x, int y) { return deg[x] < deg[y]; }); FOR (i, 1, n + 1) rk[kth[i]] = i; FOR (u, 1, n + 1) for (int v: G[u]) if (rk[v] > rk[u]) key[u].push_back(v); FOR (u, 1, n + 1) { for (int v: G[u]) for (int w: key[v]) if (rk[w] > rk[u]) ans += cnt[w]++; for (int v: G[u]) for (int w: key[v]) if (rk[w] > rk[u]) --cnt[w]; } return ans; } \u4e09\u5143\u73af \u5c06\u70b9\u5206\u6210\u5ea6\u5165\u5c0f\u4e8e $\\sqrt{m}$ \u548c\u8d85\u8fc7 $\\sqrt{m}$ \u7684\u4e24\u7c7b\u3002\u73b0\u6c42\u5305\u542b\u7b2c\u4e00\u7c7b\u70b9\u7684\u4e09\u5143\u73af\u4e2a\u6570\u3002\u7531\u4e8e\u8fb9\u6570\u8f83\u5c11\uff0c\u76f4\u63a5\u679a\u4e3e\u4e24\u6761\u8fb9\u5373\u53ef\u3002\u7531\u4e8e\u4e00\u4e2a\u70b9\u5ea6\u6570\u4e0d\u8d85\u8fc7 $\\sqrt{m}$\uff0c\u6240\u4ee5\u4e00\u6761\u8fb9\u6700\u591a\u88ab\u679a\u4e3e $\\sqrt{m}$ \u6b21\uff0c\u590d\u6742\u5ea6 $O(m \\sqrt{m})$\u3002\u518d\u6c42\u4e0d\u5305\u542b\u7b2c\u4e00\u7c7b\u70b9\u7684\u4e09\u5143\u73af\u4e2a\u6570\uff0c\u7531\u4e8e\u8fd9\u6837\u7684\u70b9\u4e0d\u8d85\u8fc7 $\\sqrt{m}$ \u4e2a\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e5f\u662f $O(m \\sqrt{m})$\u3002 \u5bf9\u4e8e\u6bcf\u6761\u65e0\u5411\u8fb9 $(u,v)$\uff0c\u5982\u679c $d_u < d_v$\uff0c\u90a3\u4e48\u8fde\u6709\u5411\u8fb9 $(u,v)$\uff0c\u5426\u5219\u6709\u5411\u8fb9 $(v,u)$\u3002\u5ea6\u6570\u76f8\u7b49\u7684\u6309\u7b2c\u4e8c\u5173\u952e\u5b57\u5224\u65ad\u3002\u7136\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9 $x$\uff0c\u5047\u8bbe $x$ \u662f\u4e09\u5143\u7ec4\u4e2d\u5ea6\u6570\u6700\u5c0f\u7684\u70b9\uff0c\u7136\u540e\u66b4\u529b\u5f80\u540e\u9762\u679a\u4e3e\u4e24\u6761\u8fb9\u627e\u5230 $y$\uff0c\u5224\u65ad $(x,y)$ \u662f\u5426\u6709\u8fb9\u5373\u53ef\u3002\u590d\u6742\u5ea6\u4e5f\u662f $O(m \\sqrt{m})$\u3002 int cycle3() { int ans = 0; for (E &e: edges) { deg[e.u]++; deg[e.v]++; } for (E &e: edges) { if (deg[e.u] < deg[e.v] || (deg[e.u] == deg[e.v] && e.u < e.v)) G[e.u].push_back(e.v); else G[e.v].push_back(e.u); } FOR (x, 1, n + 1) { for (int y: G[x]) p[y] = x; for (int y: G[x]) for (int z: G[y]) if (p[z] == x) ans++; } return ans; } \u652f\u914d\u6811 semi[x] \u534a\u5fc5\u7ecf\u70b9\uff08\u5c31\u662f $x$ \u7684\u7956\u5148 $z$ \u4e2d\uff0c\u80fd\u4e0d\u7ecf\u8fc7 $z$ \u548c $x$ \u4e4b\u95f4\u7684\u6811\u4e0a\u7684\u70b9\u800c\u5230\u8fbe $x$ \u7684\u70b9\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\uff09 idom[x] \u6700\u8fd1\u5fc5\u7ecf\u70b9\uff08\u5c31\u662f\u6df1\u5ea6\u6700\u5927\u7684\u6839\u5230 $x$ \u7684\u5fc5\u7ecf\u70b9\uff09 vector<int> G[N], rG[N]; vector<int> dt[N]; namespace tl{ int fa[N], idx[N], clk, ridx[N]; int c[N], best[N], semi[N], idom[N]; void init(int n) { clk = 0; fill(c, c + n + 1, -1); FOR (i, 1, n + 1) dt[i].clear(); FOR (i, 1, n + 1) semi[i] = best[i] = i; fill(idx, idx + n + 1, 0); } void dfs(int u) { idx[u] = ++clk; ridx[clk] = u; for (int& v: G[u]) if (!idx[v]) { fa[v] = u; dfs(v); } } int fix(int x) { if (c[x] == -1) return x; int &f = c[x], rt = fix(f); if (idx[semi[best[x]]] > idx[semi[best[f]]]) best[x] = best[f]; return f = rt; } void go(int rt) { dfs(rt); FORD (i, clk, 1) { int x = ridx[i], mn = clk + 1; for (int& u: rG[x]) { if (!idx[u]) continue; // \u53ef\u80fd\u4e0d\u80fd\u5230\u8fbe\u6240\u6709\u70b9 fix(u); mn = min(mn, idx[semi[best[u]]]); } c[x] = fa[x]; dt[semi[x] = ridx[mn]].push_back(x); x = ridx[i - 1]; for (int& u: dt[x]) { fix(u); if (semi[best[u]] != x) idom[u] = best[u]; else idom[u] = x; } dt[x].clear(); } FOR (i, 2, clk + 1) { int u = ridx[i]; if (idom[u] != semi[u]) idom[u] = idom[idom[u]]; dt[idom[u]].push_back(u); } } }","title":"\u56fe\u8bba"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_1","text":"","title":"\u56fe\u8bba"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#lca","text":"\u500d\u589e void dfs(int u, int fa) { pa[u][0] = fa; dep[u] = dep[fa] + 1; FOR (i, 1, SP) pa[u][i] = pa[pa[u][i - 1]][i - 1]; for (int& v: G[u]) { if (v == fa) continue; dfs(v, u); } } int lca(int u, int v) { if (dep[u] < dep[v]) swap(u, v); int t = dep[u] - dep[v]; FOR (i, 0, SP) if (t & (1 << i)) u = pa[u][i]; FORD (i, SP - 1, -1) { int uu = pa[u][i], vv = pa[v][i]; if (uu != vv) { u = uu; v = vv; } } return u == v ? u : pa[u][0]; }","title":"LCA"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_2","text":"\u6700\u5927\u6d41 struct E { int to, cp; E(int to, int cp): to(to), cp(cp) {} }; struct Dinic { static const int M = 1E5 * 5; int m, s, t; vector<E> edges; vector<int> G[M]; int d[M]; int cur[M]; void init(int n, int s, int t) { this->s = s; this->t = t; for (int i = 0; i <= n; i++) G[i].clear(); edges.clear(); m = 0; } void addedge(int u, int v, int cap) { edges.emplace_back(v, cap); edges.emplace_back(u, 0); G[u].push_back(m++); G[v].push_back(m++); } bool BFS() { memset(d, 0, sizeof d); queue<int> Q; Q.push(s); d[s] = 1; while (!Q.empty()) { int x = Q.front(); Q.pop(); for (int& i: G[x]) { E &e = edges[i]; if (!d[e.to] && e.cp > 0) { d[e.to] = d[x] + 1; Q.push(e.to); } } } return d[t]; } int DFS(int u, int cp) { if (u == t || !cp) return cp; int tmp = cp, f; for (int& i = cur[u]; i < G[u].size(); i++) { E& e = edges[G[u][i]]; if (d[u] + 1 == d[e.to]) { f = DFS(e.to, min(cp, e.cp)); e.cp -= f; edges[G[u][i] ^ 1].cp += f; cp -= f; if (!cp) break; } } return tmp - cp; } int go() { int flow = 0; while (BFS()) { memset(cur, 0, sizeof cur); flow += DFS(s, INF); } return flow; } } DC; \u8d39\u7528\u6d41 struct E { int from, to, cp, v; E() {} E(int f, int t, int cp, int v) : from(f), to(t), cp(cp), v(v) {} }; struct MCMF { int n, m, s, t; vector<E> edges; vector<int> G[M]; bool inq[M]; int d[M], p[M], a[M]; void init(int _n, int _s, int _t) { n = _n; s = _s; t = _t; FOR (i, 0, n + 1) G[i].clear(); edges.clear(); m = 0; } void addedge(int from, int to, int cap, int cost) { edges.emplace_back(from, to, cap, cost); edges.emplace_back(to, from, 0, -cost); G[from].push_back(m++); G[to].push_back(m++); } bool BellmanFord(int &flow, int &cost) { FOR (i, 0, n + 1) d[i] = INF; memset(inq, 0, sizeof inq); d[s] = 0, a[s] = INF, inq[s] = true; queue<int> Q; Q.push(s); while (!Q.empty()) { int u = Q.front(); Q.pop(); inq[u] = false; for (int& idx: G[u]) { E &e = edges[idx]; if (e.cp && d[e.to] > d[u] + e.v) { d[e.to] = d[u] + e.v; p[e.to] = idx; a[e.to] = min(a[u], e.cp); if (!inq[e.to]) { Q.push(e.to); inq[e.to] = true; } } } } if (d[t] == INF) return false; flow += a[t]; cost += a[t] * d[t]; int u = t; while (u != s) { edges[p[u]].cp -= a[t]; edges[p[u] ^ 1].cp += a[t]; u = edges[p[u]].from; } return true; } int go() { int flow = 0, cost = 0; while (BellmanFord(flow, cost)); return cost; } } MM; zkw \u8d39\u7528\u6d41\uff08\u4ee3\u7801\u957f\u5ea6\u6ca1\u6709\u4f18\u52bf\uff09 \u4e0d\u5141\u8bb8\u6709\u8d1f\u6743\u8fb9 struct E { int to, cp, v; E() {} E(int to, int cp, int v): to(to), cp(cp), v(v) {} }; struct MCMF { int n, m, s, t, cost, D; vector<E> edges; vector<int> G[N]; bool vis[N]; void init(int _n, int _s, int _t) { n = _n; s = _s; t = _t; FOR (i, 0, n + 1) G[i].clear(); edges.clear(); m = 0; } void addedge(int from, int to, int cap, int cost) { edges.emplace_back(to, cap, cost); edges.emplace_back(from, 0, -cost); G[from].push_back(m++); G[to].push_back(m++); } int aug(int u, int cp) { if (u == t) { cost += D * cp; return cp; } vis[u] = true; int tmp = cp; for (int idx: G[u]) { E& e = edges[idx]; if (e.cp && !e.v && !vis[e.to]) { int f = aug(e.to, min(cp, e.cp)); e.cp -= f; edges[idx ^ 1].cp += f; cp -= f; if (!cp) break; } } return tmp - cp; } bool modlabel() { int d = INF; FOR (u, 0, n + 1) if (vis[u]) for (int& idx: G[u]) { E& e = edges[idx]; if (e.cp && !vis[e.to]) d = min(d, e.v); } if (d == INF) return false; FOR (u, 0, n + 1) if (vis[u]) for (int& idx: G[u]) { edges[idx].v -= d; edges[idx ^ 1].v += d; } D += d; return true; } int go(int k) { cost = D = 0; int flow = 0; while (true) { memset(vis, 0, sizeof vis); int t = aug(s, INF); if (!t && !modlabel()) break; flow += t; } return cost; } } MM; \u5e26\u4e0b\u754c\u7f51\u7edc\u6d41\uff1a \u65e0\u6e90\u6c47\uff1a$u \\rightarrow v$ \u8fb9\u5bb9\u91cf\u4e3a $[l,r]$\uff0c\u8fde\u5bb9\u91cf $r-l$\uff0c\u865a\u62df\u6e90\u70b9\u5230 $v$ \u8fde $l$\uff0c$u$ \u5230\u865a\u62df\u6c47\u70b9\u8fde $l$\u3002 \u6709\u6e90\u6c47\uff1a\u4e3a\u4e86\u8ba9\u6d41\u80fd\u5faa\u73af\u4f7f\u7528\uff0c\u8fde $T \\rightarrow S$\uff0c\u5bb9\u91cf $\\infty$\u3002 \u6700\u5927\u6d41\uff1a\u8dd1\u5b8c\u53ef\u884c\u6d41\u540e\uff0c\u52a0 $S' \\rightarrow S$\uff0c$T \\rightarrow T'$\uff0c\u6700\u5927\u6d41\u5c31\u662f\u7b54\u6848\uff08$T \\rightarrow S$ \u7684\u6d41\u91cf\u81ea\u52a8\u9000\u56de\u53bb\u4e86\uff0c\u8fd9\u4e00\u90e8\u5206\u5c31\u662f\u4e0b\u754c\u90e8\u5206\u7684\u6d41\u91cf\uff09\u3002 \u6700\u5c0f\u6d41\uff1a$T$ \u5230 $S$ \u7684\u90a3\u6761\u8fb9\u7684\u5b9e\u9645\u6d41\u91cf\uff0c\u51cf\u53bb\u5220\u6389\u90a3\u6761\u8fb9\u540e $T$ \u5230 $S$ \u7684\u6700\u5927\u6d41\u3002 \u7f51\u4e0a\u8bf4\u53ef\u80fd\u4f1a\u51cf\u6210\u8d1f\u7684\uff0c\u8fd8\u8981\u6709\u9650\u5730\u4f9b\u5e94 $S$ \u4e4b\u540e\uff0c\u518d\u8dd1\u4e00\u904d $S$ \u5230 $T$ \u7684\u3002 \u8d39\u7528\u6d41\uff1a\u5fc5\u8981\u7684\u90e8\u5206\uff08\u4e0b\u754c\u4ee5\u4e0b\u7684\uff09\u4e0d\u8981\u94b1\uff0c\u5269\u4e0b\u7684\u6309\u7167\u6700\u5927\u6d41\u3002","title":"\u7f51\u7edc\u6d41"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_3","text":"int intersection(int x, int y, int xx, int yy) { int t[4] = {lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)}; sort(t, t + 4); int r = lca(x, y), rr = lca(xx, yy); if (dep[t[0]] < min(dep[r], dep[rr]) || dep[t[2]] < max(dep[r], dep[rr])) return 0; int tt = lca(t[2], t[3]); int ret = 1 + dep[t[2]] + dep[t[3]] - dep[tt] * 2; return ret; }","title":"\u6811\u4e0a\u8def\u5f84\u4ea4"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_4","text":"int get_rt(int u) { static int q[N], fa[N], sz[N], mx[N]; int p = 0, cur = -1; q[p++] = u; fa[u] = -1; while (++cur < p) { u = q[cur]; mx[u] = 0; sz[u] = 1; for (int& v: G[u]) if (!vis[v] && v != fa[u]) fa[q[p++] = v] = u; } FORD (i, p - 1, -1) { u = q[i]; mx[u] = max(mx[u], p - sz[u]); if (mx[u] * 2 <= p) return u; sz[fa[u]] += sz[u]; mx[fa[u]] = max(mx[fa[u]], sz[u]); } assert(0); } void dfs(int u) { u = get_rt(u); vis[u] = true; get_dep(u, -1, 0); // ... for (E& e: G[u]) { int v = e.to; if (vis[v]) continue; // ... dfs(v); } } \u52a8\u6001\u70b9\u5206\u6cbb const int N = 15E4 + 100, INF = 1E9; struct E { int to, d; }; vector<E> G[N]; int n, Q, w[N]; LL A, ans; bool vis[N]; int sz[N]; int get_rt(int u) { static int q[N], fa[N], sz[N], mx[N]; int p = 0, cur = -1; q[p++] = u; fa[u] = -1; while (++cur < p) { u = q[cur]; mx[u] = 0; sz[u] = 1; for (int& v: G[u]) if (!vis[v] && v != fa[u]) fa[q[p++] = v] = u; } FORD (i, p - 1, -1) { u = q[i]; mx[u] = max(mx[u], p - sz[u]); if (mx[u] * 2 <= p) return u; sz[fa[u]] += sz[u]; mx[fa[u]] = max(mx[fa[u]], sz[u]); } assert(0); } int dep[N], md[N]; void get_dep(int u, int fa, int d) { dep[u] = d; md[u] = 0; for (E& e: G[u]) { int v = e.to; if (vis[v] || v == fa) continue; get_dep(v, u, d + e.d); md[u] = max(md[u], md[v] + 1); } } struct P { int w; LL s; }; using VP = vector<P>; struct R { VP *rt, *rt2; int dep; }; VP pool[N << 1], *pit = pool; vector<R> tr[N]; void go(int u, int fa, VP* rt, VP* rt2) { tr[u].push_back({rt, rt2, dep[u]}); for (E& e: G[u]) { int v = e.to; if (v == fa || vis[v]) continue; go(v, u, rt, rt2); } } void dfs(int u) { u = get_rt(u); vis[u] = true; get_dep(u, -1, 0); VP* rt = pit++; tr[u].push_back({rt, nullptr, 0}); for (E& e: G[u]) { int v = e.to; if (vis[v]) continue; go(v, u, rt, pit++); dfs(v); } } bool cmp(const P& a, const P& b) { return a.w < b.w; } LL query(VP& p, int d, int l, int r) { l = lower_bound(p.begin(), p.end(), P{l, -1}, cmp) - p.begin(); r = upper_bound(p.begin(), p.end(), P{r, -1}, cmp) - p.begin() - 1; return p[r].s - p[l - 1].s + 1LL * (r - l + 1) * d; } int main() { cin >> n >> Q >> A; FOR (i, 1, n + 1) scanf(\"%d\", &w[i]); FOR (_, 1, n) { int u, v, d; scanf(\"%d%d%d\", &u, &v, &d); G[u].push_back({v, d}); G[v].push_back({u, d}); } dfs(1); FOR (i, 1, n + 1) for (R& x: tr[i]) { x.rt->push_back({w[i], x.dep}); if (x.rt2) x.rt2->push_back({w[i], x.dep}); } FOR (it, pool, pit) { it->push_back({-INF, 0}); sort(it->begin(), it->end(), cmp); FOR (i, 1, it->size()) (*it)[i].s += (*it)[i - 1].s; } while (Q--) { int u; LL a, b; scanf(\"%d%lld%lld\", &u, &a, &b); a = (a + ans) % A; b = (b + ans) % A; int l = min(a, b), r = max(a, b); ans = 0; for (R& x: tr[u]) { ans += query(*(x.rt), x.dep, l, r); if (x.rt2) ans -= query(*(x.rt2), x.dep, l, r); } printf(\"%lld\\n\", ans); } }","title":"\u6811\u4e0a\u70b9\u5206\u6cbb"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_5","text":"\u521d\u59cb\u5316\u9700\u8981\u6e05\u7a7a clk \u4f7f\u7528 hld::predfs(1, 1); hld::dfs(1, 1); int fa[N], dep[N], idx[N], out[N], ridx[N]; namespace hld { int sz[N], son[N], top[N], clk; void predfs(int u, int d) { dep[u] = d; sz[u] = 1; int& maxs = son[u] = -1; for (int& v: G[u]) { if (v == fa[u]) continue; fa[v] = u; predfs(v, d + 1); sz[u] += sz[v]; if (maxs == -1 || sz[v] > sz[maxs]) maxs = v; } } void dfs(int u, int tp) { top[u] = tp; idx[u] = ++clk; ridx[clk] = u; if (son[u] != -1) dfs(son[u], tp); for (int& v: G[u]) if (v != fa[u] && v != son[u]) dfs(v, v); out[u] = clk; } template<typename T> int go(int u, int v, T&& f = [](int, int) {}) { int uu = top[u], vv = top[v]; while (uu != vv) { if (dep[uu] < dep[vv]) { swap(uu, vv); swap(u, v); } f(idx[uu], idx[u]); u = fa[uu]; uu = top[u]; } if (dep[u] < dep[v]) swap(u, v); // choose one // f(idx[v], idx[u]); // if (u != v) f(idx[v] + 1, idx[u]); return v; } int up(int u, int d) { while (d) { if (dep[u] - dep[top[u]] < d) { d -= dep[u] - dep[top[u]]; u = top[u]; } else return ridx[idx[u] - d]; u = fa[u]; --d; } return u; } int finds(int u, int rt) { // \u627e u \u5728 rt \u7684\u54ea\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u4e2d while (top[u] != top[rt]) { u = top[u]; if (fa[u] == rt) return u; u = fa[u]; } return ridx[idx[rt] + 1]; } }","title":"\u6811\u94fe\u5256\u5206"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_6","text":"\u6700\u5c0f\u8986\u76d6\u6570 = \u6700\u5927\u5339\u914d\u6570 \u6700\u5927\u72ec\u7acb\u96c6 = \u9876\u70b9\u6570 - \u4e8c\u5206\u56fe\u5339\u914d\u6570 DAG \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570 = \u7ed3\u70b9\u6570 - \u62c6\u70b9\u540e\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570 struct MaxMatch { int n; vector<int> G[N]; int vis[N], left[N], clk; void init(int n) { this->n = n; FOR (i, 0, n + 1) G[i].clear(); memset(left, -1, sizeof left); memset(vis, -1, sizeof vis); } bool dfs(int u) { for (int v: G[u]) if (vis[v] != clk) { vis[v] = clk; if (left[v] == -1 || dfs(left[v])) { left[v] = u; return true; } } return false; } int match() { int ret = 0; for (clk = 0; clk <= n; ++clk) if (dfs(clk)) ++ret; return ret; } } MM; \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d KM ($O(n^3)$) namespace R { const int M = 400 + 5; const int INF = 2E9; int n; int w[M][M], kx[M], ky[M], py[M], vy[M], slk[M], pre[M]; LL KM() { FOR (i, 1, n + 1) FOR (j, 1, n + 1) kx[i] = max(kx[i], w[i][j]); FOR (i, 1, n + 1) { fill(vy, vy + n + 1, 0); fill(slk, slk + n + 1, INF); fill(pre, pre + n + 1, 0); int k = 0, p = -1; for (py[k = 0] = i; py[k]; k = p) { int d = INF; vy[k] = 1; int x = py[k]; FOR (j, 1, n + 1) if (!vy[j]) { int t = kx[x] + ky[j] - w[x][j]; if (t < slk[j]) { slk[j] = t; pre[j] = k; } if (slk[j] < d) { d = slk[j]; p = j; } } FOR (j, 0, n + 1) if (vy[j]) { kx[py[j]] -= d; ky[j] += d; } else slk[j] -= d; } for (; k; k = pre[k]) py[k] = py[pre[k]]; } LL ans = 0; FOR (i, 1, n + 1) ans += kx[i] + ky[i]; return ans; } }","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_7","text":"void go(vector<int>& V, int& k) { int u = V[k]; f[u] = 0; dbg(u, k); for (auto& e: G[u]) { int v = e.to; if (v == pa[u][0]) continue; while (k + 1 < V.size()) { int to = V[k + 1]; if (in[to] <= out[v]) { go(V, ++k); if (key[to]) f[u] += w[to]; else f[u] += min(f[to], (LL)w[to]); } else break; } } dbg(u, f[u]); } inline bool cmp(int a, int b) { return in[a] < in[b]; } LL solve(vector<int>& V) { static vector<int> a; a.clear(); for (int& x: V) a.push_back(x); sort(a.begin(), a.end(), cmp); FOR (i, 1, a.size()) a.push_back(lca(a[i], a[i - 1])); a.push_back(1); sort(a.begin(), a.end(), cmp); a.erase(unique(a.begin(), a.end()), a.end()); dbg(a); int tmp; go(a, tmp = 0); return f[1]; }","title":"\u865a\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_8","text":"int S[N << 1], top; Edge edges[N << 1]; set<int> G[N]; void DFS(int u) { S[top++] = u; for (int eid: G[u]) { int v = edges[eid].get_other(u); G[u].erase(eid); G[v].erase(eid); DFS(v); return; } } void fleury(int start) { int u = start; top = 0; path.clear(); S[top++] = u; while (top) { u = S[--top]; if (!G[u].empty()) DFS(u); else path.push_back(u); } }","title":"\u6b27\u62c9\u8def\u5f84"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#2-sat","text":"int n, m; vector<int> G[N], rG[N], vs; int used[N], cmp[N]; void add_edge(int from, int to) { G[from].push_back(to); rG[to].push_back(from); } void dfs(int v) { used[v] = true; for (int u: G[v]) { if (!used[u]) dfs(u); } vs.push_back(v); } void rdfs(int v, int k) { used[v] = true; cmp[v] = k; for (int u: rG[v]) if (!used[u]) rdfs(u, k); } int scc() { memset(used, 0, sizeof(used)); vs.clear(); for (int v = 0; v < n; ++v) if (!used[v]) dfs(v); memset(used, 0, sizeof(used)); int k = 0; for (int i = (int) vs.size() - 1; i >= 0; --i) if (!used[vs[i]]) rdfs(vs[i], k++); return k; } int main() { cin >> n >> m; n *= 2; for (int i = 0; i < m; ++i) { int a, b; cin >> a >> b; add_edge(a - 1, (b - 1) ^ 1); add_edge(b - 1, (a - 1) ^ 1); } scc(); for (int i = 0; i < n; i += 2) { if (cmp[i] == cmp[i + 1]) { puts(\"NIE\"); return 0; } } for (int i = 0; i < n; i += 2) { if (cmp[i] > cmp[i + 1]) printf(\"%d\\n\", i + 1); else printf(\"%d\\n\", i + 2); } }","title":"\u5f3a\u8fde\u901a\u5206\u91cf\u4e0e 2-SAT"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_9","text":"vector<int> toporder(int n) { vector<int> orders; queue<int> q; for (int i = 0; i < n; i++) if (!deg[i]) { q.push(i); orders.push_back(i); } while (!q.empty()) { int u = q.front(); q.pop(); for (int v: G[u]) if (!--deg[v]) { q.push(v); orders.push_back(v); } } return orders; }","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_10","text":"\u5e26\u82b1\u6811\u3002\u590d\u6742\u5ea6 $O(n^3)$\u3002 int n; vector<int> G[N]; int fa[N], mt[N], pre[N], mk[N]; int lca_clk, lca_mk[N]; pair<int, int> ce[N]; void connect(int u, int v) { mt[u] = v; mt[v] = u; } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } void flip(int s, int u) { if (s == u) return; if (mk[u] == 2) { int v1 = ce[u].first, v2 = ce[u].second; flip(mt[u], v1); flip(s, v2); connect(v1, v2); } else { flip(s, pre[mt[u]]); connect(pre[mt[u]], mt[u]); } } int get_lca(int u, int v) { lca_clk++; for (u = find(u), v = find(v); ; u = find(pre[u]), v = find(pre[v])) { if (u && lca_mk[u] == lca_clk) return u; lca_mk[u] = lca_clk; if (v && lca_mk[v] == lca_clk) return v; lca_mk[v] = lca_clk; } } void access(int u, int p, const pair<int, int>& c, vector<int>& q) { for (u = find(u); u != p; u = find(pre[u])) { if (mk[u] == 2) { ce[u] = c; q.push_back(u); } fa[find(u)] = find(p); } } bool aug(int s) { fill(mk, mk + n + 1, 0); fill(pre, pre + n + 1, 0); iota(fa, fa + n + 1, 0); vector<int> q = {s}; mk[s] = 1; int t = 0; for (int t = 0; t < (int) q.size(); ++t) { // q size can be changed int u = q[t]; for (int &v: G[u]) { if (find(v) == find(u)) continue; if (!mk[v] && !mt[v]) { flip(s, u); connect(u, v); return true; } else if (!mk[v]) { int w = mt[v]; mk[v] = 2; mk[w] = 1; pre[w] = v; pre[v] = u; q.push_back(w); } else if (mk[find(v)] == 1) { int p = get_lca(u, v); access(u, p, {u, v}, q); access(v, p, {v, u}, q); } } } return false; } int match() { fill(mt + 1, mt + n + 1, 0); lca_clk = 0; int ans = 0; FOR (i, 1, n + 1) if (!mt[i]) ans += aug(i); return ans; } int main() { int m; cin >> n >> m; while (m--) { int u, v; scanf(\"%d%d\", &u, &v); G[u].push_back(v); G[v].push_back(u); } printf(\"%d\\n\", match()); FOR (i, 1, n + 1) printf(\"%d%c\", mt[i], i == _i - 1 ? '\\n' : ' '); return 0; }","title":"\u4e00\u822c\u56fe\u5339\u914d"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#tarjan","text":"","title":"Tarjan"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_11","text":"\u5224\u65ad\u5272\u70b9 \u6ce8\u610f\u539f\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a int dfn[N], low[N], clk; void init() { clk = 0; memset(dfn, 0, sizeof dfn); } void tarjan(int u, int fa) { low[u] = dfn[u] = ++clk; int cc = fa != -1; for (int& v: G[u]) { if (v == fa) continue; if (!dfn[v]) { tarjan(v, u); low[u] = min(low[u], low[v]); cc += low[v] >= dfn[u]; } else low[u] = min(low[u], dfn[v]); } if (cc > 1) // ... }","title":"\u5272\u70b9"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_12","text":"\u6ce8\u610f\u539f\u56fe\u4e0d\u8fde\u901a\u548c\u91cd\u8fb9 int dfn[N], low[N], clk; void init() { memset(dfn, 0, sizeof dfn); clk = 0; } void tarjan(int u, int fa) { low[u] = dfn[u] = ++clk; int _fst = 0; for (E& e: G[u]) { int v = e.to; if (v == fa && ++_fst == 1) continue; if (!dfn[v]) { tarjan(v, u); if (low[v] > dfn[u]) // ... low[u] = min(low[u], low[v]); } else low[u] = min(low[u], dfn[v]); } }","title":"\u6865"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_13","text":"int low[N], dfn[N], clk, B, bl[N]; vector<int> bcc[N]; void init() { B = clk = 0; memset(dfn, 0, sizeof dfn); } void tarjan(int u) { static int st[N], p; static bool in[N]; dfn[u] = low[u] = ++clk; st[p++] = u; in[u] = true; for (int& v: G[u]) { if (!dfn[v]) { tarjan(v); low[u] = min(low[u], low[v]); } else if (in[v]) low[u] = min(low[u], dfn[v]); } if (dfn[u] == low[u]) { while (1) { int x = st[--p]; in[x] = false; bl[x] = B; bcc[B].push_back(x); if (x == u) break; } ++B; } }","title":"\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_14","text":"\u6570\u7ec4\u5f00\u4e24\u500d \u4e00\u6761\u8fb9\u4e5f\u88ab\u8ba1\u5165\u70b9\u53cc\u4e86\uff08\u9002\u5408\u62ff\u6765\u5efa\u5706\u65b9\u6811\uff09\uff0c\u53ef\u4ee5\u7528 \u70b9\u6570 <= \u8fb9\u6570 \u8fc7\u6ee4 struct E { int to, nxt; } e[N]; int hd[N], ecnt; void addedge(int u, int v) { e[ecnt] = {v, hd[u]}; hd[u] = ecnt++; } int low[N], dfn[N], clk, B, bno[N]; vector<int> bc[N], be[N]; bool vise[N]; void init() { memset(vise, 0, sizeof vise); memset(hd, -1, sizeof hd); memset(dfn, 0, sizeof dfn); memset(bno, -1, sizeof bno); B = clk = ecnt = 0; } void tarjan(int u, int feid) { static int st[N], p; static auto add = [&](int x) { if (bno[x] != B) { bno[x] = B; bc[B].push_back(x); } }; low[u] = dfn[u] = ++clk; for (int i = hd[u]; ~i; i = e[i].nxt) { if ((feid ^ i) == 1) continue; if (!vise[i]) { st[p++] = i; vise[i] = vise[i ^ 1] = true; } int v = e[i].to; if (!dfn[v]) { tarjan(v, i); low[u] = min(low[u], low[v]); if (low[v] >= dfn[u]) { bc[B].clear(); be[B].clear(); while (1) { int eid = st[--p]; add(e[eid].to); add(e[eid ^ 1].to); be[B].push_back(eid); if ((eid ^ i) <= 1) break; } ++B; } } else low[u] = min(low[u], dfn[v]); } }","title":"\u70b9\u53cc\u8fde\u901a\u5206\u91cf / \u5e7f\u4e49\u5706\u65b9\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_15","text":"\u4ece\u4ed9\u4eba\u638c\u5efa\u5706\u65b9\u6811 N \u81f3\u5c11\u8fb9\u6570 \u00d7 2 vector<int> G[N]; int nn; struct E { int to, nxt; }; namespace C { E e[N * 2]; int hd[N], ecnt; void addedge(int u, int v) { e[ecnt] = {v, hd[u]}; hd[u] = ecnt++; } int idx[N], clk, fa[N]; bool ring[N]; void init() { ecnt = 0; memset(hd, -1, sizeof hd); clk = 0; } void dfs(int u, int feid) { idx[u] = ++clk; for (int i = hd[u]; ~i; i = e[i].nxt) { if ((i ^ feid) == 1) continue; int v = e[i].to; if (!idx[v]) { fa[v] = u; ring[u] = false; dfs(v, i); if (!ring[u]) { G[u].push_back(v); G[v].push_back(u); } } else if (idx[v] < idx[u]) { ++nn; G[nn].push_back(v); G[v].push_back(nn); // \u5f3a\u884c\u628a\u73af\u7684\u6839\u653e\u5728\u6700\u524d\u9762 for (int x = u; x != v; x = fa[x]) { ring[x] = true; G[nn].push_back(x); G[x].push_back(nn); } ring[v] = true; } } } }","title":"\u5706\u65b9\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_16","text":"\u4f1a\u7be1\u6539\u8fb9\u3002 vector<E> edges; int in[N], id[N], pre[N], vis[N]; // a copy of n is needed LL zl_tree(int rt, int n) { LL ans = 0; int v, _n = n; while (1) { fill(in, in + n, INF); for (E &e: edges) { if (e.u != e.v && e.w < in[e.v]) { pre[e.v] = e.u; in[e.v] = e.w; } } FOR (i, 0, n) if (i != rt && in[i] == INF) return -1; int tn = 0; fill(id, id + _n, -1); fill(vis, vis + _n, -1); in[rt] = 0; FOR (i, 0, n) { ans += in[v = i]; while (vis[v] != i && id[v] == -1 && v != rt) { vis[v] = i; v = pre[v]; } if (v != rt && id[v] == -1) { for (int u = pre[v]; u != v; u = pre[u]) id[u] = tn; id[v] = tn++; } } if (tn == 0) break; FOR (i, 0, n) if (id[i] == -1) id[i] = tn++; for (int i = 0; i < (int) edges.size(); ) { auto &e = edges[i]; v = e.v; e.u = id[e.u]; e.v = id[e.v]; if (e.u != e.v) { e.w -= in[v]; i++; } else { swap(e, edges.back()); edges.pop_back(); } } n = tn; rt = id[rt]; } return ans; }","title":"\u6700\u5c0f\u6811\u5f62\u56fe"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_17","text":"\u4e00\u4e2a\u7cfb\u7edf $n$ \u4e2a\u53d8\u91cf\u548c $m$ \u4e2a\u7ea6\u675f\u6761\u4ef6\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u5f62\u5982 $x_j-x_i \\le b_k$\u3002\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u90fd\u5f62\u5982\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u4e0d\u7b49\u5f0f $d_u-d_v \\le w_{u,v}$\u3002\u56e0\u6b64\u8fde\u4e00\u6761\u8fb9 $(i,j,b_k)$ \u5efa\u56fe\u3002 \u82e5\u8981\u4f7f\u5f97\u6240\u6709\u91cf\u4e24\u4e24\u7684\u503c\u6700\u63a5\u8fd1\uff0c\u6e90\u70b9\u5230\u5404\u70b9\u7684\u8ddd\u79bb\u521d\u59cb\u6210 $0$\uff0c\u8dd1\u6700\u8fdc\u8def\u3002 \u82e5\u8981\u4f7f\u5f97\u67d0\u4e00\u53d8\u91cf\u4e0e\u5176\u4ed6\u53d8\u91cf\u7684\u5dee\u5c3d\u53ef\u80fd\u5927\uff0c\u5219\u6e90\u70b9\u5230\u5404\u70b9\u8ddd\u79bb\u521d\u59cb\u5316\u6210 $\\infty$\uff0c\u8dd1\u6700\u77ed\u8def\u3002","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_18","text":"","title":"\u4e09\u5143\u73af\u3001\u56db\u5143\u73af"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_19","text":"\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u56db\u5143\u73af\uff0c\u5c06\u7b54\u6848\u7edf\u8ba1\u5728\u5ea6\u6570\u6700\u5927\u7684\u70b9 $b$ \u4e0a\u3002\u8003\u8651\u679a\u4e3e\u70b9 $u$\uff0c\u7136\u540e\u679a\u4e3e\u4e0e\u5176\u76f8\u90bb\u7684\u70b9 $v$\uff0c\u7136\u540e\u518d\u679a\u4e3e\u6240\u6709\u5ea6\u6570\u6bd4 $v$ \u5927\u7684\u4e0e $v$ \u76f8\u90bb\u7684\u70b9\uff0c\u8fd9\u4e9b\u70b9\u663e\u7136\u90fd\u53ef\u80fd\u4f5c\u4e3a $b$ \u70b9\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u8ba1\u7b97\u4e4b\u524d $b$ \u88ab\u679a\u4e3e\u591a\u5c11\u6b21\uff0c\u7b54\u6848\u52a0\u4e0a\u8ba1\u6570\u5668\u7684\u503c\uff0c\u7136\u540e\u8ba1\u6570\u5668\u52a0\u4e00\u3002 \u679a\u4e3e\u5b8c $u$ \u4e4b\u540e\uff0c\u6211\u4eec\u7528\u548c\u679a\u4e3e\u65f6\u4e00\u6837\u7684\u65b9\u6cd5\u6765\u6e05\u7a7a\u8ba1\u6570\u5668\u5c31\u597d\u4e86\u3002 \u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u4e0e\u5176\u76f4\u63a5\u76f8\u8fde\u7684\u5ea6\u6570\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u70b9\u6700\u591a\u53ea\u6709 $\\sqrt{2m}$ \u4e2a\u3002\u6240\u4ee5\u590d\u6742\u5ea6 $O(m \\sqrt{m})$\u3002 LL cycle4() { LL ans = 0; iota(kth, kth + n + 1, 0); sort(kth, kth + n, [&](int x, int y) { return deg[x] < deg[y]; }); FOR (i, 1, n + 1) rk[kth[i]] = i; FOR (u, 1, n + 1) for (int v: G[u]) if (rk[v] > rk[u]) key[u].push_back(v); FOR (u, 1, n + 1) { for (int v: G[u]) for (int w: key[v]) if (rk[w] > rk[u]) ans += cnt[w]++; for (int v: G[u]) for (int w: key[v]) if (rk[w] > rk[u]) --cnt[w]; } return ans; }","title":"\u56db\u5143\u73af"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_20","text":"\u5c06\u70b9\u5206\u6210\u5ea6\u5165\u5c0f\u4e8e $\\sqrt{m}$ \u548c\u8d85\u8fc7 $\\sqrt{m}$ \u7684\u4e24\u7c7b\u3002\u73b0\u6c42\u5305\u542b\u7b2c\u4e00\u7c7b\u70b9\u7684\u4e09\u5143\u73af\u4e2a\u6570\u3002\u7531\u4e8e\u8fb9\u6570\u8f83\u5c11\uff0c\u76f4\u63a5\u679a\u4e3e\u4e24\u6761\u8fb9\u5373\u53ef\u3002\u7531\u4e8e\u4e00\u4e2a\u70b9\u5ea6\u6570\u4e0d\u8d85\u8fc7 $\\sqrt{m}$\uff0c\u6240\u4ee5\u4e00\u6761\u8fb9\u6700\u591a\u88ab\u679a\u4e3e $\\sqrt{m}$ \u6b21\uff0c\u590d\u6742\u5ea6 $O(m \\sqrt{m})$\u3002\u518d\u6c42\u4e0d\u5305\u542b\u7b2c\u4e00\u7c7b\u70b9\u7684\u4e09\u5143\u73af\u4e2a\u6570\uff0c\u7531\u4e8e\u8fd9\u6837\u7684\u70b9\u4e0d\u8d85\u8fc7 $\\sqrt{m}$ \u4e2a\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e5f\u662f $O(m \\sqrt{m})$\u3002 \u5bf9\u4e8e\u6bcf\u6761\u65e0\u5411\u8fb9 $(u,v)$\uff0c\u5982\u679c $d_u < d_v$\uff0c\u90a3\u4e48\u8fde\u6709\u5411\u8fb9 $(u,v)$\uff0c\u5426\u5219\u6709\u5411\u8fb9 $(v,u)$\u3002\u5ea6\u6570\u76f8\u7b49\u7684\u6309\u7b2c\u4e8c\u5173\u952e\u5b57\u5224\u65ad\u3002\u7136\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9 $x$\uff0c\u5047\u8bbe $x$ \u662f\u4e09\u5143\u7ec4\u4e2d\u5ea6\u6570\u6700\u5c0f\u7684\u70b9\uff0c\u7136\u540e\u66b4\u529b\u5f80\u540e\u9762\u679a\u4e3e\u4e24\u6761\u8fb9\u627e\u5230 $y$\uff0c\u5224\u65ad $(x,y)$ \u662f\u5426\u6709\u8fb9\u5373\u53ef\u3002\u590d\u6742\u5ea6\u4e5f\u662f $O(m \\sqrt{m})$\u3002 int cycle3() { int ans = 0; for (E &e: edges) { deg[e.u]++; deg[e.v]++; } for (E &e: edges) { if (deg[e.u] < deg[e.v] || (deg[e.u] == deg[e.v] && e.u < e.v)) G[e.u].push_back(e.v); else G[e.v].push_back(e.u); } FOR (x, 1, n + 1) { for (int y: G[x]) p[y] = x; for (int y: G[x]) for (int z: G[y]) if (p[z] == x) ans++; } return ans; }","title":"\u4e09\u5143\u73af"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/3-%E5%9B%BE%E8%AE%BA/#_21","text":"semi[x] \u534a\u5fc5\u7ecf\u70b9\uff08\u5c31\u662f $x$ \u7684\u7956\u5148 $z$ \u4e2d\uff0c\u80fd\u4e0d\u7ecf\u8fc7 $z$ \u548c $x$ \u4e4b\u95f4\u7684\u6811\u4e0a\u7684\u70b9\u800c\u5230\u8fbe $x$ \u7684\u70b9\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\uff09 idom[x] \u6700\u8fd1\u5fc5\u7ecf\u70b9\uff08\u5c31\u662f\u6df1\u5ea6\u6700\u5927\u7684\u6839\u5230 $x$ \u7684\u5fc5\u7ecf\u70b9\uff09 vector<int> G[N], rG[N]; vector<int> dt[N]; namespace tl{ int fa[N], idx[N], clk, ridx[N]; int c[N], best[N], semi[N], idom[N]; void init(int n) { clk = 0; fill(c, c + n + 1, -1); FOR (i, 1, n + 1) dt[i].clear(); FOR (i, 1, n + 1) semi[i] = best[i] = i; fill(idx, idx + n + 1, 0); } void dfs(int u) { idx[u] = ++clk; ridx[clk] = u; for (int& v: G[u]) if (!idx[v]) { fa[v] = u; dfs(v); } } int fix(int x) { if (c[x] == -1) return x; int &f = c[x], rt = fix(f); if (idx[semi[best[x]]] > idx[semi[best[f]]]) best[x] = best[f]; return f = rt; } void go(int rt) { dfs(rt); FORD (i, clk, 1) { int x = ridx[i], mn = clk + 1; for (int& u: rG[x]) { if (!idx[u]) continue; // \u53ef\u80fd\u4e0d\u80fd\u5230\u8fbe\u6240\u6709\u70b9 fix(u); mn = min(mn, idx[semi[best[u]]]); } c[x] = fa[x]; dt[semi[x] = ridx[mn]].push_back(x); x = ridx[i - 1]; for (int& u: dt[x]) { fix(u); if (semi[best[u]] != x) idom[u] = best[u]; else idom[u] = x; } dt[x].clear(); } FOR (i, 2, clk + 1) { int u = ridx[i]; if (idom[u] != semi[u]) idom[u] = idom[idom[u]]; dt[idom[u]].push_back(u); } } }","title":"\u652f\u914d\u6811"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","text":"\u8ba1\u7b97\u51e0\u4f55 \u4e8c\u7ef4\u51e0\u4f55\uff1a\u70b9\u4e0e\u5411\u91cf #define y1 yy1 #define nxt(i) ((i + 1) % s.size()) typedef double LD; const LD PI = 3.14159265358979323846; const LD eps = 1E-10; int sgn(LD x) { return fabs(x) < eps ? 0 : (x > 0 ? 1 : -1); } struct L; struct P; typedef P V; struct P { LD x, y; explicit P(LD x = 0, LD y = 0): x(x), y(y) {} explicit P(const L& l); }; struct L { P s, t; L() {} L(P s, P t): s(s), t(t) {} }; P operator + (const P& a, const P& b) { return P(a.x + b.x, a.y + b.y); } P operator - (const P& a, const P& b) { return P(a.x - b.x, a.y - b.y); } P operator * (const P& a, LD k) { return P(a.x * k, a.y * k); } P operator / (const P& a, LD k) { return P(a.x / k, a.y / k); } inline bool operator < (const P& a, const P& b) { return sgn(a.x - b.x) < 0 || (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) < 0); } bool operator == (const P& a, const P& b) { return !sgn(a.x - b.x) && !sgn(a.y - b.y); } P::P(const L& l) { *this = l.t - l.s; } ostream &operator << (ostream &os, const P &p) { return (os << \"(\" << p.x << \",\" << p.y << \")\"); } istream &operator >> (istream &is, P &p) { return (is >> p.x >> p.y); } LD dist(const P& p) { return sqrt(p.x * p.x + p.y * p.y); } LD dot(const V& a, const V& b) { return a.x * b.x + a.y * b.y; } LD det(const V& a, const V& b) { return a.x * b.y - a.y * b.x; } LD cross(const P& s, const P& t, const P& o = P()) { return det(s - o, t - o); } // -------------------------------------------- \u8c61\u9650 // \u8c61\u9650 int quad(P p) { int x = sgn(p.x), y = sgn(p.y); if (x > 0 && y >= 0) return 1; if (x <= 0 && y > 0) return 2; if (x < 0 && y <= 0) return 3; if (x >= 0 && y < 0) return 4; assert(0); } // \u4ec5\u9002\u7528\u4e8e\u53c2\u7167\u70b9\u5728\u6240\u6709\u70b9\u4e00\u4fa7\u7684\u60c5\u51b5 struct cmp_angle { P p; bool operator () (const P& a, const P& b) { // int qa = quad(a - p), qb = quad(b - p); // if (qa != qb) return qa < qb; int d = sgn(cross(a, b, p)); if (d) return d > 0; return dist(a - p) < dist(b - p); } }; \u7ebf // \u662f\u5426\u5e73\u884c bool parallel(const L& a, const L& b) { return !sgn(det(P(a), P(b))); } // \u76f4\u7ebf\u662f\u5426\u76f8\u7b49 bool l_eq(const L& a, const L& b) { return parallel(a, b) && parallel(L(a.s, b.t), L(b.s, a.t)); } // \u9006\u65f6\u9488\u65cb\u8f6c r \u5f27\u5ea6 P rotation(const P& p, const LD& r) { return P(p.x * cos(r) - p.y * sin(r), p.x * sin(r) + p.y * cos(r)); } P RotateCCW90(const P& p) { return P(-p.y, p.x); } P RotateCW90(const P& p) { return P(p.y, -p.x); } // \u5355\u4f4d\u6cd5\u5411\u91cf V normal(const V& v) { return V(-v.y, v.x) / dist(v); } \u70b9\u4e0e\u7ebf // \u70b9\u5728\u7ebf\u6bb5\u4e0a <= 0\u5305\u542b\u7aef\u70b9 < 0 \u5219\u4e0d\u5305\u542b bool p_on_seg(const P& p, const L& seg) { P a = seg.s, b = seg.t; return !sgn(det(p - a, b - a)) && sgn(dot(p - a, p - b)) <= 0; } // \u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb LD dist_to_line(const P& p, const L& l) { return fabs(cross(l.s, l.t, p)) / dist(l); } // \u70b9\u5230\u7ebf\u6bb5\u8ddd\u79bb LD dist_to_seg(const P& p, const L& l) { if (l.s == l.t) return dist(p - l); V vs = p - l.s, vt = p - l.t; if (sgn(dot(l, vs)) < 0) return dist(vs); else if (sgn(dot(l, vt)) > 0) return dist(vt); else return dist_to_line(p, l); } \u7ebf\u4e0e\u7ebf // \u6c42\u76f4\u7ebf\u4ea4 \u9700\u8981\u4e8b\u5148\u4fdd\u8bc1\u6709\u754c P l_intersection(const L& a, const L& b) { LD s1 = det(P(a), b.s - a.s), s2 = det(P(a), b.t - a.s); return (b.s * s2 - b.t * s1) / (s2 - s1); } // \u5411\u91cf\u5939\u89d2\u7684\u5f27\u5ea6 LD angle(const V& a, const V& b) { LD r = asin(fabs(det(a, b)) / dist(a) / dist(b)); if (sgn(dot(a, b)) < 0) r = PI - r; return r; } // \u7ebf\u6bb5\u548c\u76f4\u7ebf\u662f\u5426\u6709\u4ea4 1 = \u89c4\u8303\uff0c2 = \u4e0d\u89c4\u8303 int s_l_cross(const L& seg, const L& line) { int d1 = sgn(cross(line.s, line.t, seg.s)); int d2 = sgn(cross(line.s, line.t, seg.t)); if ((d1 ^ d2) == -2) return 1; // proper if (d1 == 0 || d2 == 0) return 2; return 0; } // \u7ebf\u6bb5\u7684\u4ea4 1 = \u89c4\u8303\uff0c2 = \u4e0d\u89c4\u8303 int s_cross(const L& a, const L& b, P& p) { int d1 = sgn(cross(a.t, b.s, a.s)), d2 = sgn(cross(a.t, b.t, a.s)); int d3 = sgn(cross(b.t, a.s, b.s)), d4 = sgn(cross(b.t, a.t, b.s)); if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2) { p = l_intersection(a, b); return 1; } if (!d1 && p_on_seg(b.s, a)) { p = b.s; return 2; } if (!d2 && p_on_seg(b.t, a)) { p = b.t; return 2; } if (!d3 && p_on_seg(a.s, b)) { p = a.s; return 2; } if (!d4 && p_on_seg(a.t, b)) { p = a.t; return 2; } return 0; } \u591a\u8fb9\u5f62 \u9762\u79ef\u3001\u51f8\u5305 typedef vector<P> S; // \u70b9\u662f\u5426\u5728\u591a\u8fb9\u5f62\u4e2d 0 = \u5728\u5916\u90e8 1 = \u5728\u5185\u90e8 -1 = \u5728\u8fb9\u754c\u4e0a int inside(const S& s, const P& p) { int cnt = 0; FOR (i, 0, s.size()) { P a = s[i], b = s[nxt(i)]; if (p_on_seg(p, L(a, b))) return -1; if (sgn(a.y - b.y) <= 0) swap(a, b); if (sgn(p.y - a.y) > 0) continue; if (sgn(p.y - b.y) <= 0) continue; cnt += sgn(cross(b, a, p)) > 0; } return bool(cnt & 1); } // \u591a\u8fb9\u5f62\u9762\u79ef\uff0c\u6709\u5411\u9762\u79ef\u53ef\u80fd\u4e3a\u8d1f LD polygon_area(const S& s) { LD ret = 0; FOR (i, 1, (LL)s.size() - 1) ret += cross(s[i], s[i + 1], s[0]); return ret / 2; } // \u6784\u5efa\u51f8\u5305 \u70b9\u4e0d\u53ef\u4ee5\u91cd\u590d < 0 \u8fb9\u4e0a\u53ef\u4ee5\u6709\u70b9\uff0c <= 0 \u5219\u4e0d\u80fd // \u4f1a\u6539\u53d8\u8f93\u5165\u70b9\u7684\u987a\u5e8f const int MAX_N = 1000; S convex_hull(S& s) { // assert(s.size() >= 3); sort(s.begin(), s.end()); S ret(MAX_N * 2); int sz = 0; FOR (i, 0, s.size()) { while (sz > 1 && sgn(cross(ret[sz - 1], s[i], ret[sz - 2])) < 0) --sz; ret[sz++] = s[i]; } int k = sz; FORD (i, (LL)s.size() - 2, -1) { while (sz > k && sgn(cross(ret[sz - 1], s[i], ret[sz - 2])) < 0) --sz; ret[sz++] = s[i]; } ret.resize(sz - (s.size() > 1)); return ret; } P ComputeCentroid(const vector<P> &p) { P c(0, 0); LD scale = 6.0 * polygon_area(p); for (unsigned i = 0; i < p.size(); i++) { unsigned j = (i + 1) % p.size(); c = c + (p[i] + p[j]) * (p[i].x * p[j].y - p[j].x * p[i].y); } return c / scale; } \u65cb\u8f6c\u5361\u58f3 LD rotatingCalipers(vector<P>& qs) { int n = qs.size(); if (n == 2) return dist(qs[0] - qs[1]); int i = 0, j = 0; FOR (k, 0, n) { if (!(qs[i] < qs[k])) i = k; if (qs[j] < qs[k]) j = k; } LD res = 0; int si = i, sj = j; while (i != sj || j != si) { res = max(res, dist(qs[i] - qs[j])); if (sgn(cross(qs[(i+1)%n] - qs[i], qs[(j+1)%n] - qs[j])) < 0) i = (i + 1) % n; else j = (j + 1) % n; } return res; } int main() { int n; while (cin >> n) { S v(n); FOR (i, 0, n) cin >> v[i].x >> v[i].y; convex_hull(v); printf(\"%.0f\\n\", rotatingCalipers(v)); } } \u534a\u5e73\u9762\u4ea4 struct LV { P p, v; LD ang; LV() {} LV(P s, P t): p(s), v(t - s) { ang = atan2(v.y, v.x); } }; // \u53e6\u4e00\u79cd\u5411\u91cf\u8868\u793a bool operator < (const LV &a, const LV& b) { return a.ang < b.ang; } bool on_left(const LV& l, const P& p) { return sgn(cross(l.v, p - l.p)) >= 0; } P l_intersection(const LV& a, const LV& b) { P u = a.p - b.p; LD t = cross(b.v, u) / cross(a.v, b.v); return a.p + a.v * t; } S half_plane_intersection(vector<LV>& L) { int n = L.size(), fi, la; sort(L.begin(), L.end()); vector<P> p(n); vector<LV> q(n); q[fi = la = 0] = L[0]; FOR (i, 1, n) { while (fi < la && !on_left(L[i], p[la - 1])) la--; while (fi < la && !on_left(L[i], p[fi])) fi++; q[++la] = L[i]; if (sgn(cross(q[la].v, q[la - 1].v)) == 0) { la--; if (on_left(q[la], L[i].p)) q[la] = L[i]; } if (fi < la) p[la - 1] = l_intersection(q[la - 1], q[la]); } while (fi < la && !on_left(q[fi], p[la - 1])) la--; if (la - fi <= 1) return vector<P>(); p[la] = l_intersection(q[la], q[fi]); return vector<P>(p.begin() + fi, p.begin() + la + 1); } S convex_intersection(const vector<P> &v1, const vector<P> &v2) { vector<LV> h; int n = v1.size(), m = v2.size(); FOR (i, 0, n) h.push_back(LV(v1[i], v1[(i + 1) % n])); FOR (i, 0, m) h.push_back(LV(v2[i], v2[(i + 1) % m])); return half_plane_intersection(h); } \u5706 struct C { P p; LD r; C(LD x = 0, LD y = 0, LD r = 0): p(x, y), r(r) {} C(P p, LD r): p(p), r(r) {} }; \u4e09\u70b9\u6c42\u5706\u5fc3 P compute_circle_center(P a, P b, P c) { b = (a + b) / 2; c = (a + c) / 2; return l_intersection({b, b + RotateCW90(a - b)}, {c , c + RotateCW90(a - c)}); } \u5706\u7ebf\u4ea4\u70b9\u3001\u5706\u5706\u4ea4\u70b9 \u5706\u548c\u7ebf\u7684\u4ea4\u70b9\u5173\u4e8e\u5706\u5fc3\u662f\u987a\u65f6\u9488\u7684 vector<P> c_l_intersection(const L& l, const C& c) { vector<P> ret; P b(l), a = l.s - c.p; LD x = dot(b, b), y = dot(a, b), z = dot(a, a) - c.r * c.r; LD D = y * y - x * z; if (sgn(D) < 0) return ret; ret.push_back(c.p + a + b * (-y + sqrt(D + eps)) / x); if (sgn(D) > 0) ret.push_back(c.p + a + b * (-y - sqrt(D)) / x); return ret; } vector<P> c_c_intersection(C a, C b) { vector<P> ret; LD d = dist(a.p - b.p); if (sgn(d) == 0 || sgn(d - (a.r + b.r)) > 0 || sgn(d + min(a.r, b.r) - max(a.r, b.r)) < 0) return ret; LD x = (d * d - b.r * b.r + a.r * a.r) / (2 * d); LD y = sqrt(a.r * a.r - x * x); P v = (b.p - a.p) / d; ret.push_back(a.p + v * x + RotateCCW90(v) * y); if (sgn(y) > 0) ret.push_back(a.p + v * x - RotateCCW90(v) * y); return ret; } \u5706\u5706\u4f4d\u7f6e\u5173\u7cfb // 1:\u5185\u542b 2:\u5185\u5207 3:\u76f8\u4ea4 4:\u5916\u5207 5:\u76f8\u79bb int c_c_relation(const C& a, const C& v) { LD d = dist(a.p - v.p); if (sgn(d - a.r - v.r) > 0) return 5; if (sgn(d - a.r - v.r) == 0) return 4; LD l = fabs(a.r - v.r); if (sgn(d - l) > 0) return 3; if (sgn(d - l) == 0) return 2; if (sgn(d - l) < 0) return 1; } \u5706\u4e0e\u591a\u8fb9\u5f62\u4ea4 HDU 5130 \u6ce8\u610f\u987a\u65f6\u9488\u9006\u65f6\u9488\uff08\u53ef\u80fd\u8981\u53d6\u7edd\u5bf9\u503c\uff09 LD sector_area(const P& a, const P& b, LD r) { LD th = atan2(a.y, a.x) - atan2(b.y, b.x); while (th <= 0) th += 2 * PI; while (th > 2 * PI) th -= 2 * PI; th = min(th, 2 * PI - th); return r * r * th / 2; } LD c_tri_area(P a, P b, P center, LD r) { a = a - center; b = b - center; int ina = sgn(dist(a) - r) < 0, inb = sgn(dist(b) - r) < 0; // dbg(a, b, ina, inb); if (ina && inb) { return fabs(cross(a, b)) / 2; } else { auto p = c_l_intersection(L(a, b), C(0, 0, r)); if (ina ^ inb) { auto cr = p_on_seg(p[0], L(a, b)) ? p[0] : p[1]; if (ina) return sector_area(b, cr, r) + fabs(cross(a, cr)) / 2; else return sector_area(a, cr, r) + fabs(cross(b, cr)) / 2; } else { if ((int) p.size() == 2 && p_on_seg(p[0], L(a, b))) { if (dist(p[0] - a) > dist(p[1] - a)) swap(p[0], p[1]); return sector_area(a, p[0], r) + sector_area(p[1], b, r) + fabs(cross(p[0], p[1])) / 2; } else return sector_area(a, b, r); } } } typedef vector<P> S; LD c_poly_area(S poly, const C& c) { LD ret = 0; int n = poly.size(); FOR (i, 0, n) { int t = sgn(cross(poly[i] - c.p, poly[(i + 1) % n] - c.p)); if (t) ret += t * c_tri_area(poly[i], poly[(i + 1) % n], c.p, c.r); } return ret; } \u5706\u7684\u79bb\u6563\u5316\u3001\u9762\u79ef\u5e76 SPOJ: CIRU, EOJ: 284 \u7248\u672c 1\uff1a\u590d\u6742\u5ea6 $O(n^3 \\log n)$\u3002\u867d\u7136\u5e38\u6570\u5c0f\uff0c\u4f46\u8fd8\u662f\u96be\u4ee5\u63a5\u53d7\u3002 \u4f18\u70b9\uff1f\u60f3\u4e0d\u51fa\u6765\u3002 \u539f\u7406\u4e0a\u662f\u7528\u7ad6\u7ebf\u8fdb\u884c\u5207\u5206\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u5207\u7247\u5206\u522b\u8ba1\u7b97\u3002 \u626b\u63cf\u7ebf\u90e8\u5206\u53ef\u4ee5\u9b54\u6539\uff0c\u6c42\u5404\u79cd\u4e1c\u897f\u3002 inline LD rt(LD x) { return sgn(x) == 0 ? 0 : sqrt(x); } inline LD sq(LD x) { return x * x; } // \u5706\u5f27 // \u5982\u679c\u6309\u7167 x \u79bb\u6563\u5316\uff0c\u5706\u5f27\u662f \"\u6a2a\u7740\u7684\" // \u8bb0\u5f55\u5706\u5f27\u7684\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u3001\u4e2d\u70b9\u7684\u5750\u6807\uff0c\u548c\u5706\u5f27\u6240\u5728\u7684\u5706 // \u8c03\u7528\u6784\u9020\u8981\u4fdd\u8bc1 c.x - x.r <= xl < xr <= c.y + x.r // t = 1 \u4e0b\u5706\u5f27 t = -1 \u4e0a\u5706\u5f27 struct CV { LD yl, yr, ym; C o; int type; CV() {} CV(LD yl, LD yr, LD ym, C c, int t) : yl(yl), yr(yr), ym(ym), type(t), o(c) {} }; // \u8f85\u52a9\u51fd\u6570 \u6c42\u5706\u4e0a\u7eb5\u5750\u6807 pair<LD, LD> c_point_eval(const C& c, LD x) { LD d = fabs(c.p.x - x), h = rt(sq(c.r) - sq(d)); return {c.p.y - h, c.p.y + h}; } // \u6784\u9020\u4e0a\u4e0b\u5706\u5f27 pair<CV, CV> pairwise_curves(const C& c, LD xl, LD xr) { LD yl1, yl2, yr1, yr2, ym1, ym2; tie(yl1, yl2) = c_point_eval(c, xl); tie(ym1, ym2) = c_point_eval(c, (xl + xr) / 2); tie(yr1, yr2) = c_point_eval(c, xr); return {CV(yl1, yr1, ym1, c, 1), CV(yl2, yr2, ym2, c, -1)}; } // \u79bb\u6563\u5316\u4e4b\u540e\u540c\u4e00\u5207\u7247\u5185\u7684\u5706\u5f27\u5e94\u8be5\u662f\u4e0d\u76f8\u4ea4\u7684 bool operator < (const CV& a, const CV& b) { return a.ym < b.ym; } // \u8ba1\u7b97\u5706\u5f27\u548c\u8fde\u63a5\u5706\u5f27\u7aef\u70b9\u7684\u7ebf\u6bb5\u6784\u6210\u7684\u5c01\u95ed\u56fe\u5f62\u7684\u9762\u79ef LD cv_area(const CV& v, LD xl, LD xr) { LD l = rt(sq(xr - xl) + sq(v.yr - v.yl)); LD d = rt(sq(v.o.r) - sq(l / 2)); LD ang = atan(l / d / 2); return ang * sq(v.o.r) - d * l / 2; } LD circle_union(const vector<C>& cs) { int n = cs.size(); vector<LD> xs; FOR (i, 0, n) { xs.push_back(cs[i].p.x - cs[i].r); xs.push_back(cs[i].p.x); xs.push_back(cs[i].p.x + cs[i].r); FOR (j, i + 1, n) { auto pts = c_c_intersection(cs[i], cs[j]); for (auto& p: pts) xs.push_back(p.x); } } sort(xs.begin(), xs.end()); xs.erase(unique(xs.begin(), xs.end(), [](LD x, LD y) { return sgn(x - y) == 0; }), xs.end()); LD ans = 0; FOR (i, 0, (int) xs.size() - 1) { LD xl = xs[i], xr = xs[i + 1]; vector<CV> intv; FOR (k, 0, n) { auto& c = cs[k]; if (sgn(c.p.x - c.r - xl) <= 0 && sgn(c.p.x + c.r - xr) >= 0) { auto t = pairwise_curves(c, xl, xr); intv.push_back(t.first); intv.push_back(t.second); } } sort(intv.begin(), intv.end()); vector<LD> areas(intv.size()); FOR (i, 0, intv.size()) areas[i] = cv_area(intv[i], xl, xr); int cc = 0; FOR (i, 0, intv.size()) { if (cc > 0) { ans += (intv[i].yl - intv[i - 1].yl + intv[i].yr - intv[i - 1].yr) * (xr - xl) / 2; ans += intv[i - 1].type * areas[i - 1]; ans -= intv[i].type * areas[i]; } cc += intv[i].type; } } return ans; } \u7248\u672c 2\uff1a\u590d\u6742\u5ea6 $O(n^2 \\log n)$\u3002 \u539f\u7406\u662f\uff1a\u8ba4\u4e3a\u6240\u6c42\u90e8\u5206\u662f\u4e00\u4e2a\u5947\u602a\u7684\u591a\u8fb9\u5f62 + \u82e5\u5e72\u5f13\u5f62\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5706\u5206\u522b\u6c42\u8d21\u732e\u7684\u5f13\u5f62\uff0c\u5e76\u7d2f\u52a0\u591a\u8fb9\u5f62\u6709\u5411\u9762\u79ef\u3002 \u540c\u6837\u53ef\u4ee5\u9b54\u6539\u626b\u63cf\u7ebf\u7684\u90e8\u5206\uff0c\u7528\u4e8e\u6c42\u5468\u957f\u3001\u81f3\u5c11\u8986\u76d6 $k$ \u6b21\u7b49\u7b49\u3002 \u5185\u542b\u3001\u5185\u5207\u3001\u540c\u4e00\u4e2a\u5706\u7684\u60c5\u51b5\uff0c\u901a\u5e38\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u662f $k$ \u5706\u8986\u76d6\u3002 inline LD angle(const P& p) { return atan2(p.y, p.x); } // \u5706\u5f27\u4e0a\u7684\u70b9 // p \u662f\u76f8\u5bf9\u4e8e\u5706\u5fc3\u7684\u5750\u6807 // a \u662f\u5728\u5706\u4e0a\u7684 atan2 [-PI, PI] struct CP { P p; LD a; int t; CP() {} CP(P p, LD a, int t): p(p), a(a), t(t) {} }; bool operator < (const CP& u, const CP& v) { return u.a < v.a; } LD cv_area(LD r, const CP& q1, const CP& q2) { return (r * r * (q2.a - q1.a) - cross(q1.p, q2.p)) / 2; } LD ans[N]; void circle_union(const vector<C>& cs) { int n = cs.size(); FOR (i, 0, n) { // \u6709\u76f8\u540c\u7684\u5706\u7684\u8bdd\u53ea\u8003\u8651\u7b2c\u4e00\u6b21\u51fa\u73b0 bool ok = true; FOR (j, 0, i) if (sgn(cs[i].r - cs[j].r) == 0 && cs[i].p == cs[j].p) { ok = false; break; } if (!ok) continue; auto& c = cs[i]; vector<CP> ev; int belong_to = 0; P bound = c.p + P(-c.r, 0); ev.emplace_back(bound, -PI, 0); ev.emplace_back(bound, PI, 0); FOR (j, 0, n) { if (i == j) continue; if (c_c_relation(c, cs[j]) <= 2) { if (sgn(cs[j].r - c.r) >= 0) // \u5b8c\u5168\u88ab\u53e6\u4e00\u4e2a\u5706\u5305\u542b\uff0c\u7b49\u4e8e\u8bf4\u53e0\u4e86\u4e00\u5c42 belong_to++; continue; } auto its = c_c_intersection(c, cs[j]); if (its.size() == 2) { P p = its[1] - c.p, q = its[0] - c.p; LD a = angle(p), b = angle(q); if (sgn(a - b) > 0) { ev.emplace_back(p, a, 1); ev.emplace_back(bound, PI, -1); ev.emplace_back(bound, -PI, 1); ev.emplace_back(q, b, -1); } else { ev.emplace_back(p, a, 1); ev.emplace_back(q, b, -1); } } } sort(ev.begin(), ev.end()); int cc = ev[0].t; FOR (j, 1, ev.size()) { int t = cc + belong_to; ans[t] += cross(ev[j - 1].p + c.p, ev[j].p + c.p) / 2; ans[t] += cv_area(c.r, ev[j - 1], ev[j]); cc += ev[j].t; } } } \u6700\u5c0f\u5706\u8986\u76d6 \u968f\u673a\u589e\u91cf\u3002\u671f\u671b\u590d\u6742\u5ea6 $O(n)$\u3002 P compute_circle_center(P a, P b) { return (a + b) / 2; } bool p_in_circle(const P& p, const C& c) { return sgn(dist(p - c.p) - c.r) <= 0; } C min_circle_cover(const vector<P> &in) { vector<P> a(in.begin(), in.end()); dbg(a.size()); random_shuffle(a.begin(), a.end()); P c = a[0]; LD r = 0; int n = a.size(); FOR (i, 1, n) if (!p_in_circle(a[i], {c, r})) { c = a[i]; r = 0; FOR (j, 0, i) if (!p_in_circle(a[j], {c, r})) { c = compute_circle_center(a[i], a[j]); r = dist(a[j] - c); FOR (k, 0, j) if (!p_in_circle(a[k], {c, r})) { c = compute_circle_center(a[i], a[j], a[k]); r = dist(a[k] - c); } } } return {c, r}; } \u5706\u7684\u53cd\u6f14 C inv(C c, const P& o) { LD d = dist(c.p - o); assert(sgn(d) != 0); LD a = 1 / (d - c.r); LD b = 1 / (d + c.r); c.r = (a - b) / 2 * R2; c.p = o + (c.p - o) * ((a + b) * R2 / 2 / d); return c; } \u4e09\u7ef4\u8ba1\u7b97\u51e0\u4f55 struct P; struct L; typedef P V; struct P { LD x, y, z; explicit P(LD x = 0, LD y = 0, LD z = 0): x(x), y(y), z(z) {} explicit P(const L& l); }; struct L { P s, t; L() {} L(P s, P t): s(s), t(t) {} }; struct F { P a, b, c; F() {} F(P a, P b, P c): a(a), b(b), c(c) {} }; P operator + (const P& a, const P& b) { return P(a.x + b.x, a.y + b.y, a.z + b.z); } P operator - (const P& a, const P& b) { return P(a.x - b.x, a.y - b.y, a.z - b.z); } P operator * (const P& a, LD k) { return P(a.x * k, a.y * k, a.z * k); } P operator / (const P& a, LD k) { return P(a.x / k, a.y / k, a.z / k); } inline int operator < (const P& a, const P& b) { return sgn(a.x - b.x) < 0 || (sgn(a.x - b.x) == 0 && (sgn(a.y - b.y) < 0 || (sgn(a.y - b.y) == 0 && sgn(a.z - b.z) < 0))); } bool operator == (const P& a, const P& b) { return !sgn(a.x - b.x) && !sgn(a.y - b.y) && !sgn(a.z - b.z); } P::P(const L& l) { *this = l.t - l.s; } ostream &operator << (ostream &os, const P &p) { return (os << \"(\" << p.x << \",\" << p.y << \",\" << p.z << \")\"); } istream &operator >> (istream &is, P &p) { return (is >> p.x >> p.y >> p.z); } // -------------------------------------------- LD dist2(const P& p) { return p.x * p.x + p.y * p.y + p.z * p.z; } LD dist(const P& p) { return sqrt(dist2(p)); } LD dot(const V& a, const V& b) { return a.x * b.x + a.y * b.y + a.z * b.z; } P cross(const P& v, const P& w) { return P(v.y * w.z - v.z * w.y, v.z * w.x - v.x * w.z, v.x * w.y - v.y * w.x); } LD mix(const V& a, const V& b, const V& c) { return dot(a, cross(b, c)); } \u65cb\u8f6c // \u9006\u65f6\u9488\u65cb\u8f6c r \u5f27\u5ea6 // axis = 0 \u7ed5 x \u8f74 // axis = 1 \u7ed5 y \u8f74 // axis = 2 \u7ed5 z \u8f74 P rotation(const P& p, const LD& r, int axis = 0) { if (axis == 0) return P(p.x, p.y * cos(r) - p.z * sin(r), p.y * sin(r) + p.z * cos(r)); else if (axis == 1) return P(p.z * cos(r) - p.x * sin(r), p.y, p.z * sin(r) + p.x * cos(r)); else if (axis == 2) return P(p.x * cos(r) - p.y * sin(r), p.x * sin(r) + p.y * cos(r), p.z); } // n \u662f\u5355\u4f4d\u5411\u91cf \u8868\u793a\u65cb\u8f6c\u8f74 // \u6a21\u677f\u662f\u987a\u65f6\u9488\u7684 P rotation(const P& p, const LD& r, const P& n) { LD c = cos(r), s = sin(r), x = n.x, y = n.y, z = n.z; // dbg(c, s); return P((x * x * (1 - c) + c) * p.x + (x * y * (1 - c) + z * s) * p.y + (x * z * (1 - c) - y * s) * p.z, (x * y * (1 - c) - z * s) * p.x + (y * y * (1 - c) + c) * p.y + (y * z * (1 - c) + x * s) * p.z, (x * z * (1 - c) + y * s) * p.x + (y * z * (1 - c) - x * s) * p.y + (z * z * (1 - c) + c) * p.z); } \u7ebf\u3001\u9762 \u51fd\u6570\u76f8\u4e92\u4f9d\u8d56\uff0c\u6240\u4ee5\u4ea4\u7ec7\u5728\u4e00\u8d77\u4e86\u3002 // \u70b9\u5728\u7ebf\u6bb5\u4e0a <= 0\u5305\u542b\u7aef\u70b9 < 0 \u5219\u4e0d\u5305\u542b bool p_on_seg(const P& p, const L& seg) { P a = seg.s, b = seg.t; return !sgn(dist2(cross(p - a, b - a))) && sgn(dot(p - a, p - b)) <= 0; } // \u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb LD dist_to_line(const P& p, const L& l) { return dist(cross(l.s - p, l.t - p)) / dist(l); } // \u70b9\u5230\u7ebf\u6bb5\u8ddd\u79bb LD dist_to_seg(const P& p, const L& l) { if (l.s == l.t) return dist(p - l.s); V vs = p - l.s, vt = p - l.t; if (sgn(dot(l, vs)) < 0) return dist(vs); else if (sgn(dot(l, vt)) > 0) return dist(vt); else return dist_to_line(p, l); } P norm(const F& f) { return cross(f.a - f.b, f.b - f.c); } int p_on_plane(const F& f, const P& p) { return sgn(dot(norm(f), p - f.a)) == 0; } // \u5224\u4e24\u70b9\u5728\u7ebf\u6bb5\u5f02\u4fa7 \u70b9\u5728\u7ebf\u6bb5\u4e0a\u8fd4\u56de 0 \u4e0d\u5171\u9762\u65e0\u610f\u4e49 int opposite_side(const P& u, const P& v, const L& l) { return sgn(dot(cross(P(l), u - l.s), cross(P(l), v - l.s))) < 0; } bool parallel(const L& a, const L& b) { return !sgn(dist2(cross(P(a), P(b)))); } // \u7ebf\u6bb5\u76f8\u4ea4 int s_intersect(const L& u, const L& v) { return p_on_plane(F(u.s, u.t, v.s), v.t) && opposite_side(u.s, u.t, v) && opposite_side(v.s, v.t, u); } \u51f8\u5305 \u589e\u91cf\u6cd5\u3002\u5148\u5c06\u6240\u6709\u7684\u70b9\u6253\u4e71\u987a\u5e8f\uff0c\u7136\u540e\u9009\u62e9\u56db\u4e2a\u4e0d\u5171\u9762\u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u56db\u9762\u4f53\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8bf4\u660e\u51f8\u5305\u4e0d\u5b58\u5728\u3002\u7136\u540e\u904d\u5386\u5269\u4f59\u7684\u70b9\uff0c\u4e0d\u65ad\u66f4\u65b0\u51f8\u5305\u3002\u5bf9\u904d\u5386\u5230\u7684\u70b9\u505a\u5982\u4e0b\u5904\u7406\u3002 \u5982\u679c\u70b9\u5728\u51f8\u5305\u5185\uff0c\u5219\u4e0d\u66f4\u65b0\u3002 \u5982\u679c\u70b9\u5728\u51f8\u5305\u5916\uff0c\u90a3\u4e48\u627e\u5230\u6240\u6709\u539f\u51f8\u5305\u4e0a\u6240\u6709\u5206\u9694\u4e86\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u53ef\u89c1\u9762\u548c\u4e0d\u53ef\u89c1\u9762\u7684\u8fb9\uff0c\u4ee5\u8fd9\u6837\u7684\u8fb9\u7684\u4e24\u4e2a\u70b9\u548c\u65b0\u7684\u70b9\u521b\u5efa\u65b0\u7684\u9762\u52a0\u5165\u51f8\u5305\u4e2d\u3002 struct FT { int a, b, c; FT() { } FT(int a, int b, int c) : a(a), b(b), c(c) { } }; bool p_on_line(const P& p, const L& l) { return !sgn(dist2(cross(p - l.s, P(l)))); } vector<F> convex_hull(vector<P> &p) { sort(p.begin(), p.end()); p.erase(unique(p.begin(), p.end()), p.end()); random_shuffle(p.begin(), p.end()); vector<FT> face; FOR (i, 2, p.size()) { if (p_on_line(p[i], L(p[0], p[1]))) continue; swap(p[i], p[2]); FOR (j, i + 1, p.size()) if (sgn(mix(p[1] - p[0], p[2] - p[1], p[j] - p[0]))) { swap(p[j], p[3]); face.emplace_back(0, 1, 2); face.emplace_back(0, 2, 1); goto found; } } found: vector<vector<int>> mk(p.size(), vector<int>(p.size())); FOR (v, 3, p.size()) { vector<FT> tmp; FOR (i, 0, face.size()) { int a = face[i].a, b = face[i].b, c = face[i].c; if (sgn(mix(p[a] - p[v], p[b] - p[v], p[c] - p[v])) < 0) { mk[a][b] = mk[b][a] = v; mk[b][c] = mk[c][b] = v; mk[c][a] = mk[a][c] = v; } else tmp.push_back(face[i]); } face = tmp; FOR (i, 0, tmp.size()) { int a = face[i].a, b = face[i].b, c = face[i].c; if (mk[a][b] == v) face.emplace_back(b, a, v); if (mk[b][c] == v) face.emplace_back(c, b, v); if (mk[c][a] == v) face.emplace_back(a, c, v); } } vector<F> out; FOR (i, 0, face.size()) out.emplace_back(p[face[i].a], p[face[i].b], p[face[i].c]); return out; }","title":"\u8ba1\u7b97\u51e0\u4f55"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_1","text":"","title":"\u8ba1\u7b97\u51e0\u4f55"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_2","text":"#define y1 yy1 #define nxt(i) ((i + 1) % s.size()) typedef double LD; const LD PI = 3.14159265358979323846; const LD eps = 1E-10; int sgn(LD x) { return fabs(x) < eps ? 0 : (x > 0 ? 1 : -1); } struct L; struct P; typedef P V; struct P { LD x, y; explicit P(LD x = 0, LD y = 0): x(x), y(y) {} explicit P(const L& l); }; struct L { P s, t; L() {} L(P s, P t): s(s), t(t) {} }; P operator + (const P& a, const P& b) { return P(a.x + b.x, a.y + b.y); } P operator - (const P& a, const P& b) { return P(a.x - b.x, a.y - b.y); } P operator * (const P& a, LD k) { return P(a.x * k, a.y * k); } P operator / (const P& a, LD k) { return P(a.x / k, a.y / k); } inline bool operator < (const P& a, const P& b) { return sgn(a.x - b.x) < 0 || (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) < 0); } bool operator == (const P& a, const P& b) { return !sgn(a.x - b.x) && !sgn(a.y - b.y); } P::P(const L& l) { *this = l.t - l.s; } ostream &operator << (ostream &os, const P &p) { return (os << \"(\" << p.x << \",\" << p.y << \")\"); } istream &operator >> (istream &is, P &p) { return (is >> p.x >> p.y); } LD dist(const P& p) { return sqrt(p.x * p.x + p.y * p.y); } LD dot(const V& a, const V& b) { return a.x * b.x + a.y * b.y; } LD det(const V& a, const V& b) { return a.x * b.y - a.y * b.x; } LD cross(const P& s, const P& t, const P& o = P()) { return det(s - o, t - o); } // --------------------------------------------","title":"\u4e8c\u7ef4\u51e0\u4f55\uff1a\u70b9\u4e0e\u5411\u91cf"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_3","text":"// \u8c61\u9650 int quad(P p) { int x = sgn(p.x), y = sgn(p.y); if (x > 0 && y >= 0) return 1; if (x <= 0 && y > 0) return 2; if (x < 0 && y <= 0) return 3; if (x >= 0 && y < 0) return 4; assert(0); } // \u4ec5\u9002\u7528\u4e8e\u53c2\u7167\u70b9\u5728\u6240\u6709\u70b9\u4e00\u4fa7\u7684\u60c5\u51b5 struct cmp_angle { P p; bool operator () (const P& a, const P& b) { // int qa = quad(a - p), qb = quad(b - p); // if (qa != qb) return qa < qb; int d = sgn(cross(a, b, p)); if (d) return d > 0; return dist(a - p) < dist(b - p); } };","title":"\u8c61\u9650"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_4","text":"// \u662f\u5426\u5e73\u884c bool parallel(const L& a, const L& b) { return !sgn(det(P(a), P(b))); } // \u76f4\u7ebf\u662f\u5426\u76f8\u7b49 bool l_eq(const L& a, const L& b) { return parallel(a, b) && parallel(L(a.s, b.t), L(b.s, a.t)); } // \u9006\u65f6\u9488\u65cb\u8f6c r \u5f27\u5ea6 P rotation(const P& p, const LD& r) { return P(p.x * cos(r) - p.y * sin(r), p.x * sin(r) + p.y * cos(r)); } P RotateCCW90(const P& p) { return P(-p.y, p.x); } P RotateCW90(const P& p) { return P(p.y, -p.x); } // \u5355\u4f4d\u6cd5\u5411\u91cf V normal(const V& v) { return V(-v.y, v.x) / dist(v); }","title":"\u7ebf"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_5","text":"// \u70b9\u5728\u7ebf\u6bb5\u4e0a <= 0\u5305\u542b\u7aef\u70b9 < 0 \u5219\u4e0d\u5305\u542b bool p_on_seg(const P& p, const L& seg) { P a = seg.s, b = seg.t; return !sgn(det(p - a, b - a)) && sgn(dot(p - a, p - b)) <= 0; } // \u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb LD dist_to_line(const P& p, const L& l) { return fabs(cross(l.s, l.t, p)) / dist(l); } // \u70b9\u5230\u7ebf\u6bb5\u8ddd\u79bb LD dist_to_seg(const P& p, const L& l) { if (l.s == l.t) return dist(p - l); V vs = p - l.s, vt = p - l.t; if (sgn(dot(l, vs)) < 0) return dist(vs); else if (sgn(dot(l, vt)) > 0) return dist(vt); else return dist_to_line(p, l); }","title":"\u70b9\u4e0e\u7ebf"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_6","text":"// \u6c42\u76f4\u7ebf\u4ea4 \u9700\u8981\u4e8b\u5148\u4fdd\u8bc1\u6709\u754c P l_intersection(const L& a, const L& b) { LD s1 = det(P(a), b.s - a.s), s2 = det(P(a), b.t - a.s); return (b.s * s2 - b.t * s1) / (s2 - s1); } // \u5411\u91cf\u5939\u89d2\u7684\u5f27\u5ea6 LD angle(const V& a, const V& b) { LD r = asin(fabs(det(a, b)) / dist(a) / dist(b)); if (sgn(dot(a, b)) < 0) r = PI - r; return r; } // \u7ebf\u6bb5\u548c\u76f4\u7ebf\u662f\u5426\u6709\u4ea4 1 = \u89c4\u8303\uff0c2 = \u4e0d\u89c4\u8303 int s_l_cross(const L& seg, const L& line) { int d1 = sgn(cross(line.s, line.t, seg.s)); int d2 = sgn(cross(line.s, line.t, seg.t)); if ((d1 ^ d2) == -2) return 1; // proper if (d1 == 0 || d2 == 0) return 2; return 0; } // \u7ebf\u6bb5\u7684\u4ea4 1 = \u89c4\u8303\uff0c2 = \u4e0d\u89c4\u8303 int s_cross(const L& a, const L& b, P& p) { int d1 = sgn(cross(a.t, b.s, a.s)), d2 = sgn(cross(a.t, b.t, a.s)); int d3 = sgn(cross(b.t, a.s, b.s)), d4 = sgn(cross(b.t, a.t, b.s)); if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2) { p = l_intersection(a, b); return 1; } if (!d1 && p_on_seg(b.s, a)) { p = b.s; return 2; } if (!d2 && p_on_seg(b.t, a)) { p = b.t; return 2; } if (!d3 && p_on_seg(a.s, b)) { p = a.s; return 2; } if (!d4 && p_on_seg(a.t, b)) { p = a.t; return 2; } return 0; }","title":"\u7ebf\u4e0e\u7ebf"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_7","text":"","title":"\u591a\u8fb9\u5f62"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_8","text":"typedef vector<P> S; // \u70b9\u662f\u5426\u5728\u591a\u8fb9\u5f62\u4e2d 0 = \u5728\u5916\u90e8 1 = \u5728\u5185\u90e8 -1 = \u5728\u8fb9\u754c\u4e0a int inside(const S& s, const P& p) { int cnt = 0; FOR (i, 0, s.size()) { P a = s[i], b = s[nxt(i)]; if (p_on_seg(p, L(a, b))) return -1; if (sgn(a.y - b.y) <= 0) swap(a, b); if (sgn(p.y - a.y) > 0) continue; if (sgn(p.y - b.y) <= 0) continue; cnt += sgn(cross(b, a, p)) > 0; } return bool(cnt & 1); } // \u591a\u8fb9\u5f62\u9762\u79ef\uff0c\u6709\u5411\u9762\u79ef\u53ef\u80fd\u4e3a\u8d1f LD polygon_area(const S& s) { LD ret = 0; FOR (i, 1, (LL)s.size() - 1) ret += cross(s[i], s[i + 1], s[0]); return ret / 2; } // \u6784\u5efa\u51f8\u5305 \u70b9\u4e0d\u53ef\u4ee5\u91cd\u590d < 0 \u8fb9\u4e0a\u53ef\u4ee5\u6709\u70b9\uff0c <= 0 \u5219\u4e0d\u80fd // \u4f1a\u6539\u53d8\u8f93\u5165\u70b9\u7684\u987a\u5e8f const int MAX_N = 1000; S convex_hull(S& s) { // assert(s.size() >= 3); sort(s.begin(), s.end()); S ret(MAX_N * 2); int sz = 0; FOR (i, 0, s.size()) { while (sz > 1 && sgn(cross(ret[sz - 1], s[i], ret[sz - 2])) < 0) --sz; ret[sz++] = s[i]; } int k = sz; FORD (i, (LL)s.size() - 2, -1) { while (sz > k && sgn(cross(ret[sz - 1], s[i], ret[sz - 2])) < 0) --sz; ret[sz++] = s[i]; } ret.resize(sz - (s.size() > 1)); return ret; } P ComputeCentroid(const vector<P> &p) { P c(0, 0); LD scale = 6.0 * polygon_area(p); for (unsigned i = 0; i < p.size(); i++) { unsigned j = (i + 1) % p.size(); c = c + (p[i] + p[j]) * (p[i].x * p[j].y - p[j].x * p[i].y); } return c / scale; }","title":"\u9762\u79ef\u3001\u51f8\u5305"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_9","text":"LD rotatingCalipers(vector<P>& qs) { int n = qs.size(); if (n == 2) return dist(qs[0] - qs[1]); int i = 0, j = 0; FOR (k, 0, n) { if (!(qs[i] < qs[k])) i = k; if (qs[j] < qs[k]) j = k; } LD res = 0; int si = i, sj = j; while (i != sj || j != si) { res = max(res, dist(qs[i] - qs[j])); if (sgn(cross(qs[(i+1)%n] - qs[i], qs[(j+1)%n] - qs[j])) < 0) i = (i + 1) % n; else j = (j + 1) % n; } return res; } int main() { int n; while (cin >> n) { S v(n); FOR (i, 0, n) cin >> v[i].x >> v[i].y; convex_hull(v); printf(\"%.0f\\n\", rotatingCalipers(v)); } }","title":"\u65cb\u8f6c\u5361\u58f3"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_10","text":"struct LV { P p, v; LD ang; LV() {} LV(P s, P t): p(s), v(t - s) { ang = atan2(v.y, v.x); } }; // \u53e6\u4e00\u79cd\u5411\u91cf\u8868\u793a bool operator < (const LV &a, const LV& b) { return a.ang < b.ang; } bool on_left(const LV& l, const P& p) { return sgn(cross(l.v, p - l.p)) >= 0; } P l_intersection(const LV& a, const LV& b) { P u = a.p - b.p; LD t = cross(b.v, u) / cross(a.v, b.v); return a.p + a.v * t; } S half_plane_intersection(vector<LV>& L) { int n = L.size(), fi, la; sort(L.begin(), L.end()); vector<P> p(n); vector<LV> q(n); q[fi = la = 0] = L[0]; FOR (i, 1, n) { while (fi < la && !on_left(L[i], p[la - 1])) la--; while (fi < la && !on_left(L[i], p[fi])) fi++; q[++la] = L[i]; if (sgn(cross(q[la].v, q[la - 1].v)) == 0) { la--; if (on_left(q[la], L[i].p)) q[la] = L[i]; } if (fi < la) p[la - 1] = l_intersection(q[la - 1], q[la]); } while (fi < la && !on_left(q[fi], p[la - 1])) la--; if (la - fi <= 1) return vector<P>(); p[la] = l_intersection(q[la], q[fi]); return vector<P>(p.begin() + fi, p.begin() + la + 1); } S convex_intersection(const vector<P> &v1, const vector<P> &v2) { vector<LV> h; int n = v1.size(), m = v2.size(); FOR (i, 0, n) h.push_back(LV(v1[i], v1[(i + 1) % n])); FOR (i, 0, m) h.push_back(LV(v2[i], v2[(i + 1) % m])); return half_plane_intersection(h); }","title":"\u534a\u5e73\u9762\u4ea4"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_11","text":"struct C { P p; LD r; C(LD x = 0, LD y = 0, LD r = 0): p(x, y), r(r) {} C(P p, LD r): p(p), r(r) {} };","title":"\u5706"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_12","text":"P compute_circle_center(P a, P b, P c) { b = (a + b) / 2; c = (a + c) / 2; return l_intersection({b, b + RotateCW90(a - b)}, {c , c + RotateCW90(a - c)}); }","title":"\u4e09\u70b9\u6c42\u5706\u5fc3"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_13","text":"\u5706\u548c\u7ebf\u7684\u4ea4\u70b9\u5173\u4e8e\u5706\u5fc3\u662f\u987a\u65f6\u9488\u7684 vector<P> c_l_intersection(const L& l, const C& c) { vector<P> ret; P b(l), a = l.s - c.p; LD x = dot(b, b), y = dot(a, b), z = dot(a, a) - c.r * c.r; LD D = y * y - x * z; if (sgn(D) < 0) return ret; ret.push_back(c.p + a + b * (-y + sqrt(D + eps)) / x); if (sgn(D) > 0) ret.push_back(c.p + a + b * (-y - sqrt(D)) / x); return ret; } vector<P> c_c_intersection(C a, C b) { vector<P> ret; LD d = dist(a.p - b.p); if (sgn(d) == 0 || sgn(d - (a.r + b.r)) > 0 || sgn(d + min(a.r, b.r) - max(a.r, b.r)) < 0) return ret; LD x = (d * d - b.r * b.r + a.r * a.r) / (2 * d); LD y = sqrt(a.r * a.r - x * x); P v = (b.p - a.p) / d; ret.push_back(a.p + v * x + RotateCCW90(v) * y); if (sgn(y) > 0) ret.push_back(a.p + v * x - RotateCCW90(v) * y); return ret; }","title":"\u5706\u7ebf\u4ea4\u70b9\u3001\u5706\u5706\u4ea4\u70b9"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_14","text":"// 1:\u5185\u542b 2:\u5185\u5207 3:\u76f8\u4ea4 4:\u5916\u5207 5:\u76f8\u79bb int c_c_relation(const C& a, const C& v) { LD d = dist(a.p - v.p); if (sgn(d - a.r - v.r) > 0) return 5; if (sgn(d - a.r - v.r) == 0) return 4; LD l = fabs(a.r - v.r); if (sgn(d - l) > 0) return 3; if (sgn(d - l) == 0) return 2; if (sgn(d - l) < 0) return 1; }","title":"\u5706\u5706\u4f4d\u7f6e\u5173\u7cfb"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_15","text":"HDU 5130 \u6ce8\u610f\u987a\u65f6\u9488\u9006\u65f6\u9488\uff08\u53ef\u80fd\u8981\u53d6\u7edd\u5bf9\u503c\uff09 LD sector_area(const P& a, const P& b, LD r) { LD th = atan2(a.y, a.x) - atan2(b.y, b.x); while (th <= 0) th += 2 * PI; while (th > 2 * PI) th -= 2 * PI; th = min(th, 2 * PI - th); return r * r * th / 2; } LD c_tri_area(P a, P b, P center, LD r) { a = a - center; b = b - center; int ina = sgn(dist(a) - r) < 0, inb = sgn(dist(b) - r) < 0; // dbg(a, b, ina, inb); if (ina && inb) { return fabs(cross(a, b)) / 2; } else { auto p = c_l_intersection(L(a, b), C(0, 0, r)); if (ina ^ inb) { auto cr = p_on_seg(p[0], L(a, b)) ? p[0] : p[1]; if (ina) return sector_area(b, cr, r) + fabs(cross(a, cr)) / 2; else return sector_area(a, cr, r) + fabs(cross(b, cr)) / 2; } else { if ((int) p.size() == 2 && p_on_seg(p[0], L(a, b))) { if (dist(p[0] - a) > dist(p[1] - a)) swap(p[0], p[1]); return sector_area(a, p[0], r) + sector_area(p[1], b, r) + fabs(cross(p[0], p[1])) / 2; } else return sector_area(a, b, r); } } } typedef vector<P> S; LD c_poly_area(S poly, const C& c) { LD ret = 0; int n = poly.size(); FOR (i, 0, n) { int t = sgn(cross(poly[i] - c.p, poly[(i + 1) % n] - c.p)); if (t) ret += t * c_tri_area(poly[i], poly[(i + 1) % n], c.p, c.r); } return ret; }","title":"\u5706\u4e0e\u591a\u8fb9\u5f62\u4ea4"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_16","text":"SPOJ: CIRU, EOJ: 284 \u7248\u672c 1\uff1a\u590d\u6742\u5ea6 $O(n^3 \\log n)$\u3002\u867d\u7136\u5e38\u6570\u5c0f\uff0c\u4f46\u8fd8\u662f\u96be\u4ee5\u63a5\u53d7\u3002 \u4f18\u70b9\uff1f\u60f3\u4e0d\u51fa\u6765\u3002 \u539f\u7406\u4e0a\u662f\u7528\u7ad6\u7ebf\u8fdb\u884c\u5207\u5206\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u5207\u7247\u5206\u522b\u8ba1\u7b97\u3002 \u626b\u63cf\u7ebf\u90e8\u5206\u53ef\u4ee5\u9b54\u6539\uff0c\u6c42\u5404\u79cd\u4e1c\u897f\u3002 inline LD rt(LD x) { return sgn(x) == 0 ? 0 : sqrt(x); } inline LD sq(LD x) { return x * x; } // \u5706\u5f27 // \u5982\u679c\u6309\u7167 x \u79bb\u6563\u5316\uff0c\u5706\u5f27\u662f \"\u6a2a\u7740\u7684\" // \u8bb0\u5f55\u5706\u5f27\u7684\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u3001\u4e2d\u70b9\u7684\u5750\u6807\uff0c\u548c\u5706\u5f27\u6240\u5728\u7684\u5706 // \u8c03\u7528\u6784\u9020\u8981\u4fdd\u8bc1 c.x - x.r <= xl < xr <= c.y + x.r // t = 1 \u4e0b\u5706\u5f27 t = -1 \u4e0a\u5706\u5f27 struct CV { LD yl, yr, ym; C o; int type; CV() {} CV(LD yl, LD yr, LD ym, C c, int t) : yl(yl), yr(yr), ym(ym), type(t), o(c) {} }; // \u8f85\u52a9\u51fd\u6570 \u6c42\u5706\u4e0a\u7eb5\u5750\u6807 pair<LD, LD> c_point_eval(const C& c, LD x) { LD d = fabs(c.p.x - x), h = rt(sq(c.r) - sq(d)); return {c.p.y - h, c.p.y + h}; } // \u6784\u9020\u4e0a\u4e0b\u5706\u5f27 pair<CV, CV> pairwise_curves(const C& c, LD xl, LD xr) { LD yl1, yl2, yr1, yr2, ym1, ym2; tie(yl1, yl2) = c_point_eval(c, xl); tie(ym1, ym2) = c_point_eval(c, (xl + xr) / 2); tie(yr1, yr2) = c_point_eval(c, xr); return {CV(yl1, yr1, ym1, c, 1), CV(yl2, yr2, ym2, c, -1)}; } // \u79bb\u6563\u5316\u4e4b\u540e\u540c\u4e00\u5207\u7247\u5185\u7684\u5706\u5f27\u5e94\u8be5\u662f\u4e0d\u76f8\u4ea4\u7684 bool operator < (const CV& a, const CV& b) { return a.ym < b.ym; } // \u8ba1\u7b97\u5706\u5f27\u548c\u8fde\u63a5\u5706\u5f27\u7aef\u70b9\u7684\u7ebf\u6bb5\u6784\u6210\u7684\u5c01\u95ed\u56fe\u5f62\u7684\u9762\u79ef LD cv_area(const CV& v, LD xl, LD xr) { LD l = rt(sq(xr - xl) + sq(v.yr - v.yl)); LD d = rt(sq(v.o.r) - sq(l / 2)); LD ang = atan(l / d / 2); return ang * sq(v.o.r) - d * l / 2; } LD circle_union(const vector<C>& cs) { int n = cs.size(); vector<LD> xs; FOR (i, 0, n) { xs.push_back(cs[i].p.x - cs[i].r); xs.push_back(cs[i].p.x); xs.push_back(cs[i].p.x + cs[i].r); FOR (j, i + 1, n) { auto pts = c_c_intersection(cs[i], cs[j]); for (auto& p: pts) xs.push_back(p.x); } } sort(xs.begin(), xs.end()); xs.erase(unique(xs.begin(), xs.end(), [](LD x, LD y) { return sgn(x - y) == 0; }), xs.end()); LD ans = 0; FOR (i, 0, (int) xs.size() - 1) { LD xl = xs[i], xr = xs[i + 1]; vector<CV> intv; FOR (k, 0, n) { auto& c = cs[k]; if (sgn(c.p.x - c.r - xl) <= 0 && sgn(c.p.x + c.r - xr) >= 0) { auto t = pairwise_curves(c, xl, xr); intv.push_back(t.first); intv.push_back(t.second); } } sort(intv.begin(), intv.end()); vector<LD> areas(intv.size()); FOR (i, 0, intv.size()) areas[i] = cv_area(intv[i], xl, xr); int cc = 0; FOR (i, 0, intv.size()) { if (cc > 0) { ans += (intv[i].yl - intv[i - 1].yl + intv[i].yr - intv[i - 1].yr) * (xr - xl) / 2; ans += intv[i - 1].type * areas[i - 1]; ans -= intv[i].type * areas[i]; } cc += intv[i].type; } } return ans; } \u7248\u672c 2\uff1a\u590d\u6742\u5ea6 $O(n^2 \\log n)$\u3002 \u539f\u7406\u662f\uff1a\u8ba4\u4e3a\u6240\u6c42\u90e8\u5206\u662f\u4e00\u4e2a\u5947\u602a\u7684\u591a\u8fb9\u5f62 + \u82e5\u5e72\u5f13\u5f62\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5706\u5206\u522b\u6c42\u8d21\u732e\u7684\u5f13\u5f62\uff0c\u5e76\u7d2f\u52a0\u591a\u8fb9\u5f62\u6709\u5411\u9762\u79ef\u3002 \u540c\u6837\u53ef\u4ee5\u9b54\u6539\u626b\u63cf\u7ebf\u7684\u90e8\u5206\uff0c\u7528\u4e8e\u6c42\u5468\u957f\u3001\u81f3\u5c11\u8986\u76d6 $k$ \u6b21\u7b49\u7b49\u3002 \u5185\u542b\u3001\u5185\u5207\u3001\u540c\u4e00\u4e2a\u5706\u7684\u60c5\u51b5\uff0c\u901a\u5e38\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u662f $k$ \u5706\u8986\u76d6\u3002 inline LD angle(const P& p) { return atan2(p.y, p.x); } // \u5706\u5f27\u4e0a\u7684\u70b9 // p \u662f\u76f8\u5bf9\u4e8e\u5706\u5fc3\u7684\u5750\u6807 // a \u662f\u5728\u5706\u4e0a\u7684 atan2 [-PI, PI] struct CP { P p; LD a; int t; CP() {} CP(P p, LD a, int t): p(p), a(a), t(t) {} }; bool operator < (const CP& u, const CP& v) { return u.a < v.a; } LD cv_area(LD r, const CP& q1, const CP& q2) { return (r * r * (q2.a - q1.a) - cross(q1.p, q2.p)) / 2; } LD ans[N]; void circle_union(const vector<C>& cs) { int n = cs.size(); FOR (i, 0, n) { // \u6709\u76f8\u540c\u7684\u5706\u7684\u8bdd\u53ea\u8003\u8651\u7b2c\u4e00\u6b21\u51fa\u73b0 bool ok = true; FOR (j, 0, i) if (sgn(cs[i].r - cs[j].r) == 0 && cs[i].p == cs[j].p) { ok = false; break; } if (!ok) continue; auto& c = cs[i]; vector<CP> ev; int belong_to = 0; P bound = c.p + P(-c.r, 0); ev.emplace_back(bound, -PI, 0); ev.emplace_back(bound, PI, 0); FOR (j, 0, n) { if (i == j) continue; if (c_c_relation(c, cs[j]) <= 2) { if (sgn(cs[j].r - c.r) >= 0) // \u5b8c\u5168\u88ab\u53e6\u4e00\u4e2a\u5706\u5305\u542b\uff0c\u7b49\u4e8e\u8bf4\u53e0\u4e86\u4e00\u5c42 belong_to++; continue; } auto its = c_c_intersection(c, cs[j]); if (its.size() == 2) { P p = its[1] - c.p, q = its[0] - c.p; LD a = angle(p), b = angle(q); if (sgn(a - b) > 0) { ev.emplace_back(p, a, 1); ev.emplace_back(bound, PI, -1); ev.emplace_back(bound, -PI, 1); ev.emplace_back(q, b, -1); } else { ev.emplace_back(p, a, 1); ev.emplace_back(q, b, -1); } } } sort(ev.begin(), ev.end()); int cc = ev[0].t; FOR (j, 1, ev.size()) { int t = cc + belong_to; ans[t] += cross(ev[j - 1].p + c.p, ev[j].p + c.p) / 2; ans[t] += cv_area(c.r, ev[j - 1], ev[j]); cc += ev[j].t; } } }","title":"\u5706\u7684\u79bb\u6563\u5316\u3001\u9762\u79ef\u5e76"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_17","text":"\u968f\u673a\u589e\u91cf\u3002\u671f\u671b\u590d\u6742\u5ea6 $O(n)$\u3002 P compute_circle_center(P a, P b) { return (a + b) / 2; } bool p_in_circle(const P& p, const C& c) { return sgn(dist(p - c.p) - c.r) <= 0; } C min_circle_cover(const vector<P> &in) { vector<P> a(in.begin(), in.end()); dbg(a.size()); random_shuffle(a.begin(), a.end()); P c = a[0]; LD r = 0; int n = a.size(); FOR (i, 1, n) if (!p_in_circle(a[i], {c, r})) { c = a[i]; r = 0; FOR (j, 0, i) if (!p_in_circle(a[j], {c, r})) { c = compute_circle_center(a[i], a[j]); r = dist(a[j] - c); FOR (k, 0, j) if (!p_in_circle(a[k], {c, r})) { c = compute_circle_center(a[i], a[j], a[k]); r = dist(a[k] - c); } } } return {c, r}; }","title":"\u6700\u5c0f\u5706\u8986\u76d6"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_18","text":"C inv(C c, const P& o) { LD d = dist(c.p - o); assert(sgn(d) != 0); LD a = 1 / (d - c.r); LD b = 1 / (d + c.r); c.r = (a - b) / 2 * R2; c.p = o + (c.p - o) * ((a + b) * R2 / 2 / d); return c; }","title":"\u5706\u7684\u53cd\u6f14"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_19","text":"struct P; struct L; typedef P V; struct P { LD x, y, z; explicit P(LD x = 0, LD y = 0, LD z = 0): x(x), y(y), z(z) {} explicit P(const L& l); }; struct L { P s, t; L() {} L(P s, P t): s(s), t(t) {} }; struct F { P a, b, c; F() {} F(P a, P b, P c): a(a), b(b), c(c) {} }; P operator + (const P& a, const P& b) { return P(a.x + b.x, a.y + b.y, a.z + b.z); } P operator - (const P& a, const P& b) { return P(a.x - b.x, a.y - b.y, a.z - b.z); } P operator * (const P& a, LD k) { return P(a.x * k, a.y * k, a.z * k); } P operator / (const P& a, LD k) { return P(a.x / k, a.y / k, a.z / k); } inline int operator < (const P& a, const P& b) { return sgn(a.x - b.x) < 0 || (sgn(a.x - b.x) == 0 && (sgn(a.y - b.y) < 0 || (sgn(a.y - b.y) == 0 && sgn(a.z - b.z) < 0))); } bool operator == (const P& a, const P& b) { return !sgn(a.x - b.x) && !sgn(a.y - b.y) && !sgn(a.z - b.z); } P::P(const L& l) { *this = l.t - l.s; } ostream &operator << (ostream &os, const P &p) { return (os << \"(\" << p.x << \",\" << p.y << \",\" << p.z << \")\"); } istream &operator >> (istream &is, P &p) { return (is >> p.x >> p.y >> p.z); } // -------------------------------------------- LD dist2(const P& p) { return p.x * p.x + p.y * p.y + p.z * p.z; } LD dist(const P& p) { return sqrt(dist2(p)); } LD dot(const V& a, const V& b) { return a.x * b.x + a.y * b.y + a.z * b.z; } P cross(const P& v, const P& w) { return P(v.y * w.z - v.z * w.y, v.z * w.x - v.x * w.z, v.x * w.y - v.y * w.x); } LD mix(const V& a, const V& b, const V& c) { return dot(a, cross(b, c)); }","title":"\u4e09\u7ef4\u8ba1\u7b97\u51e0\u4f55"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_20","text":"// \u9006\u65f6\u9488\u65cb\u8f6c r \u5f27\u5ea6 // axis = 0 \u7ed5 x \u8f74 // axis = 1 \u7ed5 y \u8f74 // axis = 2 \u7ed5 z \u8f74 P rotation(const P& p, const LD& r, int axis = 0) { if (axis == 0) return P(p.x, p.y * cos(r) - p.z * sin(r), p.y * sin(r) + p.z * cos(r)); else if (axis == 1) return P(p.z * cos(r) - p.x * sin(r), p.y, p.z * sin(r) + p.x * cos(r)); else if (axis == 2) return P(p.x * cos(r) - p.y * sin(r), p.x * sin(r) + p.y * cos(r), p.z); } // n \u662f\u5355\u4f4d\u5411\u91cf \u8868\u793a\u65cb\u8f6c\u8f74 // \u6a21\u677f\u662f\u987a\u65f6\u9488\u7684 P rotation(const P& p, const LD& r, const P& n) { LD c = cos(r), s = sin(r), x = n.x, y = n.y, z = n.z; // dbg(c, s); return P((x * x * (1 - c) + c) * p.x + (x * y * (1 - c) + z * s) * p.y + (x * z * (1 - c) - y * s) * p.z, (x * y * (1 - c) - z * s) * p.x + (y * y * (1 - c) + c) * p.y + (y * z * (1 - c) + x * s) * p.z, (x * z * (1 - c) + y * s) * p.x + (y * z * (1 - c) - x * s) * p.y + (z * z * (1 - c) + c) * p.z); }","title":"\u65cb\u8f6c"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_21","text":"\u51fd\u6570\u76f8\u4e92\u4f9d\u8d56\uff0c\u6240\u4ee5\u4ea4\u7ec7\u5728\u4e00\u8d77\u4e86\u3002 // \u70b9\u5728\u7ebf\u6bb5\u4e0a <= 0\u5305\u542b\u7aef\u70b9 < 0 \u5219\u4e0d\u5305\u542b bool p_on_seg(const P& p, const L& seg) { P a = seg.s, b = seg.t; return !sgn(dist2(cross(p - a, b - a))) && sgn(dot(p - a, p - b)) <= 0; } // \u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb LD dist_to_line(const P& p, const L& l) { return dist(cross(l.s - p, l.t - p)) / dist(l); } // \u70b9\u5230\u7ebf\u6bb5\u8ddd\u79bb LD dist_to_seg(const P& p, const L& l) { if (l.s == l.t) return dist(p - l.s); V vs = p - l.s, vt = p - l.t; if (sgn(dot(l, vs)) < 0) return dist(vs); else if (sgn(dot(l, vt)) > 0) return dist(vt); else return dist_to_line(p, l); } P norm(const F& f) { return cross(f.a - f.b, f.b - f.c); } int p_on_plane(const F& f, const P& p) { return sgn(dot(norm(f), p - f.a)) == 0; } // \u5224\u4e24\u70b9\u5728\u7ebf\u6bb5\u5f02\u4fa7 \u70b9\u5728\u7ebf\u6bb5\u4e0a\u8fd4\u56de 0 \u4e0d\u5171\u9762\u65e0\u610f\u4e49 int opposite_side(const P& u, const P& v, const L& l) { return sgn(dot(cross(P(l), u - l.s), cross(P(l), v - l.s))) < 0; } bool parallel(const L& a, const L& b) { return !sgn(dist2(cross(P(a), P(b)))); } // \u7ebf\u6bb5\u76f8\u4ea4 int s_intersect(const L& u, const L& v) { return p_on_plane(F(u.s, u.t, v.s), v.t) && opposite_side(u.s, u.t, v) && opposite_side(v.s, v.t, u); }","title":"\u7ebf\u3001\u9762"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/4-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_22","text":"\u589e\u91cf\u6cd5\u3002\u5148\u5c06\u6240\u6709\u7684\u70b9\u6253\u4e71\u987a\u5e8f\uff0c\u7136\u540e\u9009\u62e9\u56db\u4e2a\u4e0d\u5171\u9762\u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u56db\u9762\u4f53\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8bf4\u660e\u51f8\u5305\u4e0d\u5b58\u5728\u3002\u7136\u540e\u904d\u5386\u5269\u4f59\u7684\u70b9\uff0c\u4e0d\u65ad\u66f4\u65b0\u51f8\u5305\u3002\u5bf9\u904d\u5386\u5230\u7684\u70b9\u505a\u5982\u4e0b\u5904\u7406\u3002 \u5982\u679c\u70b9\u5728\u51f8\u5305\u5185\uff0c\u5219\u4e0d\u66f4\u65b0\u3002 \u5982\u679c\u70b9\u5728\u51f8\u5305\u5916\uff0c\u90a3\u4e48\u627e\u5230\u6240\u6709\u539f\u51f8\u5305\u4e0a\u6240\u6709\u5206\u9694\u4e86\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u53ef\u89c1\u9762\u548c\u4e0d\u53ef\u89c1\u9762\u7684\u8fb9\uff0c\u4ee5\u8fd9\u6837\u7684\u8fb9\u7684\u4e24\u4e2a\u70b9\u548c\u65b0\u7684\u70b9\u521b\u5efa\u65b0\u7684\u9762\u52a0\u5165\u51f8\u5305\u4e2d\u3002 struct FT { int a, b, c; FT() { } FT(int a, int b, int c) : a(a), b(b), c(c) { } }; bool p_on_line(const P& p, const L& l) { return !sgn(dist2(cross(p - l.s, P(l)))); } vector<F> convex_hull(vector<P> &p) { sort(p.begin(), p.end()); p.erase(unique(p.begin(), p.end()), p.end()); random_shuffle(p.begin(), p.end()); vector<FT> face; FOR (i, 2, p.size()) { if (p_on_line(p[i], L(p[0], p[1]))) continue; swap(p[i], p[2]); FOR (j, i + 1, p.size()) if (sgn(mix(p[1] - p[0], p[2] - p[1], p[j] - p[0]))) { swap(p[j], p[3]); face.emplace_back(0, 1, 2); face.emplace_back(0, 2, 1); goto found; } } found: vector<vector<int>> mk(p.size(), vector<int>(p.size())); FOR (v, 3, p.size()) { vector<FT> tmp; FOR (i, 0, face.size()) { int a = face[i].a, b = face[i].b, c = face[i].c; if (sgn(mix(p[a] - p[v], p[b] - p[v], p[c] - p[v])) < 0) { mk[a][b] = mk[b][a] = v; mk[b][c] = mk[c][b] = v; mk[c][a] = mk[a][c] = v; } else tmp.push_back(face[i]); } face = tmp; FOR (i, 0, tmp.size()) { int a = face[i].a, b = face[i].b, c = face[i].c; if (mk[a][b] == v) face.emplace_back(b, a, v); if (mk[b][c] == v) face.emplace_back(c, b, v); if (mk[c][a] == v) face.emplace_back(a, c, v); } } vector<F> out; FOR (i, 0, face.size()) out.emplace_back(p[face[i].a], p[face[i].b], p[face[i].c]); return out; }","title":"\u51f8\u5305"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u5b57\u7b26\u4e32 \u540e\u7f00\u81ea\u52a8\u673a \u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7684\u8bdd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u5197\u4f59\u72b6\u6001\uff08\u7f6e last \u4e3a 1\uff09\uff0c\u6240\u4ee5\u8981\u7528\u62d3\u6251\u6392\u5e8f\u3002\u7528 len \u57fa\u6570\u6392\u5e8f\u4e0d\u80fd\u3002 \u5b57\u7b26\u96c6\u5927\u7684\u8bdd\u8981\u4f7f\u7528 map \u3002 \u6811\u4e0a dp \u65f6\u6ce8\u610f\u8fb9\u754c\uff08root \u548c null\uff09\u3002 rsort \u4e2d\u7684\u6570\u7ec4 a \u662f\u62d3\u6251\u5e8f [1, sz) namespace sam { const int M = N << 1; int t[M][26], len[M] = {-1}, fa[M], sz = 2, last = 1; void init() { memset(t, 0, (sz + 10) * sizeof t[0]); sz = 2; last = 1; } void ins(int ch) { int p = last, np = last = sz++; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; if (!p) { fa[np] = 1; return; } int q = t[p][ch]; if (len[p] + 1 == len[q]) fa[np] = q; else { int nq = sz++; len[nq] = len[p] + 1; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[np] = fa[q] = nq; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } int c[M] = {1}, a[M]; void rsort() { FOR (i, 1, sz) c[i] = 0; FOR (i, 1, sz) c[len[i]]++; FOR (i, 1, sz) c[i] += c[i - 1]; FOR (i, 1, sz) a[--c[len[i]]] = i; } } \u771f\u00b7\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a int t[M][26], len[M] = {-1}, fa[M], sz = 2, last = 1; LL cnt[M][2]; void ins(int ch, int id) { int p = last, np = 0, nq = 0, q = -1; if (!t[p][ch]) { np = sz++; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; } if (!p) fa[np] = 1; else { q = t[p][ch]; if (len[p] + 1 == len[q]) fa[np] = q; else { nq = sz++; len[nq] = len[p] + 1; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[np] = fa[q] = nq; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } last = np ? np : nq ? nq : q; cnt[last][id] = 1; } \u6309\u5b57\u5178\u5e8f\u5efa\u7acb\u540e\u7f00\u6811 \u6ce8\u610f\u9006\u5e8f\u63d2\u5165 rsort2 \u91cc\u7684 a \u4e0d\u662f\u62d3\u6251\u5e8f\uff0c\u9700\u8981\u62d3\u6251\u5e8f\u5c31\u53bb\u6811\u4e0a\u505a void ins(int ch, int pp) { int p = last, np = last = sz++; len[np] = len[p] + 1; one[np] = pos[np] = pp; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; if (!p) { fa[np] = 1; return; } int q = t[p][ch]; if (len[q] == len[p] + 1) fa[np] = q; else { int nq = sz++; len[nq] = len[p] + 1; one[nq] = one[q]; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[q] = fa[np] = nq; for (; p && t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } int up[M], c[256] = {2}, a[M]; void rsort2() { FOR (i, 1, 256) c[i] = 0; FOR (i, 2, sz) up[i] = s[one[i] + len[fa[i]]]; FOR (i, 2, sz) c[up[i]]++; FOR (i, 1, 256) c[i] += c[i - 1]; FOR (i, 2, sz) a[--c[up[i]]] = i; FOR (i, 2, sz) G[fa[a[i]]].push_back(a[i]); } \u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u5efa\u540e\u7f00\u6811\uff0c\u5fc5\u987b\u53cd\u5411\u63d2\u5165 int t[M][26], len[M] = {0}, fa[M], sz = 2, last = 1; char* one[M]; void ins(int ch, char* pp) { int p = last, np = 0, nq = 0, q = -1; if (!t[p][ch]) { np = sz++; one[np] = pp; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; } if (!p) fa[np] = 1; else { q = t[p][ch]; if (len[p] + 1 == len[q]) fa[np] = q; else { nq = sz++; len[nq] = len[p] + 1; one[nq] = one[q]; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[np] = fa[q] = nq; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } last = np ? np : nq ? nq : q; } int up[M], c[256] = {2}, aa[M]; vector<int> G[M]; void rsort() { FOR (i, 1, 256) c[i] = 0; FOR (i, 2, sz) up[i] = *(one[i] + len[fa[i]]); FOR (i, 2, sz) c[up[i]]++; FOR (i, 1, 256) c[i] += c[i - 1]; FOR (i, 2, sz) aa[--c[up[i]]] = i; FOR (i, 2, sz) G[fa[aa[i]]].push_back(aa[i]); } \u5339\u914d int u = 1, l = 0; FOR (i, 0, strlen(s)) { int ch = s[i] - 'a'; while (u && !t[u][ch]) { u = fa[u]; l = len[u]; } ++l; u = t[u][ch]; if (!u) u = 1; if (l) // do something... } \u83b7\u53d6\u5b50\u4e32\u72b6\u6001 int get_state(int l, int r) { int u = rpos[r], s = r - l + 1; FORD (i, SP - 1, -1) if (len[pa[u][i]] >= s) u = pa[u][i]; return u; } \u914d\u5408 LCT namespace lct_sam { extern struct P *const null; const int M = N; struct P { P *fa, *ls, *rs; int last; bool has_fa() { return fa->ls == this || fa->rs == this; } bool d() { return fa->ls == this; } P*& c(bool x) { return x ? ls : rs; } P* up() { return this; } void down() { if (ls != null) ls->last = last; if (rs != null) rs->last = last; } void all_down() { if (has_fa()) fa->all_down(); down(); } } *const null = new P{0, 0, 0, 0}, pool[M], *pit = pool; P* G[N]; int t[M][26], len[M] = {-1}, fa[M], sz = 2, last = 1; void rot(P* o) { bool dd = o->d(); P *f = o->fa, *t = o->c(!dd); if (f->has_fa()) f->fa->c(f->d()) = o; o->fa = f->fa; if (t != null) t->fa = f; f->c(dd) = t; o->c(!dd) = f->up(); f->fa = o; } void splay(P* o) { o->all_down(); while (o->has_fa()) { if (o->fa->has_fa()) rot(o->d() ^ o->fa->d() ? o : o->fa); rot(o); } o->up(); } void access(int last, P* u, P* v = null) { if (u == null) { v->last = last; return; } splay(u); P *t = u; while (t->ls != null) t = t->ls; int L = len[fa[t - pool]] + 1, R = len[u - pool]; if (u->last) bit::add(u->last - R + 2, u->last - L + 2, 1); else bit::add(1, 1, R - L + 1); bit::add(last - R + 2, last - L + 2, -1); u->rs = v; access(last, u->up()->fa, u); } void insert(P* u, P* v, P* t) { if (v != null) { splay(v); v->rs = null; } splay(u); u->fa = t; t->fa = v; } void ins(int ch, int pp) { int p = last, np = last = sz++; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; if (!p) fa[np] = 1; else { int q = t[p][ch]; if (len[p] + 1 == len[q]) { fa[np] = q; G[np]->fa = G[q]; } else { int nq = sz++; len[nq] = len[p] + 1; memcpy(t[nq], t[q], sizeof t[0]); insert(G[q], G[fa[q]], G[nq]); G[nq]->last = G[q]->last; fa[nq] = fa[q]; fa[np] = fa[q] = nq; G[np]->fa = G[nq]; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } access(pp + 1, G[np]); } void init() { ++pit; FOR (i, 1, N) { G[i] = pit++; G[i]->ls = G[i]->rs = G[i]->fa = null; } G[1] = null; } } \u56de\u6587\u81ea\u52a8\u673a num \u662f\u8be5\u7ed3\u70b9\u8868\u793a\u7684\u524d\u7f00\u7684\u56de\u6587\u540e\u7f00\u4e2a\u6570 cnt \u662f\u8be5\u7ed3\u70b9\u8868\u793a\u7684\u56de\u6587\u4e32\u5728\u539f\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff08\u4f7f\u7528\u524d\u9700\u8981\u5411\u7236\u4eb2\u66f4\u65b0\uff09 namespace pam { int t[N][26], fa[N], len[N], rs[N], cnt[N], num[N]; int sz, n, last; int _new(int l) { len[sz] = l; cnt[sz] = num[sz] = 0; return sz++; } void init() { memset(t, 0, sz * sizeof t[0]); rs[n = sz = 0] = -1; last = _new(0); fa[last] = _new(-1); } int get_fa(int x) { while (rs[n - 1 - len[x]] != rs[n]) x = fa[x]; return x; } void ins(int ch) { rs[++n] = ch; int p = get_fa(last); if (!t[p][ch]) { int np = _new(len[p] + 2); num[np] = num[fa[np] = t[get_fa(fa[p])][ch]] + 1; t[p][ch] = np; } ++cnt[last = t[p][ch]]; } } manacher int RL[N]; void manacher(int* a, int n) { // \"abc\" => \"#a#b#a#\" int r = 0, p = 0; FOR (i, 0, n) { if (i < r) RL[i] = min(RL[2 * p - i], r - i); else RL[i] = 1; while (i - RL[i] >= 0 && i + RL[i] < n && a[i - RL[i]] == a[i + RL[i]]) RL[i]++; if (RL[i] + i - 1 > r) { r = RL[i] + i - 1; p = i; } } FOR (i, 0, n) --RL[i]; } \u54c8\u5e0c \u5185\u7f6e\u4e86\u81ea\u52a8\u53cc\u54c8\u5e0c\u5f00\u5173\uff08\u5c0f\u5fc3 TLE\uff09\u3002 #include <bits/stdc++.h> using namespace std; #define ENABLE_DOUBLE_HASH typedef long long LL; typedef unsigned long long ULL; const int x = 135; const int N = 4e5 + 10; const int p1 = 1e9 + 7, p2 = 1e9 + 9; ULL xp1[N], xp2[N], xp[N]; void init_xp() { xp1[0] = xp2[0] = xp[0] = 1; for (int i = 1; i < N; ++i) { xp1[i] = xp1[i - 1] * x % p1; xp2[i] = xp2[i - 1] * x % p2; xp[i] = xp[i - 1] * x; } } struct String { char s[N]; int length, subsize; bool sorted; ULL h[N], hl[N]; ULL hash() { length = strlen(s); ULL res1 = 0, res2 = 0; h[length] = 0; // ATTENTION! for (int j = length - 1; j >= 0; --j) { #ifdef ENABLE_DOUBLE_HASH res1 = (res1 * x + s[j]) % p1; res2 = (res2 * x + s[j]) % p2; h[j] = (res1 << 32) | res2; #else res1 = res1 * x + s[j]; h[j] = res1; #endif // printf(\"%llu\\n\", h[j]); } return h[0]; } // \u83b7\u53d6\u5b50\u4e32\u54c8\u5e0c\uff0c\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 ULL get_substring_hash(int left, int right) const { int len = right - left; #ifdef ENABLE_DOUBLE_HASH // get hash of s[left...right-1] unsigned int mask32 = ~(0u); ULL left1 = h[left] >> 32, right1 = h[right] >> 32; ULL left2 = h[left] & mask32, right2 = h[right] & mask32; return (((left1 - right1 * xp1[len] % p1 + p1) % p1) << 32) | (((left2 - right2 * xp2[len] % p2 + p2) % p2)); #else return h[left] - h[right] * xp[len]; #endif } void get_all_subs_hash(int sublen) { subsize = length - sublen + 1; for (int i = 0; i < subsize; ++i) hl[i] = get_substring_hash(i, i + sublen); sorted = 0; } void sort_substring_hash() { sort(hl, hl + subsize); sorted = 1; } bool match(ULL key) const { if (!sorted) assert (0); if (!subsize) return false; return binary_search(hl, hl + subsize, key); } void init(const char *t) { length = strlen(t); strcpy(s, t); } }; int LCP(const String &a, const String &b, int ai, int bi) { // Find LCP of a[ai...] and b[bi...] int l = 0, r = min(a.length - ai, b.length - bi); while (l < r) { int mid = (l + r + 1) / 2; if (a.get_substring_hash(ai, ai + mid) == b.get_substring_hash(bi, bi + mid)) l = mid; else r = mid - 1; } return l; } int check(int ans) { if (T.length < ans) return 1; T.get_all_subs_hash(ans); T.sort_substring_hash(); for (int i = 0; i < S.length - ans + 1; ++i) if (!T.match(S.get_substring_hash(i, i + ans))) return 1; return 0; } int main() { init_xp(); // DON'T FORGET TO DO THIS! for (int tt = 1; tt <= kases; ++tt) { scanf(\"%d\", &n); scanf(\"%s\", str); S.init(str); S.hash(); T.hash(); } } \u4e8c\u7ef4\u54c8\u5e0c struct Hash2D { // 1-index static const LL px = 131, py = 233, MOD = 998244353; static LL pwx[N], pwy[N]; int a[N][N]; LL hv[N][N]; static void init_xp() { pwx[0] = pwy[0] = 1; FOR (i, 1, N) { pwx[i] = pwx[i - 1] * px % MOD; pwy[i] = pwy[i - 1] * py % MOD; } } void init_hash(int n, int m) { FOR (i, 1, n + 1) { LL s = 0; FOR (j, 1, m + 1) { s = (s * py + a[i][j]) % MOD; hv[i][j] = (hv[i - 1][j] * px + s) % MOD; } } } LL h(int x, int y, int dx, int dy) { --x; --y; LL ret = hv[x + dx][y + dy] + hv[x][y] * pwx[dx] % MOD * pwy[dy] - hv[x][y + dy] * pwx[dx] - hv[x + dx][y] * pwy[dy]; return (ret % MOD + MOD) % MOD; } } ha, hb; LL Hash2D::pwx[N], Hash2D::pwy[N]; \u540e\u7f00\u6570\u7ec4 \u6784\u9020\u65f6\u95f4\uff1a$O(L \\log L)$\uff1b\u67e5\u8be2\u65f6\u95f4 $O(\\log L)$\u3002 suffix \u6570\u7ec4\u662f\u6392\u597d\u5e8f\u7684\u540e\u7f00\u4e0b\u6807\uff0c suffix \u7684\u53cd\u6570\u7ec4\u662f\u540e\u7f00\u6570\u7ec4\u3002 #include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10; const int Nlog = 18; struct SuffixArray { const int L; vector<vector<int> > P; vector<pair<pair<int, int>, int> > M; int s[N], sa[N], rank[N], height[N]; // s: raw string // sa[i]=k: s[k...L-1] ranks i (0 based) // rank[i]=k: the rank of s[i...L-1] is k (0 based) // height[i] = lcp(sa[i-1], sa[i]) SuffixArray(const string &raw_s) : L(raw_s.length()), P(1, vector<int>(L, 0)), M(L) { for (int i = 0; i < L; i++) P[0][i] = this->s[i] = int(raw_s[i]); for (int skip = 1, level = 1; skip < L; skip *= 2, level++) { P.push_back(vector<int>(L, 0)); for (int i = 0; i < L; i++) M[i] = make_pair(make_pair(P[level - 1][i], i + skip < L ? P[level - 1][i + skip] : -1000), i); sort(M.begin(), M.end()); for (int i = 0; i < L; i++) P[level][M[i].second] = (i > 0 && M[i].first == M[i - 1].first) ? P[level][M[i - 1].second] : i; } for (unsigned i = 0; i < P.back().size(); ++i) { rank[i] = P.back()[i]; sa[rank[i]] = i; } } // This is a traditional way to calculate LCP void getHeight() { memset(height, 0, sizeof height); int k = 0; for (int i = 0; i < L; ++i) { if (rank[i] == 0) continue; if (k) k--; int j = sa[rank[i] - 1]; while (i + k < L && j + k < L && s[i + k] == s[j + k]) ++k; height[rank[i]] = k; } rmq_init(height, L); } int f[N][Nlog]; inline int highbit(int x) { return 31 - __builtin_clz(x); } int rmq_query(int x, int y) { int p = highbit(y - x + 1); return min(f[x][p], f[y - (1 << p) + 1][p]); } // arr has to be 0 based void rmq_init(int *arr, int length) { for (int x = 0; x <= highbit(length); ++x) for (int i = 0; i <= length - (1 << x); ++i) { if (!x) f[i][x] = arr[i]; else f[i][x] = min(f[i][x - 1], f[i + (1 << (x - 1))][x - 1]); } } #ifdef NEW // returns the length of the longest common prefix of s[i...L-1] and s[j...L-1] int LongestCommonPrefix(int i, int j) { int len = 0; if (i == j) return L - i; for (int k = (int) P.size() - 1; k >= 0 && i < L && j < L; k--) { if (P[k][i] == P[k][j]) { i += 1 << k; j += 1 << k; len += 1 << k; } } return len; } #else int LongestCommonPrefix(int i, int j) { // getHeight() must be called first if (i == j) return L - i; if (i > j) swap(i, j); return rmq_query(i + 1, j); } #endif int checkNonOverlappingSubstring(int K) { // check if there is two non-overlapping identical substring of length K int minsa = 0, maxsa = 0; for (int i = 0; i < L; ++i) { if (height[i] < K) { minsa = sa[i]; maxsa = sa[i]; } else { minsa = min(minsa, sa[i]); maxsa = max(maxsa, sa[i]); if (maxsa - minsa >= K) return 1; } } return 0; } int checkBelongToDifferentSubstring(int K, int split) { int minsa = 0, maxsa = 0; for (int i = 0; i < L; ++i) { if (height[i] < K) { minsa = sa[i]; maxsa = sa[i]; } else { minsa = min(minsa, sa[i]); maxsa = max(maxsa, sa[i]); if (maxsa > split && minsa < split) return 1; } } return 0; } } *S; int main() { string s, t; cin >> s >> t; int sp = s.length(); s += \"*\" + t; S = new SuffixArray(s); S->getHeight(); int left = 0, right = sp; while (left < right) { int mid = (left + right + 1) / 2; if (S->checkBelongToDifferentSubstring(mid, sp)) left = mid; else right = mid - 1; } printf(\"%d\\n\", left); } SA-IS \u4ec5\u5728\u540e\u7f00\u81ea\u52a8\u673a\u88ab\u5361\u5185\u5b58\u6216\u8005\u5361\u5e38\u4e14\u9700\u8981 O(1) LCA \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff08\u6bd4\u8d5b\u4e2d\u6572\u8fd9\u4e2a\u6211\u89c9\u5f97\u4e0d\u884c\uff09 UOJ 35 // rk [0..n-1] -> [1..n], sa/ht [1..n] // s[i] > 0 && s[n] = 0 // b: normally as bucket // c: normally as bucket1 // d: normally as bucket2 // f: normally as cntbuf template<size_t size> struct SuffixArray { bool t[size << 1]; int b[size], c[size]; int sa[size], rk[size], ht[size]; inline bool isLMS(const int i, const bool *t) { return i > 0 && t[i] && !t[i - 1]; } template<class T> inline void inducedSort(T s, int *sa, const int n, const int M, const int bs, bool *t, int *b, int *f, int *p) { fill(b, b + M, 0); fill(sa, sa + n, -1); FOR (i, 0, n) b[s[i]]++; f[0] = b[0]; FOR (i, 1, M) f[i] = f[i - 1] + b[i]; FORD (i, bs - 1, -1) sa[--f[s[p[i]]]] = p[i]; FOR (i, 1, M) f[i] = f[i - 1] + b[i - 1]; FOR (i, 0, n) if (sa[i] > 0 && !t[sa[i] - 1]) sa[f[s[sa[i] - 1]]++] = sa[i] - 1; f[0] = b[0]; FOR (i, 1, M) f[i] = f[i - 1] + b[i]; FORD (i, n - 1, -1) if (sa[i] > 0 && t[sa[i] - 1]) sa[--f[s[sa[i] - 1]]] = sa[i] - 1; } template<class T> inline void sais(T s, int *sa, int n, bool *t, int *b, int *c, int M) { int i, j, bs = 0, cnt = 0, p = -1, x, *r = b + M; t[n - 1] = 1; FORD (i, n - 2, -1) t[i] = s[i] < s[i + 1] || (s[i] == s[i + 1] && t[i + 1]); FOR (i, 1, n) if (t[i] && !t[i - 1]) c[bs++] = i; inducedSort(s, sa, n, M, bs, t, b, r, c); for (i = bs = 0; i < n; i++) if (isLMS(sa[i], t)) sa[bs++] = sa[i]; FOR (i, bs, n) sa[i] = -1; FOR (i, 0, bs) { x = sa[i]; for (j = 0; j < n; j++) { if (p == -1 || s[x + j] != s[p + j] || t[x + j] != t[p + j]) { cnt++, p = x; break; } else if (j > 0 && (isLMS(x + j, t) || isLMS(p + j, t))) break; } x = (~x & 1 ? x >> 1 : x - 1 >> 1), sa[bs + x] = cnt - 1; } for (i = j = n - 1; i >= bs; i--) if (sa[i] >= 0) sa[j--] = sa[i]; int *s1 = sa + n - bs, *d = c + bs; if (cnt < bs) sais(s1, sa, bs, t + n, b, c + bs, cnt); else FOR (i, 0, bs) sa[s1[i]] = i; FOR (i, 0, bs) d[i] = c[sa[i]]; inducedSort(s, sa, n, M, bs, t, b, r, d); } template<typename T> inline void getHeight(T s, const int n, const int *sa) { for (int i = 0, k = 0; i < n; i++) { if (rk[i] == 0) k = 0; else { if (k > 0) k--; int j = sa[rk[i] - 1]; while (i + k < n && j + k < n && s[i + k] == s[j + k]) k++; } ht[rk[i]] = k; } } template<class T> inline void init(T s, int n, int M) { sais(s, sa, ++n, t, b, c, M); for (int i = 1; i < n; i++) rk[sa[i]] = i; getHeight(s, n, sa); } }; const int N = 2E5 + 100; SuffixArray<N> sa; int main() { string s; cin >> s; int n = s.length(); sa.init(s, n, 128); FOR (i, 1, n + 1) printf(\"%d%c\", sa.sa[i] + 1, i == _i - 1 ? '\\n' : ' '); FOR (i, 2, n + 1) printf(\"%d%c\", sa.ht[i], i == _i - 1 ? '\\n' : ' '); } KMP \u524d\u7f00\u51fd\u6570\uff08\u6bcf\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f border\uff09 void get_pi(int a[], char s[], int n) { int j = a[0] = 0; FOR (i, 1, n) { while (j && s[i] != s[j]) j = a[j - 1]; a[i] = j += s[i] == s[j]; } } Z \u51fd\u6570\uff08\u6bcf\u4e00\u4e2a\u540e\u7f00\u548c\u8be5\u5b57\u7b26\u4e32\u7684 LCP \u957f\u5ea6\uff09 void get_z(int a[], char s[], int n) { int l = 0, r = 0; a[0] = n; FOR (i, 1, n) { a[i] = i > r ? 0 : min(r - i + 1, a[i - l]); while (i + a[i] < n && s[a[i]] == s[i + a[i]]) ++a[i]; if (i + a[i] - 1 > r) { l = i; r = i + a[i] - 1; } } } Trie namespace trie { int t[N][26], sz, ed[N]; void init() { sz = 2; memset(ed, 0, sizeof ed); } int _new() { memset(t[sz], 0, sizeof t[sz]); return sz++; } void ins(char* s, int p) { int u = 1; FOR (i, 0, strlen(s)) { int c = s[i] - 'a'; if (!t[u][c]) t[u][c] = _new(); u = t[u][c]; } ed[u] = p; } } AC \u81ea\u52a8\u673a const int N = 1e6 + 100, M = 26; int mp(char ch) { return ch - 'a'; } struct ACA { int ch[N][M], danger[N], fail[N]; int sz; void init() { sz = 1; memset(ch[0], 0, sizeof ch[0]); memset(danger, 0, sizeof danger); } void insert(const string &s, int m) { int n = s.size(); int u = 0, c; FOR (i, 0, n) { c = mp(s[i]); if (!ch[u][c]) { memset(ch[sz], 0, sizeof ch[sz]); danger[sz] = 0; ch[u][c] = sz++; } u = ch[u][c]; } danger[u] |= 1 << m; } void build() { queue<int> Q; fail[0] = 0; for (int c = 0, u; c < M; c++) { u = ch[0][c]; if (u) { Q.push(u); fail[u] = 0; } } while (!Q.empty()) { int r = Q.front(); Q.pop(); danger[r] |= danger[fail[r]]; for (int c = 0, u; c < M; c++) { u = ch[r][c]; if (!u) { ch[r][c] = ch[fail[r]][c]; continue; } fail[u] = ch[fail[r]][c]; Q.push(u); } } } } ac; char s[N]; int main() { int n; scanf(\"%d\", &n); ac.init(); while (n--) { scanf(\"%s\", s); ac.insert(s, 0); } ac.build(); scanf(\"%s\", s); int u = 0; n = strlen(s); FOR (i, 0, n) { u = ac.ch[u][mp(s[i])]; if (ac.danger[u]) { puts(\"YES\"); return 0; } } puts(\"NO\"); return 0; }","title":"\u5b57\u7b26\u4e32"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","text":"\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u7684\u8bdd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u5197\u4f59\u72b6\u6001\uff08\u7f6e last \u4e3a 1\uff09\uff0c\u6240\u4ee5\u8981\u7528\u62d3\u6251\u6392\u5e8f\u3002\u7528 len \u57fa\u6570\u6392\u5e8f\u4e0d\u80fd\u3002 \u5b57\u7b26\u96c6\u5927\u7684\u8bdd\u8981\u4f7f\u7528 map \u3002 \u6811\u4e0a dp \u65f6\u6ce8\u610f\u8fb9\u754c\uff08root \u548c null\uff09\u3002 rsort \u4e2d\u7684\u6570\u7ec4 a \u662f\u62d3\u6251\u5e8f [1, sz) namespace sam { const int M = N << 1; int t[M][26], len[M] = {-1}, fa[M], sz = 2, last = 1; void init() { memset(t, 0, (sz + 10) * sizeof t[0]); sz = 2; last = 1; } void ins(int ch) { int p = last, np = last = sz++; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; if (!p) { fa[np] = 1; return; } int q = t[p][ch]; if (len[p] + 1 == len[q]) fa[np] = q; else { int nq = sz++; len[nq] = len[p] + 1; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[np] = fa[q] = nq; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } int c[M] = {1}, a[M]; void rsort() { FOR (i, 1, sz) c[i] = 0; FOR (i, 1, sz) c[len[i]]++; FOR (i, 1, sz) c[i] += c[i - 1]; FOR (i, 1, sz) a[--c[len[i]]] = i; } } \u771f\u00b7\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a int t[M][26], len[M] = {-1}, fa[M], sz = 2, last = 1; LL cnt[M][2]; void ins(int ch, int id) { int p = last, np = 0, nq = 0, q = -1; if (!t[p][ch]) { np = sz++; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; } if (!p) fa[np] = 1; else { q = t[p][ch]; if (len[p] + 1 == len[q]) fa[np] = q; else { nq = sz++; len[nq] = len[p] + 1; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[np] = fa[q] = nq; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } last = np ? np : nq ? nq : q; cnt[last][id] = 1; } \u6309\u5b57\u5178\u5e8f\u5efa\u7acb\u540e\u7f00\u6811 \u6ce8\u610f\u9006\u5e8f\u63d2\u5165 rsort2 \u91cc\u7684 a \u4e0d\u662f\u62d3\u6251\u5e8f\uff0c\u9700\u8981\u62d3\u6251\u5e8f\u5c31\u53bb\u6811\u4e0a\u505a void ins(int ch, int pp) { int p = last, np = last = sz++; len[np] = len[p] + 1; one[np] = pos[np] = pp; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; if (!p) { fa[np] = 1; return; } int q = t[p][ch]; if (len[q] == len[p] + 1) fa[np] = q; else { int nq = sz++; len[nq] = len[p] + 1; one[nq] = one[q]; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[q] = fa[np] = nq; for (; p && t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } int up[M], c[256] = {2}, a[M]; void rsort2() { FOR (i, 1, 256) c[i] = 0; FOR (i, 2, sz) up[i] = s[one[i] + len[fa[i]]]; FOR (i, 2, sz) c[up[i]]++; FOR (i, 1, 256) c[i] += c[i - 1]; FOR (i, 2, sz) a[--c[up[i]]] = i; FOR (i, 2, sz) G[fa[a[i]]].push_back(a[i]); } \u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u5efa\u540e\u7f00\u6811\uff0c\u5fc5\u987b\u53cd\u5411\u63d2\u5165 int t[M][26], len[M] = {0}, fa[M], sz = 2, last = 1; char* one[M]; void ins(int ch, char* pp) { int p = last, np = 0, nq = 0, q = -1; if (!t[p][ch]) { np = sz++; one[np] = pp; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; } if (!p) fa[np] = 1; else { q = t[p][ch]; if (len[p] + 1 == len[q]) fa[np] = q; else { nq = sz++; len[nq] = len[p] + 1; one[nq] = one[q]; memcpy(t[nq], t[q], sizeof t[0]); fa[nq] = fa[q]; fa[np] = fa[q] = nq; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } last = np ? np : nq ? nq : q; } int up[M], c[256] = {2}, aa[M]; vector<int> G[M]; void rsort() { FOR (i, 1, 256) c[i] = 0; FOR (i, 2, sz) up[i] = *(one[i] + len[fa[i]]); FOR (i, 2, sz) c[up[i]]++; FOR (i, 1, 256) c[i] += c[i - 1]; FOR (i, 2, sz) aa[--c[up[i]]] = i; FOR (i, 2, sz) G[fa[aa[i]]].push_back(aa[i]); } \u5339\u914d int u = 1, l = 0; FOR (i, 0, strlen(s)) { int ch = s[i] - 'a'; while (u && !t[u][ch]) { u = fa[u]; l = len[u]; } ++l; u = t[u][ch]; if (!u) u = 1; if (l) // do something... } \u83b7\u53d6\u5b50\u4e32\u72b6\u6001 int get_state(int l, int r) { int u = rpos[r], s = r - l + 1; FORD (i, SP - 1, -1) if (len[pa[u][i]] >= s) u = pa[u][i]; return u; } \u914d\u5408 LCT namespace lct_sam { extern struct P *const null; const int M = N; struct P { P *fa, *ls, *rs; int last; bool has_fa() { return fa->ls == this || fa->rs == this; } bool d() { return fa->ls == this; } P*& c(bool x) { return x ? ls : rs; } P* up() { return this; } void down() { if (ls != null) ls->last = last; if (rs != null) rs->last = last; } void all_down() { if (has_fa()) fa->all_down(); down(); } } *const null = new P{0, 0, 0, 0}, pool[M], *pit = pool; P* G[N]; int t[M][26], len[M] = {-1}, fa[M], sz = 2, last = 1; void rot(P* o) { bool dd = o->d(); P *f = o->fa, *t = o->c(!dd); if (f->has_fa()) f->fa->c(f->d()) = o; o->fa = f->fa; if (t != null) t->fa = f; f->c(dd) = t; o->c(!dd) = f->up(); f->fa = o; } void splay(P* o) { o->all_down(); while (o->has_fa()) { if (o->fa->has_fa()) rot(o->d() ^ o->fa->d() ? o : o->fa); rot(o); } o->up(); } void access(int last, P* u, P* v = null) { if (u == null) { v->last = last; return; } splay(u); P *t = u; while (t->ls != null) t = t->ls; int L = len[fa[t - pool]] + 1, R = len[u - pool]; if (u->last) bit::add(u->last - R + 2, u->last - L + 2, 1); else bit::add(1, 1, R - L + 1); bit::add(last - R + 2, last - L + 2, -1); u->rs = v; access(last, u->up()->fa, u); } void insert(P* u, P* v, P* t) { if (v != null) { splay(v); v->rs = null; } splay(u); u->fa = t; t->fa = v; } void ins(int ch, int pp) { int p = last, np = last = sz++; len[np] = len[p] + 1; for (; p && !t[p][ch]; p = fa[p]) t[p][ch] = np; if (!p) fa[np] = 1; else { int q = t[p][ch]; if (len[p] + 1 == len[q]) { fa[np] = q; G[np]->fa = G[q]; } else { int nq = sz++; len[nq] = len[p] + 1; memcpy(t[nq], t[q], sizeof t[0]); insert(G[q], G[fa[q]], G[nq]); G[nq]->last = G[q]->last; fa[nq] = fa[q]; fa[np] = fa[q] = nq; G[np]->fa = G[nq]; for (; t[p][ch] == q; p = fa[p]) t[p][ch] = nq; } } access(pp + 1, G[np]); } void init() { ++pit; FOR (i, 1, N) { G[i] = pit++; G[i]->ls = G[i]->rs = G[i]->fa = null; } G[1] = null; } }","title":"\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","text":"num \u662f\u8be5\u7ed3\u70b9\u8868\u793a\u7684\u524d\u7f00\u7684\u56de\u6587\u540e\u7f00\u4e2a\u6570 cnt \u662f\u8be5\u7ed3\u70b9\u8868\u793a\u7684\u56de\u6587\u4e32\u5728\u539f\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff08\u4f7f\u7528\u524d\u9700\u8981\u5411\u7236\u4eb2\u66f4\u65b0\uff09 namespace pam { int t[N][26], fa[N], len[N], rs[N], cnt[N], num[N]; int sz, n, last; int _new(int l) { len[sz] = l; cnt[sz] = num[sz] = 0; return sz++; } void init() { memset(t, 0, sz * sizeof t[0]); rs[n = sz = 0] = -1; last = _new(0); fa[last] = _new(-1); } int get_fa(int x) { while (rs[n - 1 - len[x]] != rs[n]) x = fa[x]; return x; } void ins(int ch) { rs[++n] = ch; int p = get_fa(last); if (!t[p][ch]) { int np = _new(len[p] + 2); num[np] = num[fa[np] = t[get_fa(fa[p])][ch]] + 1; t[p][ch] = np; } ++cnt[last = t[p][ch]]; } }","title":"\u56de\u6587\u81ea\u52a8\u673a"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#manacher","text":"int RL[N]; void manacher(int* a, int n) { // \"abc\" => \"#a#b#a#\" int r = 0, p = 0; FOR (i, 0, n) { if (i < r) RL[i] = min(RL[2 * p - i], r - i); else RL[i] = 1; while (i - RL[i] >= 0 && i + RL[i] < n && a[i - RL[i]] == a[i + RL[i]]) RL[i]++; if (RL[i] + i - 1 > r) { r = RL[i] + i - 1; p = i; } } FOR (i, 0, n) --RL[i]; }","title":"manacher"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","text":"\u5185\u7f6e\u4e86\u81ea\u52a8\u53cc\u54c8\u5e0c\u5f00\u5173\uff08\u5c0f\u5fc3 TLE\uff09\u3002 #include <bits/stdc++.h> using namespace std; #define ENABLE_DOUBLE_HASH typedef long long LL; typedef unsigned long long ULL; const int x = 135; const int N = 4e5 + 10; const int p1 = 1e9 + 7, p2 = 1e9 + 9; ULL xp1[N], xp2[N], xp[N]; void init_xp() { xp1[0] = xp2[0] = xp[0] = 1; for (int i = 1; i < N; ++i) { xp1[i] = xp1[i - 1] * x % p1; xp2[i] = xp2[i - 1] * x % p2; xp[i] = xp[i - 1] * x; } } struct String { char s[N]; int length, subsize; bool sorted; ULL h[N], hl[N]; ULL hash() { length = strlen(s); ULL res1 = 0, res2 = 0; h[length] = 0; // ATTENTION! for (int j = length - 1; j >= 0; --j) { #ifdef ENABLE_DOUBLE_HASH res1 = (res1 * x + s[j]) % p1; res2 = (res2 * x + s[j]) % p2; h[j] = (res1 << 32) | res2; #else res1 = res1 * x + s[j]; h[j] = res1; #endif // printf(\"%llu\\n\", h[j]); } return h[0]; } // \u83b7\u53d6\u5b50\u4e32\u54c8\u5e0c\uff0c\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 ULL get_substring_hash(int left, int right) const { int len = right - left; #ifdef ENABLE_DOUBLE_HASH // get hash of s[left...right-1] unsigned int mask32 = ~(0u); ULL left1 = h[left] >> 32, right1 = h[right] >> 32; ULL left2 = h[left] & mask32, right2 = h[right] & mask32; return (((left1 - right1 * xp1[len] % p1 + p1) % p1) << 32) | (((left2 - right2 * xp2[len] % p2 + p2) % p2)); #else return h[left] - h[right] * xp[len]; #endif } void get_all_subs_hash(int sublen) { subsize = length - sublen + 1; for (int i = 0; i < subsize; ++i) hl[i] = get_substring_hash(i, i + sublen); sorted = 0; } void sort_substring_hash() { sort(hl, hl + subsize); sorted = 1; } bool match(ULL key) const { if (!sorted) assert (0); if (!subsize) return false; return binary_search(hl, hl + subsize, key); } void init(const char *t) { length = strlen(t); strcpy(s, t); } }; int LCP(const String &a, const String &b, int ai, int bi) { // Find LCP of a[ai...] and b[bi...] int l = 0, r = min(a.length - ai, b.length - bi); while (l < r) { int mid = (l + r + 1) / 2; if (a.get_substring_hash(ai, ai + mid) == b.get_substring_hash(bi, bi + mid)) l = mid; else r = mid - 1; } return l; } int check(int ans) { if (T.length < ans) return 1; T.get_all_subs_hash(ans); T.sort_substring_hash(); for (int i = 0; i < S.length - ans + 1; ++i) if (!T.match(S.get_substring_hash(i, i + ans))) return 1; return 0; } int main() { init_xp(); // DON'T FORGET TO DO THIS! for (int tt = 1; tt <= kases; ++tt) { scanf(\"%d\", &n); scanf(\"%s\", str); S.init(str); S.hash(); T.hash(); } } \u4e8c\u7ef4\u54c8\u5e0c struct Hash2D { // 1-index static const LL px = 131, py = 233, MOD = 998244353; static LL pwx[N], pwy[N]; int a[N][N]; LL hv[N][N]; static void init_xp() { pwx[0] = pwy[0] = 1; FOR (i, 1, N) { pwx[i] = pwx[i - 1] * px % MOD; pwy[i] = pwy[i - 1] * py % MOD; } } void init_hash(int n, int m) { FOR (i, 1, n + 1) { LL s = 0; FOR (j, 1, m + 1) { s = (s * py + a[i][j]) % MOD; hv[i][j] = (hv[i - 1][j] * px + s) % MOD; } } } LL h(int x, int y, int dx, int dy) { --x; --y; LL ret = hv[x + dx][y + dy] + hv[x][y] * pwx[dx] % MOD * pwy[dy] - hv[x][y + dy] * pwx[dx] - hv[x + dx][y] * pwy[dy]; return (ret % MOD + MOD) % MOD; } } ha, hb; LL Hash2D::pwx[N], Hash2D::pwy[N];","title":"\u54c8\u5e0c"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","text":"\u6784\u9020\u65f6\u95f4\uff1a$O(L \\log L)$\uff1b\u67e5\u8be2\u65f6\u95f4 $O(\\log L)$\u3002 suffix \u6570\u7ec4\u662f\u6392\u597d\u5e8f\u7684\u540e\u7f00\u4e0b\u6807\uff0c suffix \u7684\u53cd\u6570\u7ec4\u662f\u540e\u7f00\u6570\u7ec4\u3002 #include <bits/stdc++.h> using namespace std; const int N = 2e5 + 10; const int Nlog = 18; struct SuffixArray { const int L; vector<vector<int> > P; vector<pair<pair<int, int>, int> > M; int s[N], sa[N], rank[N], height[N]; // s: raw string // sa[i]=k: s[k...L-1] ranks i (0 based) // rank[i]=k: the rank of s[i...L-1] is k (0 based) // height[i] = lcp(sa[i-1], sa[i]) SuffixArray(const string &raw_s) : L(raw_s.length()), P(1, vector<int>(L, 0)), M(L) { for (int i = 0; i < L; i++) P[0][i] = this->s[i] = int(raw_s[i]); for (int skip = 1, level = 1; skip < L; skip *= 2, level++) { P.push_back(vector<int>(L, 0)); for (int i = 0; i < L; i++) M[i] = make_pair(make_pair(P[level - 1][i], i + skip < L ? P[level - 1][i + skip] : -1000), i); sort(M.begin(), M.end()); for (int i = 0; i < L; i++) P[level][M[i].second] = (i > 0 && M[i].first == M[i - 1].first) ? P[level][M[i - 1].second] : i; } for (unsigned i = 0; i < P.back().size(); ++i) { rank[i] = P.back()[i]; sa[rank[i]] = i; } } // This is a traditional way to calculate LCP void getHeight() { memset(height, 0, sizeof height); int k = 0; for (int i = 0; i < L; ++i) { if (rank[i] == 0) continue; if (k) k--; int j = sa[rank[i] - 1]; while (i + k < L && j + k < L && s[i + k] == s[j + k]) ++k; height[rank[i]] = k; } rmq_init(height, L); } int f[N][Nlog]; inline int highbit(int x) { return 31 - __builtin_clz(x); } int rmq_query(int x, int y) { int p = highbit(y - x + 1); return min(f[x][p], f[y - (1 << p) + 1][p]); } // arr has to be 0 based void rmq_init(int *arr, int length) { for (int x = 0; x <= highbit(length); ++x) for (int i = 0; i <= length - (1 << x); ++i) { if (!x) f[i][x] = arr[i]; else f[i][x] = min(f[i][x - 1], f[i + (1 << (x - 1))][x - 1]); } } #ifdef NEW // returns the length of the longest common prefix of s[i...L-1] and s[j...L-1] int LongestCommonPrefix(int i, int j) { int len = 0; if (i == j) return L - i; for (int k = (int) P.size() - 1; k >= 0 && i < L && j < L; k--) { if (P[k][i] == P[k][j]) { i += 1 << k; j += 1 << k; len += 1 << k; } } return len; } #else int LongestCommonPrefix(int i, int j) { // getHeight() must be called first if (i == j) return L - i; if (i > j) swap(i, j); return rmq_query(i + 1, j); } #endif int checkNonOverlappingSubstring(int K) { // check if there is two non-overlapping identical substring of length K int minsa = 0, maxsa = 0; for (int i = 0; i < L; ++i) { if (height[i] < K) { minsa = sa[i]; maxsa = sa[i]; } else { minsa = min(minsa, sa[i]); maxsa = max(maxsa, sa[i]); if (maxsa - minsa >= K) return 1; } } return 0; } int checkBelongToDifferentSubstring(int K, int split) { int minsa = 0, maxsa = 0; for (int i = 0; i < L; ++i) { if (height[i] < K) { minsa = sa[i]; maxsa = sa[i]; } else { minsa = min(minsa, sa[i]); maxsa = max(maxsa, sa[i]); if (maxsa > split && minsa < split) return 1; } } return 0; } } *S; int main() { string s, t; cin >> s >> t; int sp = s.length(); s += \"*\" + t; S = new SuffixArray(s); S->getHeight(); int left = 0, right = sp; while (left < right) { int mid = (left + right + 1) / 2; if (S->checkBelongToDifferentSubstring(mid, sp)) left = mid; else right = mid - 1; } printf(\"%d\\n\", left); } SA-IS \u4ec5\u5728\u540e\u7f00\u81ea\u52a8\u673a\u88ab\u5361\u5185\u5b58\u6216\u8005\u5361\u5e38\u4e14\u9700\u8981 O(1) LCA \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff08\u6bd4\u8d5b\u4e2d\u6572\u8fd9\u4e2a\u6211\u89c9\u5f97\u4e0d\u884c\uff09 UOJ 35 // rk [0..n-1] -> [1..n], sa/ht [1..n] // s[i] > 0 && s[n] = 0 // b: normally as bucket // c: normally as bucket1 // d: normally as bucket2 // f: normally as cntbuf template<size_t size> struct SuffixArray { bool t[size << 1]; int b[size], c[size]; int sa[size], rk[size], ht[size]; inline bool isLMS(const int i, const bool *t) { return i > 0 && t[i] && !t[i - 1]; } template<class T> inline void inducedSort(T s, int *sa, const int n, const int M, const int bs, bool *t, int *b, int *f, int *p) { fill(b, b + M, 0); fill(sa, sa + n, -1); FOR (i, 0, n) b[s[i]]++; f[0] = b[0]; FOR (i, 1, M) f[i] = f[i - 1] + b[i]; FORD (i, bs - 1, -1) sa[--f[s[p[i]]]] = p[i]; FOR (i, 1, M) f[i] = f[i - 1] + b[i - 1]; FOR (i, 0, n) if (sa[i] > 0 && !t[sa[i] - 1]) sa[f[s[sa[i] - 1]]++] = sa[i] - 1; f[0] = b[0]; FOR (i, 1, M) f[i] = f[i - 1] + b[i]; FORD (i, n - 1, -1) if (sa[i] > 0 && t[sa[i] - 1]) sa[--f[s[sa[i] - 1]]] = sa[i] - 1; } template<class T> inline void sais(T s, int *sa, int n, bool *t, int *b, int *c, int M) { int i, j, bs = 0, cnt = 0, p = -1, x, *r = b + M; t[n - 1] = 1; FORD (i, n - 2, -1) t[i] = s[i] < s[i + 1] || (s[i] == s[i + 1] && t[i + 1]); FOR (i, 1, n) if (t[i] && !t[i - 1]) c[bs++] = i; inducedSort(s, sa, n, M, bs, t, b, r, c); for (i = bs = 0; i < n; i++) if (isLMS(sa[i], t)) sa[bs++] = sa[i]; FOR (i, bs, n) sa[i] = -1; FOR (i, 0, bs) { x = sa[i]; for (j = 0; j < n; j++) { if (p == -1 || s[x + j] != s[p + j] || t[x + j] != t[p + j]) { cnt++, p = x; break; } else if (j > 0 && (isLMS(x + j, t) || isLMS(p + j, t))) break; } x = (~x & 1 ? x >> 1 : x - 1 >> 1), sa[bs + x] = cnt - 1; } for (i = j = n - 1; i >= bs; i--) if (sa[i] >= 0) sa[j--] = sa[i]; int *s1 = sa + n - bs, *d = c + bs; if (cnt < bs) sais(s1, sa, bs, t + n, b, c + bs, cnt); else FOR (i, 0, bs) sa[s1[i]] = i; FOR (i, 0, bs) d[i] = c[sa[i]]; inducedSort(s, sa, n, M, bs, t, b, r, d); } template<typename T> inline void getHeight(T s, const int n, const int *sa) { for (int i = 0, k = 0; i < n; i++) { if (rk[i] == 0) k = 0; else { if (k > 0) k--; int j = sa[rk[i] - 1]; while (i + k < n && j + k < n && s[i + k] == s[j + k]) k++; } ht[rk[i]] = k; } } template<class T> inline void init(T s, int n, int M) { sais(s, sa, ++n, t, b, c, M); for (int i = 1; i < n; i++) rk[sa[i]] = i; getHeight(s, n, sa); } }; const int N = 2E5 + 100; SuffixArray<N> sa; int main() { string s; cin >> s; int n = s.length(); sa.init(s, n, 128); FOR (i, 1, n + 1) printf(\"%d%c\", sa.sa[i] + 1, i == _i - 1 ? '\\n' : ' '); FOR (i, 2, n + 1) printf(\"%d%c\", sa.ht[i], i == _i - 1 ? '\\n' : ' '); }","title":"\u540e\u7f00\u6570\u7ec4"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#kmp","text":"\u524d\u7f00\u51fd\u6570\uff08\u6bcf\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f border\uff09 void get_pi(int a[], char s[], int n) { int j = a[0] = 0; FOR (i, 1, n) { while (j && s[i] != s[j]) j = a[j - 1]; a[i] = j += s[i] == s[j]; } } Z \u51fd\u6570\uff08\u6bcf\u4e00\u4e2a\u540e\u7f00\u548c\u8be5\u5b57\u7b26\u4e32\u7684 LCP \u957f\u5ea6\uff09 void get_z(int a[], char s[], int n) { int l = 0, r = 0; a[0] = n; FOR (i, 1, n) { a[i] = i > r ? 0 : min(r - i + 1, a[i - l]); while (i + a[i] < n && s[a[i]] == s[i + a[i]]) ++a[i]; if (i + a[i] - 1 > r) { l = i; r = i + a[i] - 1; } } }","title":"KMP"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#trie","text":"namespace trie { int t[N][26], sz, ed[N]; void init() { sz = 2; memset(ed, 0, sizeof ed); } int _new() { memset(t[sz], 0, sizeof t[sz]); return sz++; } void ins(char* s, int p) { int u = 1; FOR (i, 0, strlen(s)) { int c = s[i] - 'a'; if (!t[u][c]) t[u][c] = _new(); u = t[u][c]; } ed[u] = p; } }","title":"Trie"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/5-%E5%AD%97%E7%AC%A6%E4%B8%B2/#ac","text":"const int N = 1e6 + 100, M = 26; int mp(char ch) { return ch - 'a'; } struct ACA { int ch[N][M], danger[N], fail[N]; int sz; void init() { sz = 1; memset(ch[0], 0, sizeof ch[0]); memset(danger, 0, sizeof danger); } void insert(const string &s, int m) { int n = s.size(); int u = 0, c; FOR (i, 0, n) { c = mp(s[i]); if (!ch[u][c]) { memset(ch[sz], 0, sizeof ch[sz]); danger[sz] = 0; ch[u][c] = sz++; } u = ch[u][c]; } danger[u] |= 1 << m; } void build() { queue<int> Q; fail[0] = 0; for (int c = 0, u; c < M; c++) { u = ch[0][c]; if (u) { Q.push(u); fail[u] = 0; } } while (!Q.empty()) { int r = Q.front(); Q.pop(); danger[r] |= danger[fail[r]]; for (int c = 0, u; c < M; c++) { u = ch[r][c]; if (!u) { ch[r][c] = ch[fail[r]][c]; continue; } fail[u] = ch[fail[r]][c]; Q.push(u); } } } } ac; char s[N]; int main() { int n; scanf(\"%d\", &n); ac.init(); while (n--) { scanf(\"%s\", s); ac.insert(s, 0); } ac.build(); scanf(\"%s\", s); int u = 0; n = strlen(s); FOR (i, 0, n) { u = ac.ch[u][mp(s[i])]; if (ac.danger[u]) { puts(\"YES\"); return 0; } } puts(\"NO\"); return 0; }","title":"AC \u81ea\u52a8\u673a"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/","text":"\u6742\u9879 STL copy template <class InputIterator, class OutputIterator> OutputIterator copy (InputIterator first, InputIterator last, OutputIterator result); merge (\u5982\u679c\u76f8\u7b49\uff0c\u7b2c\u4e00\u4e2a\u4f18\u5148) template <class InputIterator1, class InputIterator2, class OutputIterator, class Compare> OutputIterator merge (InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp); for_each template <class InputIterator, class Function> Function for_each (InputIterator first, InputIterator last, Function fn); transform template <class InputIterator, class OutputIterator, class UnaryOperation> OutputIterator transform (InputIterator first1, InputIterator last1, OutputIterator result, UnaryOperation op); numeric_limits template <class T> numeric_limits; iota template< class ForwardIterator, class T > void iota( ForwardIterator first, ForwardIterator last, T value ); \u65e5\u671f // Routines for performing computations on dates. In these routines, // months are exprsesed as integers from 1 to 12, days are expressed // as integers from 1 to 31, and years are expressed as 4-digit // integers. string dayOfWeek[] = {\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"}; // converts Gregorian date to integer (Julian day number) int DateToInt (int m, int d, int y){ return 1461 * (y + 4800 + (m - 14) / 12) / 4 + 367 * (m - 2 - (m - 14) / 12 * 12) / 12 - 3 * ((y + 4900 + (m - 14) / 12) / 100) / 4 + d - 32075; } // converts integer (Julian day number) to Gregorian date: month/day/year void IntToDate (int jd, int &m, int &d, int &y){ int x, n, i, j; x = jd + 68569; n = 4 * x / 146097; x -= (146097 * n + 3) / 4; i = (4000 * (x + 1)) / 1461001; x -= 1461 * i / 4 - 31; j = 80 * x / 2447; d = x - 2447 * j / 80; x = j / 11; m = j + 2 - 12 * x; y = 100 * (n - 49) + i + x; } // converts integer (Julian day number) to day of week string IntToDay (int jd){ return dayOfWeek[jd % 7]; } \u5b50\u96c6\u679a\u4e3e \u679a\u4e3e\u771f\u5b50\u96c6 for (int s = (S - 1) & S; s; s = (s - 1) & S) \u679a\u4e3e\u5927\u5c0f\u4e3a k \u7684\u5b50\u96c6 template<typename T> void subset(int k, int n, T&& f) { int t = (1 << k) - 1; while (t < 1 << n) { f(t); int x = t & -t, y = t + x; t = ((t & ~y) / x >> 1) | y; } } \u6570\u4f4d DP LL dfs(LL base, LL pos, LL len, LL s, bool limit) { if (pos == -1) return s ? base : 1; if (!limit && dp[base][pos][len][s] != -1) return dp[base][pos][len][s]; LL ret = 0; LL ed = limit ? a[pos] : base - 1; FOR (i, 0, ed + 1) { tmp[pos] = i; if (len == pos) ret += dfs(base, pos - 1, len - (i == 0), s, limit && i == a[pos]); else if (s &&pos < (len + 1) / 2) ret += dfs(base, pos - 1, len, tmp[len - pos] == i, limit && i == a[pos]); else ret += dfs(base, pos - 1, len, s, limit && i == a[pos]); } if (!limit) dp[base][pos][len][s] = ret; return ret; } LL solve(LL x, LL base) { LL sz = 0; while (x) { a[sz++] = x % base; x /= base; } return dfs(base, sz - 1, sz - 1, 1, true); } \u6a21\u62df\u9000\u706b \u6700\u5c0f\u8986\u76d6\u5706 using LD = double; const int N = 1E4 + 100; int x[N], y[N], n; LD eval(LD xx, LD yy) { LD r = 0; FOR (i, 0, n) r = max(r, sqrt(pow(xx - x[i], 2) + pow(yy - y[i], 2))); return r; } mt19937 mt(time(0)); auto rd = bind(uniform_real_distribution<LD>(-1, 1), mt); int main() { int X, Y; while (cin >> X >> Y >> n) { FOR (i, 0, n) scanf(\"%d%d\", &x[i], &y[i]); pair<LD, LD> ans; LD M = 1e9; FOR (_, 0, 100) { LD cur_x = X / 2.0, cur_y = Y / 2.0, T = max(X, Y); while (T > 1e-3) { LD best_ans = eval(cur_x, cur_y); LD best_x = cur_x, best_y = cur_y; FOR (___, 0, 20) { LD nxt_x = cur_x + rd() * T, nxt_y = cur_y + rd() * T; LD nxt_ans = eval(nxt_x, nxt_y); if (nxt_ans < best_ans) { best_x = nxt_x; best_y = nxt_y; best_ans = nxt_ans; } } cur_x = best_x; cur_y = best_y; T *= .9; } if (eval(cur_x, cur_y) < M) { ans = {cur_x, cur_y}; M = eval(cur_x, cur_y); } } printf(\"(%.1f,%.1f).\\n%.1f\\n\", ans.first, ans.second, eval(ans.first, ans.second)); } } \u571f\u5236 bitset \u53ef\u4ee5\u7528 auto p = reinterpret_cast<unsigned*>(&x); \uff08 p[0] \u7684\u6700\u4f4e\u4f4d\u5c31\u662f bitset \u7684\u6700\u4f4e\u4f4d\uff09 // M \u8981\u5f00\u5927\u81f3\u5c11 1 \u4e2a 64 const int M = (1E4 + 200) / 64; typedef unsigned long long ULL; const ULL ONE = 1; struct Bitset { ULL a[M]; void go(int x) { int offset = x / 64; x %= 64; for (int i = offset, j = 0; i + 1 < M; ++i, ++j) { a[j] |= a[i] >> x; if (x) a[j] |= a[i + 1] << (64 - x); // \u4e0d\u80fd\u5de6\u79fb 64 \u4f4d } } void init() { memset(a, 0, sizeof a); } void set(int x) { int offset = x / 64; x %= 64; a[offset] |= (ONE << x); } void prt() { FOR (i, 0, M) FOR (j, 0, 64) putchar((a[i] & (ONE << j)) ? '1' : '0'); puts(\"\"); } int lowbit() { FOR (i, 0, M) if (a[i]) return i * 64 + __builtin_ctzll(a[i]); assert (0); } int highbit(int x) { // [0,x) \u7684\u6700\u9ad8\u4f4d int offset = x / 64; x %= 64; FORD (i, offset, -1) { if (!a[i]) continue; if (i == offset) { FORD (j, x - 1, -1) if ((ONE << j) & a[i]) { return i * 64 + j; } } else return i * 64 + 63 - __builtin_clzll(a[i]); } assert (0); } }; \u968f\u673a \u4e0d\u8981\u4f7f\u7528 rand() \u3002 chrono::steady_clock::now().time_since_epoch().count() \u53ef\u7528\u4e8e\u8ba1\u65f6\u3002 64 \u4f4d\u53ef\u4ee5\u4f7f\u7528 mt19937_64 \u3002 int main() { mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); vector<int> permutation(N); for (int i = 0; i < N; i++) permutation[i] = i; shuffle(permutation.begin(), permutation.end(), rng); for (int i = 0; i < N; i++) permutation[i] = i; for (int i = 1; i < N; i++) swap(permutation[i], permutation[uniform_int_distribution<int>(0, i)(rng)]); \u4f2a\u968f\u673a\u6570 unsigned rnd() { static unsigned A = 1 << 16 | 3, B = 33333331, C = 2341; return C = A * C + B; } \u771f\u5b9e\u968f\u673a\u6570 mt19937 mt(time(0)); auto rd = bind(uniform_real_distribution<double>(0, 1), mt); auto rd2 = bind(uniform_int_distribution<int>(1, 6), mt); \u968f\u673a\u7d20\u6570\u8868 42737, 46411, 50101, 52627, 54577, 191677, 194869, 210407, 221831, 241337, 578603, 625409, 713569, 788813, 862481, 2174729, 2326673, 2688877, 2779417, 3133583, 4489747, 6697841, 6791471, 6878533, 7883129, 9124553, 10415371, 11134633, 12214801, 15589333, 17148757, 17997457, 20278487, 27256133, 28678757, 38206199, 41337119, 47422547, 48543479, 52834961, 76993291, 85852231, 95217823, 108755593, 132972461, 171863609, 173629837, 176939899, 207808351, 227218703, 306112619, 311809637, 322711981, 330806107, 345593317, 345887293, 362838523, 373523729, 394207349, 409580177, 437359931, 483577261, 490845269, 512059357, 534387017, 698987533, 764016151, 906097321, 914067307, 954169327 1572869, 3145739, 6291469, 12582917, 25165843, 50331653 \uff08\u9002\u5408\u54c8\u5e0c\u7684\u7d20\u6570\uff09 from random import randint def is_prime(num, test_count): if num == 1: return False if test_count >= num: test_count = num - 1 for x in range(test_count): val = randint(1, num - 1) if pow(val, num-1, num) != 1: return False return True def generate_big_prime(n): found_prime = False while not found_prime: p = randint(2**(n-1), 2**n) if is_prime(p, 1000): return p NTT \u7d20\u6570\u8868 $p= r2^k+1$\uff0c\u539f\u6839\u662f $g$\u3002 3, 1, 1, 2; 5, 1, 2, 2; 17, 1, 4, 3; 97, 3, 5, 5; 193, 3, 6, 5; 257, 1, 8, 3; 7681, 15, 9, 17; 12289, 3, 12, 11; 40961, 5, 13, 3; 65537, 1, 16, 3; 786433, 3, 18, 10; 5767169, 11, 19, 3; 7340033, 7, 20, 3; 23068673, 11, 21, 3; 104857601, 25, 22, 3; 167772161, 5, 25, 3; 469762049, 7, 26, 3; 1004535809, 479, 21, 3; 2013265921, 15, 27, 31; 2281701377, 17, 27, 3; 3221225473, 3, 30, 5; 75161927681, 35, 31, 3; 77309411329, 9, 33, 7; 206158430209, 3, 36, 22; 2061584302081, 15, 37, 7; 2748779069441, 5, 39, 3; 6597069766657, 3, 41, 5; 39582418599937, 9, 42, 5; 79164837199873, 9, 43, 5; 263882790666241, 15, 44, 7; 1231453023109121, 35, 45, 3; 1337006139375617, 19, 46, 3; 3799912185593857, 27, 47, 5; 4222124650659841, 15, 48, 19; 7881299347898369, 7, 50, 6; 31525197391593473, 7, 52, 3; 180143985094819841, 5, 55, 6; 1945555039024054273, 27, 56, 5; 4179340454199820289, 29, 57, 3. Java Regex // Code which demonstrates the use of Java's regular expression libraries. // This is a solution for // // Loglan: a logical language // http://acm.uva.es/p/v1/134.html import java.util.*; import java.util.regex.*; public class LogLan { public static void main(String args[]) { String regex = BuildRegex(); Pattern pattern = Pattern.compile(regex); Scanner s = new Scanner(System.in); while (true) { // In this problem, each sentence consists of multiple lines, where the last // line is terminated by a period. The code below reads lines until // encountering a line whose final character is a '.'. Note the use of // // s.length() to get length of string // s.charAt() to extract characters from a Java string // s.trim() to remove whitespace from the beginning and end of Java string // // Other useful String manipulation methods include // // s.compareTo(t) < 0 if s < t, lexicographically // s.indexOf(\"apple\") returns index of first occurrence of \"apple\" in s // s.lastIndexOf(\"apple\") returns index of last occurrence of \"apple\" in s // s.replace(c,d) replaces occurrences of character c with d // s.startsWith(\"apple) returns (s.indexOf(\"apple\") == 0) // s.toLowerCase() / s.toUpperCase() returns a new lower/uppercased string // // Integer.parseInt(s) converts s to an integer (32-bit) // Long.parseLong(s) converts s to a long (64-bit) // Double.parseDouble(s) converts s to a double String sentence = \"\"; while (true) { sentence = (sentence + \" \" + s.nextLine()).trim(); if (sentence.equals(\"#\")) return; if (sentence.charAt(sentence.length() - 1) == '.') break; } // now, we remove the period, and match the regular expression String removed_period = sentence.substring(0, sentence.length() - 1).trim(); if (pattern.matcher(removed_period).find()) { System.out.println(\"Good\"); } else { System.out.println(\"Bad!\"); } } } } Decimal Format // examples for printing floating point numbers import java.util.*; import java.io.*; import java.text.DecimalFormat; public class DecFormat { public static void main(String[] args) { DecimalFormat fmt; // round to at most 2 digits, leave of digits if not needed fmt = new DecimalFormat(\"#.##\"); System.out.println(fmt.format(12345.6789)); // produces 12345.68 System.out.println(fmt.format(12345.0)); // produces 12345 System.out.println(fmt.format(0.0)); // produces 0 System.out.println(fmt.format(0.01)); // produces .1 // round to precisely 2 digits fmt = new DecimalFormat(\"#.00\"); System.out.println(fmt.format(12345.6789)); // produces 12345.68 System.out.println(fmt.format(12345.0)); // produces 12345.00 System.out.println(fmt.format(0.0)); // produces .00 // round to precisely 2 digits, force leading zero fmt = new DecimalFormat(\"0.00\"); System.out.println(fmt.format(12345.6789)); // produces 12345.68 System.out.println(fmt.format(12345.0)); // produces 12345.00 System.out.println(fmt.format(0.0)); // produces 0.00 // round to precisely 2 digits, force leading zeros fmt = new DecimalFormat(\"000000000.00\"); System.out.println(fmt.format(12345.6789)); // produces 000012345.68 System.out.println(fmt.format(12345.0)); // produces 000012345.00 System.out.println(fmt.format(0.0)); // produces 000000000.00 // force leading '+' fmt = new DecimalFormat(\"+0;-0\"); System.out.println(fmt.format(12345.6789)); // produces +12346 System.out.println(fmt.format(-12345.6789)); // produces -12346 System.out.println(fmt.format(0)); // produces +0 // force leading positive/negative, pad to 2 fmt = new DecimalFormat(\"positive 00;negative 0\"); System.out.println(fmt.format(1)); // produces \"positive 01\" System.out.println(fmt.format(-1)); // produces \"negative 01\" // qoute special chars (#) fmt = new DecimalFormat(\"text with '#' followed by #\"); System.out.println(fmt.format(12.34)); // produces \"text with # followed by 12\" // always show \".\" fmt = new DecimalFormat(\"#.#\"); fmt.setDecimalSeparatorAlwaysShown(true); System.out.println(fmt.format(12.34)); // produces \"12.3\" System.out.println(fmt.format(12)); // produces \"12.\" System.out.println(fmt.format(0.34)); // produces \"0.3\" // different grouping distances: fmt = new DecimalFormat(\"#,####.###\"); System.out.println(fmt.format(123456789.123)); // produces \"1,2345,6789.123\" // scientific: fmt = new DecimalFormat(\"0.000E00\"); System.out.println(fmt.format(123456789.123)); // produces \"1.235E08\" System.out.println(fmt.format(-0.000234)); // produces \"-2.34E-04\" // using variable number of digits: fmt = new DecimalFormat(\"0\"); System.out.println(fmt.format(123.123)); // produces \"123\" fmt.setMinimumFractionDigits(8); System.out.println(fmt.format(123.123)); // produces \"123.12300000\" fmt.setMaximumFractionDigits(0); System.out.println(fmt.format(123.123)); // produces \"123\" // note: to pad with spaces, you need to do it yourself: // String out = fmt.format(...) // while (out.length() < targlength) out = \" \"+out; } } Sort import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Employee implements Comparable<Employee> { private int id; private String name; private int age; public Employee(int id, String name, int age) { this.id = id; this.name = name; this.age = age; } @Override public int compareTo(Employee o) { if (id > o.id) { return 1; } else if (id < o.id) { return -1; } return 0; } public static void main(String[] args) { List<Employee> list = new ArrayList<Employee>(); list.add(new Employee(2, \"Java\", 20)); list.add(new Employee(1, \"C\", 30)); list.add(new Employee(3, \"C#\", 10)); Collections.sort(list); } } \u6269\u6808\uff08\u672c\u5730\u4f7f\u7528\uff09 #include <sys/resource.h> void init_stack(){ const rlim_t kStackSize = 512 * 1024 * 1024; struct rlimit rl; int result; result = getrlimit(RLIMIT_STACK, &rl); if (result == 0) { if (rl.rlim_cur < kStackSize) { rl.rlim_cur = kStackSize; result = setrlimit(RLIMIT_STACK, &rl); if (result != 0) { fprintf(stderr, \"setrlimit returned result = %d\\n\", result); } } } } \u5fc3\u6001\u5d29\u4e86 (int)v.size() 1LL << k \u9012\u5f52\u51fd\u6570\u7528\u5168\u5c40\u6216\u8005 static \u53d8\u91cf\u8981\u5c0f\u5fc3 \u9884\u5904\u7406\u7ec4\u5408\u6570\u6ce8\u610f\u4e0a\u9650 \u60f3\u6e05\u695a\u5230\u5e95\u662f\u8981 multiset \u8fd8\u662f set \u63d0\u4ea4\u4e4b\u524d\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u6d4b\u4e00\u4e0b\u8fb9\u754c \u6570\u636e\u7ed3\u6784\u6ce8\u610f\u6570\u7ec4\u5927\u5c0f \uff082\u500d\uff0c4\u500d\uff09 \u5b57\u7b26\u4e32\u6ce8\u610f\u5b57\u7b26\u96c6 \u5982\u679c\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86\u9ed8\u8ba4\u53c2\u6570\u7684\u8bdd\uff0c\u6ce8\u610f\u8c03\u7528\u65f6\u7684\u53c2\u6570\u4e2a\u6570\u3002 \u6ce8\u610f\u8981\u8bfb\u5b8c \u6784\u9020\u53c2\u6570\u65e0\u6cd5\u4f7f\u7528\u81ea\u5df1 \u6811\u94fe\u5256\u5206/dfs \u5e8f\uff0c\u521d\u59cb\u5316\u6216\u8005\u8be2\u95ee\u4e0d\u8981\u5fd8\u8bb0 idx, ridx \u6392\u5e8f\u65f6\u6ce8\u610f\u7ed3\u6784\u4f53\u7684\u6240\u6709\u5c5e\u6027\u662f\u4e0d\u662f\u8003\u8651\u4e86 \u4e0d\u8981\u628a while \u5199\u6210 if \u4e0d\u8981\u628a int \u5f00\u6210 char \u6e05\u96f6\u7684\u65f6\u5019\u5168\u90e8\u7528 0~n+1\u3002 \u6a21\u610f\u4e49\u4e0b\u4e0d\u8981\u7528\u9664\u6cd5 \u54c8\u5e0c\u4e0d\u8981\u81ea\u7136\u6ea2\u51fa \u6700\u77ed\u8def\u4e0d\u8981 SPFA\uff0c\u4e56\u4e56\u5199 Dijkstra \u4e0a\u53d6\u6574\u4ee5\u53ca GCD \u5c0f\u5fc3\u8d1f\u6570 mid \u7528 l + (r - l) / 2 \u53ef\u4ee5\u907f\u514d\u6ea2\u51fa\u548c\u8d1f\u6570\u7684\u95ee\u9898 \u5c0f\u5fc3\u6a21\u677f\u81ea\u5e26\u7684\u610f\u6599\u4e4b\u5916\u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 \u6c42\u6700\u4f18\u89e3\u65f6\u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0\u5f53\u524d\u6700\u4f18\u89e3 \u56fe\u8bba\u95ee\u9898\u4e00\u5b9a\u8981\u6ce8\u610f\u56fe\u4e0d\u8fde\u901a\u7684\u95ee\u9898 \u5904\u7406\u5f3a\u5236\u5728\u7ebf\u7684\u65f6\u5019 lastans \u8d1f\u6570\u4e5f\u8981\u8bb0\u5f97\u77eb\u6b63 \u4e0d\u8981\u89c9\u5f97\u7f16\u8bd1\u5668\u4ec0\u4e48\u90fd\u80fd\u4f18\u5316 \u5206\u5757\u4e00\u5b9a\u8981\u7279\u5224\u5728\u540c\u4e00\u5757\u4e2d\u7684\u60c5\u51b5","title":"\u6742\u9879"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_1","text":"","title":"\u6742\u9879"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#stl","text":"copy template <class InputIterator, class OutputIterator> OutputIterator copy (InputIterator first, InputIterator last, OutputIterator result); merge (\u5982\u679c\u76f8\u7b49\uff0c\u7b2c\u4e00\u4e2a\u4f18\u5148) template <class InputIterator1, class InputIterator2, class OutputIterator, class Compare> OutputIterator merge (InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp); for_each template <class InputIterator, class Function> Function for_each (InputIterator first, InputIterator last, Function fn); transform template <class InputIterator, class OutputIterator, class UnaryOperation> OutputIterator transform (InputIterator first1, InputIterator last1, OutputIterator result, UnaryOperation op); numeric_limits template <class T> numeric_limits; iota template< class ForwardIterator, class T > void iota( ForwardIterator first, ForwardIterator last, T value );","title":"STL"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_2","text":"// Routines for performing computations on dates. In these routines, // months are exprsesed as integers from 1 to 12, days are expressed // as integers from 1 to 31, and years are expressed as 4-digit // integers. string dayOfWeek[] = {\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"}; // converts Gregorian date to integer (Julian day number) int DateToInt (int m, int d, int y){ return 1461 * (y + 4800 + (m - 14) / 12) / 4 + 367 * (m - 2 - (m - 14) / 12 * 12) / 12 - 3 * ((y + 4900 + (m - 14) / 12) / 100) / 4 + d - 32075; } // converts integer (Julian day number) to Gregorian date: month/day/year void IntToDate (int jd, int &m, int &d, int &y){ int x, n, i, j; x = jd + 68569; n = 4 * x / 146097; x -= (146097 * n + 3) / 4; i = (4000 * (x + 1)) / 1461001; x -= 1461 * i / 4 - 31; j = 80 * x / 2447; d = x - 2447 * j / 80; x = j / 11; m = j + 2 - 12 * x; y = 100 * (n - 49) + i + x; } // converts integer (Julian day number) to day of week string IntToDay (int jd){ return dayOfWeek[jd % 7]; }","title":"\u65e5\u671f"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_3","text":"\u679a\u4e3e\u771f\u5b50\u96c6 for (int s = (S - 1) & S; s; s = (s - 1) & S) \u679a\u4e3e\u5927\u5c0f\u4e3a k \u7684\u5b50\u96c6 template<typename T> void subset(int k, int n, T&& f) { int t = (1 << k) - 1; while (t < 1 << n) { f(t); int x = t & -t, y = t + x; t = ((t & ~y) / x >> 1) | y; } }","title":"\u5b50\u96c6\u679a\u4e3e"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#dp","text":"LL dfs(LL base, LL pos, LL len, LL s, bool limit) { if (pos == -1) return s ? base : 1; if (!limit && dp[base][pos][len][s] != -1) return dp[base][pos][len][s]; LL ret = 0; LL ed = limit ? a[pos] : base - 1; FOR (i, 0, ed + 1) { tmp[pos] = i; if (len == pos) ret += dfs(base, pos - 1, len - (i == 0), s, limit && i == a[pos]); else if (s &&pos < (len + 1) / 2) ret += dfs(base, pos - 1, len, tmp[len - pos] == i, limit && i == a[pos]); else ret += dfs(base, pos - 1, len, s, limit && i == a[pos]); } if (!limit) dp[base][pos][len][s] = ret; return ret; } LL solve(LL x, LL base) { LL sz = 0; while (x) { a[sz++] = x % base; x /= base; } return dfs(base, sz - 1, sz - 1, 1, true); }","title":"\u6570\u4f4d DP"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_4","text":"\u6700\u5c0f\u8986\u76d6\u5706 using LD = double; const int N = 1E4 + 100; int x[N], y[N], n; LD eval(LD xx, LD yy) { LD r = 0; FOR (i, 0, n) r = max(r, sqrt(pow(xx - x[i], 2) + pow(yy - y[i], 2))); return r; } mt19937 mt(time(0)); auto rd = bind(uniform_real_distribution<LD>(-1, 1), mt); int main() { int X, Y; while (cin >> X >> Y >> n) { FOR (i, 0, n) scanf(\"%d%d\", &x[i], &y[i]); pair<LD, LD> ans; LD M = 1e9; FOR (_, 0, 100) { LD cur_x = X / 2.0, cur_y = Y / 2.0, T = max(X, Y); while (T > 1e-3) { LD best_ans = eval(cur_x, cur_y); LD best_x = cur_x, best_y = cur_y; FOR (___, 0, 20) { LD nxt_x = cur_x + rd() * T, nxt_y = cur_y + rd() * T; LD nxt_ans = eval(nxt_x, nxt_y); if (nxt_ans < best_ans) { best_x = nxt_x; best_y = nxt_y; best_ans = nxt_ans; } } cur_x = best_x; cur_y = best_y; T *= .9; } if (eval(cur_x, cur_y) < M) { ans = {cur_x, cur_y}; M = eval(cur_x, cur_y); } } printf(\"(%.1f,%.1f).\\n%.1f\\n\", ans.first, ans.second, eval(ans.first, ans.second)); } }","title":"\u6a21\u62df\u9000\u706b"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#bitset","text":"\u53ef\u4ee5\u7528 auto p = reinterpret_cast<unsigned*>(&x); \uff08 p[0] \u7684\u6700\u4f4e\u4f4d\u5c31\u662f bitset \u7684\u6700\u4f4e\u4f4d\uff09 // M \u8981\u5f00\u5927\u81f3\u5c11 1 \u4e2a 64 const int M = (1E4 + 200) / 64; typedef unsigned long long ULL; const ULL ONE = 1; struct Bitset { ULL a[M]; void go(int x) { int offset = x / 64; x %= 64; for (int i = offset, j = 0; i + 1 < M; ++i, ++j) { a[j] |= a[i] >> x; if (x) a[j] |= a[i + 1] << (64 - x); // \u4e0d\u80fd\u5de6\u79fb 64 \u4f4d } } void init() { memset(a, 0, sizeof a); } void set(int x) { int offset = x / 64; x %= 64; a[offset] |= (ONE << x); } void prt() { FOR (i, 0, M) FOR (j, 0, 64) putchar((a[i] & (ONE << j)) ? '1' : '0'); puts(\"\"); } int lowbit() { FOR (i, 0, M) if (a[i]) return i * 64 + __builtin_ctzll(a[i]); assert (0); } int highbit(int x) { // [0,x) \u7684\u6700\u9ad8\u4f4d int offset = x / 64; x %= 64; FORD (i, offset, -1) { if (!a[i]) continue; if (i == offset) { FORD (j, x - 1, -1) if ((ONE << j) & a[i]) { return i * 64 + j; } } else return i * 64 + 63 - __builtin_clzll(a[i]); } assert (0); } };","title":"\u571f\u5236 bitset"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_5","text":"\u4e0d\u8981\u4f7f\u7528 rand() \u3002 chrono::steady_clock::now().time_since_epoch().count() \u53ef\u7528\u4e8e\u8ba1\u65f6\u3002 64 \u4f4d\u53ef\u4ee5\u4f7f\u7528 mt19937_64 \u3002 int main() { mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); vector<int> permutation(N); for (int i = 0; i < N; i++) permutation[i] = i; shuffle(permutation.begin(), permutation.end(), rng); for (int i = 0; i < N; i++) permutation[i] = i; for (int i = 1; i < N; i++) swap(permutation[i], permutation[uniform_int_distribution<int>(0, i)(rng)]);","title":"\u968f\u673a"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_6","text":"unsigned rnd() { static unsigned A = 1 << 16 | 3, B = 33333331, C = 2341; return C = A * C + B; }","title":"\u4f2a\u968f\u673a\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_7","text":"mt19937 mt(time(0)); auto rd = bind(uniform_real_distribution<double>(0, 1), mt); auto rd2 = bind(uniform_int_distribution<int>(1, 6), mt);","title":"\u771f\u5b9e\u968f\u673a\u6570"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_8","text":"42737, 46411, 50101, 52627, 54577, 191677, 194869, 210407, 221831, 241337, 578603, 625409, 713569, 788813, 862481, 2174729, 2326673, 2688877, 2779417, 3133583, 4489747, 6697841, 6791471, 6878533, 7883129, 9124553, 10415371, 11134633, 12214801, 15589333, 17148757, 17997457, 20278487, 27256133, 28678757, 38206199, 41337119, 47422547, 48543479, 52834961, 76993291, 85852231, 95217823, 108755593, 132972461, 171863609, 173629837, 176939899, 207808351, 227218703, 306112619, 311809637, 322711981, 330806107, 345593317, 345887293, 362838523, 373523729, 394207349, 409580177, 437359931, 483577261, 490845269, 512059357, 534387017, 698987533, 764016151, 906097321, 914067307, 954169327 1572869, 3145739, 6291469, 12582917, 25165843, 50331653 \uff08\u9002\u5408\u54c8\u5e0c\u7684\u7d20\u6570\uff09 from random import randint def is_prime(num, test_count): if num == 1: return False if test_count >= num: test_count = num - 1 for x in range(test_count): val = randint(1, num - 1) if pow(val, num-1, num) != 1: return False return True def generate_big_prime(n): found_prime = False while not found_prime: p = randint(2**(n-1), 2**n) if is_prime(p, 1000): return p","title":"\u968f\u673a\u7d20\u6570\u8868"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#ntt","text":"$p= r2^k+1$\uff0c\u539f\u6839\u662f $g$\u3002 3, 1, 1, 2; 5, 1, 2, 2; 17, 1, 4, 3; 97, 3, 5, 5; 193, 3, 6, 5; 257, 1, 8, 3; 7681, 15, 9, 17; 12289, 3, 12, 11; 40961, 5, 13, 3; 65537, 1, 16, 3; 786433, 3, 18, 10; 5767169, 11, 19, 3; 7340033, 7, 20, 3; 23068673, 11, 21, 3; 104857601, 25, 22, 3; 167772161, 5, 25, 3; 469762049, 7, 26, 3; 1004535809, 479, 21, 3; 2013265921, 15, 27, 31; 2281701377, 17, 27, 3; 3221225473, 3, 30, 5; 75161927681, 35, 31, 3; 77309411329, 9, 33, 7; 206158430209, 3, 36, 22; 2061584302081, 15, 37, 7; 2748779069441, 5, 39, 3; 6597069766657, 3, 41, 5; 39582418599937, 9, 42, 5; 79164837199873, 9, 43, 5; 263882790666241, 15, 44, 7; 1231453023109121, 35, 45, 3; 1337006139375617, 19, 46, 3; 3799912185593857, 27, 47, 5; 4222124650659841, 15, 48, 19; 7881299347898369, 7, 50, 6; 31525197391593473, 7, 52, 3; 180143985094819841, 5, 55, 6; 1945555039024054273, 27, 56, 5; 4179340454199820289, 29, 57, 3.","title":"NTT \u7d20\u6570\u8868"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#java","text":"","title":"Java"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#regex","text":"// Code which demonstrates the use of Java's regular expression libraries. // This is a solution for // // Loglan: a logical language // http://acm.uva.es/p/v1/134.html import java.util.*; import java.util.regex.*; public class LogLan { public static void main(String args[]) { String regex = BuildRegex(); Pattern pattern = Pattern.compile(regex); Scanner s = new Scanner(System.in); while (true) { // In this problem, each sentence consists of multiple lines, where the last // line is terminated by a period. The code below reads lines until // encountering a line whose final character is a '.'. Note the use of // // s.length() to get length of string // s.charAt() to extract characters from a Java string // s.trim() to remove whitespace from the beginning and end of Java string // // Other useful String manipulation methods include // // s.compareTo(t) < 0 if s < t, lexicographically // s.indexOf(\"apple\") returns index of first occurrence of \"apple\" in s // s.lastIndexOf(\"apple\") returns index of last occurrence of \"apple\" in s // s.replace(c,d) replaces occurrences of character c with d // s.startsWith(\"apple) returns (s.indexOf(\"apple\") == 0) // s.toLowerCase() / s.toUpperCase() returns a new lower/uppercased string // // Integer.parseInt(s) converts s to an integer (32-bit) // Long.parseLong(s) converts s to a long (64-bit) // Double.parseDouble(s) converts s to a double String sentence = \"\"; while (true) { sentence = (sentence + \" \" + s.nextLine()).trim(); if (sentence.equals(\"#\")) return; if (sentence.charAt(sentence.length() - 1) == '.') break; } // now, we remove the period, and match the regular expression String removed_period = sentence.substring(0, sentence.length() - 1).trim(); if (pattern.matcher(removed_period).find()) { System.out.println(\"Good\"); } else { System.out.println(\"Bad!\"); } } } }","title":"Regex"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#decimal-format","text":"// examples for printing floating point numbers import java.util.*; import java.io.*; import java.text.DecimalFormat; public class DecFormat { public static void main(String[] args) { DecimalFormat fmt; // round to at most 2 digits, leave of digits if not needed fmt = new DecimalFormat(\"#.##\"); System.out.println(fmt.format(12345.6789)); // produces 12345.68 System.out.println(fmt.format(12345.0)); // produces 12345 System.out.println(fmt.format(0.0)); // produces 0 System.out.println(fmt.format(0.01)); // produces .1 // round to precisely 2 digits fmt = new DecimalFormat(\"#.00\"); System.out.println(fmt.format(12345.6789)); // produces 12345.68 System.out.println(fmt.format(12345.0)); // produces 12345.00 System.out.println(fmt.format(0.0)); // produces .00 // round to precisely 2 digits, force leading zero fmt = new DecimalFormat(\"0.00\"); System.out.println(fmt.format(12345.6789)); // produces 12345.68 System.out.println(fmt.format(12345.0)); // produces 12345.00 System.out.println(fmt.format(0.0)); // produces 0.00 // round to precisely 2 digits, force leading zeros fmt = new DecimalFormat(\"000000000.00\"); System.out.println(fmt.format(12345.6789)); // produces 000012345.68 System.out.println(fmt.format(12345.0)); // produces 000012345.00 System.out.println(fmt.format(0.0)); // produces 000000000.00 // force leading '+' fmt = new DecimalFormat(\"+0;-0\"); System.out.println(fmt.format(12345.6789)); // produces +12346 System.out.println(fmt.format(-12345.6789)); // produces -12346 System.out.println(fmt.format(0)); // produces +0 // force leading positive/negative, pad to 2 fmt = new DecimalFormat(\"positive 00;negative 0\"); System.out.println(fmt.format(1)); // produces \"positive 01\" System.out.println(fmt.format(-1)); // produces \"negative 01\" // qoute special chars (#) fmt = new DecimalFormat(\"text with '#' followed by #\"); System.out.println(fmt.format(12.34)); // produces \"text with # followed by 12\" // always show \".\" fmt = new DecimalFormat(\"#.#\"); fmt.setDecimalSeparatorAlwaysShown(true); System.out.println(fmt.format(12.34)); // produces \"12.3\" System.out.println(fmt.format(12)); // produces \"12.\" System.out.println(fmt.format(0.34)); // produces \"0.3\" // different grouping distances: fmt = new DecimalFormat(\"#,####.###\"); System.out.println(fmt.format(123456789.123)); // produces \"1,2345,6789.123\" // scientific: fmt = new DecimalFormat(\"0.000E00\"); System.out.println(fmt.format(123456789.123)); // produces \"1.235E08\" System.out.println(fmt.format(-0.000234)); // produces \"-2.34E-04\" // using variable number of digits: fmt = new DecimalFormat(\"0\"); System.out.println(fmt.format(123.123)); // produces \"123\" fmt.setMinimumFractionDigits(8); System.out.println(fmt.format(123.123)); // produces \"123.12300000\" fmt.setMaximumFractionDigits(0); System.out.println(fmt.format(123.123)); // produces \"123\" // note: to pad with spaces, you need to do it yourself: // String out = fmt.format(...) // while (out.length() < targlength) out = \" \"+out; } }","title":"Decimal Format"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#sort","text":"import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Employee implements Comparable<Employee> { private int id; private String name; private int age; public Employee(int id, String name, int age) { this.id = id; this.name = name; this.age = age; } @Override public int compareTo(Employee o) { if (id > o.id) { return 1; } else if (id < o.id) { return -1; } return 0; } public static void main(String[] args) { List<Employee> list = new ArrayList<Employee>(); list.add(new Employee(2, \"Java\", 20)); list.add(new Employee(1, \"C\", 30)); list.add(new Employee(3, \"C#\", 10)); Collections.sort(list); } }","title":"Sort"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_9","text":"#include <sys/resource.h> void init_stack(){ const rlim_t kStackSize = 512 * 1024 * 1024; struct rlimit rl; int result; result = getrlimit(RLIMIT_STACK, &rl); if (result == 0) { if (rl.rlim_cur < kStackSize) { rl.rlim_cur = kStackSize; result = setrlimit(RLIMIT_STACK, &rl); if (result != 0) { fprintf(stderr, \"setrlimit returned result = %d\\n\", result); } } } }","title":"\u6269\u6808\uff08\u672c\u5730\u4f7f\u7528\uff09"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/6-%E6%9D%82%E9%A1%B9/#_10","text":"(int)v.size() 1LL << k \u9012\u5f52\u51fd\u6570\u7528\u5168\u5c40\u6216\u8005 static \u53d8\u91cf\u8981\u5c0f\u5fc3 \u9884\u5904\u7406\u7ec4\u5408\u6570\u6ce8\u610f\u4e0a\u9650 \u60f3\u6e05\u695a\u5230\u5e95\u662f\u8981 multiset \u8fd8\u662f set \u63d0\u4ea4\u4e4b\u524d\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u6d4b\u4e00\u4e0b\u8fb9\u754c \u6570\u636e\u7ed3\u6784\u6ce8\u610f\u6570\u7ec4\u5927\u5c0f \uff082\u500d\uff0c4\u500d\uff09 \u5b57\u7b26\u4e32\u6ce8\u610f\u5b57\u7b26\u96c6 \u5982\u679c\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86\u9ed8\u8ba4\u53c2\u6570\u7684\u8bdd\uff0c\u6ce8\u610f\u8c03\u7528\u65f6\u7684\u53c2\u6570\u4e2a\u6570\u3002 \u6ce8\u610f\u8981\u8bfb\u5b8c \u6784\u9020\u53c2\u6570\u65e0\u6cd5\u4f7f\u7528\u81ea\u5df1 \u6811\u94fe\u5256\u5206/dfs \u5e8f\uff0c\u521d\u59cb\u5316\u6216\u8005\u8be2\u95ee\u4e0d\u8981\u5fd8\u8bb0 idx, ridx \u6392\u5e8f\u65f6\u6ce8\u610f\u7ed3\u6784\u4f53\u7684\u6240\u6709\u5c5e\u6027\u662f\u4e0d\u662f\u8003\u8651\u4e86 \u4e0d\u8981\u628a while \u5199\u6210 if \u4e0d\u8981\u628a int \u5f00\u6210 char \u6e05\u96f6\u7684\u65f6\u5019\u5168\u90e8\u7528 0~n+1\u3002 \u6a21\u610f\u4e49\u4e0b\u4e0d\u8981\u7528\u9664\u6cd5 \u54c8\u5e0c\u4e0d\u8981\u81ea\u7136\u6ea2\u51fa \u6700\u77ed\u8def\u4e0d\u8981 SPFA\uff0c\u4e56\u4e56\u5199 Dijkstra \u4e0a\u53d6\u6574\u4ee5\u53ca GCD \u5c0f\u5fc3\u8d1f\u6570 mid \u7528 l + (r - l) / 2 \u53ef\u4ee5\u907f\u514d\u6ea2\u51fa\u548c\u8d1f\u6570\u7684\u95ee\u9898 \u5c0f\u5fc3\u6a21\u677f\u81ea\u5e26\u7684\u610f\u6599\u4e4b\u5916\u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 \u6c42\u6700\u4f18\u89e3\u65f6\u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0\u5f53\u524d\u6700\u4f18\u89e3 \u56fe\u8bba\u95ee\u9898\u4e00\u5b9a\u8981\u6ce8\u610f\u56fe\u4e0d\u8fde\u901a\u7684\u95ee\u9898 \u5904\u7406\u5f3a\u5236\u5728\u7ebf\u7684\u65f6\u5019 lastans \u8d1f\u6570\u4e5f\u8981\u8bb0\u5f97\u77eb\u6b63 \u4e0d\u8981\u89c9\u5f97\u7f16\u8bd1\u5668\u4ec0\u4e48\u90fd\u80fd\u4f18\u5316 \u5206\u5757\u4e00\u5b9a\u8981\u7279\u5224\u5728\u540c\u4e00\u5757\u4e2d\u7684\u60c5\u51b5","title":"\u5fc3\u6001\u5d29\u4e86"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/readme/","text":"\u5173\u4e8e\u6a21\u677f\u5e93 PDF \u4e0b\u8f7d \u7531 ECNU ~~\u73b0\u5f79~~ ~~\u534a\u9000\u5f79~~ \u9000\u5f79\u961f\u4f0d F0RE1GNERS \u7684\u961f\u5458\u7ef4\u62a4\uff0c\u961f\u4f0d wiki \u94fe\u63a5 \uff08 \u5907\u7528\u94fe\u63a5 \uff09\u3002 F0RE1GNERS \u4e8e 2019.04 \u7684 43rd ICPC World Finals \u540e\u9000\u5f79\u3002 WF \u7684 TRD \u4ec5\u4f9b\u7559\u5ff5\uff08\u5185\u5bb9\u7565\u6709\u5220\u51cf\uff09\u3002 F0RE1GNERS (IO%) \u5c06\u4f1a\u53c2\u52a0 2019 \u5e74\u7684\u82e5\u5e72\u573a\u533a\u57df\u8d5b\uff0c\u6709\u5e78\u4e0e\u5927\u5bb6\u518d\u5ea6\u76f8\u4f1a\u3002 \u4ee3\u7801\u7279\u6027 \u4f18\u5148\u4fdd\u8bc1\u4ee3\u7801\u7b80\u6d01\u548c\u53ef\u8bfb\u6027\uff0c\u5176\u6b21\u662f\u5e38\u6570 \u6570\u636e\u7ed3\u6784\u4f7f\u7528\u6307\u9488\uff08\u9664\u4e86\u8981\u5361\u7a7a\u95f4\u7684\u4e3b\u5e2d\u6811\uff09 \u4ee3\u7801\u5c3d\u91cf\u7528 namespace \u5c01\u88c5 \u8f7b\u5ea6\u538b\u884c\uff0c\u4e0d\u4f7f\u7528\u9017\u53f7\u538b\u884c \u4f7f\u7528 template \u6765\u590d\u7528\u4ee3\u7801 \u4ee3\u7801\u7b26\u5408 C++11 \u6807\u51c6\uff0c\u4e14\u81f3\u5c11\u9700\u8981 C++11 \u7cfb\u7edf\u76f8\u5173\u7684\u90e8\u5206\u53ea\u8003\u8651 *unix \u5173\u4e8e PDF \u4f7f\u7528 pandoc \u548c LaTeX \u751f\u6210 \u4ee3\u7801\u9ad8\u4eae\u4f7f\u7528 minted","title":"Readme"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/readme/#_1","text":"PDF \u4e0b\u8f7d \u7531 ECNU ~~\u73b0\u5f79~~ ~~\u534a\u9000\u5f79~~ \u9000\u5f79\u961f\u4f0d F0RE1GNERS \u7684\u961f\u5458\u7ef4\u62a4\uff0c\u961f\u4f0d wiki \u94fe\u63a5 \uff08 \u5907\u7528\u94fe\u63a5 \uff09\u3002 F0RE1GNERS \u4e8e 2019.04 \u7684 43rd ICPC World Finals \u540e\u9000\u5f79\u3002 WF \u7684 TRD \u4ec5\u4f9b\u7559\u5ff5\uff08\u5185\u5bb9\u7565\u6709\u5220\u51cf\uff09\u3002 F0RE1GNERS (IO%) \u5c06\u4f1a\u53c2\u52a0 2019 \u5e74\u7684\u82e5\u5e72\u573a\u533a\u57df\u8d5b\uff0c\u6709\u5e78\u4e0e\u5927\u5bb6\u518d\u5ea6\u76f8\u4f1a\u3002","title":"\u5173\u4e8e\u6a21\u677f\u5e93"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/readme/#_2","text":"\u4f18\u5148\u4fdd\u8bc1\u4ee3\u7801\u7b80\u6d01\u548c\u53ef\u8bfb\u6027\uff0c\u5176\u6b21\u662f\u5e38\u6570 \u6570\u636e\u7ed3\u6784\u4f7f\u7528\u6307\u9488\uff08\u9664\u4e86\u8981\u5361\u7a7a\u95f4\u7684\u4e3b\u5e2d\u6811\uff09 \u4ee3\u7801\u5c3d\u91cf\u7528 namespace \u5c01\u88c5 \u8f7b\u5ea6\u538b\u884c\uff0c\u4e0d\u4f7f\u7528\u9017\u53f7\u538b\u884c \u4f7f\u7528 template \u6765\u590d\u7528\u4ee3\u7801 \u4ee3\u7801\u7b26\u5408 C++11 \u6807\u51c6\uff0c\u4e14\u81f3\u5c11\u9700\u8981 C++11 \u7cfb\u7edf\u76f8\u5173\u7684\u90e8\u5206\u53ea\u8003\u8651 *unix","title":"\u4ee3\u7801\u7279\u6027"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/readme/#pdf","text":"\u4f7f\u7528 pandoc \u548c LaTeX \u751f\u6210 \u4ee3\u7801\u9ad8\u4eae\u4f7f\u7528 minted","title":"\u5173\u4e8e PDF"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/4Python/pandoc/readme/","text":"Pandoc \u751f\u6210 PDF \u6d41\u7a0b\uff08\u4ee5 Linux \u4e3a\u4f8b\uff09\uff1a \u786e\u4fdd algo.latex \u6587\u4ef6\u7f6e\u4e8e ~/.pandoc/templates/ \u4e0b \u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c sh pandoc/gen.sh \u6ce8\uff1a \u5b57\u4f53\u9009\u62e9\u653e\u5728\u4e86 gen.sh \u4e2d\uff0c\u8bf7\u6839\u636e\u9700\u8981\u81ea\u884c\u66ff\u6362 \u5c01\u9762\u653e\u5728\u4e86 algo.latex \u4e2d\uff0c\u53ef\u81ea\u884c\u4fee\u6539 \u9700\u8981\u5b89\u88c5 pandoc , latex , python \u76f8\u5173\u4f9d\u8d56","title":"Readme"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/5/","text":"Template ACM\u6a21\u677f \u7ea0\u9519:623418780@qq.com","title":"Template"},{"location":"thu/d2/d2s/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ACM_template/5/#template","text":"ACM\u6a21\u677f \u7ea0\u9519:623418780@qq.com","title":"Template"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/rzd/","text":"\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba \u8bfe\u7a0b\u7b14\u8bb0 \u7b2c\u516d\u5468 \u8bfe\u7a0b\u8d44\u6e90 Deep Learning An MIT Press book \u4ee3\u7801 FCNN","title":"Rzd"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/rzd/#_1","text":"\u7b2c\u516d\u5468","title":"\u8bfe\u7a0b\u7b14\u8bb0"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/rzd/#_2","text":"Deep Learning An MIT Press book","title":"\u8bfe\u7a0b\u8d44\u6e90"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/rzd/#_3","text":"FCNN","title":"\u4ee3\u7801"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/","text":"\u7b2c6\u5468\u8bfe\u7a0b \u5377\u79ef\u548c\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc \u5168\u8fde\u63a5\u7f51\u7edc \u5377\u79ef\u7f51\u7edc \u4e60\u9898 \u6c60\u5316 \u4e00\u79cd\u964d\u7ef4\u7684\u65b9\u6cd5 \u5e73\u5747\u6c60\u5316\u548c\u6700\u5927\u5316\u6c60\u5316 LetNet yang lecun\u53d1\u660e\u7684 Impact: LeNet was one of the first CNN architectures to show the power of deep learning, particularly in computer vision tasks. It laid the foundation for more advanced architectures like AlexNet, VGG, and ResNet, which have achieved remarkable success in image classification, object detection, and other areas of deep learning. VGG-16 \u4e3a\u4ec0\u4e48\u4f7f\u752864\uff0c128\u8fd9\u6837\u7684\u6570\u5b57 \u548c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6709\u5173\uff0c\u4e8c\u8fdb\u5236\u4e3a\u57fa\u7840 in VGG-16,the picture is 224x224x3,but the input of the network is 224x224x64,why So, in short, the 224x224x64 is not the input image size, but the output from the first convolutional layer after processing the initial input image of 224x224x3. The 64 represents the number of filters applied in the first convolution layer, which generate 64 different feature maps. So, in short, the 224x224x64 is not the input image size, but the output from the first convolutional layer after processing the initial input image of 224x224x3. The 64 represents the number of filters applied in the first convolution layer, which generate 64 different feature maps. \u795e\u7ecf\u7f51\u7edc\u9047\u5230\u7684\u4e24\u5927\u95ee\u9898 \u68af\u5ea6\u6d88\u5931\u95ee\u9898 GOOGLENET GoogLeNet \u7684L\u5927\u5199\uff0c\u7528\u6765\u81f4\u656cLeNet \u5f15\u5165\u4e86\u68af\u5ea6\u6d88\u5931\u5c42 ResNet \u57281000\u5c42\u4ee5\u5185\u90fd\u6ca1\u6709\u68af\u5ea6\u6d88\u5931\u95ee\u9898 \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u6fc0\u6d3b\u51fd\u6570\uff0c\u68af\u5ea6\u5927\u4e8e1\uff1f \u68af\u5ea6\u5927\u4e8e1\u5c31\u662f\u6307\u6570\u589e\u957f\uff0c\u4f1a\u7206\u70b8 \u8fc7\u62df\u5408\u95ee\u9898 Dropout Dropout is a regularization technique used in neural networks to prevent overfitting. It works by randomly setting a fraction of the input units to zero at each update during training time, which helps to break the co-adaptation of neurons. This means that the model cannot rely on any specific neuron, and must learn more robust features that are useful in conjunction with many different random subsets of the other neurons. \u671f\u6743 \u671f\u6743 \u671f\u6743\u662f\u4e00\u79cd\u91d1\u878d\u884d\u751f\u5de5\u5177\uff0c\u8d4b\u4e88\u6301\u6709\u8005\u5728\u7279\u5b9a\u65f6\u95f4\u4ee5\u7279\u5b9a\u4ef7\u683c\u4e70\u5165\u6216\u5356\u51fa\u6807\u7684\u8d44\u4ea7\u7684\u6743\u5229\uff0c\u4f46\u6ca1\u6709\u4e49\u52a1\u3002\u671f\u6743\u5e7f\u6cdb\u5e94\u7528\u4e8e\u98ce\u9669\u7ba1\u7406\u548c\u6295\u8d44\u7b56\u7565\u4e2d\u3002 \u671f\u6743\u7684\u4e3b\u8981\u7c7b\u578b\u5305\u62ec\u770b\u6da8\u671f\u6743\uff08Call Option\uff09\u548c\u770b\u8dcc\u671f\u6743\uff08Put Option\uff09\u3002\u770b\u6da8\u671f\u6743\u5141\u8bb8\u6301\u6709\u8005\u5728\u5230\u671f\u65e5\u6216\u4e4b\u524d\u4ee5\u6267\u884c\u4ef7\u683c\u8d2d\u4e70\u6807\u7684\u8d44\u4ea7\uff0c\u800c\u770b\u8dcc\u671f\u6743\u5219\u5141\u8bb8\u6301\u6709\u8005\u4ee5\u6267\u884c\u4ef7\u683c\u51fa\u552e\u6807\u7684\u8d44\u4ea7\u3002 \u516c\u5f0f \u671f\u6743\u7684\u4ef7\u503c\u901a\u5e38\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c\u3002\u5185\u5728\u4ef7\u503c\u662f\u6307\u671f\u6743\u5728\u5f53\u524d\u5e02\u573a\u6761\u4ef6\u4e0b\u7684\u5b9e\u9645\u4ef7\u503c\uff0c\u800c\u65f6\u95f4\u4ef7\u503c\u5219\u53cd\u6620\u4e86\u671f\u6743\u5230\u671f\u524d\u53ef\u80fd\u83b7\u5f97\u7684\u989d\u5916\u6536\u76ca\u3002 \u671f\u6743\u5b9a\u4ef7\u6a21\u578b\uff0c\u5982Black-Scholes\u6a21\u578b\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u503c \u7684\u65b9\u6cd5\uff0c\u8003\u8651\u4e86\u6807\u7684\u8d44\u4ea7\u4ef7\u683c\u3001\u6267\u884c\u4ef7\u683c\u3001\u65e0\u98ce\u9669\u5229\u7387\u3001\u6ce2\u52a8\u7387\u548c\u5230\u671f\u65f6\u95f4\u7b49\u56e0\u7d20\u3002 \u671f\u6743\u7684\u6570\u5b66\u516c\u5f0f\u5982\u4e0b\uff1a - \u5185\u5728\u4ef7\u503c\uff08Call Option\uff09 = max(0, S - K) - \u5185\u5728\u4ef7\u503c\uff08Put Option\uff09 = max(0, K - S) - \u65f6\u95f4\u4ef7\u503c = \u671f\u6743\u4ef7\u683c - \u5185\u5728\u4ef7\u503c","title":"Class06"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_1","text":"","title":"\u5168\u8fde\u63a5\u7f51\u7edc"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_2","text":"","title":"\u5377\u79ef\u7f51\u7edc"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_3","text":"","title":"\u4e60\u9898"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_4","text":"\u4e00\u79cd\u964d\u7ef4\u7684\u65b9\u6cd5 \u5e73\u5747\u6c60\u5316\u548c\u6700\u5927\u5316\u6c60\u5316","title":"\u6c60\u5316"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#letnet","text":"yang lecun\u53d1\u660e\u7684 Impact: LeNet was one of the first CNN architectures to show the power of deep learning, particularly in computer vision tasks. It laid the foundation for more advanced architectures like AlexNet, VGG, and ResNet, which have achieved remarkable success in image classification, object detection, and other areas of deep learning.","title":"LetNet"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#vgg-16","text":"\u4e3a\u4ec0\u4e48\u4f7f\u752864\uff0c128\u8fd9\u6837\u7684\u6570\u5b57 \u548c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6709\u5173\uff0c\u4e8c\u8fdb\u5236\u4e3a\u57fa\u7840 in VGG-16,the picture is 224x224x3,but the input of the network is 224x224x64,why So, in short, the 224x224x64 is not the input image size, but the output from the first convolutional layer after processing the initial input image of 224x224x3. The 64 represents the number of filters applied in the first convolution layer, which generate 64 different feature maps. So, in short, the 224x224x64 is not the input image size, but the output from the first convolutional layer after processing the initial input image of 224x224x3. The 64 represents the number of filters applied in the first convolution layer, which generate 64 different feature maps.","title":"VGG-16"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_5","text":"","title":"\u795e\u7ecf\u7f51\u7edc\u9047\u5230\u7684\u4e24\u5927\u95ee\u9898"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_6","text":"","title":"\u68af\u5ea6\u6d88\u5931\u95ee\u9898"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#googlenet","text":"GoogLeNet \u7684L\u5927\u5199\uff0c\u7528\u6765\u81f4\u656cLeNet \u5f15\u5165\u4e86\u68af\u5ea6\u6d88\u5931\u5c42","title":"GOOGLENET"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#resnet","text":"\u57281000\u5c42\u4ee5\u5185\u90fd\u6ca1\u6709\u68af\u5ea6\u6d88\u5931\u95ee\u9898 \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u6fc0\u6d3b\u51fd\u6570\uff0c\u68af\u5ea6\u5927\u4e8e1\uff1f \u68af\u5ea6\u5927\u4e8e1\u5c31\u662f\u6307\u6570\u589e\u957f\uff0c\u4f1a\u7206\u70b8","title":"ResNet"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_7","text":"","title":"\u8fc7\u62df\u5408\u95ee\u9898"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#dropout","text":"Dropout is a regularization technique used in neural networks to prevent overfitting. It works by randomly setting a fraction of the input units to zero at each update during training time, which helps to break the co-adaptation of neurons. This means that the model cannot rely on any specific neuron, and must learn more robust features that are useful in conjunction with many different random subsets of the other neurons. \u671f\u6743","title":"Dropout"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/class/class06/#_8","text":"\u671f\u6743\u662f\u4e00\u79cd\u91d1\u878d\u884d\u751f\u5de5\u5177\uff0c\u8d4b\u4e88\u6301\u6709\u8005\u5728\u7279\u5b9a\u65f6\u95f4\u4ee5\u7279\u5b9a\u4ef7\u683c\u4e70\u5165\u6216\u5356\u51fa\u6807\u7684\u8d44\u4ea7\u7684\u6743\u5229\uff0c\u4f46\u6ca1\u6709\u4e49\u52a1\u3002\u671f\u6743\u5e7f\u6cdb\u5e94\u7528\u4e8e\u98ce\u9669\u7ba1\u7406\u548c\u6295\u8d44\u7b56\u7565\u4e2d\u3002 \u671f\u6743\u7684\u4e3b\u8981\u7c7b\u578b\u5305\u62ec\u770b\u6da8\u671f\u6743\uff08Call Option\uff09\u548c\u770b\u8dcc\u671f\u6743\uff08Put Option\uff09\u3002\u770b\u6da8\u671f\u6743\u5141\u8bb8\u6301\u6709\u8005\u5728\u5230\u671f\u65e5\u6216\u4e4b\u524d\u4ee5\u6267\u884c\u4ef7\u683c\u8d2d\u4e70\u6807\u7684\u8d44\u4ea7\uff0c\u800c\u770b\u8dcc\u671f\u6743\u5219\u5141\u8bb8\u6301\u6709\u8005\u4ee5\u6267\u884c\u4ef7\u683c\u51fa\u552e\u6807\u7684\u8d44\u4ea7\u3002 \u516c\u5f0f \u671f\u6743\u7684\u4ef7\u503c\u901a\u5e38\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c\u3002\u5185\u5728\u4ef7\u503c\u662f\u6307\u671f\u6743\u5728\u5f53\u524d\u5e02\u573a\u6761\u4ef6\u4e0b\u7684\u5b9e\u9645\u4ef7\u503c\uff0c\u800c\u65f6\u95f4\u4ef7\u503c\u5219\u53cd\u6620\u4e86\u671f\u6743\u5230\u671f\u524d\u53ef\u80fd\u83b7\u5f97\u7684\u989d\u5916\u6536\u76ca\u3002 \u671f\u6743\u5b9a\u4ef7\u6a21\u578b\uff0c\u5982Black-Scholes\u6a21\u578b\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u503c \u7684\u65b9\u6cd5\uff0c\u8003\u8651\u4e86\u6807\u7684\u8d44\u4ea7\u4ef7\u683c\u3001\u6267\u884c\u4ef7\u683c\u3001\u65e0\u98ce\u9669\u5229\u7387\u3001\u6ce2\u52a8\u7387\u548c\u5230\u671f\u65f6\u95f4\u7b49\u56e0\u7d20\u3002 \u671f\u6743\u7684\u6570\u5b66\u516c\u5f0f\u5982\u4e0b\uff1a - \u5185\u5728\u4ef7\u503c\uff08Call Option\uff09 = max(0, S - K) - \u5185\u5728\u4ef7\u503c\uff08Put Option\uff09 = max(0, K - S) - \u65f6\u95f4\u4ef7\u503c = \u671f\u6743\u4ef7\u683c - \u5185\u5728\u4ef7\u503c","title":"\u671f\u6743"},{"location":"thu/d2/d2x/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/code/hw1/%E6%9D%9C%E5%9B%BD%E8%B1%AA-2018011346/readme/","text":"\u5c06\u8bed\u6599\u5e93\u4e2d\u7684sina_news_gbk\u6587\u4ef6\u5939\u653e\u5728data\u6587\u4ef6\u5939\u7684\u540c\u7ea7\u76ee\u5f55 \u8fd0\u884ctrain.py,\u5c06\u8fdb\u884c\u6570\u636e\u6e05\u6d17\u53ca\u62bd\u53d6\uff0c\u751f\u62101_word.txt\u548c2_word.txt\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e3a\u4e8c\u5143\u6a21\u578b\u63d0\u4f9b\u8bed\u6599 \u8fd0\u884ctest.py,\u8fdb\u884c\u62fc\u97f3\u8bc6\u522b python3 test.py < test/std_input.txt > test/out.txt","title":"Readme"},{"location":"thu/d2/d2x/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/szlj/","text":"\u6570\u5b57\u903b\u8f91\u7535\u8def","title":"Szlj"},{"location":"thu/d2/d2x/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/csapp/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u7cfb\u7edf\u7ed3\u6784 textbooks","title":"Csapp"},{"location":"thu/d2/d2x/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/res/","text":"\u5b58\u653e\u5b66\u4e60\u8d44\u6e90","title":"Res"},{"location":"thu/d3/d3/","text":"\u5927\u4e09 \u5927\u4e09\u4e0a\u8bfe\u7a0b \u5927\u4e09\u4e0b\u8bfe\u7a0b \u5927\u4e09\u5c0f\u5b66\u671f \u6df1\u5ea6\u5b66\u4e60 \u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60 \u6570\u503c\u5206\u6790","title":"\u5927\u4e09"},{"location":"thu/d3/d3s/d3s/","text":"\u5927\u4e09\u4e0a","title":"D3s"},{"location":"thu/d3/d3s/cg/cg/","text":"\u56fe\u5f62\u5b66","title":"Cg"},{"location":"thu/d3/d3s/cg/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/cp/cp/","text":"\u7f16\u8bd1\u539f\u7406 \u4e0a\u8bfe \u54c8\u5de5\u5927 \u57fa\u7840 \u7f16\u8bd1\u5668\u4e0e\u89e3\u91ca\u5668\u7684\u533a\u522b \u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b \u7f16\u8bd1\u5668\u7ed3\u6784\u56fe \u8bed\u8a00\u5904\u7406\u7cfb\u7edf\u7b80\u4ecb \u8bcd\u6cd5\u5206\u6790 \u6b63\u5219\u8868\u8fbe\u5f0f\u4e0eToken\u5b9a\u4e49 \u6709\u9650\u81ea\u52a8\u673a\uff08NFA / DFA\uff09 NFA\u8f6cDFA\u7b97\u6cd5 \u624b\u5199\u8bcd\u6cd5\u5206\u6790\u5668\uff08\u4ee3\u7801\u793a\u4f8b\uff09 Lex/Flex\u5de5\u5177\u4f7f\u7528 \u5b9e\u9a8c\u62a5\u544a\uff1a\u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff08CFG\uff09 \u63a8\u5bfc\u3001\u6587\u6cd5\u6811\u3001FIRST & FOLLOW\u96c6\u5408 LL(1)\u5206\u6790\u6cd5 LR(0), SLR, LALR, CLR\u5206\u6790\u65b9\u6cd5 yacc/bison\u5de5\u5177\u4f7f\u7528 \u5b9e\u9a8c\u62a5\u544a\uff1a\u8bed\u6cd5\u5206\u6790 \u8bed\u4e49\u5206\u6790 \u62bd\u8c61\u8bed\u6cd5\u6811\u6784\u5efa \u7c7b\u578b\u68c0\u67e5\u4e0e\u7c7b\u578b\u7cfb\u7edf \u7b26\u53f7\u8868\u7ba1\u7406 \u4f5c\u7528\u57df\u4e0e\u7ed1\u5b9a\u89c4\u5219 \u5b9e\u9a8c\u62a5\u544a\uff1a\u8bed\u4e49\u5206\u6790 \u4e2d\u95f4\u4ee3\u7801\u751f\u6210 \u4e09\u5730\u5740\u7801\uff08TAC\uff09 \u63a7\u5236\u6d41\u56fe\uff08CFG\uff09 \u4e2d\u95f4\u8868\u793a(IR)\uff1a\u56db\u5143\u5f0f\u3001\u9759\u6001\u5355\u8d4b\u503cSSA\u7b49 \u5b9e\u9a8c\u62a5\u544a\uff1a\u4e2d\u95f4\u4ee3\u7801\u751f\u6210 \u4ee3\u7801\u4f18\u5316 \u57fa\u672c\u5757\u4e0eDAG\u8868\u793a\u6cd5 \u5c40\u90e8\u4f18\u5316\uff08\u5e38\u91cf\u5408\u5e76\u3001\u6b7b\u4ee3\u7801\u5220\u9664\uff09 \u5168\u5c40\u4f18\u5316\uff08\u5faa\u73af\u4e0d\u53d8\u4ee3\u7801\u5916\u63d0\u7b49\uff09 \u6570\u636e\u6d41\u5206\u6790\u57fa\u7840 \u5b9e\u9a8c\u62a5\u544a\uff1a\u4ee3\u7801\u4f18\u5316 \u76ee\u6807\u4ee3\u7801\u751f\u6210 \u6307\u4ee4\u9009\u62e9\u4e0e\u673a\u5668\u6a21\u578b \u5bc4\u5b58\u5668\u5206\u914d\u4e0e\u56fe\u7740\u8272\u7b97\u6cd5 \u6c47\u7f16\u4ee3\u7801\u751f\u6210\u793a\u4f8b \u5b9e\u9a8c\u62a5\u544a\uff1a\u76ee\u6807\u4ee3\u7801\u751f\u6210 \u8fd0\u884c\u65f6\u7cfb\u7edf \u8fd0\u884c\u65f6\u5185\u5b58\u7ed3\u6784\uff1a\u6808\u3001\u5806\u3001\u6570\u636e\u533a \u51fd\u6570\u8c03\u7528\u4e0e\u8c03\u7528\u7ea6\u5b9a \u53c2\u6570\u4f20\u9012\u65b9\u5f0f \u5783\u573e\u56de\u6536\uff08GC\uff09\u673a\u5236\u57fa\u7840 \u52a8\u6001\u94fe\u63a5\u4e0e\u52a0\u8f7d \u7f16\u8bd1\u5668\u9879\u76ee\u5b9e\u8df5 \u9879\u76ee\u603b\u4f53\u7ed3\u6784\u8bf4\u660e \u8bcd\u6cd5\u5206\u6790\u6a21\u5757 \u8bed\u6cd5\u5206\u6790\u6a21\u5757 AST\u6784\u5efa\u4e0e\u904d\u5386 IR\u751f\u6210\u4e0e\u4f18\u5316\u6a21\u5757 \u6c47\u7f16/\u76ee\u6807\u4ee3\u7801\u751f\u6210\u6a21\u5757 \u9879\u76ee\u6253\u5305\u4e0e\u6d4b\u8bd5 \u8865\u5145\u4e0e\u6269\u5c55 \u7f16\u8bd1\u539f\u7406\u7ecf\u5178\u4e66\u7c4d\u63a8\u8350 \u5e38\u89c1\u9762\u8bd5\u9898\u6574\u7406 \u4f18\u8d28\u516c\u5f00\u8bfe\u4e0e\u5b66\u4e60\u8d44\u6e90 \u7f16\u8bd1\u5668\u5b66\u4e60\u8def\u7ebf\u56fe","title":"Cp"},{"location":"thu/d3/d3s/cp/cp/#_1","text":"\u7f16\u8bd1\u5668\u4e0e\u89e3\u91ca\u5668\u7684\u533a\u522b \u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b \u7f16\u8bd1\u5668\u7ed3\u6784\u56fe \u8bed\u8a00\u5904\u7406\u7cfb\u7edf\u7b80\u4ecb","title":"\u57fa\u7840"},{"location":"thu/d3/d3s/cp/cp/#_2","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0eToken\u5b9a\u4e49 \u6709\u9650\u81ea\u52a8\u673a\uff08NFA / DFA\uff09 NFA\u8f6cDFA\u7b97\u6cd5 \u624b\u5199\u8bcd\u6cd5\u5206\u6790\u5668\uff08\u4ee3\u7801\u793a\u4f8b\uff09 Lex/Flex\u5de5\u5177\u4f7f\u7528 \u5b9e\u9a8c\u62a5\u544a\uff1a\u8bcd\u6cd5\u5206\u6790","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"thu/d3/d3s/cp/cp/#_3","text":"\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff08CFG\uff09 \u63a8\u5bfc\u3001\u6587\u6cd5\u6811\u3001FIRST & FOLLOW\u96c6\u5408 LL(1)\u5206\u6790\u6cd5 LR(0), SLR, LALR, CLR\u5206\u6790\u65b9\u6cd5 yacc/bison\u5de5\u5177\u4f7f\u7528 \u5b9e\u9a8c\u62a5\u544a\uff1a\u8bed\u6cd5\u5206\u6790","title":"\u8bed\u6cd5\u5206\u6790"},{"location":"thu/d3/d3s/cp/cp/#_4","text":"","title":"\u8bed\u4e49\u5206\u6790"},{"location":"thu/d3/d3s/cp/cp/#_5","text":"","title":"\u62bd\u8c61\u8bed\u6cd5\u6811\u6784\u5efa"},{"location":"thu/d3/d3s/cp/cp/#_6","text":"","title":"\u7c7b\u578b\u68c0\u67e5\u4e0e\u7c7b\u578b\u7cfb\u7edf"},{"location":"thu/d3/d3s/cp/cp/#_7","text":"\u4f5c\u7528\u57df\u4e0e\u7ed1\u5b9a\u89c4\u5219 \u5b9e\u9a8c\u62a5\u544a\uff1a\u8bed\u4e49\u5206\u6790","title":"\u7b26\u53f7\u8868\u7ba1\u7406"},{"location":"thu/d3/d3s/cp/cp/#_8","text":"\u4e09\u5730\u5740\u7801\uff08TAC\uff09 \u63a7\u5236\u6d41\u56fe\uff08CFG\uff09 \u4e2d\u95f4\u8868\u793a(IR)\uff1a\u56db\u5143\u5f0f\u3001\u9759\u6001\u5355\u8d4b\u503cSSA\u7b49 \u5b9e\u9a8c\u62a5\u544a\uff1a\u4e2d\u95f4\u4ee3\u7801\u751f\u6210","title":"\u4e2d\u95f4\u4ee3\u7801\u751f\u6210"},{"location":"thu/d3/d3s/cp/cp/#_9","text":"\u57fa\u672c\u5757\u4e0eDAG\u8868\u793a\u6cd5 \u5c40\u90e8\u4f18\u5316\uff08\u5e38\u91cf\u5408\u5e76\u3001\u6b7b\u4ee3\u7801\u5220\u9664\uff09 \u5168\u5c40\u4f18\u5316\uff08\u5faa\u73af\u4e0d\u53d8\u4ee3\u7801\u5916\u63d0\u7b49\uff09 \u6570\u636e\u6d41\u5206\u6790\u57fa\u7840 \u5b9e\u9a8c\u62a5\u544a\uff1a\u4ee3\u7801\u4f18\u5316","title":"\u4ee3\u7801\u4f18\u5316"},{"location":"thu/d3/d3s/cp/cp/#_10","text":"\u6307\u4ee4\u9009\u62e9\u4e0e\u673a\u5668\u6a21\u578b \u5bc4\u5b58\u5668\u5206\u914d\u4e0e\u56fe\u7740\u8272\u7b97\u6cd5 \u6c47\u7f16\u4ee3\u7801\u751f\u6210\u793a\u4f8b \u5b9e\u9a8c\u62a5\u544a\uff1a\u76ee\u6807\u4ee3\u7801\u751f\u6210","title":"\u76ee\u6807\u4ee3\u7801\u751f\u6210"},{"location":"thu/d3/d3s/cp/cp/#_11","text":"\u8fd0\u884c\u65f6\u5185\u5b58\u7ed3\u6784\uff1a\u6808\u3001\u5806\u3001\u6570\u636e\u533a \u51fd\u6570\u8c03\u7528\u4e0e\u8c03\u7528\u7ea6\u5b9a \u53c2\u6570\u4f20\u9012\u65b9\u5f0f \u5783\u573e\u56de\u6536\uff08GC\uff09\u673a\u5236\u57fa\u7840 \u52a8\u6001\u94fe\u63a5\u4e0e\u52a0\u8f7d","title":"\u8fd0\u884c\u65f6\u7cfb\u7edf"},{"location":"thu/d3/d3s/cp/cp/#_12","text":"\u9879\u76ee\u603b\u4f53\u7ed3\u6784\u8bf4\u660e \u8bcd\u6cd5\u5206\u6790\u6a21\u5757 \u8bed\u6cd5\u5206\u6790\u6a21\u5757 AST\u6784\u5efa\u4e0e\u904d\u5386 IR\u751f\u6210\u4e0e\u4f18\u5316\u6a21\u5757 \u6c47\u7f16/\u76ee\u6807\u4ee3\u7801\u751f\u6210\u6a21\u5757 \u9879\u76ee\u6253\u5305\u4e0e\u6d4b\u8bd5","title":"\u7f16\u8bd1\u5668\u9879\u76ee\u5b9e\u8df5"},{"location":"thu/d3/d3s/cp/cp/#_13","text":"\u7f16\u8bd1\u539f\u7406\u7ecf\u5178\u4e66\u7c4d\u63a8\u8350 \u5e38\u89c1\u9762\u8bd5\u9898\u6574\u7406 \u4f18\u8d28\u516c\u5f00\u8bfe\u4e0e\u5b66\u4e60\u8d44\u6e90 \u7f16\u8bd1\u5668\u5b66\u4e60\u8def\u7ebf\u56fe","title":"\u8865\u5145\u4e0e\u6269\u5c55"},{"location":"thu/d3/d3s/cp/class/class01/","text":"\u8fd9\u95e8\u8bfe\u7adf\u7136\u662f\u82f1\u6587\u6388\u8bfe\u7684 https://www.cs.tsinghua.edu.cn/info/1107/6209.htm he was a professer at Purdue University before coming to Tsinghua. \u9884\u5907\u77e5\u8bc6 \u6587\u6cd5/\u6b63\u89c4\u5f0f/\u6709\u9650\u81ea\u52a8\u673a \u5e42\u8fd0\u7b97 \u6b63\u89c4\u8bed\u8a00 \u6709\u9650\u81ea\u52a8\u673a\uff08\u5305\u62ec\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\uff08DFA\uff09\u548c\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\uff08NFA\uff09\uff09\u4e0e\u6b63\u89c4\u8868\u8fbe\u5f0f\u5728\u8ba1\u7b97\u80fd\u529b\u4e0a\u5b8c\u5168\u7b49\u4ef7\u2014\u2014 \u5373\u4efb\u4f55\u7531\u6b63\u89c4\u8868\u8fbe\u5f0f\u63cf\u8ff0\u7684\u8bed\u8a00\uff0c\u90fd\u80fd\u88ab\u67d0\u53f0\u6709\u9650\u81ea\u52a8\u673a\u8bc6\u522b\uff1b\u53cd\u4e4b\uff0c\u4efb\u4f55\u80fd\u88ab\u6709\u9650\u81ea\u52a8\u673a\u8bc6\u522b\u7684\u8bed\u8a00\uff0c\u4e5f\u90fd\u53ef\u4ee5\u7528\u6b63\u89c4\u8868\u8fbe\u5f0f\u63cf\u8ff0\u3002 \u6b63\u89c4\u8bed\u8a00\u662f\u53ef\u4ee5\u901a\u8fc7\u6b63\u89c4\u8868\u8fbe\u5f0f\u5b9a\u4e49\uff0c\u6216\u80fd\u88ab\u6709\u9650\u81ea\u52a8\u673a\u8bc6\u522b\u7684\u8bed\u8a00 \u6709\u9650\u81ea\u52a8\u673a \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a \u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a \u6269\u5c55\u7684\u8f6c\u79fb\u51fd\u6570 \u6709\u9650\u81ea\u52a8\u673a\u7684\u786e\u5b9a\u5316","title":"Class01"},{"location":"thu/d3/d3s/cp/class/class01/#_1","text":"\u6587\u6cd5/\u6b63\u89c4\u5f0f/\u6709\u9650\u81ea\u52a8\u673a \u5e42\u8fd0\u7b97 \u6b63\u89c4\u8bed\u8a00 \u6709\u9650\u81ea\u52a8\u673a\uff08\u5305\u62ec\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\uff08DFA\uff09\u548c\u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a\uff08NFA\uff09\uff09\u4e0e\u6b63\u89c4\u8868\u8fbe\u5f0f\u5728\u8ba1\u7b97\u80fd\u529b\u4e0a\u5b8c\u5168\u7b49\u4ef7\u2014\u2014 \u5373\u4efb\u4f55\u7531\u6b63\u89c4\u8868\u8fbe\u5f0f\u63cf\u8ff0\u7684\u8bed\u8a00\uff0c\u90fd\u80fd\u88ab\u67d0\u53f0\u6709\u9650\u81ea\u52a8\u673a\u8bc6\u522b\uff1b\u53cd\u4e4b\uff0c\u4efb\u4f55\u80fd\u88ab\u6709\u9650\u81ea\u52a8\u673a\u8bc6\u522b\u7684\u8bed\u8a00\uff0c\u4e5f\u90fd\u53ef\u4ee5\u7528\u6b63\u89c4\u8868\u8fbe\u5f0f\u63cf\u8ff0\u3002 \u6b63\u89c4\u8bed\u8a00\u662f\u53ef\u4ee5\u901a\u8fc7\u6b63\u89c4\u8868\u8fbe\u5f0f\u5b9a\u4e49\uff0c\u6216\u80fd\u88ab\u6709\u9650\u81ea\u52a8\u673a\u8bc6\u522b\u7684\u8bed\u8a00 \u6709\u9650\u81ea\u52a8\u673a \u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a \u975e\u786e\u5b9a\u6709\u9650\u81ea\u52a8\u673a \u6269\u5c55\u7684\u8f6c\u79fb\u51fd\u6570 \u6709\u9650\u81ea\u52a8\u673a\u7684\u786e\u5b9a\u5316","title":"\u9884\u5907\u77e5\u8bc6"},{"location":"thu/d3/d3s/cp/class/class02/","text":"","title":"Class02"},{"location":"thu/d3/d3s/cp/class/class06/","text":"\u81ea\u5e95\u5411\u4e0a\uff08Bottom-Up\uff09\u8bed\u6cd5\u5206\u6790","title":"Class06"},{"location":"thu/d3/d3s/cp/hagongda/hgd/","text":"\u7f16\u8bd1\u57fa\u7840 \u8bcd\u6cd5 \u6587\u6cd5 \u6587\u6cd5\u7684\u5206\u7c7b CFG\u5206\u6790\u6811 \u8bcd\u6cd5\u5206\u6790 \u6b63\u5219\u8868\u8fbe\u5f0f \u6709\u7a77\u81ea\u52a8\u673a DFA \u8bcd\u6cd5\u5206\u6790 \u6b63\u5219\u8868\u8fbe\u5f0f\u5230NFA NFA\u5230DFA \u8bc6\u522b\u5355\u8bcd\u7684DFA \u81ea\u9876\u5411\u4e0b\u5206\u6790 \u6700\u5de6\u63a8\u5bfc \u6700\u53f3\u89c4\u7ea6 \u81ea\u5e95\u5411\u4e0a\u4f7f\u7528\u6700\u5de6\u89c4\u7ea6\uff0c\u56e0\u6b64\u79f0\u4e3a\u89c4\u8303\u89c4\u7ea6 \u6587\u6cd5\u8f6c\u6362 \u5de6\u9012\u5f52 \u6d88\u9664\u5de6\u9012\u5f52 \u95f4\u63a5\u5de6\u9012\u5f52 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 LL(1)\u6587\u6cd5 s\u6587\u6cd5 FOLLOW\u96c6\u5408 q\u6587\u6cd5 FIRST\u96c6\u5408 LL(1)\u6587\u6cd5 FOLLOW\u96c6\u5408FIRST\u96c6\u5408\u8ba1\u7b97 first follow \u8fd9\u4e2a\u5206\u6790\u8fc7\u7a0b\u8981\u53cd\u590d\u5b66\u4e60 https://www.bilibili.com/video/BV1dL4y1H7T8?t=588.9&p=22 \u8981\u6301\u7eed\u66f4\u65b0 select\u96c6\u5408 \u4e0d\u76f8\u4ea4\u5c31\u662fLL1\u6587\u6cd5 \u8fdb\u884c\u9884\u6d4b\u5206\u6790 \u9012\u5f52\u9884\u6d4b \u975e\u9012\u5f52\u9884\u6d4b $$ r_i = \\alpha_i + \\beta_i \\cdot F + \\epsilon_i $$","title":"\u7f16\u8bd1\u57fa\u7840"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_1","text":"","title":"\u7f16\u8bd1\u57fa\u7840"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_2","text":"","title":"\u8bcd\u6cd5 \u6587\u6cd5"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_3","text":"","title":"\u6587\u6cd5\u7684\u5206\u7c7b"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#cfg","text":"","title":"CFG\u5206\u6790\u6811"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_4","text":"","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_5","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_6","text":"","title":"\u6709\u7a77\u81ea\u52a8\u673a"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#dfa","text":"","title":"DFA"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_7","text":"","title":"\u8bcd\u6cd5\u5206\u6790"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#nfa","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u5230NFA"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#nfadfa","text":"","title":"NFA\u5230DFA"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#dfa_1","text":"","title":"\u8bc6\u522b\u5355\u8bcd\u7684DFA"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_8","text":"\u6700\u5de6\u63a8\u5bfc \u6700\u53f3\u89c4\u7ea6 \u81ea\u5e95\u5411\u4e0a\u4f7f\u7528\u6700\u5de6\u89c4\u7ea6\uff0c\u56e0\u6b64\u79f0\u4e3a\u89c4\u8303\u89c4\u7ea6","title":"\u81ea\u9876\u5411\u4e0b\u5206\u6790"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_9","text":"\u5de6\u9012\u5f52 \u6d88\u9664\u5de6\u9012\u5f52 \u95f4\u63a5\u5de6\u9012\u5f52 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50","title":"\u6587\u6cd5\u8f6c\u6362"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#ll1","text":"s\u6587\u6cd5 FOLLOW\u96c6\u5408 q\u6587\u6cd5 FIRST\u96c6\u5408 LL(1)\u6587\u6cd5","title":"LL(1)\u6587\u6cd5"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#followfirst","text":"first follow \u8fd9\u4e2a\u5206\u6790\u8fc7\u7a0b\u8981\u53cd\u590d\u5b66\u4e60 https://www.bilibili.com/video/BV1dL4y1H7T8?t=588.9&p=22 \u8981\u6301\u7eed\u66f4\u65b0 select\u96c6\u5408 \u4e0d\u76f8\u4ea4\u5c31\u662fLL1\u6587\u6cd5 \u8fdb\u884c\u9884\u6d4b\u5206\u6790","title":"FOLLOW\u96c6\u5408FIRST\u96c6\u5408\u8ba1\u7b97"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_10","text":"","title":"\u9012\u5f52\u9884\u6d4b"},{"location":"thu/d3/d3s/cp/hagongda/hgd/#_11","text":"$$ r_i = \\alpha_i + \\beta_i \\cdot F + \\epsilon_i $$","title":"\u975e\u9012\u5f52\u9884\u6d4b"},{"location":"thu/d3/d3s/cp/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/db/db/","text":"database is abandoned,i change it to study elementary number theory. \u4f5c\u4e1a","title":"Db"},{"location":"thu/d3/d3s/db/3%E5%B0%8F%E6%97%B6/1/","text":"1\u4e3a\u4ec0\u4e48\u4e0d\u662f\u7d20\u6570\uff1a","title":"1"},{"location":"thu/d3/d3s/db/class/lec1/","text":"","title":"Lec1"},{"location":"thu/d3/d3s/db/class/lec2/","text":"","title":"Lec2"},{"location":"thu/d3/d3s/db/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/db/zuoye/zuoye/","text":"\u7b2c\u4e00\u6b21","title":"Zuoye"},{"location":"thu/d3/d3s/db/zuoye/1/1/","text":"","title":"1"},{"location":"thu/d3/d3s/dsa/dsa/","text":"\u6570\u636e\u7ed3\u6784 C++\u6025\u6551 \u79d1\u534f C++\u82e6\u4fee \u7b2c\u4e00\u8bfe \u7b2c\u4e8c\u8bfe \u7b2c\u4e09\u8bfe \u7b2c\u56db\u8bfe \u7b2c\u4e94\u8bfe \u7b2c\u516d\u8bfe \u7b2c\u4e03\u8bfe \u7b2c\u516b\u8bfe \u7b2c\u4e5d\u8bfe \u7b2c\u5341\u8bfe \u7b2c\u5341\u4e00\u8bfe \u7b2c\u5341\u4e8c\u8bfe \u7b2c\u5341\u4e09\u8bfe \u7b2c\u5341\u56db\u8bfe \u7b2c\u5341\u4e94\u8bfe \u7b2c\u5341\u516d\u8bfe \u7b2c\u5341\u4e03\u8bfe \u7b2c\u5341\u516b\u8bfe \u7b2c\u5341\u4e5d\u8bfe \u7b2c\u4e8c\u5341\u8bfe","title":"Dsa"},{"location":"thu/d3/d3s/dsa/PA/pa/","text":"\u6211\u72ec\u7acb\u5b8c\u6210\u4e86\u672c\u9898\u9664\u4ee5\u4e0a\u65b9\u9762\u4e4b\u5916\u7684\u6240\u6709\u5de5\u4f5c\uff0c\u5305\u62ec\u4ee3\u7801\u4e0e\u6587\u6863\u3002 \u6211\u6e05\u695a\u5730\u77e5\u9053\uff0c\u4ece\u4ee5\u4e0a\u65b9\u9762\u83b7\u5f97\u7684\u4fe1\u606f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86\u4f5c\u4e1a\u96be\u5ea6\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u8d77\u8bc4\u5206\u3002 \u6211\u4ece\u672a\u4f7f\u7528\u8fc7\u4ed6\u4eba\u7684\u4ee3\u7801\uff0c\u6216\u751f\u6210\u5f0f\u4eba\u5de5\u667a\u80fd\u5de5\u5177\u751f\u6210\u7684\u4ee3\u7801\uff0c\u4e0d\u7ba1\u662f\u539f\u5c01\u4e0d\u52a8\u5730\u590d\u5236\uff0c\u8fd8\u662f\u7ecf\u8fc7\u4e86\u67d0\u4e9b\u7b49\u4ef7\u8f6c\u6362\u3002 \u6211\u672a\u66fe\u4e5f\u4e0d\u4f1a\u5411\u4ed6\u4eba\uff08\u542b\u6b64\u540e\u5404\u5c4a\u540c\u5b66\uff09\u590d\u5236\u6216\u516c\u5f00\u6211\u7684\u4f5c\u4e1a\u4ee3\u7801\uff0c\u6211\u6709\u4e49\u52a1\u59a5\u5584\u4fdd\u7ba1\u597d\u5b83\u4eec\u3002 \u6211\u63d0\u4ea4\u81f3\u672cOJ\u7cfb\u7edf\u7684\u4ee3\u7801\uff0c\u5747\u65e0\u610f\u4e8e\u7834\u574f\u6216\u59a8\u788d\u4efb\u4f55\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u6b63\u5e38\u8fd0\u8f6c\u3002 \u6211\u6e05\u695a\u5730\u77e5\u9053\uff0c\u4ee5\u4e0a\u60c5\u51b5\u5747\u4e3a\u672c\u8bfe\u7a0b\u7eaa\u5f8b\u6240\u7981\u6b62\uff0c\u82e5\u8fdd\u53cd\uff0c\u672c\u9898\u5f97\u5206\u4e3a0\uff0c\u53e6\u8ba1\u7f5a\u5206100\u3002 \u6211\u5df2\u4ed4\u7ec6\u9605\u8bfb\u5e76\u7406\u89e3\u4e86\u672c\u58f0\u660e\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5e76\u613f\u610f\u627f\u62c5\u76f8\u5e94\u7684\u8d23\u4efb\u3002 \uff08\u6ce8\u610f\uff1a\u8bf7\u4e0d\u8981\u5728 markdown/txt \u5b9e\u9a8c\u62a5\u544a\u4e2d\u5305\u542b\u56fe\u7247\uff09 \u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9 \uff08\u6700\u597d\u63a7\u5236\u5728300\u5b57\u4ee5\u5185\uff09 TODO \u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \uff08\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u5f53\u5206\u6790\u95ee\u9898\u89c4\u6a21\u65e0\u9650\u589e\u957f\u65f6\uff0c\u7a0b\u5e8f\u6574\u4f53\u6d88\u8017\u65f6\u95f4\u7684\u589e\u957f\u8d8b\u52bf\uff09 \uff08\u6700\u597d\u63a7\u5236\u5728300\u5b57\u4ee5\u5185\uff09 TODO \u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \uff08\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u5f53\u5206\u6790\u95ee\u9898\u89c4\u6a21\u65e0\u9650\u589e\u957f\u65f6\uff0c\u7a0b\u5e8f\u6574\u4f53\u6d88\u8017\u7a7a\u95f4\u7684\u589e\u957f\u8d8b\u52bf\uff09 \uff08\u5206\u6790\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u65f6\uff0c\u4e0d\u5305\u62ec\u5b58\u50a8\u8f93\u5165\u6570\u636e\u548c\u8f93\u51fa\u6570\u636e\u6240\u9700\u7684\u7a7a\u95f4\uff09 \uff08\u6700\u597d\u63a7\u5236\u5728300\u5b57\u4ee5\u5185\uff09 TODO \u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5 \uff08\u5982\u679c\u6ca1\u9047\u5230\u4efb\u4f55\u56f0\u96be\uff0c\u8bf7\u5199\u201c\u65e0\u201d\uff09 TODO \u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4 \uff08\u5e2e\u52a9\u4f60\u81ea\u5df1\u66f4\u597d\u5730\u5b89\u6392\u65f6\u95f4\uff09 ??? \u5c0f\u65f6 \u5173\u4e8e\u672c\u9898\u7684\u66f4\u591a\u611f\u60f3 \uff08\u5982\u679c\u4f60\u7684\u8868\u8fbe\u6b32\u65e0\u5904\u5b89\u653e......\uff09","title":"Pa"},{"location":"thu/d3/d3s/dsa/PA/pa/#_1","text":"\uff08\u6700\u597d\u63a7\u5236\u5728300\u5b57\u4ee5\u5185\uff09 TODO","title":"\u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9"},{"location":"thu/d3/d3s/dsa/PA/pa/#_2","text":"\uff08\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u5f53\u5206\u6790\u95ee\u9898\u89c4\u6a21\u65e0\u9650\u589e\u957f\u65f6\uff0c\u7a0b\u5e8f\u6574\u4f53\u6d88\u8017\u65f6\u95f4\u7684\u589e\u957f\u8d8b\u52bf\uff09 \uff08\u6700\u597d\u63a7\u5236\u5728300\u5b57\u4ee5\u5185\uff09 TODO","title":"\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/pa/#_3","text":"\uff08\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u5f53\u5206\u6790\u95ee\u9898\u89c4\u6a21\u65e0\u9650\u589e\u957f\u65f6\uff0c\u7a0b\u5e8f\u6574\u4f53\u6d88\u8017\u7a7a\u95f4\u7684\u589e\u957f\u8d8b\u52bf\uff09 \uff08\u5206\u6790\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u65f6\uff0c\u4e0d\u5305\u62ec\u5b58\u50a8\u8f93\u5165\u6570\u636e\u548c\u8f93\u51fa\u6570\u636e\u6240\u9700\u7684\u7a7a\u95f4\uff09 \uff08\u6700\u597d\u63a7\u5236\u5728300\u5b57\u4ee5\u5185\uff09 TODO","title":"\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/pa/#_4","text":"\uff08\u5982\u679c\u6ca1\u9047\u5230\u4efb\u4f55\u56f0\u96be\uff0c\u8bf7\u5199\u201c\u65e0\u201d\uff09 TODO","title":"\u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5"},{"location":"thu/d3/d3s/dsa/PA/pa/#_5","text":"\uff08\u5e2e\u52a9\u4f60\u81ea\u5df1\u66f4\u597d\u5730\u5b89\u6392\u65f6\u95f4\uff09 ??? \u5c0f\u65f6","title":"\u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4"},{"location":"thu/d3/d3s/dsa/PA/pa/#_6","text":"\uff08\u5982\u679c\u4f60\u7684\u8868\u8fbe\u6b32\u65e0\u5904\u5b89\u653e......\uff09","title":"\u5173\u4e8e\u672c\u9898\u7684\u66f4\u591a\u611f\u60f3"},{"location":"thu/d3/d3s/dsa/PA/PA1/pa1/","text":"","title":"Pa1"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/","text":"\u5b9e\u9a8c\u62a5\u544a \u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9 \u9898\u76ee\u53ea\u5141\u8bb8\u201c\u63d2\u5165/\u5220\u9664\u201d\uff0c\u5176\u6700\u5c0f\u4ee3\u4ef7\u7b49\u4ef7\u4e8e\u53ea\u542b\u63d2\u5220\u7684\u7f16\u8f91\u8ddd\u79bb\uff0c\u800c\u8be5\u8ddd\u79bb\u4e0e LCS \u6ee1\u8db3\uff1a cost = |A| + |B| - 2*LCS(A,B) \u3002\u56e0\u6b64\u6838\u5fc3\u662f\u8ba1\u7b97 LCS\u3002\u4e3a\u5229\u7528\u9608\u503c k\u2264100 \uff0c\u91c7\u7528\u5e26\u72b6\u52a8\u6001\u89c4\u5212\uff1a\u4ec5\u5728 |i-j|\u2264k \u7684\u5e26\u5185\u8f6c\u79fb\uff0c\u5e76\u7528\u4e24\u884c\u6eda\u52a8\u6570\u7ec4\u4fdd\u5b58 dp \uff0c\u5c06\u5185\u5b58\u964d\u4e3a O(n)\u3002\u6700\u540e\u8ba1\u7b97 res = m+n-2*lcs \uff0c\u82e5 res>k \u8f93\u51fa -1 \u3002\u5b9e\u73b0\u8981\u70b9\uff1a\u5e26\u5185\u5faa\u73af\u7684\u4e0a\u4e0b\u754c\u4e3a j\u2208[max(1,i-k), min(n,i+k)] \uff1b\u6eda\u52a8\u6570\u7ec4\u6bcf\u884c\u90fd\u8981\u6b63\u786e\u8986\u76d6\uff1b \u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \u5e38\u89c4 LCS \u4e3a O(mn)\uff0c\u4f46\u5e26\u72b6 DP \u5c06\u6bcf\u4e00\u884c\u7684\u6709\u6548\u72b6\u6001\u9650\u5236\u5230\u5bbd\u5ea6\u7ea6 2k+1 \u3002\u4e8e\u662f\u603b\u4f53\u8f6c\u79fb\u6b21\u6570\u7ea6\u4e3a O(min(m,n) * k) \uff0c\u5f53 k \u5f88\u5c0f\u4e14 m\u3001n \u5f88\u5927\u65f6\u6781\u5927\u52a0\u901f\u3002\u82e5 k \u2265 max(m,n) \uff0c\u5e26\u5bbd\u8986\u76d6\u5168\u8868\uff0c\u6700\u574f\u9000\u5316\u4e3a O(mn) \u3002\u5728\u672c\u9898\u6570\u636e\u8303\u56f4\u4e0b\uff08 k\u2264100 \uff09\uff0c\u5e26\u72b6\u4f18\u5316\u80fd\u901a\u8fc7\u65f6\u9650\u3002 \u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \u4f7f\u7528\u4e24\u884c\u6eda\u52a8\u6570\u7ec4\u4fdd\u5b58\u4e0a\u4e00\u884c\u4e0e\u5f53\u524d\u884c\uff0c\u989d\u5916\u7a7a\u95f4\u4e3a O(n) \u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5 \u5927\u89c4\u6a21\u6570\u636e\u4e0e\u4e25\u82db\u65f6\u9650\uff1a\u91c7\u7528\u5e26\u72b6 DP + \u6eda\u52a8\u6570\u7ec4\u3002 \u8fb9\u754c\u4e0e\u5e26\u5bbd\u5904\u7406\u6613\u9519\uff1a\u663e\u5f0f\u8bbe\u7f6e j \u7684\u8d77\u6b62\u4e3a [max(1,i-k), min(n,i+k)] \uff0c\u5e76\u6ce8\u610f\u9996\u5217/\u9996\u884c\u521d\u59cb\u5316\u3002 \u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4 1.5 \u5c0f\u65f6","title":"\u5b9e\u9a8c\u62a5\u544a"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/#_1","text":"","title":"\u5b9e\u9a8c\u62a5\u544a"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/#_2","text":"\u9898\u76ee\u53ea\u5141\u8bb8\u201c\u63d2\u5165/\u5220\u9664\u201d\uff0c\u5176\u6700\u5c0f\u4ee3\u4ef7\u7b49\u4ef7\u4e8e\u53ea\u542b\u63d2\u5220\u7684\u7f16\u8f91\u8ddd\u79bb\uff0c\u800c\u8be5\u8ddd\u79bb\u4e0e LCS \u6ee1\u8db3\uff1a cost = |A| + |B| - 2*LCS(A,B) \u3002\u56e0\u6b64\u6838\u5fc3\u662f\u8ba1\u7b97 LCS\u3002\u4e3a\u5229\u7528\u9608\u503c k\u2264100 \uff0c\u91c7\u7528\u5e26\u72b6\u52a8\u6001\u89c4\u5212\uff1a\u4ec5\u5728 |i-j|\u2264k \u7684\u5e26\u5185\u8f6c\u79fb\uff0c\u5e76\u7528\u4e24\u884c\u6eda\u52a8\u6570\u7ec4\u4fdd\u5b58 dp \uff0c\u5c06\u5185\u5b58\u964d\u4e3a O(n)\u3002\u6700\u540e\u8ba1\u7b97 res = m+n-2*lcs \uff0c\u82e5 res>k \u8f93\u51fa -1 \u3002\u5b9e\u73b0\u8981\u70b9\uff1a\u5e26\u5185\u5faa\u73af\u7684\u4e0a\u4e0b\u754c\u4e3a j\u2208[max(1,i-k), min(n,i+k)] \uff1b\u6eda\u52a8\u6570\u7ec4\u6bcf\u884c\u90fd\u8981\u6b63\u786e\u8986\u76d6\uff1b","title":"\u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/#_3","text":"\u5e38\u89c4 LCS \u4e3a O(mn)\uff0c\u4f46\u5e26\u72b6 DP \u5c06\u6bcf\u4e00\u884c\u7684\u6709\u6548\u72b6\u6001\u9650\u5236\u5230\u5bbd\u5ea6\u7ea6 2k+1 \u3002\u4e8e\u662f\u603b\u4f53\u8f6c\u79fb\u6b21\u6570\u7ea6\u4e3a O(min(m,n) * k) \uff0c\u5f53 k \u5f88\u5c0f\u4e14 m\u3001n \u5f88\u5927\u65f6\u6781\u5927\u52a0\u901f\u3002\u82e5 k \u2265 max(m,n) \uff0c\u5e26\u5bbd\u8986\u76d6\u5168\u8868\uff0c\u6700\u574f\u9000\u5316\u4e3a O(mn) \u3002\u5728\u672c\u9898\u6570\u636e\u8303\u56f4\u4e0b\uff08 k\u2264100 \uff09\uff0c\u5e26\u72b6\u4f18\u5316\u80fd\u901a\u8fc7\u65f6\u9650\u3002","title":"\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/#_4","text":"\u4f7f\u7528\u4e24\u884c\u6eda\u52a8\u6570\u7ec4\u4fdd\u5b58\u4e0a\u4e00\u884c\u4e0e\u5f53\u524d\u884c\uff0c\u989d\u5916\u7a7a\u95f4\u4e3a O(n)","title":"\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/#_5","text":"\u5927\u89c4\u6a21\u6570\u636e\u4e0e\u4e25\u82db\u65f6\u9650\uff1a\u91c7\u7528\u5e26\u72b6 DP + \u6eda\u52a8\u6570\u7ec4\u3002 \u8fb9\u754c\u4e0e\u5e26\u5bbd\u5904\u7406\u6613\u9519\uff1a\u663e\u5f0f\u8bbe\u7f6e j \u7684\u8d77\u6b62\u4e3a [max(1,i-k), min(n,i+k)] \uff0c\u5e76\u6ce8\u610f\u9996\u5217/\u9996\u884c\u521d\u59cb\u5316\u3002","title":"\u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/filename/#_6","text":"1.5 \u5c0f\u65f6","title":"\u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/","text":"\u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9 \u53ea\u5141\u8bb8\u201c\u63d2\u5165/\u5220\u9664\u201d\u7684\u7f16\u8f91\u8ddd\u79bb\uff1a\u628a\u628a A \u53d8\u4e3a B \u7684\u6700\u5c0f\u4ee3\u4ef7\u7528\u5e26\u72b6 DP \u6c42\u89e3\u3002\u8bbe dp[i][j] \u4e3a\u628a A[0..i-1] \u53d8\u6210 B[0..j-1] \u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u8f6c\u79fb\u4e3a\uff1a \u5220\uff1a dp[i-1][j]+1 \u63d2\uff1a dp[i][j-1]+1 \u5339\u914d/\u201c\u66ff\u6362\u201d(\u89c6\u4f5c\u5220+\u63d2)\uff1a dp[i-1][j-1] + (A[i-1]==B[j-1]?0:2) \u56e0\u7b54\u6848\u82e5 \u2264K\uff0c\u5219\u6700\u4f18\u8def\u5f84\u59cb\u7ec8\u6ee1\u8db3 |i-j|\u2264K \uff0c\u636e\u6b64\u505a\u5e26\u72b6\u4f18\u5316\uff0c\u53ea\u5728\u5e26\u5185\u8ba1\u7b97\uff1b\u5e76\u6eda\u52a8\u6570\u7ec4\u4ec5\u4fdd\u7559\u4e0a\u4e00\u884c\u4e0e\u5f53\u524d\u884c\uff0c\u8fb9\u754c j==0 \u5355\u72ec\u5904\u7406\u3002\u5148\u5224 |n-m|>K \u76f4\u63a5\u8f93\u51fa -1\u3002 \u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \u8bbe n=|A|, m=|B|, N=min(n,m) \u3002\u5e26\u5bbd\u81f3\u591a 2K+1 \uff0c\u5bf9\u6bcf\u4e2a i=1..N \u4ec5\u8ba1\u7b97 j\u2208[i-K, i+K] \u7684\u81f3\u591a 2K+1 \u4e2a\u72b6\u6001\uff0c\u6bcf\u4e2a\u72b6\u6001 O(1) \u66f4\u65b0\uff0c\u6545\u603b\u66f4\u65b0\u6b21\u6570\u7ea6 (2K+1)\u00b7N \u3002\u5ffd\u7565\u5e38\u6570\u540e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(K\u00b7min(n,m)) \uff1b\u5f53 |n-m|>K \u65f6\u63d0\u524d\u8fd4\u56de\uff0c\u8017\u65f6 O(1)\u3002 \u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \u5e26\u72b6 DP \u4ec5\u9700\u4fdd\u5b58\u4e0a\u4e00\u884c\u4e0e\u5f53\u524d\u884c\u5728\u5e26\u5185\u7684\u503c\uff0c\u5404\u81ea\u957f\u5ea6 O(K)\u3002\u56e0\u6b64\u989d\u5916\u7a7a\u95f4\u4e3a O(K) \u3002\u672a\u628a\u8f93\u5165\u5b57\u7b26\u4e32\u672c\u8eab\u8ba1\u5165\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5 \u8bef\u7528 LCS+\u7a97\u53e3\u526a\u679d\u5bfc\u81f4\u9519\u89e3 \u2192 \u6539\u4e3a\u76f4\u63a5\u5bf9\u7f16\u8f91\u8ddd\u79bb\u505a\u5e26\u72b6 DP\u3002 \u8bc4\u6d4b\u73af\u5883\u7f3a\u5931 <bits/stdc++.h> /C++ \u5934\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25 \u2192 \u6539\u4e3a\u53ea\u5305\u542b\u5fc5\u9700\u6807\u51c6\u5934\uff1b\u6216\u7ed9\u51fa\u7eaf C \u7248\u672c\u3002 \u7528 gcc \u7f16\u8bd1 C++ \u4ee3\u7801\u62a5\u627e\u4e0d\u5230 <vector> \u2192 \u660e\u786e\u7528 g++ \u6216\u63d0\u4f9b\u7eaf C \u5b9e\u73b0\u3002 \u5e26\u72b6\u8fb9\u754c\u6613\u8d8a\u754c/\u6f0f\u503c \u2192 \u7edf\u4e00\u7528 jL/jR \u3001 pL/pR \u7ba1\u7406\u7a97\u53e3\uff0c j==0 \u4e0e\u5bf9\u89d2\u4e0d\u5b58\u5728\u65f6\u5c0f\u5fc3\u5206\u652f\u3002 \u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4 3 \u5c0f\u65f6 \u5173\u4e8e\u672c\u9898\u7684\u66f4\u591a\u611f\u60f3 \u8fd9\u9898\u7684\u5173\u952e\u5728\u4e8e\u8ba4\u6e05\u64cd\u4f5c\u6a21\u578b\uff08\u65e0\u66ff\u6362\uff09\u4e0e\u5584\u7528 K \u505a\u5e26\u72b6\u4f18\u5316\u3002\u548c\u4f20\u7edf Levenshtein \u76f8\u6bd4\uff0c\u65e2\u8981\u6ce8\u610f\u201c\u66ff\u6362=\u5220+\u63d2\u201d\u7684\u4ee3\u4ef7\uff0c\u53c8\u8981\u5728\u5b9e\u73b0\u4e0a\u628a\u7a97\u53e3\u8fb9\u754c\u3001\u6eda\u52a8\u6570\u7ec4\u7d22\u5f15\u5904\u7406\u5e72\u51c0\u3002","title":"Old1"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/#_1","text":"\u53ea\u5141\u8bb8\u201c\u63d2\u5165/\u5220\u9664\u201d\u7684\u7f16\u8f91\u8ddd\u79bb\uff1a\u628a\u628a A \u53d8\u4e3a B \u7684\u6700\u5c0f\u4ee3\u4ef7\u7528\u5e26\u72b6 DP \u6c42\u89e3\u3002\u8bbe dp[i][j] \u4e3a\u628a A[0..i-1] \u53d8\u6210 B[0..j-1] \u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u8f6c\u79fb\u4e3a\uff1a \u5220\uff1a dp[i-1][j]+1 \u63d2\uff1a dp[i][j-1]+1 \u5339\u914d/\u201c\u66ff\u6362\u201d(\u89c6\u4f5c\u5220+\u63d2)\uff1a dp[i-1][j-1] + (A[i-1]==B[j-1]?0:2) \u56e0\u7b54\u6848\u82e5 \u2264K\uff0c\u5219\u6700\u4f18\u8def\u5f84\u59cb\u7ec8\u6ee1\u8db3 |i-j|\u2264K \uff0c\u636e\u6b64\u505a\u5e26\u72b6\u4f18\u5316\uff0c\u53ea\u5728\u5e26\u5185\u8ba1\u7b97\uff1b\u5e76\u6eda\u52a8\u6570\u7ec4\u4ec5\u4fdd\u7559\u4e0a\u4e00\u884c\u4e0e\u5f53\u524d\u884c\uff0c\u8fb9\u754c j==0 \u5355\u72ec\u5904\u7406\u3002\u5148\u5224 |n-m|>K \u76f4\u63a5\u8f93\u51fa -1\u3002","title":"\u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/#_2","text":"\u8bbe n=|A|, m=|B|, N=min(n,m) \u3002\u5e26\u5bbd\u81f3\u591a 2K+1 \uff0c\u5bf9\u6bcf\u4e2a i=1..N \u4ec5\u8ba1\u7b97 j\u2208[i-K, i+K] \u7684\u81f3\u591a 2K+1 \u4e2a\u72b6\u6001\uff0c\u6bcf\u4e2a\u72b6\u6001 O(1) \u66f4\u65b0\uff0c\u6545\u603b\u66f4\u65b0\u6b21\u6570\u7ea6 (2K+1)\u00b7N \u3002\u5ffd\u7565\u5e38\u6570\u540e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(K\u00b7min(n,m)) \uff1b\u5f53 |n-m|>K \u65f6\u63d0\u524d\u8fd4\u56de\uff0c\u8017\u65f6 O(1)\u3002","title":"\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/#_3","text":"\u5e26\u72b6 DP \u4ec5\u9700\u4fdd\u5b58\u4e0a\u4e00\u884c\u4e0e\u5f53\u524d\u884c\u5728\u5e26\u5185\u7684\u503c\uff0c\u5404\u81ea\u957f\u5ea6 O(K)\u3002\u56e0\u6b64\u989d\u5916\u7a7a\u95f4\u4e3a O(K) \u3002\u672a\u628a\u8f93\u5165\u5b57\u7b26\u4e32\u672c\u8eab\u8ba1\u5165\u7a7a\u95f4\u590d\u6742\u5ea6\u3002","title":"\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/#_4","text":"\u8bef\u7528 LCS+\u7a97\u53e3\u526a\u679d\u5bfc\u81f4\u9519\u89e3 \u2192 \u6539\u4e3a\u76f4\u63a5\u5bf9\u7f16\u8f91\u8ddd\u79bb\u505a\u5e26\u72b6 DP\u3002 \u8bc4\u6d4b\u73af\u5883\u7f3a\u5931 <bits/stdc++.h> /C++ \u5934\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25 \u2192 \u6539\u4e3a\u53ea\u5305\u542b\u5fc5\u9700\u6807\u51c6\u5934\uff1b\u6216\u7ed9\u51fa\u7eaf C \u7248\u672c\u3002 \u7528 gcc \u7f16\u8bd1 C++ \u4ee3\u7801\u62a5\u627e\u4e0d\u5230 <vector> \u2192 \u660e\u786e\u7528 g++ \u6216\u63d0\u4f9b\u7eaf C \u5b9e\u73b0\u3002 \u5e26\u72b6\u8fb9\u754c\u6613\u8d8a\u754c/\u6f0f\u503c \u2192 \u7edf\u4e00\u7528 jL/jR \u3001 pL/pR \u7ba1\u7406\u7a97\u53e3\uff0c j==0 \u4e0e\u5bf9\u89d2\u4e0d\u5b58\u5728\u65f6\u5c0f\u5fc3\u5206\u652f\u3002","title":"\u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/#_5","text":"3 \u5c0f\u65f6","title":"\u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4"},{"location":"thu/d3/d3s/dsa/PA/PA1/filename/old1/#_6","text":"\u8fd9\u9898\u7684\u5173\u952e\u5728\u4e8e\u8ba4\u6e05\u64cd\u4f5c\u6a21\u578b\uff08\u65e0\u66ff\u6362\uff09\u4e0e\u5584\u7528 K \u505a\u5e26\u72b6\u4f18\u5316\u3002\u548c\u4f20\u7edf Levenshtein \u76f8\u6bd4\uff0c\u65e2\u8981\u6ce8\u610f\u201c\u66ff\u6362=\u5220+\u63d2\u201d\u7684\u4ee3\u4ef7\uff0c\u53c8\u8981\u5728\u5b9e\u73b0\u4e0a\u628a\u7a97\u53e3\u8fb9\u754c\u3001\u6eda\u52a8\u6570\u7ec4\u7d22\u5f15\u5904\u7406\u5e72\u51c0\u3002","title":"\u5173\u4e8e\u672c\u9898\u7684\u66f4\u591a\u611f\u60f3"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/g1/","text":"\u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9 \u628a x \u8f74\u4e0a\u7684 n \u4e2a\u6a2a\u5750\u6807\u5347\u5e8f\u4e3a Px[0..n-1] \uff0cy \u8f74\u4e0a\u7684 n \u4e2a\u7eb5\u5750\u6807\u5347\u5e8f\u4e3a Py[0..n-1] \uff0c\u6309\u76f8\u540c\u4e0b\u6807\u914d\u5bf9 (Px[i],0)-(0,Py[i]) \uff0c\u53ef\u8bc1\u660e\u5f97\u5230\u7684 n \u6761\u7ebf\u6bb5\u4e24\u4e24\u4e0d\u76f8\u4ea4\u3002\u8bbe\u67e5\u8be2\u70b9\u4e3a P(x,y) \uff0c\u8003\u8651\u6709\u5411\u7ebf\u6bb5 A=(0,Py[i]) \u2192 B=(Px[i],0) \uff0c\u7528\u53c9\u79ef ToLeft = (B-A)\u00d7(P-A) \u5224\u65ad P \u5728\u8be5\u7ebf\u6bb5\u201c\u5de6\u4fa7/\u7ebf\u4e0a\u201d\u8fd8\u662f\u201c\u53f3\u4fa7\u201d\u3002\u968f\u7740 i \u589e\u5927\uff0c\u7ebf\u6bb5\u7684\u652f\u6491\u76f4\u7ebf\u5355\u8c03\u201c\u5916\u65cb\u201d\uff0c ToLeft \u7684\u7b26\u53f7\u5bf9 i \u5355\u8c03\uff0c\u4e8e\u662f\u7b54\u6848\u5c31\u662f\u6ee1\u8db3 ToLeft\u22650 \u7684\u6700\u5927 i \u7684\u4e0b\u6807 +1\u3002\u5b9e\u73b0\u4e0a\uff1a\u5bf9 Px \u3001 Py \u5404\u81ea\u5f52\u5e76\u6392\u5e8f\uff1b\u5bf9\u6bcf\u6b21\u67e5\u8be2\u7528\u4e8c\u5206\u5728 [0,n-1] \u4e0a\u627e\u5206\u754c\u70b9\uff0c\u8fb9\u754c\u7279\u5224\uff08\u5168\u53f3\u4fa7\u5f97 0\uff0c\u5168\u5de6\u4fa7\u5f97 n\uff09\u3002 \u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \u9884\u5904\u7406\u5bf9 Px \u3001 Py \u5404\u505a\u4e00\u6b21\u6392\u5e8f\uff0c\u5f52\u5e76\u6392\u5e8f\u4e3a O(n log n) \u3002\u6bcf\u6b21\u67e5\u8be2\u4ec5\u505a\u5e38\u6570\u6b21 ToLeft \uff08O(1)\uff09\u4e0e\u4e00\u6b21\u4e8c\u5206\u67e5\u627e\uff08O(log n)\uff09\u3002\u56e0\u6b64\u603b\u65f6\u95f4\u4e3a T(n,m)=O(n log n) + m\u00b7O(log n) = O(n log n + m log n) \u3002 \u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b \u9664\u8f93\u5165\u5916\uff0c\u4e3b\u8981\u5360\u7528\uff1a\u4e24\u6bb5\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 Px\u3001Py \uff08\u9898\u76ee\u4e0d\u8ba1\u5165\u8f93\u5165\u5b58\u50a8\u53ef\u5ffd\u7565\uff09\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u4e34\u65f6\u6570\u7ec4 L\u3001R \u603b\u4f53 O(n) \uff0c\u4ee5\u53ca\u9012\u5f52\u6808 O(log n) \u3002\u67e5\u8be2\u9636\u6bb5\u53ea\u7528\u5e38\u6570\u989d\u5916\u7a7a\u95f4\u3002\u7efc\u5408\u5f97\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6 S(n)=O(n) \u3002 \u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5 \u53c9\u79ef\u6ea2\u51fa\u98ce\u9669\uff1a\u5750\u6807 < 2\u00b3\u00b9\uff0c\u4e58\u79ef\u53ef\u8fbe\u7ea6 2\u2076\u00b2\uff0c\u7edf\u4e00\u4f7f\u7528 long long \u89e3\u51b3\u3002 \u4e8c\u5206\u8fb9\u754c\u4e0e\u7b49\u53f7\u5904\u7406\uff1a\u5c06\u201c\u5728\u7ebf\u4e0a\u201d\u7684\u60c5\u51b5\u8ba1\u5165\u5de6\u4fa7\uff08 >=0 \uff09\uff0c\u5e76\u5bf9\u6700\u5de6\u3001\u6700\u53f3\u4e24\u6761\u7ebf\u6bb5\u505a\u7279\u5224\uff0c\u907f\u514d\u8d8a\u754c\u4e0e off-by-one\u3002 \u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u7684\u914d\u5bf9\u4f9d\u636e\uff1a\u5148\u5206\u522b\u6392\u5e8f\u518d\u6309\u4f4d\u914d\u5bf9\u5373\u53ef\u4fdd\u8bc1\u5355\u8c03\u4e0e\u4e0d\u76f8\u4ea4\u3002 \u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4 1.2 \u5c0f\u65f6","title":"G1"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/g1/#_1","text":"\u628a x \u8f74\u4e0a\u7684 n \u4e2a\u6a2a\u5750\u6807\u5347\u5e8f\u4e3a Px[0..n-1] \uff0cy \u8f74\u4e0a\u7684 n \u4e2a\u7eb5\u5750\u6807\u5347\u5e8f\u4e3a Py[0..n-1] \uff0c\u6309\u76f8\u540c\u4e0b\u6807\u914d\u5bf9 (Px[i],0)-(0,Py[i]) \uff0c\u53ef\u8bc1\u660e\u5f97\u5230\u7684 n \u6761\u7ebf\u6bb5\u4e24\u4e24\u4e0d\u76f8\u4ea4\u3002\u8bbe\u67e5\u8be2\u70b9\u4e3a P(x,y) \uff0c\u8003\u8651\u6709\u5411\u7ebf\u6bb5 A=(0,Py[i]) \u2192 B=(Px[i],0) \uff0c\u7528\u53c9\u79ef ToLeft = (B-A)\u00d7(P-A) \u5224\u65ad P \u5728\u8be5\u7ebf\u6bb5\u201c\u5de6\u4fa7/\u7ebf\u4e0a\u201d\u8fd8\u662f\u201c\u53f3\u4fa7\u201d\u3002\u968f\u7740 i \u589e\u5927\uff0c\u7ebf\u6bb5\u7684\u652f\u6491\u76f4\u7ebf\u5355\u8c03\u201c\u5916\u65cb\u201d\uff0c ToLeft \u7684\u7b26\u53f7\u5bf9 i \u5355\u8c03\uff0c\u4e8e\u662f\u7b54\u6848\u5c31\u662f\u6ee1\u8db3 ToLeft\u22650 \u7684\u6700\u5927 i \u7684\u4e0b\u6807 +1\u3002\u5b9e\u73b0\u4e0a\uff1a\u5bf9 Px \u3001 Py \u5404\u81ea\u5f52\u5e76\u6392\u5e8f\uff1b\u5bf9\u6bcf\u6b21\u67e5\u8be2\u7528\u4e8c\u5206\u5728 [0,n-1] \u4e0a\u627e\u5206\u754c\u70b9\uff0c\u8fb9\u754c\u7279\u5224\uff08\u5168\u53f3\u4fa7\u5f97 0\uff0c\u5168\u5de6\u4fa7\u5f97 n\uff09\u3002","title":"\u7b97\u6cd5\u601d\u8def\u548c\u5b9e\u73b0\u8981\u70b9"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/g1/#_2","text":"\u9884\u5904\u7406\u5bf9 Px \u3001 Py \u5404\u505a\u4e00\u6b21\u6392\u5e8f\uff0c\u5f52\u5e76\u6392\u5e8f\u4e3a O(n log n) \u3002\u6bcf\u6b21\u67e5\u8be2\u4ec5\u505a\u5e38\u6570\u6b21 ToLeft \uff08O(1)\uff09\u4e0e\u4e00\u6b21\u4e8c\u5206\u67e5\u627e\uff08O(log n)\uff09\u3002\u56e0\u6b64\u603b\u65f6\u95f4\u4e3a T(n,m)=O(n log n) + m\u00b7O(log n) = O(n log n + m log n) \u3002","title":"\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/g1/#_3","text":"\u9664\u8f93\u5165\u5916\uff0c\u4e3b\u8981\u5360\u7528\uff1a\u4e24\u6bb5\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 Px\u3001Py \uff08\u9898\u76ee\u4e0d\u8ba1\u5165\u8f93\u5165\u5b58\u50a8\u53ef\u5ffd\u7565\uff09\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u4e34\u65f6\u6570\u7ec4 L\u3001R \u603b\u4f53 O(n) \uff0c\u4ee5\u53ca\u9012\u5f52\u6808 O(log n) \u3002\u67e5\u8be2\u9636\u6bb5\u53ea\u7528\u5e38\u6570\u989d\u5916\u7a7a\u95f4\u3002\u7efc\u5408\u5f97\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6 S(n)=O(n) \u3002","title":"\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\uff0c\u5305\u542b\u8fc7\u7a0b"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/g1/#_4","text":"\u53c9\u79ef\u6ea2\u51fa\u98ce\u9669\uff1a\u5750\u6807 < 2\u00b3\u00b9\uff0c\u4e58\u79ef\u53ef\u8fbe\u7ea6 2\u2076\u00b2\uff0c\u7edf\u4e00\u4f7f\u7528 long long \u89e3\u51b3\u3002 \u4e8c\u5206\u8fb9\u754c\u4e0e\u7b49\u53f7\u5904\u7406\uff1a\u5c06\u201c\u5728\u7ebf\u4e0a\u201d\u7684\u60c5\u51b5\u8ba1\u5165\u5de6\u4fa7\uff08 >=0 \uff09\uff0c\u5e76\u5bf9\u6700\u5de6\u3001\u6700\u53f3\u4e24\u6761\u7ebf\u6bb5\u505a\u7279\u5224\uff0c\u907f\u514d\u8d8a\u754c\u4e0e off-by-one\u3002 \u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u7684\u914d\u5bf9\u4f9d\u636e\uff1a\u5148\u5206\u522b\u6392\u5e8f\u518d\u6309\u4f4d\u914d\u5bf9\u5373\u53ef\u4fdd\u8bc1\u5355\u8c03\u4e0e\u4e0d\u76f8\u4ea4\u3002","title":"\u9047\u5230\u7684\u56f0\u96be\u548c\u89e3\u51b3\u65b9\u6cd5"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/g1/#_5","text":"1.2 \u5c0f\u65f6","title":"\u4f30\u8ba1\u5b8c\u6210\u672c\u9898\u6240\u7528\u65f6\u95f4"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/","text":"\u5b9e\u9a8c\u62a5\u544a \u89e3\u9898\u601d\u8def \u9996\u5148\u6211\u5c06\u70b9\u548c\u7ebf\u6bb5\u62bd\u8c61\u5316\uff0c\u4fbf\u4e8e\u7406\u89e3 struct Point { long long x, y; }; struct Segment { Point p1, p2; }; \u8fd9\u6837\u53ef\u4ee5\u76f4\u89c2\u5730\u7406\u89e3\u95ee\u9898\uff0c\u8ba8\u8bba\u4ea4\u70b9\u7684\u60c5\u51b5 \u56e0\u4e3an\u6761\u7ebf\u6bb5\u662f\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u4ea4\u70b9\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9x\u8f74\u548cy\u8f74\u7684\u622a\u8ddd\u5750\u6807\u8fdb\u884c\u6392\u5e8f\uff0c\u5373\u53ef\u5f97\u5230\u7ebf\u6bb5\u7aef\u70b9\u7684\u5750\u6807\u3002 \u5224\u65ad\u67d0\u4e00\u4e2a\u70b9\u548c\u7ebf\u6bb5\u7684\u76f8\u5bf9\u4f4d\u7f6e\u65f6\uff0c\u4f7f\u7528\u4e86\u5411\u91cf\u53c9\u79ef\u8fd0\u7b97\uff0c\u5047\u8bbe\u7ebf\u6bb5AB\uff0c\u9700\u8981\u5224\u65ad\u70b9P\u548c\u7ebf\u6bb5\u7684\u76f8\u5bf9\u4f4d\u7f6e $$ if \\mathbf{AB} \\times \\mathbf{AP} > 0 $$ \u5219\u70b9P\u5728\u7ebf\u6bb5AB\u7684\u53f3\u4e0a\u65b9\uff0c\u5982\u679c\uff1c0\u5219\u5728\u5de6\u4e0b\u65b9\uff0c\u5982\u679c\u53c9\u79ef\u7ed3\u679c\u4e3a\u96f6\uff0c\u90a3\u8bf4\u660eP\u5c31\u5728\u7ebf\u6bb5AB\u4e4b\u4e0a\u3002 long long ToLeft(Point a, Point b, Point c) { return (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y); } \u63a5\u4e0b\u6765\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e8c\u5206\u7684\u65b9\u6cd5\uff0c\u9010\u6b65\u68c0\u6d4b\u6700\u63a5\u8fd1P\u70b9\u7684\u4ea4\u70b9\u5b58\u5728\u4e8e\u54ea\u4e00\u6761\u7ebf\u6bb5\u4e0a\u5373\u53ef\u3002 int binarySearch(Point p, Segment* segments, int n){ int mid,l = 0,r = n-1,ans = 0; while(l <= r) { mid = l + (r - l) / 2; if (ToLeft(segments[mid].p1, segments[mid].p2, p) >= 0) { ans = mid,l = mid + 1; } else r = mid - 1; } return ans; } \u6211\u5728debug\u7684\u8fc7\u7a0b\u4e2d\uff0c\u603b\u662f\u6709\u4e09\u4e2a\u70b9\u4f1aTLE\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6700\u540e\u53d1\u73b0\u6211\u5728\u4e00\u4e2a\u9690\u85cf\u7684\u5730\u65b9cin\u4e86200000*2\u6b21\u6570\u636e\uff0c\u5bfc\u81f4\u975e\u5e38\u6162\uff0c\u6211\u5728\u53d1\u73b0\u4e4b\u540e\u6539\u4e3ascanf\u5c31\u987a\u5229\u901a\u8fc7\u4e86\uff0c\u8fd9\u8ba9\u6211\u76f4\u89c2\u5730\u4f53\u4f1a\u5230cin\uff0ccout\u5730\u65b9\u4fbf\u6613\u7528\u662f\u5728\u727a\u7272\u6027\u80fd\u7684\u4ee3\u4ef7\u4e0b\u7684\u3002 \u65f6\u7a7a\u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6 \u5408\u5e76\u6392\u5e8f\uff08Merge Sort\uff09\uff1a \u5408\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n log n)\uff0c\u5176\u4e2d n \u662f\u5f85\u6392\u5e8f\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u5728 mergeSort \u51fd\u6570\u4e2d\uff0c\u5206\u6cbb\u7684\u8fc7\u7a0b\u4f1a\u9012\u5f52\u8fdb\u884c\uff0c\u5e76\u4e14\u5408\u5e76\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5728\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5bf9\u4e24\u4e2a\u6570\u7ec4 Px \u548c Py \u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u56e0\u6b64\u603b\u7684\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n log n)\u3002 \u4e8c\u5206\u67e5\u627e\uff08Binary Search\uff09\uff1a \u5728 binarySearch \u51fd\u6570\u4e2d\uff0c\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n)\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u67e5\u627e\u90fd\u4f1a\u5c06\u641c\u7d22\u8303\u56f4\u51cf\u534a\u3002 \u603b\u4f53\u590d\u6742\u5ea6\uff1a \u5408\u5e76\u6392\u5e8f\u548c\u4e8c\u5206\u67e5\u627e\u7684\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n log n + m log n)\uff0c\u5176\u4e2d m \u662f\u67e5\u8be2\u70b9\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u70b9\uff0c\u90fd\u6267\u884c\u4e00\u6b21\u4e8c\u5206\u67e5\u627e\uff0c\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n log n + m log n)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u5408\u5e76\u6392\u5e8f\u7684\u4e34\u65f6\u6570\u7ec4\uff1a \u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u5168\u5c40\u6570\u7ec4 L \u548c R\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4\uff1a \u901a\u8fc7 new \u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 Px \u548c Py \u4e5f\u5360\u7528 O(n) \u7684\u7a7a\u95f4\u3002 \u603b\u4f53\u590d\u6742\u5ea6\uff1a \u7efc\u5408\u8003\u8651\uff0c\u6574\u4f53\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u8fd9\u662f\u7531\u6392\u5e8f\u548c\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4\u6240\u51b3\u5b9a\u7684\u3002 \u603b\u7ed3 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n log n + m log n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)","title":"\u5b9e\u9a8c\u62a5\u544a"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/#_1","text":"","title":"\u5b9e\u9a8c\u62a5\u544a"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/#_2","text":"\u9996\u5148\u6211\u5c06\u70b9\u548c\u7ebf\u6bb5\u62bd\u8c61\u5316\uff0c\u4fbf\u4e8e\u7406\u89e3 struct Point { long long x, y; }; struct Segment { Point p1, p2; }; \u8fd9\u6837\u53ef\u4ee5\u76f4\u89c2\u5730\u7406\u89e3\u95ee\u9898\uff0c\u8ba8\u8bba\u4ea4\u70b9\u7684\u60c5\u51b5 \u56e0\u4e3an\u6761\u7ebf\u6bb5\u662f\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u4ea4\u70b9\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9x\u8f74\u548cy\u8f74\u7684\u622a\u8ddd\u5750\u6807\u8fdb\u884c\u6392\u5e8f\uff0c\u5373\u53ef\u5f97\u5230\u7ebf\u6bb5\u7aef\u70b9\u7684\u5750\u6807\u3002 \u5224\u65ad\u67d0\u4e00\u4e2a\u70b9\u548c\u7ebf\u6bb5\u7684\u76f8\u5bf9\u4f4d\u7f6e\u65f6\uff0c\u4f7f\u7528\u4e86\u5411\u91cf\u53c9\u79ef\u8fd0\u7b97\uff0c\u5047\u8bbe\u7ebf\u6bb5AB\uff0c\u9700\u8981\u5224\u65ad\u70b9P\u548c\u7ebf\u6bb5\u7684\u76f8\u5bf9\u4f4d\u7f6e $$ if \\mathbf{AB} \\times \\mathbf{AP} > 0 $$ \u5219\u70b9P\u5728\u7ebf\u6bb5AB\u7684\u53f3\u4e0a\u65b9\uff0c\u5982\u679c\uff1c0\u5219\u5728\u5de6\u4e0b\u65b9\uff0c\u5982\u679c\u53c9\u79ef\u7ed3\u679c\u4e3a\u96f6\uff0c\u90a3\u8bf4\u660eP\u5c31\u5728\u7ebf\u6bb5AB\u4e4b\u4e0a\u3002 long long ToLeft(Point a, Point b, Point c) { return (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y); } \u63a5\u4e0b\u6765\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e8c\u5206\u7684\u65b9\u6cd5\uff0c\u9010\u6b65\u68c0\u6d4b\u6700\u63a5\u8fd1P\u70b9\u7684\u4ea4\u70b9\u5b58\u5728\u4e8e\u54ea\u4e00\u6761\u7ebf\u6bb5\u4e0a\u5373\u53ef\u3002 int binarySearch(Point p, Segment* segments, int n){ int mid,l = 0,r = n-1,ans = 0; while(l <= r) { mid = l + (r - l) / 2; if (ToLeft(segments[mid].p1, segments[mid].p2, p) >= 0) { ans = mid,l = mid + 1; } else r = mid - 1; } return ans; } \u6211\u5728debug\u7684\u8fc7\u7a0b\u4e2d\uff0c\u603b\u662f\u6709\u4e09\u4e2a\u70b9\u4f1aTLE\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6700\u540e\u53d1\u73b0\u6211\u5728\u4e00\u4e2a\u9690\u85cf\u7684\u5730\u65b9cin\u4e86200000*2\u6b21\u6570\u636e\uff0c\u5bfc\u81f4\u975e\u5e38\u6162\uff0c\u6211\u5728\u53d1\u73b0\u4e4b\u540e\u6539\u4e3ascanf\u5c31\u987a\u5229\u901a\u8fc7\u4e86\uff0c\u8fd9\u8ba9\u6211\u76f4\u89c2\u5730\u4f53\u4f1a\u5230cin\uff0ccout\u5730\u65b9\u4fbf\u6613\u7528\u662f\u5728\u727a\u7272\u6027\u80fd\u7684\u4ee3\u4ef7\u4e0b\u7684\u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/#_3","text":"","title":"\u65f6\u7a7a\u590d\u6742\u5ea6\u5206\u6790"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/#_4","text":"\u5408\u5e76\u6392\u5e8f\uff08Merge Sort\uff09\uff1a \u5408\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n log n)\uff0c\u5176\u4e2d n \u662f\u5f85\u6392\u5e8f\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u5728 mergeSort \u51fd\u6570\u4e2d\uff0c\u5206\u6cbb\u7684\u8fc7\u7a0b\u4f1a\u9012\u5f52\u8fdb\u884c\uff0c\u5e76\u4e14\u5408\u5e76\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5728\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5bf9\u4e24\u4e2a\u6570\u7ec4 Px \u548c Py \u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u56e0\u6b64\u603b\u7684\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n log n)\u3002 \u4e8c\u5206\u67e5\u627e\uff08Binary Search\uff09\uff1a \u5728 binarySearch \u51fd\u6570\u4e2d\uff0c\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n)\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u67e5\u627e\u90fd\u4f1a\u5c06\u641c\u7d22\u8303\u56f4\u51cf\u534a\u3002 \u603b\u4f53\u590d\u6742\u5ea6\uff1a \u5408\u5e76\u6392\u5e8f\u548c\u4e8c\u5206\u67e5\u627e\u7684\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n log n + m log n)\uff0c\u5176\u4e2d m \u662f\u67e5\u8be2\u70b9\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u70b9\uff0c\u90fd\u6267\u884c\u4e00\u6b21\u4e8c\u5206\u67e5\u627e\uff0c\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n log n + m log n)\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/#_5","text":"\u5408\u5e76\u6392\u5e8f\u7684\u4e34\u65f6\u6570\u7ec4\uff1a \u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u5168\u5c40\u6570\u7ec4 L \u548c R\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a O(n)\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4\uff1a \u901a\u8fc7 new \u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 Px \u548c Py \u4e5f\u5360\u7528 O(n) \u7684\u7a7a\u95f4\u3002 \u603b\u4f53\u590d\u6742\u5ea6\uff1a \u7efc\u5408\u8003\u8651\uff0c\u6574\u4f53\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u8fd9\u662f\u7531\u6392\u5e8f\u548c\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4\u6240\u51b3\u5b9a\u7684\u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"thu/d3/d3s/dsa/PA/PA1/graphics/graphics/#_6","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n log n + m log n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)","title":"\u603b\u7ed3"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/","text":"2.0 \u601d\u8003\u9898 2A $$10n^2 \\times 10^{-8} \\times 2 \\leq 1$$ \u6240\u4ee5 $$n^2 \\leq 5 \\times 10^{6}$$ \u5373 $$n \\leq 2236$$ 2B $$20nlog_{2}n \\times 10^{-8} \\times 2 \\leq 1$$ \u6240\u4ee5 $$nlog_{2}n \\leq 2.5 \\times 10^{6}$$ \u901a\u8fc7\u8ba1\u7b97\u53ef\u5f97 $$n \\leq 145746$$ 3. \u8c03\u8bd5\u548c\u6d4b\u8bd5 3A //solution_1.cpp #include <cstdio> int matrix[2000][2000]; int main() { int n, m, q; scanf(\"%d%d\", &n, &m); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { scanf(\"%d\", &matrix[i][j]); } } scanf(\"%d\", &q); int sum = 0; for (int i = 1; i <= q; ++i) { int x, y, a, b; scanf(\"%d %d %d %d\", &x, &y, &a, &b); for (int j = 0; j < a; ++j) { for (int k = 0; k < b; ++k) { sum += matrix[x + j][y + k]; } } printf(\"%d\\n\", sum); } return 0; } 1. int sum = 0; \u5e94\u8be5\u653e\u5728\u5faa\u73af\u5185\uff0c\u5426\u5219\u6bcf\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u4f1a\u53e0\u52a0\u3002(\u9759\u6001\u68c0\u67e5) 2.\u6570\u7ec4\u8d8a\u754c\uff0c\u5f53n\u6216m\u7b49\u4e8e2000\u65f6\uff0c\u8bbf\u95eematrix[2000][2000]\u4f1a\u8d8a\u754c\u3002(\u8f93\u51fa\u8c03\u8bd5) 3.\u6574\u578b\u6ea2\u51fa\uff0c\u5f53\u67e5\u8be2\u7684\u5b50\u77e9\u9635\u8f83\u5927\u65f6\uff0csum\u4f1a\u8d85\u8fc7int\u7684\u8303\u56f4\u3002(\u5bf9\u62cd) AIGC\u53d1\u73b0\u7684\u95ee\u9898\u5305\u62ec\u4ee5\u4e0a\u95ee\u9898\uff0c\u8fd8\u6709\u4e0b\u8ff0\u95ee\u9898 \u6bcf\u6b21\u67e5\u8be2 O(a*b)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a TLE\uff08q \u53ef\u8fbe 1e5\uff09 \u8bc4\u4ef7\u4e00\u4e0bAIGC\u5de5\u5177\u7684\u8c03\u8bd5\u80fd\u529b\uff0c\u5b83\u80fd\u591f\u5feb\u901f\u5b9a\u4f4d\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u4fee\u6539\u5efa\u8bae\uff0c\u6781\u5927\u63d0\u9ad8\u4e86\u8c03\u8bd5\u6548\u7387\u3002\u4f46\u5728\u67d0\u4e9b\u590d\u6742\u573a\u666f\u4e0b\uff0c\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u7406\u89e3\u4ee3\u7801\u903b\u8f91\uff0c\u4ecd\u9700\u4eba\u5de5\u5e72\u9884\u3002 //solution_2.cpp #include <cstdio> int matrix[2000][2000]; int rowsum[2000][2000]; int main() { int n, m, q; scanf(\"%d%d\", &n, &m); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { scanf(\"%d\", &matrix[i][j]); } } for (int i = 1; i <= n; ++i) { rowsum[i][0] = 0; for (int j = 1; j <= m; ++j) { rowsum[i][j] = rowsum[i][j - 1] + matrix[i][j]; } } scanf(\"%d\", &q); int sum = 0; for (int i = 1; i <= q; ++i) { int x, y, a, b; scanf(\"%d %d %d %d\", &x, &y, &a, &b); for (int j = 0; j < a; ++j) { sum += rowsum[x + j][y + b] - rowsum[x + j][y]; } printf(\"%d\\n\", sum); } return 0; } 1. int sum = 0; \u5e94\u8be5\u653e\u5728\u5faa\u73af\u5185\uff0c\u5426\u5219\u6bcf\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u4f1a\u53e0\u52a0\u3002(\u9759\u6001\u68c0\u67e5) 2.\u6570\u7ec4\u8d8a\u754c\uff0c\u5f53n\u6216m\u7b49\u4e8e2000\u65f6\uff0c\u8bbf\u95eematrix[2000][2000]\u4f1a\u8d8a\u754c\u3002(\u8f93\u51fa\u8c03\u8bd5) 3.\u6574\u578b\u6ea2\u51fa\uff0c\u5f53\u67e5\u8be2\u7684\u5b50\u77e9\u9635\u8f83\u5927\u65f6\uff0csum\u4f1a\u8d85\u8fc7int\u7684\u8303\u56f4\uff0c\u5e94\u8be5\u7528long long\u3002(\u5bf9\u62cd) AIGC\u53d1\u73b0\u7684\u95ee\u9898\u5305\u62ec\u4ee5\u4e0a\u95ee\u9898\uff0c\u8fd8\u6709\u4e0b\u8ff0\u95ee\u9898 \u6027\u80fd\u4ecd\u53ef\u80fd\u8d85\u65f6\uff1a\u884c\u524d\u7f00\u53ea\u80fd\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(a)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u65e7\u4e0d\u591f\u5feb\u3002\u5e94\u6539\u4e3a\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(1)\u3002\u6027\u80fd\u4ecd\u53ef\u80fd\u8d85\u65f6\uff1a\u884c\u524d\u7f00\u53ea\u80fd\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(a)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u65e7\u4e0d\u591f\u5feb\u3002\u5e94\u6539\u4e3a\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(1)\u3002 \u8bc4\u4ef7\u4e00\u4e0bAIGC\u5de5\u5177\u7684\u8c03\u8bd5\u80fd\u529b\uff0c\u5b83\u80fd\u591f\u5feb\u901f\u5b9a\u4f4d\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u4fee\u6539\u5efa\u8bae\uff0c\u6781\u5927\u63d0\u9ad8\u4e86\u8c03\u8bd5\u6548\u7387\u3002\u4f46\u5728\u67d0\u4e9b\u590d\u6742\u573a\u666f\u4e0b\uff0c\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u7406\u89e3\u4ee3\u7801\u903b\u8f91\uff0c\u4ecd\u9700\u4eba\u5de5\u5e72\u9884\u3002 3B \u7528 gcc/g++ \u7f16\u8bd1\u65f6\uff0c\u9700\u8981\u52a0\u5165 -g \u9009\u9879\uff0c\u5b83\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5d4c\u5165\u7b26\u53f7\u8868\u548c\u6e90\u4ee3\u7801\u884c\u53f7\u4fe1\u606f\uff0c\u65b9\u4fbf\u8c03\u8bd5\u5668\u6620\u5c04\u673a\u5668\u6307\u4ee4\u5230\u6e90\u7801\u884c\u3002 g++ -g -O0 -Wall battle.cpp -o main \u4f7f\u7528\u4e09\u4e2a\u7f16\u8bd1\u9009\u9879 -g: \u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5d4c\u5165\u8c03\u8bd5\u4fe1\u606f\uff0c\u65b9\u4fbf\u8c03\u8bd5\u3002 -O0: \u5173\u95ed\u4f18\u5316\uff0c\u907f\u514d\u7f16\u8bd1\u5668\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\u540e\uff0c\u8c03\u8bd5\u65f6\u53d8\u91cf\u503c\u548c\u4ee3\u7801\u903b\u8f91\u96be\u4ee5\u5bf9\u5e94\u3002 -Wall: \u5f00\u542f\u6240\u6709\u8b66\u544a\uff0c\u5e2e\u52a9\u53d1\u73b0\u6f5c\u5728\u95ee\u9898\u3002 \u542f\u52a8gdb gdb ./main \u8bbe\u7f6e\u65ad\u70b9 (gdb) break main \u8fd0\u884c\u7a0b\u5e8f (gdb) run < input.txt \u5355\u6b65\u6267\u884c (gdb) next (gdb) step \u67e5\u770b\u53d8\u91cf print x\uff1a\u6253\u5370\u53d8\u91cf x \u7684\u503c\u3002 display x\uff1a\u6bcf\u6b21\u505c\u4e0b\u90fd\u4f1a\u81ea\u52a8\u663e\u793a x \u7684\u503c\u3002 info locals\uff1a\u67e5\u770b\u5f53\u524d\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u67e5\u770b\u6e90\u4ee3\u7801 list\uff1a\u663e\u793a\u6e90\u7801\uff08\u9ed8\u8ba4\u5f53\u524d\u884c\u9644\u8fd1 10 \u884c\uff09\u3002 list 30,50\uff1a\u663e\u793a\u7b2c 30\u201350 \u884c\u3002 3C \u56de\u7b54 rand_input.cpp \u4e2d\u8c03\u7528 srand(time(0)) \u7684\u4f5c\u7528\u3002 \u8c03\u7528 srand(time(0)) \u7684\u4f5c\u7528\u662f\u7528\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50\uff0c\u4ece\u800c\u4f7f\u5f97\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u4e0d\u540c\u3002 \u5982\u679c\u4e0d\u8c03\u7528 srand\uff0crand() \u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6\u90fd\u4f1a\u751f\u6210\u76f8\u540c\u7684\u968f\u673a\u6570\u5e8f\u5217\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u79cd\u5b50\u662f\u56fa\u5b9a\u76840\u3002 3D \u4e00\u6b21\u6027\u7f16\u8bd1\u9636\u6bb5 system(\"g++ rand_input.cpp -o rand_input\"); g++ \u7f16\u8bd1 rand_input.cpp \uff0c\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 rand_input\u3002 system(\"g++ check_input.cpp -o check_input\"); \u7f16\u8bd1 check_input.cpp \uff0c\u751f\u6210 check_input\u3002 system(\"g++ solution_1.cpp -o solution_1\"); \u7f16\u8bd1\u7b2c\u4e00\u4efd\u89e3\u6cd5\uff0c\u751f\u6210 solution_1\u3002 system(\"g++ solution_2.cpp -o solution_2\"); \u7f16\u8bd1\u7b2c\u4e8c\u4efd\u89e3\u6cd5\uff0c\u751f\u6210 solution_2\u3002 \u5faa\u73af\u5bf9\u62cd\u9636\u6bb5\uff08 while(1) \uff09 system(\"./rand_input > rand.in\"); \u8fd0\u884c\u6570\u636e\u751f\u6210\u5668\uff0c\u628a\u5176\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 rand.in\u3002 if(system(\"./check_input < rand.in\")!=0){ ... } \u8fd0\u884c\u8f93\u5165\u6821\u9a8c\u7a0b\u5e8f\uff0c\u4ece rand.in \u8bfb\u5165\uff08 < \u662f\u8f93\u5165\u91cd\u5b9a\u5411\uff09\u3002 system(\"./solution_1 < rand.in > 1.out\"); \u8fd0\u884c\u7b2c\u4e00\u4efd\u89e3\u6cd5\uff1a\u4ece rand.in \u8bfb\u5165\uff0c\u7ed3\u679c\u5199\u5230 1.out\u3002 system(\"./solution_2 < rand.in > 2.out\"); \u8fd0\u884c\u7b2c\u4e8c\u4efd\u89e3\u6cd5\uff1a\u540c\u4e0a\uff0c\u8f93\u51fa\u5230 2.out\u3002 if(system(\"diff 1.out 2.out\")!=0){ ... } \u7528 diff \u6bd4\u8f83\u4e24\u4e2a\u8f93\u51fa\u6587\u4ef6\u3002 diff \u9000\u51fa\u7801\uff1a0 \u8868\u793a\u6587\u4ef6\u5185\u5bb9\u76f8\u540c\uff1b1 \u8868\u793a\u4e0d\u540c\uff1b>1 \u8868\u793a\u6bd4\u8f83\u8fc7\u7a0b\u4e2d\u51fa\u9519\uff08\u5982\u6587\u4ef6\u4e0d\u5b58\u5728\uff09\u3002 \u8fd9\u91cc != 0 \u628a\u201c\u4e0d\u540c\u201d\u548c\u201c\u51fa\u9519\u201d\u90fd\u5f53\u4f5c\u5931\u8d25\uff1a\u6253\u5370 different output! \u5e76 break \u3002 3E \u7ed3\u8bba\u5148\u8bf4\uff1a \u6700\u5927\u53ef\u80fd\u6570\u503c\u7684\u6570\u91cf\u7ea7\uff1a \u5b50\u77e9\u5f62\u6700\u591a\u5305\u542b $n\\times m \\le 2000\\times2000=4\\times10^{6}$ \u4e2a\u5143\u7d20\uff1b \u5355\u6b21\u6c42\u548c\u7684\u6700\u5927\u7edd\u5bf9\u503c\u4e3a $$ 4\\times10^{6}\\times10^{5}=4\\times10^{11}=400{,}000{,}000{,}000. $$ \u9700\u8981\u7684\u6570\u636e\u7c7b\u578b\uff1a 32 \u4f4d int \uff08\u4e0a\u9650\u7ea6 $2.1\\times10^{9}$\uff09\u4f1a\u6ea2\u51fa\uff1b \u5e94\u4f7f\u75284 \u4f4d\u6709\u7b26\u53f7\u6574\u6570 long long \u4e0a\u9650\u7ea6 $9.22\\times10^{18}$\uff09\uff0c\u8db3\u591f\u5b89\u5168\u3002 4 4A solution_2.cpp \u6bd4 solution_1.cpp \u5c11\u4e86\u4e00\u5c42\u5faa\u73af\uff0c\u4f7f\u7528\u4e86\u4e00\u7ef4\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0csolution_3.cpp \u4f7f\u7528\u4e86\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0c\u8fdb\u4e00\u6b65\u51cf\u5c11\u4e86\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5176\u7b97\u6cd5\u601d\u8def\u4e3a\uff1a \u9884\u5904\u7406\u9636\u6bb5\uff1a\u6784\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u6570\u7ec4 ps\uff0c\u5176\u4e2d ps[i][j] \u8868\u793a\u539f\u59cb\u77e9\u9635\u4e2d (1,1) \u5230 (i,j) \u7684\u5143\u7d20\u548c\u3002 \u67e5\u8be2\u9636\u6bb5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2 (x,y,a,b)\uff0c\u901a\u8fc7\u524d\u7f00\u548c\u6570\u7ec4\u5feb\u901f\u8ba1\u7b97\u5b50\u77e9\u9635 (x,y) \u5230 (x+a-1,y+b-1) \u7684\u548c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1) 4B \u6211\u4f7f\u7528 \u6d4b\u91cf\u4e86\u4e0d\u540c\u6d4b\u4f8b\u4e0b\u4e09\u79cd\u89e3\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u901a\u8fc7\u5206\u6790\u5f97\u51fa\u4e24\u4e2a\u4ee3\u8868\u6027\u5b9e\u4f8b n=m=2000, q=1e5 solution_1 time: 43.041824 seconds solution_2 time: 0.929999 seconds solution_3 time: 0.186934 seconds n=m=2000, q=500 solution_1 time: 0.358786 seconds solution_2 time: 0.185471 seconds solution_3 time: 0.161679 seconds 4C \u53ef\u4ee5\u53d1\u73b0\u5728q\u8f83\u5927\u65f6\uff0csolution_3\u7684\u4f18\u52bf\u66f4\u660e\u663e\uff0c\u800cq\u8f83\u5c0f\u65f6\uff0csolution_2\u548csolution_3\u7684\u5dee\u8ddd\u4e0d\u5927\u3002\u540c\u6837\u5728n\u548cm\u8f83\u5c0f\u65f6\uff0c\u4e09\u79cd\u89e3\u6cd5\u7684\u5dee\u8ddd\u4e5f\u4e0d\u5927\uff0c\u4f46\u968f\u7740n\u548cm\u7684\u589e\u5927\uff0csolution_3\u7684\u4f18\u52bf\u4f1a\u66f4\u52a0\u660e\u663e 5 5B \u5982\u4f55\u9ad8\u6548\u652f\u6301\u4e8c\u7ef4\u70b9\u4fee\u6539\u4e0e\u77e9\u5f62\u6c42\u548c,LLM\u7ed9\u51fa\u7684\u7b54\u6848 1) \u53ea\u67e5\u8be2\u3001\u4e0d\u4fee\u6539\uff08\u9759\u6001\uff09 \u4e8c\u7ef4\u524d\u7f00\u548c\uff082D Prefix Sum\uff09 \u9884\u5904\u7406\uff1a$O(nm)$ \u5355\u6b21\u67e5\u8be2\u77e9\u5f62\u548c\uff1a$O(1)$\uff08\u7528\u56db\u4e2a\u524d\u7f00\u4ea4\u9519\u76f8\u51cf\uff09 \u4e0d\u652f\u6301\u5728\u7ebf\u4fee\u6539\uff1b\u9002\u5408\u201c\u6d77\u91cf\u67e5\u8be2\u3001\u65e0\u66f4\u65b0\u201d\u3002 2) \u70b9\u4fee\u6539 + \u77e9\u5f62\u6c42\u548c\uff08\u5728\u7ebf\uff09 \u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\uff082D Fenwick / BIT\uff09 \u652f\u6301 \u70b9\u52a0 \u3001 \u524d\u7f00\u548c \uff1a\u6bcf\u6b21 $O(\\log n \\log m)$\u3002 \u77e9\u5f62\u548c\u53ef\u7528\u524d\u7f00\u548c\u505a 4 \u6b21\u5305\u542b-\u6392\u9664\uff1a\u540c\u6837 $O(\\log^2)$\u3002 \u7a7a\u95f4\uff1a$(n+1)\\times(m+1)$\u3002\u7a20\u5bc6\u77e9\u9635\u53ef\u7528\uff1b\u82e5\u5750\u6807\u7a00\u758f\uff0c\u7ed3\u5408 \u5750\u6807\u538b\u7f29 \u6216\u7528\u201cBIT \u91cc\u5957 map\u201d\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 \u4ee3\u7801\u91cf\u8f83\u5c0f\uff0c\u5e38\u4f5c\u4e3a\u9996\u9009\u3002 \u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff08SegTree of SegTree / Segment Tree 2D\uff09 \u70b9\u4fee\u6539/\u77e9\u5f62\u6c42\u548c\uff1a\u5178\u578b $O(\\log n \\log m)$\u3002 \u53ef\u6269\u5c55 \u61d2\u6807\u8bb0 \u5904\u7406\u66f4\u590d\u6742\u66f4\u65b0\uff08\u89c1\u4e0b\u4e00\u6761\uff09\u3002 \u7a7a\u95f4\u548c\u5b9e\u73b0\u96be\u5ea6\u8f83\u9ad8\uff08\u7a20\u5bc6\u60c5\u5f62\u7ea6 $O(nm)$\uff0c\u7a00\u758f\u53ef\u901a\u8fc7\u5750\u6807\u538b\u7f29\u505a\u5230 $O(N \\log N)$\uff0c\u5176\u4e2d $N$ \u4e3a\u6709\u6548\u70b9\u6570\uff09\u3002 \u5206\u5757/\u4e8c\u7ef4\u5757\u72b6\u94fe\u8868\uff08Sqrt Decomposition 2D\uff09 \u5c06\u77e9\u9635\u5206\u6210 $B\\times B$ \u5757\uff0c\u5757\u5185\u7ef4\u62a4\u548c\u3002 \u67e5\u8be2\u590d\u6742\u5ea6\u8fd1\u4f3c $O!\\left(\\frac{nm}{B^2}+B^2\\right)$\uff0c\u70b9\u6539 $O(1)$ \u66f4\u65b0\u5757\u548c\u3002 \u9009\u62e9 $B\\approx \\sqrt[4]{nm}$ \u65f6\uff0c\u67e5\u8be2 $\\tilde O(\\sqrt{nm})$\u3002 \u5e38\u6570\u4f4e\u3001\u6613\u5b9e\u73b0\uff0c\u4f46\u5728\u5927\u89c4\u6a21/\u9ad8\u9891\u67e5\u8be2\u4e0b\u52a3\u4e8e $\\log^2$ \u7684\u7ed3\u6784\u3002 3) \u533a\u95f4/\u77e9\u5f62\u4fee\u6539 + \u77e9\u5f62\u6c42\u548c \u56db\u68f5 2D BIT \u505a\u77e9\u5f62\u52a0 & \u77e9\u5f62\u548c \u4e00\u7ef4\u91cc\u201c\u4e24\u4e2a BIT \u652f\u6301\u533a\u95f4\u52a0/\u524d\u7f00\u6c42\u548c\u201d\uff0c\u4e8c\u7ef4\u53ef\u63a8\u5e7f\u4e3a \u56db\u68f5 2D BIT\uff0c\u5206\u522b\u5b58\u653e\u7cfb\u6570\uff0c\u67e5\u8be2\u7528\u4e8c\u7ef4\u5305\u542b-\u6392\u9664\u7ec4\u5408\u3002 \u590d\u6742\u5ea6\uff1a\u6bcf\u6b21\u66f4\u65b0/\u67e5\u8be2\u4ecd\u662f $O(\\log n \\log m)$\u3002 \u4ee3\u7801\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u5f88\u901a\u7528\u3002 \u4e8c\u7ef4\u7ebf\u6bb5\u6811 + \u61d2\u6807\u8bb0 \u76f4\u63a5\u652f\u6301\u77e9\u5f62\u52a0\u3001\u77e9\u5f62\u6c42\u548c\u3002 \u590d\u6742\u5ea6\uff1a$O(\\log n \\log m)$\u3002 \u5b9e\u73b0\u4e0e\u5185\u5b58\u5f00\u9500\u6700\u5927\uff0c\u4f46\u8868\u8fbe\u529b\u6700\u5f3a\u3002 4) \u79bb\u7ebf\u6280\u5de7\uff08\u5f53\u64cd\u4f5c\u90fd\u53ef\u63d0\u524d\u62ff\u5230\uff09 CDQ \u5206\u6cbb / D\\&C on time + BIT \u628a\u65f6\u95f4\u7ef4\u5ea6\u5206\u6cbb\uff0c\u5728\u7ebf\u8f6c\u79bb\u7ebf\uff1b\u914d\u5408\uff081D/2D\uff09BIT \u5904\u7406\u201c\u524d\u7f00\u8d21\u732e\u201d\u3002 \u603b\u590d\u6742\u5ea6\u5e38\u89c1\u4e3a $O((n+q)\\log^2 N)$\uff08\u914d\u5408\u5750\u6807\u538b\u7f29\uff09\u3002 \u9002\u5408\u8d85\u5927\u89c4\u6a21\u3001\u7a00\u758f\u5750\u6807\u3001\u6216\u9700\u8981\u628a\u591a\u79cd\u64cd\u4f5c\u7edf\u4e00\u4e3a\u201c\u52a0\u70b9/\u8be2\u95ee\u524d\u7f00\u201d\u7684\u573a\u666f\u3002 5) \u9009\u62e9\u5efa\u8bae \u53ea\u67e5\u4e0d\u6539 \uff1a\u4e8c\u7ef4\u524d\u7f00\u548c\u3002 \u70b9\u6539 + \u77e9\u5f62\u548c \uff1a\u4f18\u5148\u4e8c\u7ef4 BIT\uff1b\u6570\u636e\u975e\u5e38\u7a00\u758f\u4e14\u5750\u6807\u5927\u65f6\u7528\u201cSegTree/BIT + \u5750\u6807\u538b\u7f29/\u6563\u5217\u201d\u3002 \u77e9\u5f62\u6539 + \u77e9\u5f62\u548c \uff1a\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u5e26\u61d2\u6807\u8bb0\uff0c\u6216\u201c\u56db BIT\u201d\u65b9\u6848\u3002 \u79bb\u7ebf\u53ef\u884c \uff1a\u8003\u8651 CDQ + BIT\u3002 \u6570\u503c\u7c7b\u578b \uff1a\u548c\u53ef\u80fd\u8fbe $O(nm\\cdot \\lvert v\\rvert)$\uff0c\u5efa\u8bae\u7528 64 \u4f4d\u6574\u578b\uff08 long long / int64_t \uff09\u3002 6) \u5c0f\u8868\u683c\uff08\u5178\u578b\u590d\u6742\u5ea6\u4e0e\u8981\u70b9\uff09 \u7ed3\u6784 \u652f\u6301\u7684\u64cd\u4f5c \u5355\u6b21\u590d\u6742\u5ea6 \u7a7a\u95f4 \u96be\u5ea6 2D \u524d\u7f00\u548c \u77e9\u5f62\u548c\uff08\u9759\u6001\uff09 \u9884\u5904\u7406 O(nm)\uff0c\u67e5\u8be2 O(1) O(nm) \u4f4e 2D BIT \u70b9\u52a0 / \u77e9\u5f62\u548c O(log n log m) O(nm)\uff08\u53ef\u538b\u7f29\uff09 \u4e2d 2D SegTree \u70b9\u52a0 / \u77e9\u5f62\u548c O(log n log m) \u9ad8\uff08\u53ef\u538b\u7f29\uff09 \u9ad8 2D BIT\u00d74 \u77e9\u5f62\u52a0 / \u77e9\u5f62\u548c O(log n log m) 4\u00d72D BIT \u9ad8 2D SegTree+Lazy \u77e9\u5f62\u52a0 / \u77e9\u5f62\u548c O(log n log m) \u9ad8 \u6700\u9ad8 2D \u5206\u5757 \u70b9\u6539 / \u77e9\u5f62\u548c \\~O(\u221a(nm))\uff08\u8c03\u53c2\uff09 O(nm/B^2) \u7ea7 \u4f4e\u4e2d CDQ + BIT\uff08\u79bb\u7ebf\uff09 \u7edf\u4e00\u6c42\u89e3\u591a\u7c7b\u64cd\u4f5c O((n+q) log^2 N) \u4f9d\u5b9e\u73b0 \u9ad8 \u6211\u5bf9\u4e0a\u8ff0\u56de\u7b54\u7684\u7591\u95ee \u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7684\u5185\u5b58\u5982\u4f55\u7cbe\u786e\u4f30\u7b97\uff1f\u7a20\u5bc6 vs. \u7a00\u758f\u3001\u5750\u6807\u538b\u7f29\u540e\u80fd\u964d\u5230\u591a\u5c11\u91cf\u7ea7\uff1f \u4e8c\u7ef4\u7ebf\u6bb5\u6811\u505a\u61d2\u6807\u8bb0\u65f6\uff0c\u8282\u70b9\u5982\u4f55\u8868\u8fbe\u201c\u77e9\u5f62\u8303\u56f4\u201d\u4e0a\u7684\u589e\u91cf\u4e0e\u5408\u5e76\uff1f\u8fb9\u754c\u4e0e\u8986\u76d6\u5173\u7cfb\u7684\u5b9e\u73b0\u7ec6\u8282\u662f\u4ec0\u4e48\uff1f \u56db BIT \u7684\u63a8\u5bfc\uff1a\u4e8c\u7ef4\u4ece\u4e00\u7ef4\u201c\u4e24\u4e2a BIT\u201d\u7684\u516c\u5f0f\u600e\u4e48\u4e25\u683c\u63a8\u5e7f\uff1f\u56db\u68f5\u6811\u5404\u81ea\u5b58\u7684\u7cfb\u6570\u5177\u4f53\u662f\u4ec0\u4e48\uff1f \u5750\u6807\u538b\u7f29\u7684\u5de5\u7a0b\u5316\u505a\u6cd5\uff1a\u5f53\u5750\u6807\u8fbe 1e9 \u4e14\u53ea\u64cd\u4f5c\u5c11\u91cf\u70b9/\u77e9\u5f62\u65f6\uff0c\u5982\u4f55\u5728 2D BIT / 2D SegTree \u4e2d\u9ad8\u6548\u505a\u538b\u7f29\u4e0e\u52a8\u6001\u63d2\u5165\uff1f \u5e38\u6570\u4e0e\u7f13\u5b58\u53cb\u597d\u6027\uff1a\u5728\u76f8\u540c $O(\\log^2)$ \u4e0b\uff0c2D BIT \u4e0e 2D SegTree \u7684\u5e38\u6570\u5dee\u5f02\u548c\u7f13\u5b58\u5c40\u90e8\u6027\u5982\u4f55\u5f71\u54cd\u5b9e\u9645\u6027\u80fd\uff1f","title":"Lab1"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#20","text":"","title":"2.0 \u601d\u8003\u9898"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#2a","text":"$$10n^2 \\times 10^{-8} \\times 2 \\leq 1$$ \u6240\u4ee5 $$n^2 \\leq 5 \\times 10^{6}$$ \u5373 $$n \\leq 2236$$","title":"2A"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#2b","text":"$$20nlog_{2}n \\times 10^{-8} \\times 2 \\leq 1$$ \u6240\u4ee5 $$nlog_{2}n \\leq 2.5 \\times 10^{6}$$ \u901a\u8fc7\u8ba1\u7b97\u53ef\u5f97 $$n \\leq 145746$$","title":"2B"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3","text":"","title":"3. \u8c03\u8bd5\u548c\u6d4b\u8bd5"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3a","text":"//solution_1.cpp #include <cstdio> int matrix[2000][2000]; int main() { int n, m, q; scanf(\"%d%d\", &n, &m); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { scanf(\"%d\", &matrix[i][j]); } } scanf(\"%d\", &q); int sum = 0; for (int i = 1; i <= q; ++i) { int x, y, a, b; scanf(\"%d %d %d %d\", &x, &y, &a, &b); for (int j = 0; j < a; ++j) { for (int k = 0; k < b; ++k) { sum += matrix[x + j][y + k]; } } printf(\"%d\\n\", sum); } return 0; } 1. int sum = 0; \u5e94\u8be5\u653e\u5728\u5faa\u73af\u5185\uff0c\u5426\u5219\u6bcf\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u4f1a\u53e0\u52a0\u3002(\u9759\u6001\u68c0\u67e5) 2.\u6570\u7ec4\u8d8a\u754c\uff0c\u5f53n\u6216m\u7b49\u4e8e2000\u65f6\uff0c\u8bbf\u95eematrix[2000][2000]\u4f1a\u8d8a\u754c\u3002(\u8f93\u51fa\u8c03\u8bd5) 3.\u6574\u578b\u6ea2\u51fa\uff0c\u5f53\u67e5\u8be2\u7684\u5b50\u77e9\u9635\u8f83\u5927\u65f6\uff0csum\u4f1a\u8d85\u8fc7int\u7684\u8303\u56f4\u3002(\u5bf9\u62cd) AIGC\u53d1\u73b0\u7684\u95ee\u9898\u5305\u62ec\u4ee5\u4e0a\u95ee\u9898\uff0c\u8fd8\u6709\u4e0b\u8ff0\u95ee\u9898 \u6bcf\u6b21\u67e5\u8be2 O(a*b)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a TLE\uff08q \u53ef\u8fbe 1e5\uff09 \u8bc4\u4ef7\u4e00\u4e0bAIGC\u5de5\u5177\u7684\u8c03\u8bd5\u80fd\u529b\uff0c\u5b83\u80fd\u591f\u5feb\u901f\u5b9a\u4f4d\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u4fee\u6539\u5efa\u8bae\uff0c\u6781\u5927\u63d0\u9ad8\u4e86\u8c03\u8bd5\u6548\u7387\u3002\u4f46\u5728\u67d0\u4e9b\u590d\u6742\u573a\u666f\u4e0b\uff0c\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u7406\u89e3\u4ee3\u7801\u903b\u8f91\uff0c\u4ecd\u9700\u4eba\u5de5\u5e72\u9884\u3002 //solution_2.cpp #include <cstdio> int matrix[2000][2000]; int rowsum[2000][2000]; int main() { int n, m, q; scanf(\"%d%d\", &n, &m); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= m; ++j) { scanf(\"%d\", &matrix[i][j]); } } for (int i = 1; i <= n; ++i) { rowsum[i][0] = 0; for (int j = 1; j <= m; ++j) { rowsum[i][j] = rowsum[i][j - 1] + matrix[i][j]; } } scanf(\"%d\", &q); int sum = 0; for (int i = 1; i <= q; ++i) { int x, y, a, b; scanf(\"%d %d %d %d\", &x, &y, &a, &b); for (int j = 0; j < a; ++j) { sum += rowsum[x + j][y + b] - rowsum[x + j][y]; } printf(\"%d\\n\", sum); } return 0; } 1. int sum = 0; \u5e94\u8be5\u653e\u5728\u5faa\u73af\u5185\uff0c\u5426\u5219\u6bcf\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u4f1a\u53e0\u52a0\u3002(\u9759\u6001\u68c0\u67e5) 2.\u6570\u7ec4\u8d8a\u754c\uff0c\u5f53n\u6216m\u7b49\u4e8e2000\u65f6\uff0c\u8bbf\u95eematrix[2000][2000]\u4f1a\u8d8a\u754c\u3002(\u8f93\u51fa\u8c03\u8bd5) 3.\u6574\u578b\u6ea2\u51fa\uff0c\u5f53\u67e5\u8be2\u7684\u5b50\u77e9\u9635\u8f83\u5927\u65f6\uff0csum\u4f1a\u8d85\u8fc7int\u7684\u8303\u56f4\uff0c\u5e94\u8be5\u7528long long\u3002(\u5bf9\u62cd) AIGC\u53d1\u73b0\u7684\u95ee\u9898\u5305\u62ec\u4ee5\u4e0a\u95ee\u9898\uff0c\u8fd8\u6709\u4e0b\u8ff0\u95ee\u9898 \u6027\u80fd\u4ecd\u53ef\u80fd\u8d85\u65f6\uff1a\u884c\u524d\u7f00\u53ea\u80fd\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(a)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u65e7\u4e0d\u591f\u5feb\u3002\u5e94\u6539\u4e3a\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(1)\u3002\u6027\u80fd\u4ecd\u53ef\u80fd\u8d85\u65f6\uff1a\u884c\u524d\u7f00\u53ea\u80fd\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(a)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u65e7\u4e0d\u591f\u5feb\u3002\u5e94\u6539\u4e3a\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u628a\u6bcf\u6b21\u67e5\u8be2\u964d\u5230 O(1)\u3002 \u8bc4\u4ef7\u4e00\u4e0bAIGC\u5de5\u5177\u7684\u8c03\u8bd5\u80fd\u529b\uff0c\u5b83\u80fd\u591f\u5feb\u901f\u5b9a\u4f4d\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u4fee\u6539\u5efa\u8bae\uff0c\u6781\u5927\u63d0\u9ad8\u4e86\u8c03\u8bd5\u6548\u7387\u3002\u4f46\u5728\u67d0\u4e9b\u590d\u6742\u573a\u666f\u4e0b\uff0c\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u7406\u89e3\u4ee3\u7801\u903b\u8f91\uff0c\u4ecd\u9700\u4eba\u5de5\u5e72\u9884\u3002","title":"3A"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3b","text":"\u7528 gcc/g++ \u7f16\u8bd1\u65f6\uff0c\u9700\u8981\u52a0\u5165 -g \u9009\u9879\uff0c\u5b83\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5d4c\u5165\u7b26\u53f7\u8868\u548c\u6e90\u4ee3\u7801\u884c\u53f7\u4fe1\u606f\uff0c\u65b9\u4fbf\u8c03\u8bd5\u5668\u6620\u5c04\u673a\u5668\u6307\u4ee4\u5230\u6e90\u7801\u884c\u3002 g++ -g -O0 -Wall battle.cpp -o main \u4f7f\u7528\u4e09\u4e2a\u7f16\u8bd1\u9009\u9879 -g: \u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5d4c\u5165\u8c03\u8bd5\u4fe1\u606f\uff0c\u65b9\u4fbf\u8c03\u8bd5\u3002 -O0: \u5173\u95ed\u4f18\u5316\uff0c\u907f\u514d\u7f16\u8bd1\u5668\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\u540e\uff0c\u8c03\u8bd5\u65f6\u53d8\u91cf\u503c\u548c\u4ee3\u7801\u903b\u8f91\u96be\u4ee5\u5bf9\u5e94\u3002 -Wall: \u5f00\u542f\u6240\u6709\u8b66\u544a\uff0c\u5e2e\u52a9\u53d1\u73b0\u6f5c\u5728\u95ee\u9898\u3002 \u542f\u52a8gdb gdb ./main \u8bbe\u7f6e\u65ad\u70b9 (gdb) break main \u8fd0\u884c\u7a0b\u5e8f (gdb) run < input.txt \u5355\u6b65\u6267\u884c (gdb) next (gdb) step \u67e5\u770b\u53d8\u91cf print x\uff1a\u6253\u5370\u53d8\u91cf x \u7684\u503c\u3002 display x\uff1a\u6bcf\u6b21\u505c\u4e0b\u90fd\u4f1a\u81ea\u52a8\u663e\u793a x \u7684\u503c\u3002 info locals\uff1a\u67e5\u770b\u5f53\u524d\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u67e5\u770b\u6e90\u4ee3\u7801 list\uff1a\u663e\u793a\u6e90\u7801\uff08\u9ed8\u8ba4\u5f53\u524d\u884c\u9644\u8fd1 10 \u884c\uff09\u3002 list 30,50\uff1a\u663e\u793a\u7b2c 30\u201350 \u884c\u3002","title":"3B"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3c","text":"\u56de\u7b54 rand_input.cpp \u4e2d\u8c03\u7528 srand(time(0)) \u7684\u4f5c\u7528\u3002 \u8c03\u7528 srand(time(0)) \u7684\u4f5c\u7528\u662f\u7528\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50\uff0c\u4ece\u800c\u4f7f\u5f97\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u4e0d\u540c\u3002 \u5982\u679c\u4e0d\u8c03\u7528 srand\uff0crand() \u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6\u90fd\u4f1a\u751f\u6210\u76f8\u540c\u7684\u968f\u673a\u6570\u5e8f\u5217\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u79cd\u5b50\u662f\u56fa\u5b9a\u76840\u3002","title":"3C"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3d","text":"\u4e00\u6b21\u6027\u7f16\u8bd1\u9636\u6bb5 system(\"g++ rand_input.cpp -o rand_input\"); g++ \u7f16\u8bd1 rand_input.cpp \uff0c\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 rand_input\u3002 system(\"g++ check_input.cpp -o check_input\"); \u7f16\u8bd1 check_input.cpp \uff0c\u751f\u6210 check_input\u3002 system(\"g++ solution_1.cpp -o solution_1\"); \u7f16\u8bd1\u7b2c\u4e00\u4efd\u89e3\u6cd5\uff0c\u751f\u6210 solution_1\u3002 system(\"g++ solution_2.cpp -o solution_2\"); \u7f16\u8bd1\u7b2c\u4e8c\u4efd\u89e3\u6cd5\uff0c\u751f\u6210 solution_2\u3002 \u5faa\u73af\u5bf9\u62cd\u9636\u6bb5\uff08 while(1) \uff09 system(\"./rand_input > rand.in\"); \u8fd0\u884c\u6570\u636e\u751f\u6210\u5668\uff0c\u628a\u5176\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 rand.in\u3002 if(system(\"./check_input < rand.in\")!=0){ ... } \u8fd0\u884c\u8f93\u5165\u6821\u9a8c\u7a0b\u5e8f\uff0c\u4ece rand.in \u8bfb\u5165\uff08 < \u662f\u8f93\u5165\u91cd\u5b9a\u5411\uff09\u3002 system(\"./solution_1 < rand.in > 1.out\"); \u8fd0\u884c\u7b2c\u4e00\u4efd\u89e3\u6cd5\uff1a\u4ece rand.in \u8bfb\u5165\uff0c\u7ed3\u679c\u5199\u5230 1.out\u3002 system(\"./solution_2 < rand.in > 2.out\"); \u8fd0\u884c\u7b2c\u4e8c\u4efd\u89e3\u6cd5\uff1a\u540c\u4e0a\uff0c\u8f93\u51fa\u5230 2.out\u3002 if(system(\"diff 1.out 2.out\")!=0){ ... } \u7528 diff \u6bd4\u8f83\u4e24\u4e2a\u8f93\u51fa\u6587\u4ef6\u3002 diff \u9000\u51fa\u7801\uff1a0 \u8868\u793a\u6587\u4ef6\u5185\u5bb9\u76f8\u540c\uff1b1 \u8868\u793a\u4e0d\u540c\uff1b>1 \u8868\u793a\u6bd4\u8f83\u8fc7\u7a0b\u4e2d\u51fa\u9519\uff08\u5982\u6587\u4ef6\u4e0d\u5b58\u5728\uff09\u3002 \u8fd9\u91cc != 0 \u628a\u201c\u4e0d\u540c\u201d\u548c\u201c\u51fa\u9519\u201d\u90fd\u5f53\u4f5c\u5931\u8d25\uff1a\u6253\u5370 different output! \u5e76 break \u3002","title":"3D"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3e","text":"\u7ed3\u8bba\u5148\u8bf4\uff1a \u6700\u5927\u53ef\u80fd\u6570\u503c\u7684\u6570\u91cf\u7ea7\uff1a \u5b50\u77e9\u5f62\u6700\u591a\u5305\u542b $n\\times m \\le 2000\\times2000=4\\times10^{6}$ \u4e2a\u5143\u7d20\uff1b \u5355\u6b21\u6c42\u548c\u7684\u6700\u5927\u7edd\u5bf9\u503c\u4e3a $$ 4\\times10^{6}\\times10^{5}=4\\times10^{11}=400{,}000{,}000{,}000. $$ \u9700\u8981\u7684\u6570\u636e\u7c7b\u578b\uff1a 32 \u4f4d int \uff08\u4e0a\u9650\u7ea6 $2.1\\times10^{9}$\uff09\u4f1a\u6ea2\u51fa\uff1b \u5e94\u4f7f\u75284 \u4f4d\u6709\u7b26\u53f7\u6574\u6570 long long \u4e0a\u9650\u7ea6 $9.22\\times10^{18}$\uff09\uff0c\u8db3\u591f\u5b89\u5168\u3002","title":"3E"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#4","text":"","title":"4"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#4a","text":"solution_2.cpp \u6bd4 solution_1.cpp \u5c11\u4e86\u4e00\u5c42\u5faa\u73af\uff0c\u4f7f\u7528\u4e86\u4e00\u7ef4\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0csolution_3.cpp \u4f7f\u7528\u4e86\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0c\u8fdb\u4e00\u6b65\u51cf\u5c11\u4e86\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5176\u7b97\u6cd5\u601d\u8def\u4e3a\uff1a \u9884\u5904\u7406\u9636\u6bb5\uff1a\u6784\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u6570\u7ec4 ps\uff0c\u5176\u4e2d ps[i][j] \u8868\u793a\u539f\u59cb\u77e9\u9635\u4e2d (1,1) \u5230 (i,j) \u7684\u5143\u7d20\u548c\u3002 \u67e5\u8be2\u9636\u6bb5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2 (x,y,a,b)\uff0c\u901a\u8fc7\u524d\u7f00\u548c\u6570\u7ec4\u5feb\u901f\u8ba1\u7b97\u5b50\u77e9\u9635 (x,y) \u5230 (x+a-1,y+b-1) \u7684\u548c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)","title":"4A"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#4b","text":"\u6211\u4f7f\u7528 \u6d4b\u91cf\u4e86\u4e0d\u540c\u6d4b\u4f8b\u4e0b\u4e09\u79cd\u89e3\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u901a\u8fc7\u5206\u6790\u5f97\u51fa\u4e24\u4e2a\u4ee3\u8868\u6027\u5b9e\u4f8b n=m=2000, q=1e5 solution_1 time: 43.041824 seconds solution_2 time: 0.929999 seconds solution_3 time: 0.186934 seconds n=m=2000, q=500 solution_1 time: 0.358786 seconds solution_2 time: 0.185471 seconds solution_3 time: 0.161679 seconds","title":"4B"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#4c","text":"\u53ef\u4ee5\u53d1\u73b0\u5728q\u8f83\u5927\u65f6\uff0csolution_3\u7684\u4f18\u52bf\u66f4\u660e\u663e\uff0c\u800cq\u8f83\u5c0f\u65f6\uff0csolution_2\u548csolution_3\u7684\u5dee\u8ddd\u4e0d\u5927\u3002\u540c\u6837\u5728n\u548cm\u8f83\u5c0f\u65f6\uff0c\u4e09\u79cd\u89e3\u6cd5\u7684\u5dee\u8ddd\u4e5f\u4e0d\u5927\uff0c\u4f46\u968f\u7740n\u548cm\u7684\u589e\u5927\uff0csolution_3\u7684\u4f18\u52bf\u4f1a\u66f4\u52a0\u660e\u663e","title":"4C"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#5","text":"","title":"5"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#5b","text":"\u5982\u4f55\u9ad8\u6548\u652f\u6301\u4e8c\u7ef4\u70b9\u4fee\u6539\u4e0e\u77e9\u5f62\u6c42\u548c,LLM\u7ed9\u51fa\u7684\u7b54\u6848","title":"5B"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#1","text":"\u4e8c\u7ef4\u524d\u7f00\u548c\uff082D Prefix Sum\uff09 \u9884\u5904\u7406\uff1a$O(nm)$ \u5355\u6b21\u67e5\u8be2\u77e9\u5f62\u548c\uff1a$O(1)$\uff08\u7528\u56db\u4e2a\u524d\u7f00\u4ea4\u9519\u76f8\u51cf\uff09 \u4e0d\u652f\u6301\u5728\u7ebf\u4fee\u6539\uff1b\u9002\u5408\u201c\u6d77\u91cf\u67e5\u8be2\u3001\u65e0\u66f4\u65b0\u201d\u3002","title":"1) \u53ea\u67e5\u8be2\u3001\u4e0d\u4fee\u6539\uff08\u9759\u6001\uff09"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#2","text":"\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\uff082D Fenwick / BIT\uff09 \u652f\u6301 \u70b9\u52a0 \u3001 \u524d\u7f00\u548c \uff1a\u6bcf\u6b21 $O(\\log n \\log m)$\u3002 \u77e9\u5f62\u548c\u53ef\u7528\u524d\u7f00\u548c\u505a 4 \u6b21\u5305\u542b-\u6392\u9664\uff1a\u540c\u6837 $O(\\log^2)$\u3002 \u7a7a\u95f4\uff1a$(n+1)\\times(m+1)$\u3002\u7a20\u5bc6\u77e9\u9635\u53ef\u7528\uff1b\u82e5\u5750\u6807\u7a00\u758f\uff0c\u7ed3\u5408 \u5750\u6807\u538b\u7f29 \u6216\u7528\u201cBIT \u91cc\u5957 map\u201d\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 \u4ee3\u7801\u91cf\u8f83\u5c0f\uff0c\u5e38\u4f5c\u4e3a\u9996\u9009\u3002 \u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff08SegTree of SegTree / Segment Tree 2D\uff09 \u70b9\u4fee\u6539/\u77e9\u5f62\u6c42\u548c\uff1a\u5178\u578b $O(\\log n \\log m)$\u3002 \u53ef\u6269\u5c55 \u61d2\u6807\u8bb0 \u5904\u7406\u66f4\u590d\u6742\u66f4\u65b0\uff08\u89c1\u4e0b\u4e00\u6761\uff09\u3002 \u7a7a\u95f4\u548c\u5b9e\u73b0\u96be\u5ea6\u8f83\u9ad8\uff08\u7a20\u5bc6\u60c5\u5f62\u7ea6 $O(nm)$\uff0c\u7a00\u758f\u53ef\u901a\u8fc7\u5750\u6807\u538b\u7f29\u505a\u5230 $O(N \\log N)$\uff0c\u5176\u4e2d $N$ \u4e3a\u6709\u6548\u70b9\u6570\uff09\u3002 \u5206\u5757/\u4e8c\u7ef4\u5757\u72b6\u94fe\u8868\uff08Sqrt Decomposition 2D\uff09 \u5c06\u77e9\u9635\u5206\u6210 $B\\times B$ \u5757\uff0c\u5757\u5185\u7ef4\u62a4\u548c\u3002 \u67e5\u8be2\u590d\u6742\u5ea6\u8fd1\u4f3c $O!\\left(\\frac{nm}{B^2}+B^2\\right)$\uff0c\u70b9\u6539 $O(1)$ \u66f4\u65b0\u5757\u548c\u3002 \u9009\u62e9 $B\\approx \\sqrt[4]{nm}$ \u65f6\uff0c\u67e5\u8be2 $\\tilde O(\\sqrt{nm})$\u3002 \u5e38\u6570\u4f4e\u3001\u6613\u5b9e\u73b0\uff0c\u4f46\u5728\u5927\u89c4\u6a21/\u9ad8\u9891\u67e5\u8be2\u4e0b\u52a3\u4e8e $\\log^2$ \u7684\u7ed3\u6784\u3002","title":"2) \u70b9\u4fee\u6539 + \u77e9\u5f62\u6c42\u548c\uff08\u5728\u7ebf\uff09"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#3_1","text":"\u56db\u68f5 2D BIT \u505a\u77e9\u5f62\u52a0 & \u77e9\u5f62\u548c \u4e00\u7ef4\u91cc\u201c\u4e24\u4e2a BIT \u652f\u6301\u533a\u95f4\u52a0/\u524d\u7f00\u6c42\u548c\u201d\uff0c\u4e8c\u7ef4\u53ef\u63a8\u5e7f\u4e3a \u56db\u68f5 2D BIT\uff0c\u5206\u522b\u5b58\u653e\u7cfb\u6570\uff0c\u67e5\u8be2\u7528\u4e8c\u7ef4\u5305\u542b-\u6392\u9664\u7ec4\u5408\u3002 \u590d\u6742\u5ea6\uff1a\u6bcf\u6b21\u66f4\u65b0/\u67e5\u8be2\u4ecd\u662f $O(\\log n \\log m)$\u3002 \u4ee3\u7801\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u5f88\u901a\u7528\u3002 \u4e8c\u7ef4\u7ebf\u6bb5\u6811 + \u61d2\u6807\u8bb0 \u76f4\u63a5\u652f\u6301\u77e9\u5f62\u52a0\u3001\u77e9\u5f62\u6c42\u548c\u3002 \u590d\u6742\u5ea6\uff1a$O(\\log n \\log m)$\u3002 \u5b9e\u73b0\u4e0e\u5185\u5b58\u5f00\u9500\u6700\u5927\uff0c\u4f46\u8868\u8fbe\u529b\u6700\u5f3a\u3002","title":"3) \u533a\u95f4/\u77e9\u5f62\u4fee\u6539 + \u77e9\u5f62\u6c42\u548c"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#4_1","text":"CDQ \u5206\u6cbb / D\\&C on time + BIT \u628a\u65f6\u95f4\u7ef4\u5ea6\u5206\u6cbb\uff0c\u5728\u7ebf\u8f6c\u79bb\u7ebf\uff1b\u914d\u5408\uff081D/2D\uff09BIT \u5904\u7406\u201c\u524d\u7f00\u8d21\u732e\u201d\u3002 \u603b\u590d\u6742\u5ea6\u5e38\u89c1\u4e3a $O((n+q)\\log^2 N)$\uff08\u914d\u5408\u5750\u6807\u538b\u7f29\uff09\u3002 \u9002\u5408\u8d85\u5927\u89c4\u6a21\u3001\u7a00\u758f\u5750\u6807\u3001\u6216\u9700\u8981\u628a\u591a\u79cd\u64cd\u4f5c\u7edf\u4e00\u4e3a\u201c\u52a0\u70b9/\u8be2\u95ee\u524d\u7f00\u201d\u7684\u573a\u666f\u3002","title":"4) \u79bb\u7ebf\u6280\u5de7\uff08\u5f53\u64cd\u4f5c\u90fd\u53ef\u63d0\u524d\u62ff\u5230\uff09"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#5_1","text":"\u53ea\u67e5\u4e0d\u6539 \uff1a\u4e8c\u7ef4\u524d\u7f00\u548c\u3002 \u70b9\u6539 + \u77e9\u5f62\u548c \uff1a\u4f18\u5148\u4e8c\u7ef4 BIT\uff1b\u6570\u636e\u975e\u5e38\u7a00\u758f\u4e14\u5750\u6807\u5927\u65f6\u7528\u201cSegTree/BIT + \u5750\u6807\u538b\u7f29/\u6563\u5217\u201d\u3002 \u77e9\u5f62\u6539 + \u77e9\u5f62\u548c \uff1a\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u5e26\u61d2\u6807\u8bb0\uff0c\u6216\u201c\u56db BIT\u201d\u65b9\u6848\u3002 \u79bb\u7ebf\u53ef\u884c \uff1a\u8003\u8651 CDQ + BIT\u3002 \u6570\u503c\u7c7b\u578b \uff1a\u548c\u53ef\u80fd\u8fbe $O(nm\\cdot \\lvert v\\rvert)$\uff0c\u5efa\u8bae\u7528 64 \u4f4d\u6574\u578b\uff08 long long / int64_t \uff09\u3002","title":"5) \u9009\u62e9\u5efa\u8bae"},{"location":"thu/d3/d3s/dsa/PA/lab1/lab1/#6","text":"\u7ed3\u6784 \u652f\u6301\u7684\u64cd\u4f5c \u5355\u6b21\u590d\u6742\u5ea6 \u7a7a\u95f4 \u96be\u5ea6 2D \u524d\u7f00\u548c \u77e9\u5f62\u548c\uff08\u9759\u6001\uff09 \u9884\u5904\u7406 O(nm)\uff0c\u67e5\u8be2 O(1) O(nm) \u4f4e 2D BIT \u70b9\u52a0 / \u77e9\u5f62\u548c O(log n log m) O(nm)\uff08\u53ef\u538b\u7f29\uff09 \u4e2d 2D SegTree \u70b9\u52a0 / \u77e9\u5f62\u548c O(log n log m) \u9ad8\uff08\u53ef\u538b\u7f29\uff09 \u9ad8 2D BIT\u00d74 \u77e9\u5f62\u52a0 / \u77e9\u5f62\u548c O(log n log m) 4\u00d72D BIT \u9ad8 2D SegTree+Lazy \u77e9\u5f62\u52a0 / \u77e9\u5f62\u548c O(log n log m) \u9ad8 \u6700\u9ad8 2D \u5206\u5757 \u70b9\u6539 / \u77e9\u5f62\u548c \\~O(\u221a(nm))\uff08\u8c03\u53c2\uff09 O(nm/B^2) \u7ea7 \u4f4e\u4e2d CDQ + BIT\uff08\u79bb\u7ebf\uff09 \u7edf\u4e00\u6c42\u89e3\u591a\u7c7b\u64cd\u4f5c O((n+q) log^2 N) \u4f9d\u5b9e\u73b0 \u9ad8 \u6211\u5bf9\u4e0a\u8ff0\u56de\u7b54\u7684\u7591\u95ee \u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7684\u5185\u5b58\u5982\u4f55\u7cbe\u786e\u4f30\u7b97\uff1f\u7a20\u5bc6 vs. \u7a00\u758f\u3001\u5750\u6807\u538b\u7f29\u540e\u80fd\u964d\u5230\u591a\u5c11\u91cf\u7ea7\uff1f \u4e8c\u7ef4\u7ebf\u6bb5\u6811\u505a\u61d2\u6807\u8bb0\u65f6\uff0c\u8282\u70b9\u5982\u4f55\u8868\u8fbe\u201c\u77e9\u5f62\u8303\u56f4\u201d\u4e0a\u7684\u589e\u91cf\u4e0e\u5408\u5e76\uff1f\u8fb9\u754c\u4e0e\u8986\u76d6\u5173\u7cfb\u7684\u5b9e\u73b0\u7ec6\u8282\u662f\u4ec0\u4e48\uff1f \u56db BIT \u7684\u63a8\u5bfc\uff1a\u4e8c\u7ef4\u4ece\u4e00\u7ef4\u201c\u4e24\u4e2a BIT\u201d\u7684\u516c\u5f0f\u600e\u4e48\u4e25\u683c\u63a8\u5e7f\uff1f\u56db\u68f5\u6811\u5404\u81ea\u5b58\u7684\u7cfb\u6570\u5177\u4f53\u662f\u4ec0\u4e48\uff1f \u5750\u6807\u538b\u7f29\u7684\u5de5\u7a0b\u5316\u505a\u6cd5\uff1a\u5f53\u5750\u6807\u8fbe 1e9 \u4e14\u53ea\u64cd\u4f5c\u5c11\u91cf\u70b9/\u77e9\u5f62\u65f6\uff0c\u5982\u4f55\u5728 2D BIT / 2D SegTree \u4e2d\u9ad8\u6548\u505a\u538b\u7f29\u4e0e\u52a8\u6001\u63d2\u5165\uff1f \u5e38\u6570\u4e0e\u7f13\u5b58\u53cb\u597d\u6027\uff1a\u5728\u76f8\u540c $O(\\log^2)$ \u4e0b\uff0c2D BIT \u4e0e 2D SegTree \u7684\u5e38\u6570\u5dee\u5f02\u548c\u7f13\u5b58\u5c40\u90e8\u6027\u5982\u4f55\u5f71\u54cd\u5b9e\u9645\u6027\u80fd\uff1f","title":"6) \u5c0f\u8868\u683c\uff08\u5178\u578b\u590d\u6742\u5ea6\u4e0e\u8981\u70b9\uff09"},{"location":"thu/d3/d3s/dsa/class/class01/","text":"\u8d44\u6e90\u5f88\u4e30\u5bcc\uff0c\u4e0d\u80fd\u6284\u88ad","title":"Class01"},{"location":"thu/d3/d3s/dsa/class/class02/","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u5929\u7136\u7684\u4e00\u4e2a\u4e0a\u754c\uff0c\u56e0\u4e3a\u4f60\u81f3\u5c11\u8981\u628a\u6570\u636e\u8bfb\u5165\u5185\u5b58\u624d\u80fd\u5904\u7406\u5b83\u4eec\u3002 \u56e0\u4e3a\u8bbf\u95ee\u6216\u7533\u8bf7\u6bcf\u4e00\u5355\u4f4d\u7a7a\u95f4\u90fd\u81f3\u5c11\u9700\u8981\u4e00\u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5929\u7136\u5c31\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u4e0a\u754c","title":"Class02"},{"location":"thu/d3/d3s/dsa/class/class04/","text":"\u4eca\u5929\u8bfe\u4e0a\u53c8\u4e0d\u542c\u8bfe\u4e86","title":"Class04"},{"location":"thu/d3/d3s/dsa/class/class05/","text":"\u4f4d\u56fe \u662f\u5411\u91cf\u7684\u4e00\u4e2a\u7279\u4f8b","title":"\u4f4d\u56fe"},{"location":"thu/d3/d3s/dsa/class/class05/#_1","text":"\u662f\u5411\u91cf\u7684\u4e00\u4e2a\u7279\u4f8b","title":"\u4f4d\u56fe"},{"location":"thu/d3/d3s/dsa/cpp/cpp/","text":"\u7ec3\u4e60\u5e76\u5b66\u4e60C++\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u9ad8\u7ea7\u6982\u5ff5\u3002 code","title":"Cpp"},{"location":"thu/d3/d3s/dsa/cpp/code/everyday/everyday/","text":"","title":"Everyday"},{"location":"thu/d3/d3s/dsa/cpp/%E6%B2%B9%E7%AE%A1%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BD%AC/1/","text":"C++\u53ef\u4ee5\u751f\u6210\u4efb\u4f55\u5e73\u53f0\u7684\u673a\u5668\u7801\uff0c\u5feb\u901f\u65b9\u4fbf","title":"1"},{"location":"thu/d3/d3s/dsa/dengclass/01/","text":"\u57fa\u7840 \u56fe\u7075\u673a\u6a21\u578b ram \u6a21\u578b \u5927O\u8bb0\u53f7 Big O\u8bb0\u53f7\u662f\u7531\u5fb7\u56fd\u6570\u8bba\u5b66\u5bb6\u4fdd\u7f57\u00b7\u5df4\u8d6b\u66fc\uff08Paul Bachmann\uff09\u5728\u51761892\u5e74\u7684\u8457\u4f5c\u300a\u89e3\u6790\u6570\u8bba\u300b\uff08Analytische Zahlentheorie\uff09\u4e2d\u9996\u5148\u5f15\u5165\u7684\u3002\u800c\u8fd9\u4e2a\u8bb0\u53f7\u5219\u662f\u5728\u53e6\u4e00\u4f4d\u5fb7\u56fd\u6570\u8bba\u5b66\u5bb6\u827e\u5fb7\u8499\u00b7\u6717\u9053\uff08Edmund Landau\uff09\u7684\u8457\u4f5c\u4e2d\u5f97\u5230\u63a8\u5e7f\u7684\uff0c\u56e0\u6b64\u5b83\u6709\u65f6\u53c8\u79f0\u4e3a\u6717\u9053\u7b26\u53f7\uff08Landau symbols\uff09\u3002 \u5c01\u5e95\u4f30\u7b97 \u8fed\u4ee3\u4e0e\u9012\u5f52 \u51cf\u800c\u6cbb\u4e4b \u7ebf\u6027\u9012\u5f52 \u52a8\u6001\u89c4\u5212 \u4ea4\u66ff\u6eda\u52a8 \u52a8\u6001\u89c4\u5212\u6c42LCS \u8fed\u4ee3\u80fd\u7ed9\u51fa\u89e3\u6cd5\uff0c\u4f46\u662f\u52a8\u6001\u89c4\u5212\u80fd\u591f\u8ba9\u65b9\u6cd5\u7b80\u5316\u53ef\u7528","title":"01"},{"location":"thu/d3/d3s/dsa/dengclass/02vector/","text":"","title":"02vector"},{"location":"thu/d3/d3s/dsa/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/dsa/tools/tools/","text":"","title":"Tools"},{"location":"thu/d3/d3s/jw/jw/","text":"jsjwangluo computer network \u529b\u6263\u8ba1\u7b97\u673a\u7f51\u7edc \u738b\u9053 \u4e0a\u8bfe","title":"Jw"},{"location":"thu/d3/d3s/jw/class/class01/","text":"","title":"Class01"},{"location":"thu/d3/d3s/jw/class/class02/","text":"","title":"Class02"},{"location":"thu/d3/d3s/jw/lc_network/lc/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc \u7b2c\u4e00\u90e8\u5206\uff1a\u8ba1\u7b97\u673a\u7f51\u7edc\u4f53\u7cfb\u7ed3\u6784 1.1 OSI \u4e03\u5c42\u6a21\u578b OSI(Open System Interconnection Reference Model) \u6a21\u578b\u662f\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7 ISO\uff08International Organization for Standardization) \u63d0\u51fa\u7684\u4e00\u4e2a\u8bd5\u56fe\u4f7f\u5404\u79cd\u8ba1\u7b97\u673a\u5728\u4e16\u754c\u8303\u56f4\u5185\u4e92\u8fde\u4e3a\u7f51\u7edc\u7684\u6807\u51c6\u6846\u67b6\u3002 OSI \u5c06\u8ba1\u7b97\u673a\u7f51\u7edc\u4f53\u7cfb\u7ed3\u6784\u5212\u5206\u4e3a\u4e03\u5c42\uff0c\u6bcf\u4e00\u5c42\u5b9e\u73b0\u5404\u81ea\u7684\u529f\u80fd\u548c\u534f\u8bae\uff0c\u5e76\u5b8c\u6210\u4e0e\u76f8\u90bb\u5c42\u7684\u63a5\u53e3\u901a\u4fe1\u3002OSI \u7684\u670d\u52a1\u5b9a\u4e49\u8be6\u7ec6\u8bf4\u660e\u4e86\u5404\u5c42\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u3002 \u5e94\u7528\u5c42\uff1a\u901a\u8fc7\u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u4ea4\u4e92\u6765\u5b8c\u6210\u7279\u5b9a\u7684\u7f51\u7edc\u5e94\u7528 \u8868\u793a\u5c42\uff1a\u89e3\u91ca\u4ea4\u6362\u6570\u636e\u7684\u542b\u4e49\u3002\u8be5\u5c42\u63d0\u4f9b\u7684\u670d\u52a1\u4e3b\u8981\u5305\u62ec\u6570\u636e\u538b\u7f29\uff0c\u6570\u636e\u52a0\u5bc6\u4ee5\u53ca\u6570\u636e\u63cf\u8ff0\u3002 \u4f1a\u8bdd\u5c42\uff1a\u8d1f\u8d23\u5efa\u7acb\u3001\u7ba1\u7406\u548c\u7ec8\u6b62\u8868\u793a\u5c42\u5b9e\u4f53\u4e4b\u95f4\u7684\u901a\u4fe1\u4f1a\u8bdd\u3002\u8be5\u5c42\u63d0\u4f9b\u4e86\u6570\u636e\u4ea4\u6362\u7684\u5b9a\u754c\u548c\u540c\u6b65\u529f\u80fd\uff0c\u5305\u62ec\u4e86\u5efa\u7acb\u68c0\u67e5\u70b9\u548c\u6062\u590d\u65b9\u6848\u7684\u65b9\u6cd5\u3002 \u4f20\u8f93\u5c42\uff1a\u8d1f\u8d23\u56e0\u7279\u7f51\u4e2d\u4e24\u53f0\u4e3b\u673a\u7684\u8fdb\u7a0b\u63d0\u4f9b\u901a\u4fe1\u670d\u52a1\u3002 \u7f51\u7edc\u5c42\uff1a\u9009\u62e9\u5408\u9002\u7684\u7f51\u95f4\u8def\u7531\u548c\u4ea4\u6362\u8282\u70b9\uff0c\u786e\u4fdd\u6570\u636e\u6309\u65f6\u6210\u529f\u4f20\u9001\u3002 \u6570\u636e\u94fe\u8def\u5c42(\u94fe\u8def\u5c42)\uff1a\u6570\u636e\u94fe\u8def\u5c42\u5c06\u7f51\u7edc\u5c42\u4ea4\u4e0b\u6765\u7684 IP \u6570\u636e\u62a5\u7ec4\u88c5\u6210\u5e27\uff0c\u5728\u4e24\u4e2a\u76f8\u90bb\u8282\u70b9\u95f4\u7684\u94fe\u8def\u4e0a\u4f20\u9001\u5e27\u3002 \u7269\u7406\u5c42\uff1a\u5b9e\u73b0\u8ba1\u7b97\u673a\u8282\u70b9\u4e4b\u95f4\u6bd4\u7279\u6d41\u7684\u900f\u660e\u4f20\u9001\uff0c\u5c3d\u53ef\u80fd\u5c4f\u853d\u6389\u5177\u4f53\u4f20\u8f93\u4ecb\u8d28\u548c\u7269\u7406\u8bbe\u5907\u7684\u5dee\u5f02\u3002\u8be5\u5c42\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u786e\u5b9a\u4e0e\u4f20\u8f93\u5a92\u4f53\u7684\u63a5\u53e3\u7684\u4e00\u4e9b\u7279\u6027\uff08\u673a\u68b0\u7279\u6027\u3001\u7535\u6c14\u7279\u6027\u3001\u529f\u80fd\u7279\u6027\uff0c\u8fc7\u7a0b\u7279\u6027\uff09 1.2 TCP/IP \u4e94\u5c42\u53c2\u8003\u6a21\u578b \u4e94\u5c42\u4f53\u7cfb\u7684\u534f\u8bae\u7ed3\u6784\u662f\u7efc\u5408\u4e86 OSI \u548c TCP/IP \u4f18\u70b9\u7684\u4e00\u79cd\u534f\u8bae\uff0c\u5305\u62ec\u5e94\u7528\u5c42\u3001\u4f20\u8f93\u5c42\u3001\u7f51\u7edc\u5c42\u3001\u6570\u636e\u94fe\u8def\u5c42\u548c\u7269\u7406\u5c42\u3002\u5176\u4e2d\u5e94\u7528\u5c42\u5bf9\u5e94 OSI \u7684\u4e0a\u4e09\u5c42\uff0c\u4e0b\u56db\u5c42\u548c OSI \u76f8\u540c\u3002\u4e94\u5c42\u534f\u8bae\u7684\u4f53\u7cfb\u7ed3\u6784\u53ea\u662f\u4e3a\u4ecb\u7ecd\u7f51\u7edc\u539f\u7406\u800c\u8bbe\u8ba1\u7684\uff0c\u5b9e\u9645\u5e94\u7528\u8fd8\u662f TCP/IP \u56db\u5c42\u4f53\u7cfb\u7ed3\u6784\u3002 \u5e94\u7528\u5c42 \uff1a\u4e3a\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u4f20\u8f93\u5c42 \uff1a\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u901a\u7528\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u7f51\u7edc\u5c42 \uff1a\u4e3a\u4e3b\u673a\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002\u800c\u4f20\u8f93\u5c42\u534f\u8bae\u662f\u4e3a\u4e3b\u673a\u4e2d\u7684\u8fdb\u7a0b\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u6570\u636e\u94fe\u8def\u5c42 \uff1a\u7f51\u7edc\u5c42\u9488\u5bf9\u7684\u8fd8\u662f\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u670d\u52a1\uff0c\u800c\u4e3b\u673a\u4e4b\u95f4\u53ef\u4ee5\u6709\u5f88\u591a\u94fe\u8def\uff0c\u94fe\u8def\u5c42\u534f\u8bae\u5c31\u662f\u4e3a\u540c\u4e00\u94fe\u8def\u7684\u4e3b\u673a\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u7269\u7406\u5c42 \uff1a\u8d1f\u8d23\u6bd4\u7279\u6d41\u5728\u4f20\u8f93\u4ecb\u8d28\u4e0a\u7684\u4f20\u64ad\u3002 1.3 \u5bf9\u6bd4\u4e24\u79cd\u7f51\u7edc\u6a21\u578b \u7279\u6027 OSI \u4e03\u5c42\u6a21\u578b TCP/IP \u4e94\u5c42\u6a21\u578b \u5c42\u6570 7 \u5c42 5 \u5c42 \u5e94\u7528\u5c42 \u5305\u542b\u5e94\u7528\u5c42\u3001\u8868\u793a\u5c42\u3001\u4f1a\u8bdd\u5c42 \u4ec5\u5305\u542b\u5e94\u7528\u5c42 \u4f20\u8f93\u5c42 \u4ec5\u63d0\u4f9b\u7aef\u5230\u7aef\u7684\u901a\u4fe1 \u63d0\u4f9b\u7aef\u5230\u7aef\u7684\u901a\u4fe1 \u7f51\u7edc\u5c42 \u63d0\u4f9b\u903b\u8f91\u5730\u5740\u548c\u8def\u7531\u9009\u62e9 \u63d0\u4f9b\u903b\u8f91\u5730\u5740\u548c\u8def\u7531\u9009\u62e9 \u6570\u636e\u94fe\u8def\u5c42 \u63d0\u4f9b\u7269\u7406\u5730\u5740\u548c\u94fe\u8def\u63a7\u5236 \u63d0\u4f9b\u7269\u7406\u5730\u5740\u548c\u94fe\u8def\u63a7\u5236 \u7269\u7406\u5c42 \u5b9a\u4e49\u7269\u7406\u5a92\u4ecb\u548c\u4fe1\u53f7 \u5b9a\u4e49\u7269\u7406\u5a92\u4ecb\u548c\u4fe1\u53f7 1.4 \u6570\u636e\u5982\u4f55\u5728\u5404\u5c42\u76f4\u63a5\u4f20\u8f93 \u5047\u8bbe\u4e00\u4e2a\u4e3b\u673a\u4e0a\u7684\u4e00\u4e2a\u5e94\u7528\u5411\u53e6\u4e00\u4e2a\u4e3b\u673a\u7684\u4e00\u4e2a\u5e94\u7528\u53d1\u9001\u6570\u636e\u3002 \u5728\u53d1\u9001\u4e3b\u673a\u7aef\uff0c\u4e00\u4e2a\u5e94\u7528\u5c42\u62a5\u6587\u88ab\u4f20\u9001\u5230\u4f20\u8f93\u5c42\u3002\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4f20\u8f93\u5c42\u6536\u53d6\u5230\u62a5\u6587\u5e76\u9644\u4e0a\u9644\u52a0\u4fe1\u606f\uff0c\u8be5\u9996\u90e8\u5c06\u88ab\u63a5\u6536\u7aef\u7684\u4f20\u8f93\u5c42\u4f7f\u7528\u3002 \u5e94\u7528\u5c42\u62a5\u6587\u548c\u4f20\u8f93\u5c42\u9996\u90e8\u4fe1\u606f\u4e00\u9053\u6784\u6210\u4e86\u4f20\u8f93\u5c42\u62a5\u6587\u6bb5\u3002\u9644\u52a0\u7684\u4fe1\u606f\u53ef\u80fd\u5305\u62ec\uff1a\u5141\u8bb8\u63a5\u6536\u7aef\u4f20\u8f93\u5c42\u5411\u4e0a\u5411\u9002\u5f53\u7684\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4ed8\u62a5\u6587\u7684\u4fe1\u606f\u4ee5\u53ca\u5dee\u9519\u68c0\u6d4b\u4f4d\u4fe1\u606f\u3002\u8be5\u4fe1\u606f\u8ba9\u63a5\u6536\u7aef\u80fd\u591f\u5224\u65ad\u62a5\u6587\u4e2d\u7684\u6bd4\u7279\u662f\u5426\u5728\u9014\u4e2d\u5df2\u88ab\u6539\u53d8\u3002 \u4f20\u8f93\u5c42\u5219\u5411\u7f51\u7edc\u5c42\u4f20\u9012\u8be5\u62a5\u6587\u6bb5\uff0c\u7f51\u7edc\u5c42\u589e\u52a0\u4e86\u5982\u6e90\u548c\u76ee\u7684\u7aef\u7cfb\u7edf\u5730\u5740\u7b49\u7f51\u7edc\u5c42\u9996\u90e8\u4fe1\u606f\uff0c\u751f\u6210\u4e86\u7f51\u7edc\u5c42\u6570\u636e\u62a5\u6587\u3002 \u8be5\u6570\u636e\u62a5\u6587\u63a5\u4e0b\u6765\u88ab\u4f20\u9012\u7ed9\u94fe\u8def\u5c42\uff0c\u5728\u6570\u636e\u94fe\u8def\u5c42\u6570\u636e\u5305\u6dfb\u52a0\u53d1\u9001\u7aef MAC \u5730\u5740\u548c\u63a5\u6536\u7aef MAC \u5730\u5740\u540e\u88ab\u5c01\u88c5\u6210\u6570\u636e\u5e27\u3002 \u5728\u7269\u7406\u5c42\u6570\u636e\u5e27\u88ab\u5c01\u88c5\u6210\u6bd4\u7279\u6d41\uff0c\u4e4b\u540e\u901a\u8fc7\u4f20\u8f93\u4ecb\u8d28\u4f20\u9001\u5230\u5bf9\u7aef\u3002\u800c\u5728\u63a5\u6536\u4e3b\u673a\u7aef\uff0c\u6574\u4e2a\u8fc7\u7a0b\u6b63\u597d\u53cd\u8fc7\u6765\u3002 \u7b2c\u4e8c\u90e8\u5206\uff1a\u5e94\u7528\u5c42 \u7f51\u7edc\u5e94\u7528\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u5b58\u5728\u7684\u7406\u7531\uff0c\u800c\u7f51\u7edc\u5e94\u7528\u90fd\u662f\u5904\u4e8e\u5e94\u7528\u5c42\u7684\uff0c\u6240\u4ee5\u5e94\u7528\u5c42\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\u6700\u91cd\u8981\u7684\u90e8\u5206\u4e4b\u4e00\u3002 \u672c\u7ae0\u9ad8\u9891\u9762\u8bd5\u9898 uri \u548c url \u7684\u533a\u522b \uff1f dns \u662f\u5565\u5de5\u4f5c\u539f\u7406\uff0c\u4e3b\u8981\u89e3\u6790\u8fc7\u7a0b\u662f\u5565\uff1f \u7528\u6237\u8f93\u5165\u7f51\u5740\u5230\u663e\u793a\u5bf9\u5e94\u9875\u9762\u7684\u5168\u8fc7\u7a0b\u662f\u5565\uff1f http \u5934\u90e8\u5305\u542b\u54ea\u4e9b\u4fe1\u606f\uff1f http \u65b9\u6cd5\u4e86\u89e3\u54ea\u4e9b\uff1f http \u72b6\u6001\u7801\u4e86\u89e3\u54ea\u4e9b\uff1f get \u548c post \u7684\u533a\u522b\uff1f https \u548c https \u7684\u533a\u522b\uff1f https \u7684\u52a0\u5bc6\u65b9\u5f0f\uff1f http \u662f\u4e0d\u4fdd\u5b58\u72b6\u6001\u7684\u534f\u8bae,\u5982\u4f55\u4fdd\u5b58\u7528\u6237\u72b6\u6001\uff1f http \u4e0d\u540c\u7248\u672c\u7684\u533a\u522b\uff1f 2.1 \u4e07\u7ef4\u7f51\u548c\u57df\u540d\u7cfb\u7edf 2.1.5 \u7f51\u9875\u89e3\u6790\u5168\u8fc7\u7a0b 2.2 http // \u7b2c\u4e00\u90e8\u5206\uff1a\u7b80\u7565\u4fe1\u606f GET https://leetcode.cn/problemset/all/ HTTP/1.1. // \u7b2c\u4e8c\u90e8\u5206\uff1a\u8bf7\u6c42\u9996\u90e8\u6216\u8005\u54cd\u5e94\u9996\u90e8 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 Cache-Control: max-age=0 Host: leetcode.cn If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT If-None-Match: \"3147526947+gzip\" Proxy-Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 xxx // --------- \u7a7a\u884c -------------- // \u7b2c\u4e09\u90e8\u5206\uff0c\u5185\u5bb9\u4e3b\u4f53 param1=1&param2=2 http\u8bf7\u6c42\u9996\u90e8\u76ee\u5f55\uff1ahttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers \u4e0e\u72b6\u6001\u7801\u4e00\u6837\uff0c\u5bf9\u4e8e http \u9996\u90e8\uff0c\u53ea\u8981\u8bb0\u4f4f\u51e0\u4e2a\u5e38\u7528\u7684\u5c31\u53ef\u4ee5 2.3 \u7f51\u7edc\u7f16\u7a0b socket","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"thu/d3/d3s/jw/lc_network/lc/#_1","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"thu/d3/d3s/jw/lc_network/lc/#_2","text":"","title":"\u7b2c\u4e00\u90e8\u5206\uff1a\u8ba1\u7b97\u673a\u7f51\u7edc\u4f53\u7cfb\u7ed3\u6784"},{"location":"thu/d3/d3s/jw/lc_network/lc/#11-osi","text":"OSI(Open System Interconnection Reference Model) \u6a21\u578b\u662f\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7 ISO\uff08International Organization for Standardization) \u63d0\u51fa\u7684\u4e00\u4e2a\u8bd5\u56fe\u4f7f\u5404\u79cd\u8ba1\u7b97\u673a\u5728\u4e16\u754c\u8303\u56f4\u5185\u4e92\u8fde\u4e3a\u7f51\u7edc\u7684\u6807\u51c6\u6846\u67b6\u3002 OSI \u5c06\u8ba1\u7b97\u673a\u7f51\u7edc\u4f53\u7cfb\u7ed3\u6784\u5212\u5206\u4e3a\u4e03\u5c42\uff0c\u6bcf\u4e00\u5c42\u5b9e\u73b0\u5404\u81ea\u7684\u529f\u80fd\u548c\u534f\u8bae\uff0c\u5e76\u5b8c\u6210\u4e0e\u76f8\u90bb\u5c42\u7684\u63a5\u53e3\u901a\u4fe1\u3002OSI \u7684\u670d\u52a1\u5b9a\u4e49\u8be6\u7ec6\u8bf4\u660e\u4e86\u5404\u5c42\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u3002 \u5e94\u7528\u5c42\uff1a\u901a\u8fc7\u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u4ea4\u4e92\u6765\u5b8c\u6210\u7279\u5b9a\u7684\u7f51\u7edc\u5e94\u7528 \u8868\u793a\u5c42\uff1a\u89e3\u91ca\u4ea4\u6362\u6570\u636e\u7684\u542b\u4e49\u3002\u8be5\u5c42\u63d0\u4f9b\u7684\u670d\u52a1\u4e3b\u8981\u5305\u62ec\u6570\u636e\u538b\u7f29\uff0c\u6570\u636e\u52a0\u5bc6\u4ee5\u53ca\u6570\u636e\u63cf\u8ff0\u3002 \u4f1a\u8bdd\u5c42\uff1a\u8d1f\u8d23\u5efa\u7acb\u3001\u7ba1\u7406\u548c\u7ec8\u6b62\u8868\u793a\u5c42\u5b9e\u4f53\u4e4b\u95f4\u7684\u901a\u4fe1\u4f1a\u8bdd\u3002\u8be5\u5c42\u63d0\u4f9b\u4e86\u6570\u636e\u4ea4\u6362\u7684\u5b9a\u754c\u548c\u540c\u6b65\u529f\u80fd\uff0c\u5305\u62ec\u4e86\u5efa\u7acb\u68c0\u67e5\u70b9\u548c\u6062\u590d\u65b9\u6848\u7684\u65b9\u6cd5\u3002 \u4f20\u8f93\u5c42\uff1a\u8d1f\u8d23\u56e0\u7279\u7f51\u4e2d\u4e24\u53f0\u4e3b\u673a\u7684\u8fdb\u7a0b\u63d0\u4f9b\u901a\u4fe1\u670d\u52a1\u3002 \u7f51\u7edc\u5c42\uff1a\u9009\u62e9\u5408\u9002\u7684\u7f51\u95f4\u8def\u7531\u548c\u4ea4\u6362\u8282\u70b9\uff0c\u786e\u4fdd\u6570\u636e\u6309\u65f6\u6210\u529f\u4f20\u9001\u3002 \u6570\u636e\u94fe\u8def\u5c42(\u94fe\u8def\u5c42)\uff1a\u6570\u636e\u94fe\u8def\u5c42\u5c06\u7f51\u7edc\u5c42\u4ea4\u4e0b\u6765\u7684 IP \u6570\u636e\u62a5\u7ec4\u88c5\u6210\u5e27\uff0c\u5728\u4e24\u4e2a\u76f8\u90bb\u8282\u70b9\u95f4\u7684\u94fe\u8def\u4e0a\u4f20\u9001\u5e27\u3002 \u7269\u7406\u5c42\uff1a\u5b9e\u73b0\u8ba1\u7b97\u673a\u8282\u70b9\u4e4b\u95f4\u6bd4\u7279\u6d41\u7684\u900f\u660e\u4f20\u9001\uff0c\u5c3d\u53ef\u80fd\u5c4f\u853d\u6389\u5177\u4f53\u4f20\u8f93\u4ecb\u8d28\u548c\u7269\u7406\u8bbe\u5907\u7684\u5dee\u5f02\u3002\u8be5\u5c42\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u786e\u5b9a\u4e0e\u4f20\u8f93\u5a92\u4f53\u7684\u63a5\u53e3\u7684\u4e00\u4e9b\u7279\u6027\uff08\u673a\u68b0\u7279\u6027\u3001\u7535\u6c14\u7279\u6027\u3001\u529f\u80fd\u7279\u6027\uff0c\u8fc7\u7a0b\u7279\u6027\uff09","title":"1.1 OSI \u4e03\u5c42\u6a21\u578b"},{"location":"thu/d3/d3s/jw/lc_network/lc/#12-tcpip","text":"\u4e94\u5c42\u4f53\u7cfb\u7684\u534f\u8bae\u7ed3\u6784\u662f\u7efc\u5408\u4e86 OSI \u548c TCP/IP \u4f18\u70b9\u7684\u4e00\u79cd\u534f\u8bae\uff0c\u5305\u62ec\u5e94\u7528\u5c42\u3001\u4f20\u8f93\u5c42\u3001\u7f51\u7edc\u5c42\u3001\u6570\u636e\u94fe\u8def\u5c42\u548c\u7269\u7406\u5c42\u3002\u5176\u4e2d\u5e94\u7528\u5c42\u5bf9\u5e94 OSI \u7684\u4e0a\u4e09\u5c42\uff0c\u4e0b\u56db\u5c42\u548c OSI \u76f8\u540c\u3002\u4e94\u5c42\u534f\u8bae\u7684\u4f53\u7cfb\u7ed3\u6784\u53ea\u662f\u4e3a\u4ecb\u7ecd\u7f51\u7edc\u539f\u7406\u800c\u8bbe\u8ba1\u7684\uff0c\u5b9e\u9645\u5e94\u7528\u8fd8\u662f TCP/IP \u56db\u5c42\u4f53\u7cfb\u7ed3\u6784\u3002 \u5e94\u7528\u5c42 \uff1a\u4e3a\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u4f20\u8f93\u5c42 \uff1a\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u901a\u7528\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u7f51\u7edc\u5c42 \uff1a\u4e3a\u4e3b\u673a\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002\u800c\u4f20\u8f93\u5c42\u534f\u8bae\u662f\u4e3a\u4e3b\u673a\u4e2d\u7684\u8fdb\u7a0b\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u6570\u636e\u94fe\u8def\u5c42 \uff1a\u7f51\u7edc\u5c42\u9488\u5bf9\u7684\u8fd8\u662f\u4e3b\u673a\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u670d\u52a1\uff0c\u800c\u4e3b\u673a\u4e4b\u95f4\u53ef\u4ee5\u6709\u5f88\u591a\u94fe\u8def\uff0c\u94fe\u8def\u5c42\u534f\u8bae\u5c31\u662f\u4e3a\u540c\u4e00\u94fe\u8def\u7684\u4e3b\u673a\u63d0\u4f9b\u6570\u636e\u4f20\u8f93\u670d\u52a1\u3002 \u7269\u7406\u5c42 \uff1a\u8d1f\u8d23\u6bd4\u7279\u6d41\u5728\u4f20\u8f93\u4ecb\u8d28\u4e0a\u7684\u4f20\u64ad\u3002","title":"1.2 TCP/IP \u4e94\u5c42\u53c2\u8003\u6a21\u578b"},{"location":"thu/d3/d3s/jw/lc_network/lc/#13","text":"\u7279\u6027 OSI \u4e03\u5c42\u6a21\u578b TCP/IP \u4e94\u5c42\u6a21\u578b \u5c42\u6570 7 \u5c42 5 \u5c42 \u5e94\u7528\u5c42 \u5305\u542b\u5e94\u7528\u5c42\u3001\u8868\u793a\u5c42\u3001\u4f1a\u8bdd\u5c42 \u4ec5\u5305\u542b\u5e94\u7528\u5c42 \u4f20\u8f93\u5c42 \u4ec5\u63d0\u4f9b\u7aef\u5230\u7aef\u7684\u901a\u4fe1 \u63d0\u4f9b\u7aef\u5230\u7aef\u7684\u901a\u4fe1 \u7f51\u7edc\u5c42 \u63d0\u4f9b\u903b\u8f91\u5730\u5740\u548c\u8def\u7531\u9009\u62e9 \u63d0\u4f9b\u903b\u8f91\u5730\u5740\u548c\u8def\u7531\u9009\u62e9 \u6570\u636e\u94fe\u8def\u5c42 \u63d0\u4f9b\u7269\u7406\u5730\u5740\u548c\u94fe\u8def\u63a7\u5236 \u63d0\u4f9b\u7269\u7406\u5730\u5740\u548c\u94fe\u8def\u63a7\u5236 \u7269\u7406\u5c42 \u5b9a\u4e49\u7269\u7406\u5a92\u4ecb\u548c\u4fe1\u53f7 \u5b9a\u4e49\u7269\u7406\u5a92\u4ecb\u548c\u4fe1\u53f7","title":"1.3 \u5bf9\u6bd4\u4e24\u79cd\u7f51\u7edc\u6a21\u578b"},{"location":"thu/d3/d3s/jw/lc_network/lc/#14","text":"\u5047\u8bbe\u4e00\u4e2a\u4e3b\u673a\u4e0a\u7684\u4e00\u4e2a\u5e94\u7528\u5411\u53e6\u4e00\u4e2a\u4e3b\u673a\u7684\u4e00\u4e2a\u5e94\u7528\u53d1\u9001\u6570\u636e\u3002 \u5728\u53d1\u9001\u4e3b\u673a\u7aef\uff0c\u4e00\u4e2a\u5e94\u7528\u5c42\u62a5\u6587\u88ab\u4f20\u9001\u5230\u4f20\u8f93\u5c42\u3002\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4f20\u8f93\u5c42\u6536\u53d6\u5230\u62a5\u6587\u5e76\u9644\u4e0a\u9644\u52a0\u4fe1\u606f\uff0c\u8be5\u9996\u90e8\u5c06\u88ab\u63a5\u6536\u7aef\u7684\u4f20\u8f93\u5c42\u4f7f\u7528\u3002 \u5e94\u7528\u5c42\u62a5\u6587\u548c\u4f20\u8f93\u5c42\u9996\u90e8\u4fe1\u606f\u4e00\u9053\u6784\u6210\u4e86\u4f20\u8f93\u5c42\u62a5\u6587\u6bb5\u3002\u9644\u52a0\u7684\u4fe1\u606f\u53ef\u80fd\u5305\u62ec\uff1a\u5141\u8bb8\u63a5\u6536\u7aef\u4f20\u8f93\u5c42\u5411\u4e0a\u5411\u9002\u5f53\u7684\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4ed8\u62a5\u6587\u7684\u4fe1\u606f\u4ee5\u53ca\u5dee\u9519\u68c0\u6d4b\u4f4d\u4fe1\u606f\u3002\u8be5\u4fe1\u606f\u8ba9\u63a5\u6536\u7aef\u80fd\u591f\u5224\u65ad\u62a5\u6587\u4e2d\u7684\u6bd4\u7279\u662f\u5426\u5728\u9014\u4e2d\u5df2\u88ab\u6539\u53d8\u3002 \u4f20\u8f93\u5c42\u5219\u5411\u7f51\u7edc\u5c42\u4f20\u9012\u8be5\u62a5\u6587\u6bb5\uff0c\u7f51\u7edc\u5c42\u589e\u52a0\u4e86\u5982\u6e90\u548c\u76ee\u7684\u7aef\u7cfb\u7edf\u5730\u5740\u7b49\u7f51\u7edc\u5c42\u9996\u90e8\u4fe1\u606f\uff0c\u751f\u6210\u4e86\u7f51\u7edc\u5c42\u6570\u636e\u62a5\u6587\u3002 \u8be5\u6570\u636e\u62a5\u6587\u63a5\u4e0b\u6765\u88ab\u4f20\u9012\u7ed9\u94fe\u8def\u5c42\uff0c\u5728\u6570\u636e\u94fe\u8def\u5c42\u6570\u636e\u5305\u6dfb\u52a0\u53d1\u9001\u7aef MAC \u5730\u5740\u548c\u63a5\u6536\u7aef MAC \u5730\u5740\u540e\u88ab\u5c01\u88c5\u6210\u6570\u636e\u5e27\u3002 \u5728\u7269\u7406\u5c42\u6570\u636e\u5e27\u88ab\u5c01\u88c5\u6210\u6bd4\u7279\u6d41\uff0c\u4e4b\u540e\u901a\u8fc7\u4f20\u8f93\u4ecb\u8d28\u4f20\u9001\u5230\u5bf9\u7aef\u3002\u800c\u5728\u63a5\u6536\u4e3b\u673a\u7aef\uff0c\u6574\u4e2a\u8fc7\u7a0b\u6b63\u597d\u53cd\u8fc7\u6765\u3002","title":"1.4 \u6570\u636e\u5982\u4f55\u5728\u5404\u5c42\u76f4\u63a5\u4f20\u8f93"},{"location":"thu/d3/d3s/jw/lc_network/lc/#_3","text":"\u7f51\u7edc\u5e94\u7528\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u5b58\u5728\u7684\u7406\u7531\uff0c\u800c\u7f51\u7edc\u5e94\u7528\u90fd\u662f\u5904\u4e8e\u5e94\u7528\u5c42\u7684\uff0c\u6240\u4ee5\u5e94\u7528\u5c42\u662f\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\u6700\u91cd\u8981\u7684\u90e8\u5206\u4e4b\u4e00\u3002 \u672c\u7ae0\u9ad8\u9891\u9762\u8bd5\u9898 uri \u548c url \u7684\u533a\u522b \uff1f dns \u662f\u5565\u5de5\u4f5c\u539f\u7406\uff0c\u4e3b\u8981\u89e3\u6790\u8fc7\u7a0b\u662f\u5565\uff1f \u7528\u6237\u8f93\u5165\u7f51\u5740\u5230\u663e\u793a\u5bf9\u5e94\u9875\u9762\u7684\u5168\u8fc7\u7a0b\u662f\u5565\uff1f http \u5934\u90e8\u5305\u542b\u54ea\u4e9b\u4fe1\u606f\uff1f http \u65b9\u6cd5\u4e86\u89e3\u54ea\u4e9b\uff1f http \u72b6\u6001\u7801\u4e86\u89e3\u54ea\u4e9b\uff1f get \u548c post \u7684\u533a\u522b\uff1f https \u548c https \u7684\u533a\u522b\uff1f https \u7684\u52a0\u5bc6\u65b9\u5f0f\uff1f http \u662f\u4e0d\u4fdd\u5b58\u72b6\u6001\u7684\u534f\u8bae,\u5982\u4f55\u4fdd\u5b58\u7528\u6237\u72b6\u6001\uff1f http \u4e0d\u540c\u7248\u672c\u7684\u533a\u522b\uff1f","title":"\u7b2c\u4e8c\u90e8\u5206\uff1a\u5e94\u7528\u5c42"},{"location":"thu/d3/d3s/jw/lc_network/lc/#21","text":"2.1.5 \u7f51\u9875\u89e3\u6790\u5168\u8fc7\u7a0b","title":"2.1 \u4e07\u7ef4\u7f51\u548c\u57df\u540d\u7cfb\u7edf"},{"location":"thu/d3/d3s/jw/lc_network/lc/#22-http","text":"// \u7b2c\u4e00\u90e8\u5206\uff1a\u7b80\u7565\u4fe1\u606f GET https://leetcode.cn/problemset/all/ HTTP/1.1. // \u7b2c\u4e8c\u90e8\u5206\uff1a\u8bf7\u6c42\u9996\u90e8\u6216\u8005\u54cd\u5e94\u9996\u90e8 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 Cache-Control: max-age=0 Host: leetcode.cn If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT If-None-Match: \"3147526947+gzip\" Proxy-Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 xxx // --------- \u7a7a\u884c -------------- // \u7b2c\u4e09\u90e8\u5206\uff0c\u5185\u5bb9\u4e3b\u4f53 param1=1&param2=2 http\u8bf7\u6c42\u9996\u90e8\u76ee\u5f55\uff1ahttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers \u4e0e\u72b6\u6001\u7801\u4e00\u6837\uff0c\u5bf9\u4e8e http \u9996\u90e8\uff0c\u53ea\u8981\u8bb0\u4f4f\u51e0\u4e2a\u5e38\u7528\u7684\u5c31\u53ef\u4ee5","title":"2.2 http"},{"location":"thu/d3/d3s/jw/lc_network/lc/#23-socket","text":"","title":"2.3 \u7f51\u7edc\u7f16\u7a0b socket"},{"location":"thu/d3/d3s/jw/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/jw/wangdao/1/","text":"1\u8ba1\u7f51\u4f53\u7cfb\u7ed3\u6784 \u7ec4\u6210 \u6e05\u534e\u548c\u5317\u5927\u673a\u623f\u4e2d\u7684\u7535\u8111\u6709\u53ef\u80fd\u53c8\u76f8\u540c\u7684ip 192.168.0.1 \u5206\u7c7b \u7535\u8def\u4ea4\u6362\u3001\u62a5\u6587\u4ea4\u6362\u3001\u5206\u7ec4\u4ea4\u6362\u7684\u533a\u522b\uff0c\u5b58\u50a8\u8f6c\u53d1 \u7535\u8def\u4ea4\u6362 \u5b9a\u4e49\uff1a\u5728\u901a\u4fe1\u53cc\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u4e13\u7528\u7684\u901a\u4fe1\u7ebf\u8def\uff0c\u6570\u636e\u4ee5\u56fa\u5b9a\u7684\u901f\u7387\u4f20\u8f93\u3002 \u4f18\u70b9\uff1a\u4f20\u8f93\u5ef6\u8fdf\u5c0f\uff0c\u9002\u5408\u5b9e\u65f6\u901a\u4fe1\u3002 \u7f3a\u70b9\uff1a\u8d44\u6e90\u5229\u7528\u7387\u4f4e\uff0c\u5efa\u7acb\u8fde\u63a5\u65f6\u95f4\u957f\u3002 \u4f8b\u5b50\uff1a\u4f20\u7edf\u7535\u8bdd\u7cfb\u7edf\u3002 \u62a5\u6587\u4ea4\u6362 \u5b9a\u4e49\uff1a\u5c06\u6570\u636e\u5206\u6210\u591a\u4e2a\u62a5\u6587\uff0c\u72ec\u7acb\u4f20\u8f93\uff0c\u6700\u7ec8\u5728\u76ee\u7684\u5730\u91cd\u65b0\u7ec4\u88c5\u3002 \u4f18\u70b9\uff1a\u8d44\u6e90\u5229\u7528\u7387\u9ad8\uff0c\u9002\u5408\u5927\u89c4\u6a21\u6570\u636e\u4f20\u8f93\u3002 \u7f3a\u70b9\uff1a\u4f20\u8f93\u5ef6\u8fdf\u5927\uff0c\u4e0d\u9002\u5408\u5b9e\u65f6\u901a\u4fe1\u3002 \u4f8b\u5b50\uff1a\u7535\u5b50\u90ae\u4ef6\u3002 \u5206\u7ec4\u4ea4\u6362 \u5b9a\u4e49\uff1a\u5c06\u6570\u636e\u5206\u6210\u591a\u4e2a\u5c0f\u5206\u7ec4\uff0c\u72ec\u7acb\u4f20\u8f93\uff0c\u8def\u7531\u9009\u62e9\u7075\u6d3b\u3002 \u4f18\u70b9\uff1a\u8d44\u6e90\u5229\u7528\u7387\u9ad8\uff0c\u9002\u5408\u591a\u79cd\u7c7b\u578b\u7684\u901a\u4fe1\u3002 \u7f3a\u70b9\uff1a\u4f20\u8f93\u5ef6\u8fdf\u4e0d\u7a33\u5b9a\uff0c\u53ef\u80fd\u51fa\u73b0\u4e22\u5305\u3002 \u4f8b\u5b50\uff1a\u4e92\u8054\u7f51\u3002 \u6307\u6807 \u901f\u5ea6 \u901f\u7387\u548c\u5b58\u50a8\u5355\u4f4d\u6362\u7b97\u5355\u4f4d\u4e0d\u4e00\u6837\uff0c1B=8b\uff0c1KB=1024B\uff0c1MB=1024KB\uff0c1GB=1024MB\u3002 \u65f6\u95f4 \u4f53\u7cfb\u7ed3\u6784 \u53c2\u8003\u6a21\u578b \u5bf9\u7b49\u5b9e\u4f53\u4e4b\u95f4\u624d\u6709\u534f\u8bae\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u9700\u8981\u5728\u76f8\u540c\u7684\u5c42\u6b21\u4e0a\u8fdb\u884c\u901a\u4fe1\uff0c\u4ee5\u4fbf\u7406\u89e3\u5f7c\u6b64\u7684\u6d88\u606f\u548c\u884c\u4e3a\u3002 \u63a5\u53e3\u548c\u670d\u52a1\u662f\u4e0d\u540c\u7684\u6982\u5ff5\u3002\u63a5\u53e3\u5b9a\u4e49\u4e86\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u800c\u670d\u52a1\u5219\u662f\u4e00\u4e2a\u5c42\u6b21\u5411\u4e0a\u5c42\u63d0\u4f9b\u7684\u529f\u80fd\u6216\u64cd\u4f5c\u3002\u63a5\u53e3\u662f\u670d\u52a1\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u800c\u670d\u52a1\u662f\u901a\u8fc7\u63a5\u53e3\u63d0\u4f9b\u7ed9\u4e0a\u5c42\u7684\u529f\u80fd\u3002 OSI \u8def\u7531\u5668\u53ea\u63a5\u53d7\u5e95\u4e0b\u4e09\u5c42\uff0c\u7f51\u5173\u548c\u4ea4\u6362\u673a\u4e0b\u9762\u4e24\u5c42 \u4e0a\u9762\u56db\u5c42\u662f\u76f4\u63a5\u7aef\u5230\u7aef\u7684\u94fe\u63a5\uff0c\u70b9\u5230\u70b9\u662f\u4e0b\u9762\u4e09\u5c42 \u4e03\u5c42\u5206\u522b\u7ed3\u6784 TCP IP 5\u5c42\u53c2\u8003\u6a21\u578b \u7269\u7406\u5c42 \u5355\u5de5 \u534a\u53cc\u5de5 \u53cc\u5de5 \u4e32\u884c\u548c\u5e76\u884c \u540c\u6b65\u548c\u5f02\u6b65 \u7801\u5143 \u901f\u7387 \u5e26\u5bbd \u7801\u5143\u662f\u6700\u5c0f\u53ef\u5206\u7684\u6ce2\u5f62\u7ec4\u5408\uff0c\u6bd4\u59824\u8fdb\u5236\u5c31\u662f\u56db\u79cd00 01 10 11 \u5948\u6c0f\u51c6\u5219 \u9999\u519c\u5b9a\u7406 \u9999\u519c\u5b9a\u7406 \u4e24\u8005\u66f2\u5947\u5c0f \u7f16\u7801\u4e0e\u8c03\u5236 \u66fc\u5f7b\u65af\u7279\u7f16\u7801 \u5dee\u5206\u66fc\u5f7b\u65af\u7279\u7f16\u7801 \u91c7\u6837\u5b9a\u7406 \u6570\u636e\u4ea4\u6362\u65b9\u5f0f \u7535\u8def\u4ea4\u6362 \u62a5\u6587\u4ea4\u6362 \u5206\u7ec4\u4ea4\u6362 \u6570\u636e\u62a5 \u865a\u7535\u8def\u65b9\u5f0f \u4f20\u8f93\u4ecb\u8d28 \u5149\u7ea4\uff0c\u5149\u7684\u9891\u7387\u975e\u5e38\u9ad8\uff0c\u6240\u4ee5\u5e26\u5bbd\u975e\u5e38\u5927 \u975e\u5bfc\u5411\u6027\u4f20\u8f93\u4ecb\u8d28 \u7269\u7406\u5c42\u8bbe\u5907 \u6570\u636e\u94fe\u8def\u5c42 \u5c01\u88c5\u6210\u5e27 \u5dee\u9519\u63a7\u5236 \u68c0\u9519\u7f16\u7801 \u7ea0\u9519\u7f16\u7801 \u6821\u9a8c\u7801\u8d1f\u8d23\u7684\u4f4d\u6570\u4e2d1\u7684\u4e2a\u6570\u8981\u662f\u5076\u6570 \u53ef\u9760\u4f20\u8f93\u548c\u6d41\u91cf\u63a7\u5236","title":"1\u8ba1\u7f51\u4f53\u7cfb\u7ed3\u6784"},{"location":"thu/d3/d3s/jw/wangdao/1/#1","text":"","title":"1\u8ba1\u7f51\u4f53\u7cfb\u7ed3\u6784"},{"location":"thu/d3/d3s/jw/wangdao/1/#_1","text":"\u6e05\u534e\u548c\u5317\u5927\u673a\u623f\u4e2d\u7684\u7535\u8111\u6709\u53ef\u80fd\u53c8\u76f8\u540c\u7684ip 192.168.0.1","title":"\u7ec4\u6210"},{"location":"thu/d3/d3s/jw/wangdao/1/#_2","text":"\u7535\u8def\u4ea4\u6362\u3001\u62a5\u6587\u4ea4\u6362\u3001\u5206\u7ec4\u4ea4\u6362\u7684\u533a\u522b\uff0c\u5b58\u50a8\u8f6c\u53d1 \u7535\u8def\u4ea4\u6362 \u5b9a\u4e49\uff1a\u5728\u901a\u4fe1\u53cc\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u4e13\u7528\u7684\u901a\u4fe1\u7ebf\u8def\uff0c\u6570\u636e\u4ee5\u56fa\u5b9a\u7684\u901f\u7387\u4f20\u8f93\u3002 \u4f18\u70b9\uff1a\u4f20\u8f93\u5ef6\u8fdf\u5c0f\uff0c\u9002\u5408\u5b9e\u65f6\u901a\u4fe1\u3002 \u7f3a\u70b9\uff1a\u8d44\u6e90\u5229\u7528\u7387\u4f4e\uff0c\u5efa\u7acb\u8fde\u63a5\u65f6\u95f4\u957f\u3002 \u4f8b\u5b50\uff1a\u4f20\u7edf\u7535\u8bdd\u7cfb\u7edf\u3002 \u62a5\u6587\u4ea4\u6362 \u5b9a\u4e49\uff1a\u5c06\u6570\u636e\u5206\u6210\u591a\u4e2a\u62a5\u6587\uff0c\u72ec\u7acb\u4f20\u8f93\uff0c\u6700\u7ec8\u5728\u76ee\u7684\u5730\u91cd\u65b0\u7ec4\u88c5\u3002 \u4f18\u70b9\uff1a\u8d44\u6e90\u5229\u7528\u7387\u9ad8\uff0c\u9002\u5408\u5927\u89c4\u6a21\u6570\u636e\u4f20\u8f93\u3002 \u7f3a\u70b9\uff1a\u4f20\u8f93\u5ef6\u8fdf\u5927\uff0c\u4e0d\u9002\u5408\u5b9e\u65f6\u901a\u4fe1\u3002 \u4f8b\u5b50\uff1a\u7535\u5b50\u90ae\u4ef6\u3002 \u5206\u7ec4\u4ea4\u6362 \u5b9a\u4e49\uff1a\u5c06\u6570\u636e\u5206\u6210\u591a\u4e2a\u5c0f\u5206\u7ec4\uff0c\u72ec\u7acb\u4f20\u8f93\uff0c\u8def\u7531\u9009\u62e9\u7075\u6d3b\u3002 \u4f18\u70b9\uff1a\u8d44\u6e90\u5229\u7528\u7387\u9ad8\uff0c\u9002\u5408\u591a\u79cd\u7c7b\u578b\u7684\u901a\u4fe1\u3002 \u7f3a\u70b9\uff1a\u4f20\u8f93\u5ef6\u8fdf\u4e0d\u7a33\u5b9a\uff0c\u53ef\u80fd\u51fa\u73b0\u4e22\u5305\u3002 \u4f8b\u5b50\uff1a\u4e92\u8054\u7f51\u3002","title":"\u5206\u7c7b"},{"location":"thu/d3/d3s/jw/wangdao/1/#_3","text":"","title":"\u6307\u6807"},{"location":"thu/d3/d3s/jw/wangdao/1/#_4","text":"\u901f\u7387\u548c\u5b58\u50a8\u5355\u4f4d\u6362\u7b97\u5355\u4f4d\u4e0d\u4e00\u6837\uff0c1B=8b\uff0c1KB=1024B\uff0c1MB=1024KB\uff0c1GB=1024MB\u3002","title":"\u901f\u5ea6"},{"location":"thu/d3/d3s/jw/wangdao/1/#_5","text":"","title":"\u65f6\u95f4"},{"location":"thu/d3/d3s/jw/wangdao/1/#_6","text":"\u5bf9\u7b49\u5b9e\u4f53\u4e4b\u95f4\u624d\u6709\u534f\u8bae\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u9700\u8981\u5728\u76f8\u540c\u7684\u5c42\u6b21\u4e0a\u8fdb\u884c\u901a\u4fe1\uff0c\u4ee5\u4fbf\u7406\u89e3\u5f7c\u6b64\u7684\u6d88\u606f\u548c\u884c\u4e3a\u3002 \u63a5\u53e3\u548c\u670d\u52a1\u662f\u4e0d\u540c\u7684\u6982\u5ff5\u3002\u63a5\u53e3\u5b9a\u4e49\u4e86\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u800c\u670d\u52a1\u5219\u662f\u4e00\u4e2a\u5c42\u6b21\u5411\u4e0a\u5c42\u63d0\u4f9b\u7684\u529f\u80fd\u6216\u64cd\u4f5c\u3002\u63a5\u53e3\u662f\u670d\u52a1\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u800c\u670d\u52a1\u662f\u901a\u8fc7\u63a5\u53e3\u63d0\u4f9b\u7ed9\u4e0a\u5c42\u7684\u529f\u80fd\u3002","title":"\u4f53\u7cfb\u7ed3\u6784 \u53c2\u8003\u6a21\u578b"},{"location":"thu/d3/d3s/jw/wangdao/1/#osi","text":"\u8def\u7531\u5668\u53ea\u63a5\u53d7\u5e95\u4e0b\u4e09\u5c42\uff0c\u7f51\u5173\u548c\u4ea4\u6362\u673a\u4e0b\u9762\u4e24\u5c42 \u4e0a\u9762\u56db\u5c42\u662f\u76f4\u63a5\u7aef\u5230\u7aef\u7684\u94fe\u63a5\uff0c\u70b9\u5230\u70b9\u662f\u4e0b\u9762\u4e09\u5c42 \u4e03\u5c42\u5206\u522b\u7ed3\u6784","title":"OSI"},{"location":"thu/d3/d3s/jw/wangdao/1/#tcp-ip","text":"","title":"TCP IP"},{"location":"thu/d3/d3s/jw/wangdao/1/#5","text":"","title":"5\u5c42\u53c2\u8003\u6a21\u578b"},{"location":"thu/d3/d3s/jw/wangdao/1/#_7","text":"\u5355\u5de5 \u534a\u53cc\u5de5 \u53cc\u5de5 \u4e32\u884c\u548c\u5e76\u884c \u540c\u6b65\u548c\u5f02\u6b65","title":"\u7269\u7406\u5c42"},{"location":"thu/d3/d3s/jw/wangdao/1/#_8","text":"\u7801\u5143\u662f\u6700\u5c0f\u53ef\u5206\u7684\u6ce2\u5f62\u7ec4\u5408\uff0c\u6bd4\u59824\u8fdb\u5236\u5c31\u662f\u56db\u79cd00 01 10 11","title":"\u7801\u5143 \u901f\u7387 \u5e26\u5bbd"},{"location":"thu/d3/d3s/jw/wangdao/1/#_9","text":"\u9999\u519c\u5b9a\u7406 \u4e24\u8005\u66f2\u5947\u5c0f","title":"\u5948\u6c0f\u51c6\u5219 \u9999\u519c\u5b9a\u7406"},{"location":"thu/d3/d3s/jw/wangdao/1/#_10","text":"\u66fc\u5f7b\u65af\u7279\u7f16\u7801 \u5dee\u5206\u66fc\u5f7b\u65af\u7279\u7f16\u7801 \u91c7\u6837\u5b9a\u7406","title":"\u7f16\u7801\u4e0e\u8c03\u5236"},{"location":"thu/d3/d3s/jw/wangdao/1/#_11","text":"\u7535\u8def\u4ea4\u6362 \u62a5\u6587\u4ea4\u6362 \u5206\u7ec4\u4ea4\u6362 \u6570\u636e\u62a5 \u865a\u7535\u8def\u65b9\u5f0f","title":"\u6570\u636e\u4ea4\u6362\u65b9\u5f0f"},{"location":"thu/d3/d3s/jw/wangdao/1/#_12","text":"\u5149\u7ea4\uff0c\u5149\u7684\u9891\u7387\u975e\u5e38\u9ad8\uff0c\u6240\u4ee5\u5e26\u5bbd\u975e\u5e38\u5927 \u975e\u5bfc\u5411\u6027\u4f20\u8f93\u4ecb\u8d28","title":"\u4f20\u8f93\u4ecb\u8d28"},{"location":"thu/d3/d3s/jw/wangdao/1/#_13","text":"","title":"\u7269\u7406\u5c42\u8bbe\u5907"},{"location":"thu/d3/d3s/jw/wangdao/1/#_14","text":"","title":"\u6570\u636e\u94fe\u8def\u5c42"},{"location":"thu/d3/d3s/jw/wangdao/1/#_15","text":"","title":"\u5c01\u88c5\u6210\u5e27"},{"location":"thu/d3/d3s/jw/wangdao/1/#_16","text":"","title":"\u5dee\u9519\u63a7\u5236"},{"location":"thu/d3/d3s/jw/wangdao/1/#_17","text":"","title":"\u68c0\u9519\u7f16\u7801"},{"location":"thu/d3/d3s/jw/wangdao/1/#_18","text":"\u6821\u9a8c\u7801\u8d1f\u8d23\u7684\u4f4d\u6570\u4e2d1\u7684\u4e2a\u6570\u8981\u662f\u5076\u6570","title":"\u7ea0\u9519\u7f16\u7801"},{"location":"thu/d3/d3s/jw/wangdao/1/#_19","text":"","title":"\u53ef\u9760\u4f20\u8f93\u548c\u6d41\u91cf\u63a7\u5236"},{"location":"thu/d3/d3s/jz/jz/","text":"computer structure ji zu lab \u738b\u9053 \u95ee\u9898 \u4e0a\u8bfe \u7b2c\u4e8c\u8bfe \u7b2c\u4e09\u8bfe \u7b2c\u56db\u8bfe \u7b2c\u4e94\u8bfe \u7b2c\u516d\u8bfe \u7b2c\u4e03\u8bfe \u7b2c\u516b\u8bfe \u7b2c\u4e5d\u8bfe \u7b2c\u5341\u8bfe \u7b2c\u5341\u4e00\u8bfe \u7b2c\u5341\u4e8c\u8bfe \u7b2c\u5341\u4e09\u8bfe \u7b2c\u5341\u56db\u8bfe \u7b2c\u5341\u4e94\u8bfe \u7b2c\u5341\u516d\u8bfe \u7b2c\u5341\u4e03\u8bfe \u7b2c\u5341\u516b\u8bfe \u7b2c\u5341\u4e5d\u8bfe \u7b2c\u4e8c\u5341\u8bfe","title":"Jz"},{"location":"thu/d3/d3s/jz/class/01/","text":"\u7b2c\u4e09\u65b9\u7b2c\u4e09\u65b9","title":"01"},{"location":"thu/d3/d3s/jz/class/class02/","text":"\u8ba1\u7b97\u673a\u57fa\u672c\u7ec4\u6210 \u51af\u8bfa\u4f9d\u66fc\u67b6\u6784 L1\u7f13\u5b58\u6709I-Cache\u548cD-Cache\uff0c\u533a\u522b\u662f I-Cache\u5b58\u653e\u6307\u4ee4\uff0cD-Cache\u5b58\u653e\u6570\u636e\uff0c\u5206\u5f00\u7684\u597d\u5904\u662f\u53ef\u4ee5\u63d0\u9ad8\u8bbf\u95ee\u901f\u5ea6\uff0c\u56e0\u4e3a\u6307\u4ee4\u548c\u6570\u636e\u7684\u8bbf\u95ee\u6a21\u5f0f\u4e0d\u540c\uff0c\u53ef\u4ee5\u9488\u5bf9\u6027\u5730\u8fdb\u884c\u4f18\u5316\u3002","title":"Class02"},{"location":"thu/d3/d3s/jz/lab/lab/","text":"lab1","title":"Lab"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/","text":"supervisor-rv Windows \u7528\u6237\u53ef\u5728\u89e3\u538b\u7f29 rv.zip \u4e4b\u540e\uff0c\u4ece supervisor-rv \u5b50\u76ee\u5f55\u4e2d\u627e\u5230\u76d1\u63a7\u7a0b\u5e8f\uff0c\u4f46\u5f3a\u70c8\u5efa\u8bae\u4f9d\u636e\u4e0a\u8ff0\u7684 URL \u83b7\u5f97\u6700\u65b0\u7248\u672c\u7684\u76d1\u63a7\u7a0b\u5e8f\u3002 \u8fdb\u5165\u76ee\u5f55\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6587\u4ef6\u548c\u4e24\u4e2a\u76ee\u5f55\uff1a LICENSE Apache \u7248\u6743\u7533\u660e\u6587\u4ef6\uff1b README.md \u8fd9\u4e2a\u6587\u4ef6\u975e\u5e38\u91cd\u8981\uff0c\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\uff0c\u5305\u542b\u4e86\u76d1\u63a7\u7a0b\u5e8f\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u4ee5\u53ca\u9700\u8981\u5b9e\u73b0\u7684\u6307\u4ee4\u548c\u683c\u5f0f\uff1b kernel \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u4e86\u76d1\u63a7\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\uff1b term \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u4e86\u7ec8\u7aef\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\u3002 kernel term rv32i \u8bfe\u7a0b\u76f8\u5173\u9875\u9762 RV32I \u91cc\u201c\u53f3\u79fb\u201d\u6709\u4e24\u79cd\uff1a \u903b\u8f91\u53f3\u79fb SRL/SRLI \u548c \u7b97\u672f\u53f3\u79fb SRA/SRAI \u3002\u533a\u522b\u5728\u4e8e\u9ad8\u4f4d\u5982\u4f55\u586b\u5145\u3001\u4ee5\u53ca\u662f\u5426\u4fdd\u6301\u7b26\u53f7\u3002 SRL / SRLI\uff08\u903b\u8f91\u53f3\u79fb\uff09 \u9ad8\u4f4d \u8865 0 \u3002\u4e0d\u770b\u7b26\u53f7\u4f4d\uff0c\u9002\u7528\u4e8e \u65e0\u7b26\u53f7\u6570 \u6216\u5f53\u4f5c\u4f4d\u79fb/\u63a9\u7801\u64cd\u4f5c\u3002 \u4f8b\uff1a 0x8000_0001 SRL 1 \u2192 0x4000_0000 SRA / SRAI\uff08\u7b97\u672f\u53f3\u79fb\uff09 \u9ad8\u4f4d\u7528 \u539f\u7b26\u53f7\u4f4d\uff08bit31\uff09\u590d\u5236 \uff0c\u4fdd\u6301\u6570\u503c\u7684\u6b63\u8d1f\u53f7\u3002\u76f8\u5f53\u4e8e\u5bf9\u4e8c\u8865\u6570\u505a\u201c\u9664\u4ee5 2 \u4e14\u5411\u8d1f\u65e0\u7a77\u53d6\u6574\u201d\u3002 \u4f8b\uff1a 0xFFFF_FFFD (-3) SRA 1 \u2192 0xFFFF_FFFE (-2) 0x8000_0001 SRA 1 \u2192 0xC000_0000 \u8865\u5145\u8981\u70b9 \u2026I \u7ed3\u5c3e\u7684\u662f \u7acb\u5373\u6570 \u7248\u672c\uff1b\u5bc4\u5b58\u5668\u7248\u672c\u7684\u79fb\u4f4d\u91cf\u6765\u81ea rs2 \u3002 \u5728 RV32 \u4e2d\u79fb\u4f4d\u91cf\u53ea\u53d6 \u4f4e 5 \u4f4d \uff080\u201331\uff09\uff0c\u66f4\u9ad8\u4f4d\u88ab\u5ffd\u7565\u3002 C \u91cc >> \u5bf9\u65e0\u7b26\u53f7\u901a\u5e38\u5bf9\u5e94 SRL \uff0c\u5bf9\u6709\u7b26\u53f7\u5e38\u5b9e\u73b0\u4e3a SRA \uff08\u4f46\u6807\u51c6\u4e0a\u66fe\u662f\u5b9e\u73b0\u76f8\u5173\uff09\uff0c\u5728\u6c47\u7f16\u91cc\u9700\u663e\u5f0f\u9009 SRL \u6216 SRA \u3002 \u4e0b\u9762\u7ed9\u4f60\u4e00\u4efd RV32I \u4e00\u9875\u901f\u67e5\u8868 \uff08\u53ea\u542b\u57fa\u7840\u6574\u6570\u6307\u4ee4\uff09\u3002\u6bcf\u884c\u5305\u542b\uff1a \u52a9\u8bb0\u7b26 \u3001 \u7c7b\u578b \uff08R/I/S/B/U/J\uff09\u3001 \u7f16\u7801\u5173\u952e\u5b57 \uff08opcode / funct3 / funct7 \u6216\u8bf4\u660e\uff09\u3001 \u8bed\u4e49 \u3001 \u5f71\u54cd \uff08\u5199\u54ea\u4e9b\u5bc4\u5b58\u5668/\u662f\u5426\u6539PC\uff1bRV32I \u65e0\u6761\u4ef6\u7801\u6807\u5fd7\u4f4d\uff09\u3002 RV32I \u4e00\u9875\u901f\u67e5\u8868 \u7b97\u672f/\u903b\u8f91\uff08\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668\uff0c opcode=0110011 \uff09 \u6307\u4ee4 \u7c7b\u578b funct7 funct3 \u8bed\u4e49 \u5f71\u54cd ADD rd,rs1,rs2 R 0000000 000 rd = rs1 + rs2 \u5199 rd SUB rd,rs1,rs2 R 0100000 000 rd = rs1 - rs2 \u5199 rd SLL rd,rs1,rs2 R 0000000 001 rd = rs1 << (rs2[4:0]) \u5199 rd SLT rd,rs1,rs2 R 0000000 010 rd = (rs1 < rs2) \u6709\u7b26\u53f7 \u5199 rd SLTU rd,rs1,rs2 R 0000000 011 rd = (rs1 < rs2) \u65e0\u7b26\u53f7 \u5199 rd XOR rd,rs1,rs2 R 0000000 100 rd = rs1 ^ rs2 \u5199 rd SRL rd,rs1,rs2 R 0000000 101 \u903b\u8f91\u53f3\u79fb \u5199 rd SRA rd,rs1,rs2 R 0100000 101 \u7b97\u672f\u53f3\u79fb \u5199 rd OR rd,rs1,rs2 R 0000000 110 \u4f4d\u6216 \u5199 rd AND rd,rs1,rs2 R 0000000 111 \u4f4d\u4e0e \u5199 rd \u7b97\u672f/\u903b\u8f91\u7acb\u5373\u6570\uff08 opcode=0010011 \uff09 \u6307\u4ee4 \u7c7b\u578b \u989d\u5916\u5b57\u6bb5 funct3 \u8bed\u4e49 \u5f71\u54cd ADDI rd,rs1,imm12 I \u2014 000 rd = rs1 + imm \u5199 rd SLTI rd,rs1,imm12 I \u2014 010 rd = (rs1 < imm) \u6709\u7b26\u53f7 \u5199 rd SLTIU rd,rs1,imm12 I \u2014 011 rd = (rs1 < imm) \u65e0\u7b26\u53f7 \u5199 rd XORI rd,rs1,imm12 I \u2014 100 rd = rs1 ^ imm \u5199 rd ORI rd,rs1,imm12 I \u2014 110 rd = rs1 | imm \u5199 rd ANDI rd,rs1,imm12 I \u2014 111 rd = rs1 & imm \u5199 rd SLLI rd,rs1,shamt I funct7=0000000 001 \u5de6\u79fb shamt(0\u201331) \u5199 rd SRLI rd,rs1,shamt I funct7=0000000 101 \u903b\u8f91\u53f3\u79fb \u5199 rd SRAI rd,rs1,shamt I funct7=0100000 101 \u7b97\u672f\u53f3\u79fb \u5199 rd \u8f7d\u5165\uff08 opcode=0000011 \uff09 \u6307\u4ee4 \u7c7b\u578b funct3 \u8bed\u4e49\uff08\u5730\u5740 = rs1 + imm12\uff09 \u5f71\u54cd LB rd,imm(rs1) I 000 \u8bfb 8 \u4f4d\uff0c\u7b26\u53f7\u6269\u5c55\u5230 32 \u5199 rd LH rd,imm(rs1) I 001 \u8bfb 16 \u4f4d\uff0c\u7b26\u53f7\u6269\u5c55 \u5199 rd LW rd,imm(rs1) I 010 \u8bfb 32 \u4f4d \u5199 rd LBU rd,imm(rs1) I 100 \u8bfb 8 \u4f4d\uff0c\u65e0\u7b26\u53f7\u96f6\u6269\u5c55 \u5199 rd LHU rd,imm(rs1) I 101 \u8bfb 16 \u4f4d\uff0c\u65e0\u7b26\u53f7\u96f6\u6269\u5c55 \u5199 rd \u5b58\u50a8\uff08 opcode=0100011 \uff09 \u6307\u4ee4 \u7c7b\u578b funct3 \u8bed\u4e49\uff08\u5730\u5740 = rs1 + imm12[\u5206\u88c2\u6210 S \u578b]\uff09 \u5f71\u54cd SB rs2,imm(rs1) S 000 \u5199 rs2[7:0] \u5185\u5b58 SH rs2,imm(rs1) S 001 \u5199 rs2[15:0] \u5185\u5b58 SW rs2,imm(rs1) S 010 \u5199 rs2[31:0] \u5185\u5b58 \u8df3\u8f6c/\u5206\u652f \u6307\u4ee4 \u7c7b\u578b opcode funct3 \u8bed\u4e49 \u5f71\u54cd JAL rd,offset J 1101111 \u2014 rd = pc+4\uff1bpc += signext(offset) \u5199 rd\u3001\u6539 PC JALR rd,rs1,imm I 1100111 000 t = (rs1+imm)&\\~1\uff1brd = pc+4\uff1bpc = t \u5199 rd\u3001\u6539 PC BEQ rs1,rs2,off B 1100011 000 rs1==rs2 \u5219 pc += off \u6539 PC BNE rs1,rs2,off B 1100011 001 \u4e0d\u7b49\u5219\u8df3 \u6539 PC BLT rs1,rs2,off B 1100011 100 \u6709\u7b26\u53f7 < \u5219\u8df3 \u6539 PC BGE rs1,rs2,off B 1100011 101 \u6709\u7b26\u53f7 \u2265 \u5219\u8df3 \u6539 PC BLTU rs1,rs2,off B 1100011 110 \u65e0\u7b26\u53f7 < \u5219\u8df3 \u6539 PC BGEU rs1,rs2,off B 1100011 111 \u65e0\u7b26\u53f7 \u2265 \u5219\u8df3 \u6539 PC \u7acb\u5373\u6570\u88c5\u5165/PC \u76f8\u5bf9\uff08U \u578b\uff09 \u6307\u4ee4 \u7c7b\u578b opcode \u8bed\u4e49 \u5f71\u54cd LUI rd,imm20 U 0110111 rd = imm20 << 12 \u5199 rd AUIPC rd,imm20 U 0010111 rd = pc + (imm20 << 12) \u5199 rd \u6742\u9879 / \u5c4f\u969c / \u7cfb\u7edf \u6307\u4ee4 \u7c7b\u578b opcode funct3 \u8bed\u4e49 \u5f71\u54cd FENCE pred,succ I 0001111 000 \u5185\u5b58\u5c4f\u969c\uff08\u6b21\u5e8f\u7ea6\u675f\uff09 \u65e0\u5bc4\u5b58\u5668\uff1b\u987a\u5e8f\u5f71\u54cd FENCE.I I 0001111 001 \u6307\u4ee4\u53d6\u6307\u4e0e\u6570\u636e\u53ef\u89c1\u6027\u540c\u6b65 \u65e0\u5bc4\u5b58\u5668 ECALL I 1110011 000 \u73af\u5883\u8c03\u7528 \u8fdb\u5165\u73af\u5883\uff1bPC \u8f6c\u79fb EBREAK I 1110011 000 \u65ad\u70b9 \u8fdb\u5165\u8c03\u8bd5\uff1bPC \u8f6c\u79fb CSRRW rd,csr,rs1 I 1110011 001 \u4ea4\u6362\uff1at=CSR; CSR=rs1; rd=t \u5199 rd/CSR CSRRS rd,csr,rs1 I 1110011 010 \u8bfb\u5e76\u7f6e\u4f4d\uff1aCSR = rs1 \u5199 rd/CSR CSRRC rd,csr,rs1 I 1110011 011 \u8bfb\u5e76\u6e05\u4f4d\uff1aCSR &= \\~rs1 \u5199 rd/CSR CSRRWI rd,csr,uimm I 1110011 101 \u7acb\u5373\u6570\u7248\u672c\uff08\u5199 CSR=uimm\uff09 \u5199 rd/CSR CSRRSI rd,csr,uimm I 1110011 110 \u7acb\u5373\u6570\u7f6e\u4f4d \u5199 rd/CSR CSRRCI rd,csr,uimm I 1110011 111 \u7acb\u5373\u6570\u6e05\u4f4d \u5199 rd/CSR \u5907\u6ce8 x0 \u6052\u4e3a 0\uff1b\u5bf9 rd=x0 \u7684\u5199\u5165\u88ab\u4e22\u5f03\u3002 RV32I \u6ca1\u6709\u6761\u4ef6\u7801\u6807\u5fd7\u4f4d \uff08ZF\u3001CF \u7b49\u90fd\u4e0d\u5b58\u5728\uff09\uff1b\u6240\u6709\u6bd4\u8f83\u901a\u8fc7\u7ed3\u679c\u5bc4\u5b58\u5668\u6216\u5206\u652f\u7acb\u5373\u5224\u65ad\u5b8c\u6210\u3002 \u7acb\u5373\u6570\u5b57\u6bb5\uff1aI/S/B \u4e3a 12 \u4f4d\u6709\u7b26\u53f7\uff1bU/J \u4e3a 20 \u4f4d\uff08\u62fc\u63a5\u65f6\u6309\u5404\u81ea\u7f16\u7801\u4f4d\u5e03\u5c40\uff09\uff1b\u79fb\u4f4d\u91cf shamt \u4e3a 5 \u4f4d\u3002 \u5206\u652f/\u8df3\u8f6c\u4f4d\u79fb\u6309 2 \u5b57\u8282\u5bf9\u9f50\uff08\u6700\u4f4e\u4f4d\u4e3a 0\uff09\u3002 \u8ff7\u4f60\u793a\u4f8b\uff1aPC \u76f8\u5bf9\u5bfb\u5740 + \u6761\u4ef6\u5206\u652f # \u4ee5 AUIPC \u505a\u57fa\u5740 + LW \u8bfb\u5e38\u91cf\u8868 AUIPC a0, %pcrel_hi(table) # a0 = pc + hi20(table-pc) LW t0, %pcrel_lo(table)(a0) # t0 = *(a0 + lo12) ADDI t1, x0, 100 BLT t0, t1, less # if t0 < 100 \u8df3\u8f6c ADDI a1, x0, 1 # not less J done less: ADDI a1, x0, -1 done: EBREAK table: .word 42 \u5982\u679c\u4f60\u5e0c\u671b\uff0c\u6211\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4efd\u901f\u67e5\u8868\u5bfc\u51fa\u6210 A4/PDF \uff08\u5e26\u66f4\u7d27\u51d1\u6392\u7248\u4e0e\u9875\u7709\u9875\u811a\uff09\uff0c\u6216\u8005\u6309\u4f60\u65e5\u5e38\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u522b\u540d\uff08 a0\u2013a7, t0\u2013t6, s0\u2013s11 \uff09\u518d\u8865\u4e00\u5f20\u5bc4\u5b58\u5668\u901f\u67e5\u3002 \u4f4d\u7f6e\u4e0e\u4f5c\u7528\uff08\u4ee5 RV32I \u4e3a\u4f8b\uff09 \u7b80\u77ed\u8bf4\uff1a opcode \uff1a7 \u4f4d\u201c\u4e3b\u64cd\u4f5c\u7801\u201d\uff0c\u5728\u6307\u4ee4\u6700\u4f4e\u4f4d [6:0] \u3002\u5b83\u5148\u51b3\u5b9a \u6307\u4ee4\u683c\u5f0f \uff08R/I/S/B/U/J \u4e4b\u4e00\uff09\u548c\u5927\u7c7b\uff08\u5982\u201c\u5bc4\u5bc4\u7b97\u672f\u201d\u201c\u8f7d\u5165\u201d\u201c\u5b58\u50a8\u201d\u201c\u5206\u652f\u201d\u201c\u7cfb\u7edf\u201d\u7b49\uff09\u3002 funct3 \uff1a3 \u4f4d\u201c\u529f\u80fd\u7801\u201d\uff0c\u5728 [14:12] \u3002\u5728\u540c\u4e00\u4e2a opcode \u4e4b\u4e0b\u8fdb\u4e00\u6b65\u533a\u5206 \u5177\u4f53\u5b50\u64cd\u4f5c \uff08\u5982\u5206\u652f\u6761\u4ef6\u3001\u8f7d\u5165/\u5b58\u50a8\u6570\u636e\u5bbd\u5ea6\u3001\u7b97\u672f/\u903b\u8f91\u662f\u54ea\u4e00\u79cd\u7b49\uff09\u3002 funct7 \uff1a7 \u4f4d\u201c\u529f\u80fd\u7801\u201d\uff0c\u5728\u6700\u9ad8\u4f4d [31:25] \u3002\u5728\u67d0\u4e9b R \u578b/\u79fb\u4f4d\u7c7b\u6307\u4ee4\u91cc\u518d\u7ec6\u5206\u64cd\u4f5c\uff08\u6bd4\u5982 ADD vs SUB\u3001SRL vs SRA\uff09\u3002\u5f88\u591a\u975e R \u578b\u6307\u4ee4\u628a\u8fd9 7 \u4f4d\u62ff\u53bb\u505a\u7acb\u5373\u6570\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64 \u5e76\u4e0d\u603b\u662f\u5b58\u5728 \u201cfunct7\u201d\u7684\u610f\u4e49\u3002 R \u578b\uff08\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668\u7b97\u672f\uff09 31 25 24 20 19 15 14 12 11 7 6 0 [ funct7 ][ rs2 ][ rs1 ][funct3][ rd ][ opcode] opcode=0110011 \u8868\u793a\u201c\u6574\u6570\u5bc4\u5bc4\u8fd0\u7b97\u201d\u3002 funct3 \u6307\u51fa\u662f\u54ea\u4e00\u7ec4\u64cd\u4f5c\uff1b funct7 \u518d\u7ec6\u5206\uff1a ADD \uff1afunct7= 0000000 \u3001funct3= 000 SUB \uff1afunct7= 0100000 \u3001funct3= 000 \uff08\u4e0e ADD \u4ec5 funct7 \u4e0d\u540c\uff09 SRL \uff1afunct7= 0000000 \u3001funct3= 101 SRA \uff1afunct7= 0100000 \u3001funct3= 101 I \u578b\uff08\u7b97\u672f\u7acb\u5373\u6570 / \u8f7d\u5165 / JALR / CSR\uff09 31 20 19 15 14 12 11 7 6 0 [ imm[11:0] ][ rs1 ][funct3][ rd ][ opcode] \u8fd9\u91cc\u6ca1\u6709 funct7\uff0c\u8fd9\u4e9b\u9ad8\u4f4d\u662f \u7acb\u5373\u6570 \u3002 opcode=0010011 \uff08\u7b97\u672f\u7acb\u5373\u6570\uff09\u65f6\uff0c funct3 \u533a\u5206\u64cd\u4f5c\uff1a 000 =ADDI\uff0c 110 =ORI\uff0c 111 =ANDI \u7b49\uff1b \u79fb\u4f4d\u7acb\u5373\u6570\u7528 funct3=001/101 \u518d\u7528\u201c\u4f2a funct7\u201d\u4f4d\u533a\u5206\uff1a 0000000 =SLLI/SRLI\uff0c 0100000 =SRAI\u3002 opcode=0000011 \uff08\u8f7d\u5165\uff09\u65f6\uff0c funct3 \u6307\u5b9a\u5bbd\u5ea6\uff1a 000 =LB\uff0c 001 =LH\uff0c 010 =LW\uff0c 100 =LBU\uff0c 101 =LHU\u3002 opcode=1100111 \uff08JALR\uff09\u56fa\u5b9a funct3=000 \u3002 opcode=1110011 \uff08\u7cfb\u7edf/CSR\uff09\u65f6\uff0c funct3 \u533a\u5206 CSRRW/CSRRS/CSRRC \u4ee5\u53ca\u5b83\u4eec\u7684\u7acb\u5373\u6570\u7248\u672c\u3002 S \u578b\uff08\u5b58\u50a8\uff09 31 25 24 20 19 15 14 12 11 7 6 0 [imm[11:5]][ rs2 ][ rs1 ][funct3][imm[4:0]][opcode] opcode=0100011 \uff1b funct3 \u6307\u5b9a\u5bbd\u5ea6\uff1a 000 =SB\uff0c 001 =SH\uff0c 010 =SW\u3002 B \u578b\uff08\u6761\u4ef6\u5206\u652f\uff09 31 30 25 24 20 19 15 14 12 11 8 7 6 6 0 [imm[12|10:5]][ rs2 ][ rs1 ][funct3][imm[4:1|11]][opcode] opcode=1100011 \uff1b funct3 \u6307\u5b9a\u6761\u4ef6\uff1a 000 =BEQ\uff0c 001 =BNE\uff0c 100 =BLT\uff0c 101 =BGE\uff0c 110 =BLTU\uff0c 111 =BGEU\u3002 U/J \u578b\uff08\u9ad8\u4f4d\u7acb\u5373\u6570 / \u7acb\u5373\u8df3\u8f6c\uff09 U: 31 12 11 7 6 0 J: 31 30 21 20 19 12 11 7 6 0 [ imm[31:12] ][ rd ][ opcode] [imm[20|10:1|11|19:12]][ rd ][opcode] \u6ca1\u6709 funct3/funct7\u3002 LUI opcode=0110111 \uff0c AUIPC opcode=0010111 \uff1b JAL opcode=1101111 \u3002 \u5c0f\u7ed3 opcode \uff1a\u51b3\u5b9a\u201c\u8fd9\u662f\u4e00\u5927\u7c7b\u4ec0\u4e48\u6307\u4ee4 + \u7528\u4ec0\u4e48\u683c\u5f0f\u89e3\u7801\u201d\u3002 funct3 / funct7 \uff1a\u5728\u8be5\u5927\u7c7b\u4e0b \u7cbe\u786e\u5230\u54ea\u6761\u5177\u4f53\u6307\u4ee4 \uff1bR \u578b\u5927\u91cf\u4f7f\u7528\u4e24\u8005\u7ec4\u5408\uff1b\u5176\u5b83\u683c\u5f0f\u591a\u7528 funct3 \uff0c\u9ad8\u4f4d\u5219\u7528\u4e8e\u7acb\u5373\u6570\u3002 \u5b83\u4eec\u4e09\u8005\u4e00\u8d77\u6784\u6210\u4e86\u89e3\u7801\u8868\u7684\u5173\u952e\u5b57\u6bb5\uff1a \u540c\u4e00 opcode + funct3 +\uff08\u53ef\u9009\uff09funct7 \u2248 \u4e00\u6761\u552f\u4e00\u7684\u6307\u4ee4\u3002","title":"supervisor-rv"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#supervisor-rv","text":"Windows \u7528\u6237\u53ef\u5728\u89e3\u538b\u7f29 rv.zip \u4e4b\u540e\uff0c\u4ece supervisor-rv \u5b50\u76ee\u5f55\u4e2d\u627e\u5230\u76d1\u63a7\u7a0b\u5e8f\uff0c\u4f46\u5f3a\u70c8\u5efa\u8bae\u4f9d\u636e\u4e0a\u8ff0\u7684 URL \u83b7\u5f97\u6700\u65b0\u7248\u672c\u7684\u76d1\u63a7\u7a0b\u5e8f\u3002 \u8fdb\u5165\u76ee\u5f55\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6587\u4ef6\u548c\u4e24\u4e2a\u76ee\u5f55\uff1a LICENSE Apache \u7248\u6743\u7533\u660e\u6587\u4ef6\uff1b README.md \u8fd9\u4e2a\u6587\u4ef6\u975e\u5e38\u91cd\u8981\uff0c\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\uff0c\u5305\u542b\u4e86\u76d1\u63a7\u7a0b\u5e8f\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u4ee5\u53ca\u9700\u8981\u5b9e\u73b0\u7684\u6307\u4ee4\u548c\u683c\u5f0f\uff1b kernel \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u4e86\u76d1\u63a7\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\uff1b term \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u4e86\u7ec8\u7aef\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\u3002","title":"supervisor-rv"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#kernel","text":"","title":"kernel"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#term","text":"","title":"term"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#rv32i","text":"\u8bfe\u7a0b\u76f8\u5173\u9875\u9762 RV32I \u91cc\u201c\u53f3\u79fb\u201d\u6709\u4e24\u79cd\uff1a \u903b\u8f91\u53f3\u79fb SRL/SRLI \u548c \u7b97\u672f\u53f3\u79fb SRA/SRAI \u3002\u533a\u522b\u5728\u4e8e\u9ad8\u4f4d\u5982\u4f55\u586b\u5145\u3001\u4ee5\u53ca\u662f\u5426\u4fdd\u6301\u7b26\u53f7\u3002 SRL / SRLI\uff08\u903b\u8f91\u53f3\u79fb\uff09 \u9ad8\u4f4d \u8865 0 \u3002\u4e0d\u770b\u7b26\u53f7\u4f4d\uff0c\u9002\u7528\u4e8e \u65e0\u7b26\u53f7\u6570 \u6216\u5f53\u4f5c\u4f4d\u79fb/\u63a9\u7801\u64cd\u4f5c\u3002 \u4f8b\uff1a 0x8000_0001 SRL 1 \u2192 0x4000_0000 SRA / SRAI\uff08\u7b97\u672f\u53f3\u79fb\uff09 \u9ad8\u4f4d\u7528 \u539f\u7b26\u53f7\u4f4d\uff08bit31\uff09\u590d\u5236 \uff0c\u4fdd\u6301\u6570\u503c\u7684\u6b63\u8d1f\u53f7\u3002\u76f8\u5f53\u4e8e\u5bf9\u4e8c\u8865\u6570\u505a\u201c\u9664\u4ee5 2 \u4e14\u5411\u8d1f\u65e0\u7a77\u53d6\u6574\u201d\u3002 \u4f8b\uff1a 0xFFFF_FFFD (-3) SRA 1 \u2192 0xFFFF_FFFE (-2) 0x8000_0001 SRA 1 \u2192 0xC000_0000 \u8865\u5145\u8981\u70b9 \u2026I \u7ed3\u5c3e\u7684\u662f \u7acb\u5373\u6570 \u7248\u672c\uff1b\u5bc4\u5b58\u5668\u7248\u672c\u7684\u79fb\u4f4d\u91cf\u6765\u81ea rs2 \u3002 \u5728 RV32 \u4e2d\u79fb\u4f4d\u91cf\u53ea\u53d6 \u4f4e 5 \u4f4d \uff080\u201331\uff09\uff0c\u66f4\u9ad8\u4f4d\u88ab\u5ffd\u7565\u3002 C \u91cc >> \u5bf9\u65e0\u7b26\u53f7\u901a\u5e38\u5bf9\u5e94 SRL \uff0c\u5bf9\u6709\u7b26\u53f7\u5e38\u5b9e\u73b0\u4e3a SRA \uff08\u4f46\u6807\u51c6\u4e0a\u66fe\u662f\u5b9e\u73b0\u76f8\u5173\uff09\uff0c\u5728\u6c47\u7f16\u91cc\u9700\u663e\u5f0f\u9009 SRL \u6216 SRA \u3002 \u4e0b\u9762\u7ed9\u4f60\u4e00\u4efd RV32I \u4e00\u9875\u901f\u67e5\u8868 \uff08\u53ea\u542b\u57fa\u7840\u6574\u6570\u6307\u4ee4\uff09\u3002\u6bcf\u884c\u5305\u542b\uff1a \u52a9\u8bb0\u7b26 \u3001 \u7c7b\u578b \uff08R/I/S/B/U/J\uff09\u3001 \u7f16\u7801\u5173\u952e\u5b57 \uff08opcode / funct3 / funct7 \u6216\u8bf4\u660e\uff09\u3001 \u8bed\u4e49 \u3001 \u5f71\u54cd \uff08\u5199\u54ea\u4e9b\u5bc4\u5b58\u5668/\u662f\u5426\u6539PC\uff1bRV32I \u65e0\u6761\u4ef6\u7801\u6807\u5fd7\u4f4d\uff09\u3002","title":"rv32i"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#rv32i_1","text":"","title":"RV32I \u4e00\u9875\u901f\u67e5\u8868"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#-opcode0110011","text":"\u6307\u4ee4 \u7c7b\u578b funct7 funct3 \u8bed\u4e49 \u5f71\u54cd ADD rd,rs1,rs2 R 0000000 000 rd = rs1 + rs2 \u5199 rd SUB rd,rs1,rs2 R 0100000 000 rd = rs1 - rs2 \u5199 rd SLL rd,rs1,rs2 R 0000000 001 rd = rs1 << (rs2[4:0]) \u5199 rd SLT rd,rs1,rs2 R 0000000 010 rd = (rs1 < rs2) \u6709\u7b26\u53f7 \u5199 rd SLTU rd,rs1,rs2 R 0000000 011 rd = (rs1 < rs2) \u65e0\u7b26\u53f7 \u5199 rd XOR rd,rs1,rs2 R 0000000 100 rd = rs1 ^ rs2 \u5199 rd SRL rd,rs1,rs2 R 0000000 101 \u903b\u8f91\u53f3\u79fb \u5199 rd SRA rd,rs1,rs2 R 0100000 101 \u7b97\u672f\u53f3\u79fb \u5199 rd OR rd,rs1,rs2 R 0000000 110 \u4f4d\u6216 \u5199 rd AND rd,rs1,rs2 R 0000000 111 \u4f4d\u4e0e \u5199 rd","title":"\u7b97\u672f/\u903b\u8f91\uff08\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668\uff0copcode=0110011\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#opcode0010011","text":"\u6307\u4ee4 \u7c7b\u578b \u989d\u5916\u5b57\u6bb5 funct3 \u8bed\u4e49 \u5f71\u54cd ADDI rd,rs1,imm12 I \u2014 000 rd = rs1 + imm \u5199 rd SLTI rd,rs1,imm12 I \u2014 010 rd = (rs1 < imm) \u6709\u7b26\u53f7 \u5199 rd SLTIU rd,rs1,imm12 I \u2014 011 rd = (rs1 < imm) \u65e0\u7b26\u53f7 \u5199 rd XORI rd,rs1,imm12 I \u2014 100 rd = rs1 ^ imm \u5199 rd ORI rd,rs1,imm12 I \u2014 110 rd = rs1 | imm \u5199 rd ANDI rd,rs1,imm12 I \u2014 111 rd = rs1 & imm \u5199 rd SLLI rd,rs1,shamt I funct7=0000000 001 \u5de6\u79fb shamt(0\u201331) \u5199 rd SRLI rd,rs1,shamt I funct7=0000000 101 \u903b\u8f91\u53f3\u79fb \u5199 rd SRAI rd,rs1,shamt I funct7=0100000 101 \u7b97\u672f\u53f3\u79fb \u5199 rd","title":"\u7b97\u672f/\u903b\u8f91\u7acb\u5373\u6570\uff08opcode=0010011\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#opcode0000011","text":"\u6307\u4ee4 \u7c7b\u578b funct3 \u8bed\u4e49\uff08\u5730\u5740 = rs1 + imm12\uff09 \u5f71\u54cd LB rd,imm(rs1) I 000 \u8bfb 8 \u4f4d\uff0c\u7b26\u53f7\u6269\u5c55\u5230 32 \u5199 rd LH rd,imm(rs1) I 001 \u8bfb 16 \u4f4d\uff0c\u7b26\u53f7\u6269\u5c55 \u5199 rd LW rd,imm(rs1) I 010 \u8bfb 32 \u4f4d \u5199 rd LBU rd,imm(rs1) I 100 \u8bfb 8 \u4f4d\uff0c\u65e0\u7b26\u53f7\u96f6\u6269\u5c55 \u5199 rd LHU rd,imm(rs1) I 101 \u8bfb 16 \u4f4d\uff0c\u65e0\u7b26\u53f7\u96f6\u6269\u5c55 \u5199 rd","title":"\u8f7d\u5165\uff08opcode=0000011\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#opcode0100011","text":"\u6307\u4ee4 \u7c7b\u578b funct3 \u8bed\u4e49\uff08\u5730\u5740 = rs1 + imm12[\u5206\u88c2\u6210 S \u578b]\uff09 \u5f71\u54cd SB rs2,imm(rs1) S 000 \u5199 rs2[7:0] \u5185\u5b58 SH rs2,imm(rs1) S 001 \u5199 rs2[15:0] \u5185\u5b58 SW rs2,imm(rs1) S 010 \u5199 rs2[31:0] \u5185\u5b58","title":"\u5b58\u50a8\uff08opcode=0100011\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#_1","text":"\u6307\u4ee4 \u7c7b\u578b opcode funct3 \u8bed\u4e49 \u5f71\u54cd JAL rd,offset J 1101111 \u2014 rd = pc+4\uff1bpc += signext(offset) \u5199 rd\u3001\u6539 PC JALR rd,rs1,imm I 1100111 000 t = (rs1+imm)&\\~1\uff1brd = pc+4\uff1bpc = t \u5199 rd\u3001\u6539 PC BEQ rs1,rs2,off B 1100011 000 rs1==rs2 \u5219 pc += off \u6539 PC BNE rs1,rs2,off B 1100011 001 \u4e0d\u7b49\u5219\u8df3 \u6539 PC BLT rs1,rs2,off B 1100011 100 \u6709\u7b26\u53f7 < \u5219\u8df3 \u6539 PC BGE rs1,rs2,off B 1100011 101 \u6709\u7b26\u53f7 \u2265 \u5219\u8df3 \u6539 PC BLTU rs1,rs2,off B 1100011 110 \u65e0\u7b26\u53f7 < \u5219\u8df3 \u6539 PC BGEU rs1,rs2,off B 1100011 111 \u65e0\u7b26\u53f7 \u2265 \u5219\u8df3 \u6539 PC","title":"\u8df3\u8f6c/\u5206\u652f"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#pc-u","text":"\u6307\u4ee4 \u7c7b\u578b opcode \u8bed\u4e49 \u5f71\u54cd LUI rd,imm20 U 0110111 rd = imm20 << 12 \u5199 rd AUIPC rd,imm20 U 0010111 rd = pc + (imm20 << 12) \u5199 rd","title":"\u7acb\u5373\u6570\u88c5\u5165/PC \u76f8\u5bf9\uff08U \u578b\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#_2","text":"\u6307\u4ee4 \u7c7b\u578b opcode funct3 \u8bed\u4e49 \u5f71\u54cd FENCE pred,succ I 0001111 000 \u5185\u5b58\u5c4f\u969c\uff08\u6b21\u5e8f\u7ea6\u675f\uff09 \u65e0\u5bc4\u5b58\u5668\uff1b\u987a\u5e8f\u5f71\u54cd FENCE.I I 0001111 001 \u6307\u4ee4\u53d6\u6307\u4e0e\u6570\u636e\u53ef\u89c1\u6027\u540c\u6b65 \u65e0\u5bc4\u5b58\u5668 ECALL I 1110011 000 \u73af\u5883\u8c03\u7528 \u8fdb\u5165\u73af\u5883\uff1bPC \u8f6c\u79fb EBREAK I 1110011 000 \u65ad\u70b9 \u8fdb\u5165\u8c03\u8bd5\uff1bPC \u8f6c\u79fb CSRRW rd,csr,rs1 I 1110011 001 \u4ea4\u6362\uff1at=CSR; CSR=rs1; rd=t \u5199 rd/CSR CSRRS rd,csr,rs1 I 1110011 010 \u8bfb\u5e76\u7f6e\u4f4d\uff1aCSR = rs1 \u5199 rd/CSR CSRRC rd,csr,rs1 I 1110011 011 \u8bfb\u5e76\u6e05\u4f4d\uff1aCSR &= \\~rs1 \u5199 rd/CSR CSRRWI rd,csr,uimm I 1110011 101 \u7acb\u5373\u6570\u7248\u672c\uff08\u5199 CSR=uimm\uff09 \u5199 rd/CSR CSRRSI rd,csr,uimm I 1110011 110 \u7acb\u5373\u6570\u7f6e\u4f4d \u5199 rd/CSR CSRRCI rd,csr,uimm I 1110011 111 \u7acb\u5373\u6570\u6e05\u4f4d \u5199 rd/CSR \u5907\u6ce8 x0 \u6052\u4e3a 0\uff1b\u5bf9 rd=x0 \u7684\u5199\u5165\u88ab\u4e22\u5f03\u3002 RV32I \u6ca1\u6709\u6761\u4ef6\u7801\u6807\u5fd7\u4f4d \uff08ZF\u3001CF \u7b49\u90fd\u4e0d\u5b58\u5728\uff09\uff1b\u6240\u6709\u6bd4\u8f83\u901a\u8fc7\u7ed3\u679c\u5bc4\u5b58\u5668\u6216\u5206\u652f\u7acb\u5373\u5224\u65ad\u5b8c\u6210\u3002 \u7acb\u5373\u6570\u5b57\u6bb5\uff1aI/S/B \u4e3a 12 \u4f4d\u6709\u7b26\u53f7\uff1bU/J \u4e3a 20 \u4f4d\uff08\u62fc\u63a5\u65f6\u6309\u5404\u81ea\u7f16\u7801\u4f4d\u5e03\u5c40\uff09\uff1b\u79fb\u4f4d\u91cf shamt \u4e3a 5 \u4f4d\u3002 \u5206\u652f/\u8df3\u8f6c\u4f4d\u79fb\u6309 2 \u5b57\u8282\u5bf9\u9f50\uff08\u6700\u4f4e\u4f4d\u4e3a 0\uff09\u3002","title":"\u6742\u9879 / \u5c4f\u969c / \u7cfb\u7edf"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#pc","text":"# \u4ee5 AUIPC \u505a\u57fa\u5740 + LW \u8bfb\u5e38\u91cf\u8868 AUIPC a0, %pcrel_hi(table) # a0 = pc + hi20(table-pc) LW t0, %pcrel_lo(table)(a0) # t0 = *(a0 + lo12) ADDI t1, x0, 100 BLT t0, t1, less # if t0 < 100 \u8df3\u8f6c ADDI a1, x0, 1 # not less J done less: ADDI a1, x0, -1 done: EBREAK table: .word 42 \u5982\u679c\u4f60\u5e0c\u671b\uff0c\u6211\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4efd\u901f\u67e5\u8868\u5bfc\u51fa\u6210 A4/PDF \uff08\u5e26\u66f4\u7d27\u51d1\u6392\u7248\u4e0e\u9875\u7709\u9875\u811a\uff09\uff0c\u6216\u8005\u6309\u4f60\u65e5\u5e38\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u522b\u540d\uff08 a0\u2013a7, t0\u2013t6, s0\u2013s11 \uff09\u518d\u8865\u4e00\u5f20\u5bc4\u5b58\u5668\u901f\u67e5\u3002","title":"\u8ff7\u4f60\u793a\u4f8b\uff1aPC \u76f8\u5bf9\u5bfb\u5740 + \u6761\u4ef6\u5206\u652f"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#rv32i_2","text":"\u7b80\u77ed\u8bf4\uff1a opcode \uff1a7 \u4f4d\u201c\u4e3b\u64cd\u4f5c\u7801\u201d\uff0c\u5728\u6307\u4ee4\u6700\u4f4e\u4f4d [6:0] \u3002\u5b83\u5148\u51b3\u5b9a \u6307\u4ee4\u683c\u5f0f \uff08R/I/S/B/U/J \u4e4b\u4e00\uff09\u548c\u5927\u7c7b\uff08\u5982\u201c\u5bc4\u5bc4\u7b97\u672f\u201d\u201c\u8f7d\u5165\u201d\u201c\u5b58\u50a8\u201d\u201c\u5206\u652f\u201d\u201c\u7cfb\u7edf\u201d\u7b49\uff09\u3002 funct3 \uff1a3 \u4f4d\u201c\u529f\u80fd\u7801\u201d\uff0c\u5728 [14:12] \u3002\u5728\u540c\u4e00\u4e2a opcode \u4e4b\u4e0b\u8fdb\u4e00\u6b65\u533a\u5206 \u5177\u4f53\u5b50\u64cd\u4f5c \uff08\u5982\u5206\u652f\u6761\u4ef6\u3001\u8f7d\u5165/\u5b58\u50a8\u6570\u636e\u5bbd\u5ea6\u3001\u7b97\u672f/\u903b\u8f91\u662f\u54ea\u4e00\u79cd\u7b49\uff09\u3002 funct7 \uff1a7 \u4f4d\u201c\u529f\u80fd\u7801\u201d\uff0c\u5728\u6700\u9ad8\u4f4d [31:25] \u3002\u5728\u67d0\u4e9b R \u578b/\u79fb\u4f4d\u7c7b\u6307\u4ee4\u91cc\u518d\u7ec6\u5206\u64cd\u4f5c\uff08\u6bd4\u5982 ADD vs SUB\u3001SRL vs SRA\uff09\u3002\u5f88\u591a\u975e R \u578b\u6307\u4ee4\u628a\u8fd9 7 \u4f4d\u62ff\u53bb\u505a\u7acb\u5373\u6570\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64 \u5e76\u4e0d\u603b\u662f\u5b58\u5728 \u201cfunct7\u201d\u7684\u610f\u4e49\u3002","title":"\u4f4d\u7f6e\u4e0e\u4f5c\u7528\uff08\u4ee5 RV32I \u4e3a\u4f8b\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#r-","text":"31 25 24 20 19 15 14 12 11 7 6 0 [ funct7 ][ rs2 ][ rs1 ][funct3][ rd ][ opcode] opcode=0110011 \u8868\u793a\u201c\u6574\u6570\u5bc4\u5bc4\u8fd0\u7b97\u201d\u3002 funct3 \u6307\u51fa\u662f\u54ea\u4e00\u7ec4\u64cd\u4f5c\uff1b funct7 \u518d\u7ec6\u5206\uff1a ADD \uff1afunct7= 0000000 \u3001funct3= 000 SUB \uff1afunct7= 0100000 \u3001funct3= 000 \uff08\u4e0e ADD \u4ec5 funct7 \u4e0d\u540c\uff09 SRL \uff1afunct7= 0000000 \u3001funct3= 101 SRA \uff1afunct7= 0100000 \u3001funct3= 101","title":"R \u578b\uff08\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668\u7b97\u672f\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#i-jalr-csr","text":"31 20 19 15 14 12 11 7 6 0 [ imm[11:0] ][ rs1 ][funct3][ rd ][ opcode] \u8fd9\u91cc\u6ca1\u6709 funct7\uff0c\u8fd9\u4e9b\u9ad8\u4f4d\u662f \u7acb\u5373\u6570 \u3002 opcode=0010011 \uff08\u7b97\u672f\u7acb\u5373\u6570\uff09\u65f6\uff0c funct3 \u533a\u5206\u64cd\u4f5c\uff1a 000 =ADDI\uff0c 110 =ORI\uff0c 111 =ANDI \u7b49\uff1b \u79fb\u4f4d\u7acb\u5373\u6570\u7528 funct3=001/101 \u518d\u7528\u201c\u4f2a funct7\u201d\u4f4d\u533a\u5206\uff1a 0000000 =SLLI/SRLI\uff0c 0100000 =SRAI\u3002 opcode=0000011 \uff08\u8f7d\u5165\uff09\u65f6\uff0c funct3 \u6307\u5b9a\u5bbd\u5ea6\uff1a 000 =LB\uff0c 001 =LH\uff0c 010 =LW\uff0c 100 =LBU\uff0c 101 =LHU\u3002 opcode=1100111 \uff08JALR\uff09\u56fa\u5b9a funct3=000 \u3002 opcode=1110011 \uff08\u7cfb\u7edf/CSR\uff09\u65f6\uff0c funct3 \u533a\u5206 CSRRW/CSRRS/CSRRC \u4ee5\u53ca\u5b83\u4eec\u7684\u7acb\u5373\u6570\u7248\u672c\u3002","title":"I \u578b\uff08\u7b97\u672f\u7acb\u5373\u6570 / \u8f7d\u5165 / JALR / CSR\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#s","text":"31 25 24 20 19 15 14 12 11 7 6 0 [imm[11:5]][ rs2 ][ rs1 ][funct3][imm[4:0]][opcode] opcode=0100011 \uff1b funct3 \u6307\u5b9a\u5bbd\u5ea6\uff1a 000 =SB\uff0c 001 =SH\uff0c 010 =SW\u3002","title":"S \u578b\uff08\u5b58\u50a8\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#b","text":"31 30 25 24 20 19 15 14 12 11 8 7 6 6 0 [imm[12|10:5]][ rs2 ][ rs1 ][funct3][imm[4:1|11]][opcode] opcode=1100011 \uff1b funct3 \u6307\u5b9a\u6761\u4ef6\uff1a 000 =BEQ\uff0c 001 =BNE\uff0c 100 =BLT\uff0c 101 =BGE\uff0c 110 =BLTU\uff0c 111 =BGEU\u3002","title":"B \u578b\uff08\u6761\u4ef6\u5206\u652f\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#uj","text":"U: 31 12 11 7 6 0 J: 31 30 21 20 19 12 11 7 6 0 [ imm[31:12] ][ rd ][ opcode] [imm[20|10:1|11|19:12]][ rd ][opcode] \u6ca1\u6709 funct3/funct7\u3002 LUI opcode=0110111 \uff0c AUIPC opcode=0010111 \uff1b JAL opcode=1101111 \u3002","title":"U/J \u578b\uff08\u9ad8\u4f4d\u7acb\u5373\u6570 / \u7acb\u5373\u8df3\u8f6c\uff09"},{"location":"thu/d3/d3s/jz/lab/lab1/lab1/#_3","text":"opcode \uff1a\u51b3\u5b9a\u201c\u8fd9\u662f\u4e00\u5927\u7c7b\u4ec0\u4e48\u6307\u4ee4 + \u7528\u4ec0\u4e48\u683c\u5f0f\u89e3\u7801\u201d\u3002 funct3 / funct7 \uff1a\u5728\u8be5\u5927\u7c7b\u4e0b \u7cbe\u786e\u5230\u54ea\u6761\u5177\u4f53\u6307\u4ee4 \uff1bR \u578b\u5927\u91cf\u4f7f\u7528\u4e24\u8005\u7ec4\u5408\uff1b\u5176\u5b83\u683c\u5f0f\u591a\u7528 funct3 \uff0c\u9ad8\u4f4d\u5219\u7528\u4e8e\u7acb\u5373\u6570\u3002 \u5b83\u4eec\u4e09\u8005\u4e00\u8d77\u6784\u6210\u4e86\u89e3\u7801\u8868\u7684\u5173\u952e\u5b57\u6bb5\uff1a \u540c\u4e00 opcode + funct3 +\uff08\u53ef\u9009\uff09funct7 \u2248 \u4e00\u6761\u552f\u4e00\u7684\u6307\u4ee4\u3002","title":"\u5c0f\u7ed3"},{"location":"thu/d3/d3s/jz/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/jz/wangdao/1/","text":"","title":"1"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/","text":"\u7b80\u4ecb \u786c\u4ef6 \u8fd9\u4e2a\u89c6\u9891\u975e\u5e38\u597d \u53d6\u6307\u4ee4\u52a8\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0cPC \u4f1a\u81ea\u52a8\u52a0 1\uff0c\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 MQ\u4e2d\u5b58\u50a8\u5668\uff1a\u4e58\u6cd5\u5668\u548c\u9664\u6cd5\u5668\u7684\u4e2d\u95f4\u7ed3\u679c\u5bc4\u5b58\u5668\uff0c\u5b58\u50a8\u4f4e\u4f4d \u8f6f\u4ef6 \u8ba1\u7b97\u673a\u7cfb\u7edf\u5c42\u6b21 \u5de5\u4f5c\u539f\u7406 \u6027\u80fd\u6307\u6807 \u4e3b\u9891\u9664\u4ee5CPI\u5c31\u662f\u6bcf\u79d2\u949f\u6267\u884c\u7684\u6307\u4ee4\u6570 \u6570\u636e\u7684\u8868\u793a\u548c\u8fd0\u7b97 \u4e58\u79ef\u53d6\u6574 \u5b9a\u70b9\u6570\u7f16\u7801\u8868\u793a \u539f\u7801 \u53cd\u7801 \u8865\u7801 \u79fb\u7801 \u8865\u7801\u4e3a\u4ec0\u4e48\u8981\u53d6\u53cd\u52a0\u4e00 \u96f6\u6269\u5c55\uff0c\u7b26\u53f7\u6269\u5c55\u662f\u4ec0\u4e48\u610f\u601d\uff0c \u96f6\u6269\u5c55\u662f\u6307\u5728\u9ad8\u4f4d\u8865\u96f6\uff0c\u4f7f\u5f97\u6570\u636e\u4f4d\u6570\u589e\u52a0\u800c\u6570\u503c\u4e0d\u53d8\u3002\u4f8b\u5982\uff0c\u5c068\u4f4d\u76840b00001111\u6269\u5c55\u4e3a16\u4f4d\u76840b0000000000001111\u3002 \u7b26\u53f7\u6269\u5c55\u662f\u6307\u5728\u9ad8\u4f4d\u8865\u7b26\u53f7\u4f4d\uff08\u6b63\u6570\u8865\u96f6\uff0c\u8d1f\u6570\u8865\u4e00\uff09\uff0c\u4f7f\u5f97\u6570\u636e\u4f4d\u6570\u589e\u52a0\u800c\u6570\u503c\u4e0d\u53d8\u3002\u4f8b\u5982\uff0c\u5c068\u4f4d\u76840b11110000\uff08-16\uff09\u6269\u5c55\u4e3a16\u4f4d\u76840b1111111111110000\u3002 \u591a\u8def\u9009\u62e9\u5668 \u4e09\u6001\u95e8 \u52a0\u6cd5\u5668 \u4e32\u884c\u5e76\u4f4d\u7684\u5e76\u884c\u52a0\u6cd5\u5668 ALU \u5b9a\u70b9\u6570\u8fd0\u7b97","title":"\u7b80\u4ecb"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_1","text":"","title":"\u7b80\u4ecb"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_2","text":"\u8fd9\u4e2a\u89c6\u9891\u975e\u5e38\u597d \u53d6\u6307\u4ee4\u52a8\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0cPC \u4f1a\u81ea\u52a8\u52a0 1\uff0c\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 MQ\u4e2d\u5b58\u50a8\u5668\uff1a\u4e58\u6cd5\u5668\u548c\u9664\u6cd5\u5668\u7684\u4e2d\u95f4\u7ed3\u679c\u5bc4\u5b58\u5668\uff0c\u5b58\u50a8\u4f4e\u4f4d","title":"\u786c\u4ef6"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_3","text":"","title":"\u8f6f\u4ef6"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_4","text":"","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u5c42\u6b21"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_5","text":"","title":"\u5de5\u4f5c\u539f\u7406"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_6","text":"\u4e3b\u9891\u9664\u4ee5CPI\u5c31\u662f\u6bcf\u79d2\u949f\u6267\u884c\u7684\u6307\u4ee4\u6570","title":"\u6027\u80fd\u6307\u6807"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_7","text":"\u4e58\u79ef\u53d6\u6574","title":"\u6570\u636e\u7684\u8868\u793a\u548c\u8fd0\u7b97"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_8","text":"\u539f\u7801 \u53cd\u7801 \u8865\u7801 \u79fb\u7801 \u8865\u7801\u4e3a\u4ec0\u4e48\u8981\u53d6\u53cd\u52a0\u4e00 \u96f6\u6269\u5c55\uff0c\u7b26\u53f7\u6269\u5c55\u662f\u4ec0\u4e48\u610f\u601d\uff0c \u96f6\u6269\u5c55\u662f\u6307\u5728\u9ad8\u4f4d\u8865\u96f6\uff0c\u4f7f\u5f97\u6570\u636e\u4f4d\u6570\u589e\u52a0\u800c\u6570\u503c\u4e0d\u53d8\u3002\u4f8b\u5982\uff0c\u5c068\u4f4d\u76840b00001111\u6269\u5c55\u4e3a16\u4f4d\u76840b0000000000001111\u3002 \u7b26\u53f7\u6269\u5c55\u662f\u6307\u5728\u9ad8\u4f4d\u8865\u7b26\u53f7\u4f4d\uff08\u6b63\u6570\u8865\u96f6\uff0c\u8d1f\u6570\u8865\u4e00\uff09\uff0c\u4f7f\u5f97\u6570\u636e\u4f4d\u6570\u589e\u52a0\u800c\u6570\u503c\u4e0d\u53d8\u3002\u4f8b\u5982\uff0c\u5c068\u4f4d\u76840b11110000\uff08-16\uff09\u6269\u5c55\u4e3a16\u4f4d\u76840b1111111111110000\u3002","title":"\u5b9a\u70b9\u6570\u7f16\u7801\u8868\u793a"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_9","text":"","title":"\u591a\u8def\u9009\u62e9\u5668"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_10","text":"","title":"\u4e09\u6001\u95e8"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_11","text":"\u4e32\u884c\u5e76\u4f4d\u7684\u5e76\u884c\u52a0\u6cd5\u5668","title":"\u52a0\u6cd5\u5668"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#alu","text":"","title":"ALU"},{"location":"thu/d3/d3s/jz/wangdao/wangdao/#_12","text":"","title":"\u5b9a\u70b9\u6570\u8fd0\u7b97"},{"location":"thu/d3/d3s/oi/oi/","text":"oi plus cpp python java \u7b97\u6cd5OJ leetcode \u7f51\u5740 \u4f1a\u5458\u4e13\u4eab\u5185\u5bb9 codeforces \u7f51\u5740 \u6d1b\u8c37 \u7f51\u5740 \u725b\u5ba2\u7f51 \u7f51\u5740 AtCoder \u7f51\u5740 loj \u7f51\u5740 CodeChef \u7f51\u5740 TopCoder \u7f51\u5740 \u7f16\u7a0b\u8bed\u8a00 C++ \u7f51\u5740 Python \u7f51\u5740 Java \u7f51\u5740 \u57fa\u7840\u7b97\u6cd5 \u6392\u5e8f\u7b97\u6cd5 \u5192\u6ce1\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u67e5\u627e\u7b97\u6cd5 \u7ebf\u6027\u67e5\u627e \u4e8c\u5206\u67e5\u627e \u52a8\u6001\u89c4\u5212 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u80cc\u5305\u95ee\u9898 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u8fdb\u9636\u7b97\u6cd5 \u8d2a\u5fc3\u7b97\u6cd5 \u6d3b\u52a8\u9009\u62e9\u95ee\u9898 Huffman\u7f16\u7801 \u6700\u5c0f\u751f\u6210\u6811 \u5206\u6cbb\u7b97\u6cd5 \u5feb\u901f\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u77e9\u9635\u4e58\u6cd5 \u56de\u6eaf\u7b97\u6cd5 \u516b\u7687\u540e\u95ee\u9898 \u8ff7\u5bab\u95ee\u9898 \u6570\u72ec \u9ad8\u7ea7\u7b97\u6cd5 \u7ebf\u6bb5\u6811 \u533a\u95f4\u67e5\u8be2 \u52a8\u6001\u533a\u95f4 \u6811\u72b6\u6570\u7ec4 \u524d\u7f00\u548c \u533a\u95f4\u66f4\u65b0 \u5e76\u67e5\u96c6 \u8fde\u63a5\u95ee\u9898 \u7ec4\u56e2\u95ee\u9898 \u9ad8\u7ea7\u6570\u636e\u7ed3\u6784 \u7ebf\u6bb5\u6811 \u533a\u95f4\u67e5\u8be2 \u52a8\u6001\u533a\u95f4 \u6811\u72b6\u6570\u7ec4 \u524d\u7f00\u548c \u533a\u95f4\u66f4\u65b0 \u5e76\u67e5\u96c6 \u8fde\u63a5\u95ee\u9898 \u7ec4\u56e2\u95ee\u9898","title":"Oi"},{"location":"thu/d3/d3s/oi/oi/#oj","text":"","title":"\u7b97\u6cd5OJ"},{"location":"thu/d3/d3s/oi/oi/#leetcode","text":"\u7f51\u5740 \u4f1a\u5458\u4e13\u4eab\u5185\u5bb9","title":"leetcode"},{"location":"thu/d3/d3s/oi/oi/#codeforces","text":"\u7f51\u5740","title":"codeforces"},{"location":"thu/d3/d3s/oi/oi/#_1","text":"\u7f51\u5740","title":"\u6d1b\u8c37"},{"location":"thu/d3/d3s/oi/oi/#_2","text":"\u7f51\u5740","title":"\u725b\u5ba2\u7f51"},{"location":"thu/d3/d3s/oi/oi/#atcoder","text":"\u7f51\u5740","title":"AtCoder"},{"location":"thu/d3/d3s/oi/oi/#loj","text":"\u7f51\u5740","title":"loj"},{"location":"thu/d3/d3s/oi/oi/#codechef","text":"\u7f51\u5740","title":"CodeChef"},{"location":"thu/d3/d3s/oi/oi/#topcoder","text":"\u7f51\u5740","title":"TopCoder"},{"location":"thu/d3/d3s/oi/oi/#_3","text":"","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"thu/d3/d3s/oi/oi/#c","text":"\u7f51\u5740","title":"C++"},{"location":"thu/d3/d3s/oi/oi/#python","text":"\u7f51\u5740","title":"Python"},{"location":"thu/d3/d3s/oi/oi/#java","text":"\u7f51\u5740","title":"Java"},{"location":"thu/d3/d3s/oi/oi/#_4","text":"","title":"\u57fa\u7840\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_5","text":"\u5192\u6ce1\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5feb\u901f\u6392\u5e8f","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_6","text":"\u7ebf\u6027\u67e5\u627e \u4e8c\u5206\u67e5\u627e","title":"\u67e5\u627e\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_7","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217 \u80cc\u5305\u95ee\u9898 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","title":"\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oi/#_8","text":"","title":"\u8fdb\u9636\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_9","text":"\u6d3b\u52a8\u9009\u62e9\u95ee\u9898 Huffman\u7f16\u7801 \u6700\u5c0f\u751f\u6210\u6811","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_10","text":"\u5feb\u901f\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u77e9\u9635\u4e58\u6cd5","title":"\u5206\u6cbb\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_11","text":"\u516b\u7687\u540e\u95ee\u9898 \u8ff7\u5bab\u95ee\u9898 \u6570\u72ec","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_12","text":"","title":"\u9ad8\u7ea7\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oi/#_13","text":"\u533a\u95f4\u67e5\u8be2 \u52a8\u6001\u533a\u95f4","title":"\u7ebf\u6bb5\u6811"},{"location":"thu/d3/d3s/oi/oi/#_14","text":"\u524d\u7f00\u548c \u533a\u95f4\u66f4\u65b0","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"thu/d3/d3s/oi/oi/#_15","text":"\u8fde\u63a5\u95ee\u9898 \u7ec4\u56e2\u95ee\u9898","title":"\u5e76\u67e5\u96c6"},{"location":"thu/d3/d3s/oi/oi/#_16","text":"","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784"},{"location":"thu/d3/d3s/oi/oi/#_17","text":"\u533a\u95f4\u67e5\u8be2 \u52a8\u6001\u533a\u95f4","title":"\u7ebf\u6bb5\u6811"},{"location":"thu/d3/d3s/oi/oi/#_18","text":"\u524d\u7f00\u548c \u533a\u95f4\u66f4\u65b0","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"thu/d3/d3s/oi/oi/#_19","text":"\u8fde\u63a5\u95ee\u9898 \u7ec4\u56e2\u95ee\u9898","title":"\u5e76\u67e5\u96c6"},{"location":"thu/d3/d3s/oi/oj/oj/","text":"make the best of oj to improve your coding skills and problem-solving abilities.","title":"Oj"},{"location":"thu/d3/d3s/oi/oj/lc/lc/","text":"here to write my code in leetcode \u7b97\u6cd5\u8fdb\u9636 \u7b97\u6cd5\u9762\u8bd5\u5c0f\u6284 \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784 \u65f6\u95f4\u590d\u6742\u5ea6 \u8fd9\u5f20\u8868\u5f88\u5168\u9762 \u8f93\u5165\u89c4\u6a21 \u6392\u5e8f\u7b97\u6cd5 \u6240\u6709\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u5047\u8bbe\u5e76\u8bf4\u6392\u5e8f\u6210\u672c\u4e3a O(n\u22c5logn)\u3002\u901a\u5e38\u662f\u6b63\u786e\u7684\uff0c\u5176\u4e2d n \u662f\u8981\u6392\u5e8f\u7684\u5143\u7d20\u6570\u3002\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\u8868\uff0c\u5217\u51fa\u4e86\u8bb8\u591a\u5e38\u89c1\u7684\u6392\u5e8f\u7b97\u6cd5\u53ca\u5176\u5b8c\u6574\u6027\u3002\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u7684\u7b97\u6cd5\u5404\u4e0d\u76f8\u540c\uff1b\u4f8b\u5982\uff0cPython \u4f7f\u7528 Timsort\uff0c\u4f46\u5728 C++ \u4e2d\uff0c\u7279\u5b9a\u7b97\u6cd5\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u5e76\u4e14\u4f1a\u6709\u6240\u4e0d\u540c \u901a\u7528DSA\u6d41\u7a0b\u56fe \u8fd9\u662f\u4e00\u4e2a\u6d41\u7a0b\u56fe\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u5b9a\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u6d41\u7a0b\u56fe\u975e\u5e38\u7b3c\u7edf\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u6db5\u76d6\u6bcf\u4e2a\u573a\u666f\u3002 \u7b97\u6cd5\u9898\u4ee3\u7801\u6a21\u677f \u53cc\u6307\u9488 \u53ea\u6709\u4e00\u4e2a\u8f93\u5165, \u4ece\u4e24\u7aef\u5f00\u59cb\u904d\u5386 \u53cc\u6307\u9488 \u6709\u4e24\u4e2a\u8f93\u5165, \u4e24\u4e2a\u90fd\u9700\u8981\u904d\u5386\u5b8c \u6ed1\u52a8\u7a97\u53e3 \u6784\u5efa\u524d\u7f00\u548c \u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u6784\u5efa \u94fe\u8868: \u5feb\u6162\u6307\u9488 \u53cd\u8f6c\u94fe\u8868 \u627e\u5230\u7b26\u5408\u786e\u5207\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\u6570 \u5355\u8c03\u9012\u589e\u6808 \u4e8c\u53c9\u6811: DFS (\u9012\u5f52) \u4e8c\u53c9\u6811: DFS (\u8fed\u4ee3) public int dfs(TreeNode root) { Stack<TreeNode> stack = new Stack<>(); stack.push(root); int ans = 0; while (!stack.empty()) { TreeNode node = stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node.left != null) { stack.push(node.left); } if (node.right != null) { stack.push(node.right); } } return ans; } int dfs(TreeNode* root) { stack<TreeNode*> stack; stack.push(root); int ans = 0; while (!stack.empty()) { TreeNode* node = stack.top(); stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node->left != nullptr) { stack.push(node->left); } if (node->right != nullptr) { stack.push(node->right); } } return ans; } def dfs(root): stack = [root] ans = 0 while stack: node = stack.pop() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if node.left: stack.append(node.left) if node.right: stack.append(node.right) return ans \u4e8c\u53c9\u6811: BFS public int fn(TreeNode root) { Queue<TreeNode> queue = new LinkedList<>(); queue.add(root); int ans = 0; while (!queue.isEmpty()) { int currentLength = queue.size(); // \u505a\u4e00\u4e9b\u5f53\u524d\u5c42\u7684\u64cd\u4f5c for (int i = 0; i < currentLength; i++) { TreeNode node = queue.remove(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node.left != null) { queue.add(node.left); } if (node.right != null) { queue.add(node.right); } } } return ans; } int fn(TreeNode* root) { queue<TreeNode*> queue; queue.push(root); int ans = 0; while (!queue.empty()) { int currentLength = queue.size(); // \u505a\u4e00\u4e9b\u5f53\u524d\u5c42\u7684\u64cd\u4f5c for (int i = 0; i < currentLength; i++) { TreeNode* node = queue.front(); queue.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node->left != nullptr) { queue.push(node->left); } if (node->right != nullptr) { queue.push(node->right); } } } return ans; } from collections import deque def fn(root): queue = deque([root]) ans = 0 while queue: current_length = len(queue) # \u505a\u4e00\u4e9b\u5f53\u524d\u5c42\u7684\u64cd\u4f5c for _ in range(current_length): node = queue.popleft() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if node.left: queue.append(node.left) if node.right: queue.append(node.right) return ans \u56fe: DFS (\u9012\u5f52) \u4ee5\u4e0b\u56fe\u6a21\u677f\u5047\u8bbe\u8282\u70b9\u7f16\u53f7\u4ece 0 \u5230 n - 1 \uff0c\u5e76\u4e14\u56fe\u662f\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u7ed9\u51fa\u7684\u3002\u6839\u636e\u95ee\u9898\u7684\u4e0d\u540c\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u4f7f\u7528\u6a21\u677f\u4e4b\u524d\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u7b49\u6548\u7684\u90bb\u63a5\u8868\u3002 Set<Integer> seen = new HashSet<>(); public int fn(int[][] graph) { seen.add(START_NODE); return dfs(START_NODE, graph); } public int dfs(int node, int[][] graph) { int ans = 0; // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (!seen.contains(neighbor)) { seen.add(neighbor); ans += dfs(neighbor, graph); } } return ans; } unordered_set<int> seen; int fn(vector<vector<int>>& graph) { seen.insert(START_NODE); return dfs(START_NODE, graph); } int fn dfs(int node, vector<vector<int>>& graph) { int ans = 0; // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (seen.find(neighbor) == seen.end()) { seen.insert(neighbor); ans += dfs(neighbor, graph); } } return ans; } def fn(graph): def dfs(node): ans = 0 # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for neighbor in graph[node]: if neighbor not in seen: seen.add(neighbor) ans += dfs(neighbor) return ans seen = {START_NODE} return dfs(START_NODE) \u56fe: DFS (\u8fed\u4ee3) public int fn(int[][] graph) { Stack<Integer> stack = new Stack<>(); Set<Integer> seen = new HashSet<>(); stack.push(START_NODE); seen.add(START_NODE); int ans = 0; while (!stack.empty()) { int node = stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (!seen.contains(neighbor)) { seen.add(neighbor); stack.push(neighbor); } } } return ans; } int fn(vector<vector<int>>& graph) { stack<int> stack; unordered_set<int> seen; stack.push(START_NODE); seen.insert(START_NODE); int ans = 0; while (!stack.empty()) { int node = stack.top(); stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (seen.find(neighbor) == seen.end()) { seen.insert(neighbor); stack.push(neighbor); } } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0el556/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(graph): stack = [START_NODE] seen = {START_NODE} ans = 0 while stack: node = stack.pop() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for neighbor in graph[node]: if neighbor not in seen: seen.add(neighbor) stack.append(neighbor) return ans \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0el556/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u56fe: BFS public int fn(int[][] graph) { Queue<Integer> queue = new LinkedList<>(); Set<Integer> seen = new HashSet<>(); queue.add(START_NODE); seen.add(START_NODE); int ans = 0; while (!queue.isEmpty()) { int node = queue.remove(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (!seen.contains(neighbor)) { seen.add(neighbor); queue.add(neighbor); } } } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0elfx2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int fn(vector<vector<int>>& graph) { queue<int> queue; unordered_set<int> seen; queue.add(START_NODE); seen.insert(START_NODE); int ans = 0; while (!queue.empty()) { int node = queue.front(); queue.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (seen.find(neighbor) == seen.end()) { seen.insert(neighbor); queue.push(neighbor); } } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0elfx2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 from collections import deque def fn(graph): queue = deque([START_NODE]) seen = {START_NODE} ans = 0 while queue: node = queue.popleft() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for neighbor in graph[node]: if neighbor not in seen: seen.add(neighbor) queue.append(neighbor) return ans \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0elfx2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u627e\u5230\u5806\u7684\u524d k \u4e2a\u5143\u7d20 public int[] fn(int[] arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<>(CRITERIA); for (int num: arr) { heap.add(num); if (heap.size() > k) { heap.remove(); } } int[] ans = new int[k]; for (int i = 0; i < k; i++) { ans[i] = heap.remove(); } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eiyfc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 vector<int> fn(vector<int>& arr, int k) { priority_queue<int, CRITERIA> heap; for (int num: arr) { heap.push(num); if (heap.size() > k) { heap.pop(); } } vector<int> ans; while (heap.size() > 0) { ans.push_back(heap.top()); heap.pop(); } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eiyfc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 import heapq def fn(arr, k): heap = [] for num in arr: # \u505a\u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801\uff0c\u6839\u636e\u95ee\u9898\u7684\u6761\u4ef6\u6765\u63a8\u5165\u5806\u4e2d heapq.heappush(heap, (CRITERIA, num)) if len(heap) > k: heapq.heappop(heap) return [num for num in heap] \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eiyfc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e8c\u5206\u67e5\u627e public int fn(int[] arr, int target) { int left = 0; int right = arr.length - 1; while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == target) { // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 return mid; } if (arr[mid] > target) { right = mid - 1; } else { left = mid + 1; } } // left \u662f\u63d2\u5165\u70b9 return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eusji/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int binarySearch(vector<int>& arr, int target) { int left = 0; int right = int(arr.size()) - 1; while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == target) { // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 return mid; } if (arr[mid] > target) { right = mid - 1; } else { left = mid + 1; } } // left \u662f\u63d2\u5165\u70b9 return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eusji/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr, target): left = 0 right = len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 return if arr[mid] > target: right = mid - 1 else: left = mid + 1 # left \u662f\u63d2\u5165\u70b9 return left \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eusji/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e8c\u5206\u67e5\u627e: \u91cd\u590d\u5143\u7d20\uff0c\u6700\u5de6\u8fb9\u7684\u63d2\u5165\u70b9 public int fn(int[] arr, int target) { int left = 0; int right = arr.length; while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] >= target) { right = mid } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0etkbe/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int binarySearch(vector<int>& arr, int target) { int left = 0; int right = arr.size(); while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] >= target) { right = mid; } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0etkbe/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr, target): left = 0 right = len(arr) while left < right: mid = (left + right) // 2 if arr[mid] >= target: right = mid else: left = mid + 1 return left \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0etkbe/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e8c\u5206\u67e5\u627e: \u91cd\u590d\u5143\u7d20\uff0c\u6700\u53f3\u8fb9\u7684\u63d2\u5165\u70b9 public int fn(int[] arr, int target) { int left = 0; int right = arr.length; while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] > target) { right = mid; } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e83yg/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int binarySearch(vector<int>& arr, int target) { int left = 0; int right = arr.size(); while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] > target) { right = mid; } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e83yg/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr, target): left = 0 right = len(arr) while left < right: mid = (left + right) // 2 if arr[mid] > target: right = mid else: left = mid + 1 return left \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e83yg/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e8c\u5206\u67e5\u627e: \u8d2a\u5fc3\u95ee\u9898 \u5bfb\u627e\u6700\u5c0f\u503c int fn(vector<int>& arr) { int left = MINIMUM_POSSIBLE_ANSWER; int right = MAXIMUM_POSSIBLE_ANSWER; while (left <= right) { int mid = left + (right - left) / 2; if (check(mid)) { right = mid - 1; } else { left = mid + 1; } } return left; } bool check(int x) { // \u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u95ee\u9898 return BOOLEAN; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e3u1v/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5bfb\u627e\u6700\u5927\u503c int fn(vector<int>& arr) { int left = MINIMUM_POSSIBLE_ANSWER; int right = MAXIMUM_POSSIBLE_ANSWER; while (left <= right) { int mid = left + (right - left) / 2; if (check(mid)) { left = mid + 1; } else { right = mid - 1; } } return right; } bool check(int x) { // \u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u95ee\u9898 return BOOLEAN; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e3u1v/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr): def check(x): # \u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u95ee\u9898 return BOOLEAN left = MINIMUM_POSSIBLE_ANSWER right = MAXIMUM_POSSIBLE_ANSWER while left <= right: mid = (left + right) // 2 if check(mid): left = mid + 1 else: right = mid - 1 return right \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e3u1v/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u56de\u6eaf int backtrack(STATE curr, OTHER_ARGUMENTS...) { if (BASE_CASE) { // \u4fee\u6539\u7b54\u6848 return 0; } int ans = 0; for (ITERATE_OVER_INPUT) { // \u4fee\u6539\u5f53\u524d\u72b6\u6001 ans += backtrack(curr, OTHER_ARGUMENTS...) // \u64a4\u6d88\u5bf9\u5f53\u524d\u72b6\u6001\u7684\u4fee\u6539 } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eq7sj/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def backtrack(curr, OTHER_ARGUMENTS...): if (BASE_CASE): # \u4fee\u6539\u7b54\u6848 return ans = 0 for (ITERATE_OVER_INPUT): # \u4fee\u6539\u5f53\u524d\u72b6\u6001 ans += backtrack(curr, OTHER_ARGUMENTS...) # \u64a4\u6d88\u5bf9\u5f53\u524d\u72b6\u6001\u7684\u4fee\u6539 return ans \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eq7sj/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u52a8\u6001\u89c4\u5212: \u81ea\u9876\u5411\u4e0b\u6cd5 unordered_map<STATE, int> memo; int fn(vector<int>& arr) { return dp(STATE_FOR_WHOLE_INPUT, arr); } int dp(STATE, vector<int>& arr) { if (BASE_CASE) { return 0; } if (memo.find(STATE) != memo.end()) { return memo[STATE]; } int ans = RECURRENCE_RELATION(STATE); memo[STATE] = ans; return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e6wzt/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr): def dp(STATE): if BASE_CASE: return 0 if STATE in memo: return memo[STATE] ans = RECURRENCE_RELATION(STATE) memo[STATE] = ans return ans memo = {} return dp(STATE_FOR_WHOLE_INPUT) \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e6wzt/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u6784\u5efa\u524d\u7f00\u6811\uff08\u5b57\u5178\u6811\uff09 // \u6ce8\u610f:\u53ea\u6709\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5b58\u50a8\u6570\u636e\u65f6\u624d\u9700\u8981\u4f7f\u7528\u7c7b\u3002 // \u5426\u5219\uff0c\u60a8\u53ef\u4ee5\u53ea\u4f7f\u7528\u54c8\u5e0c\u6620\u5c04\u5b9e\u73b0\u4e00\u4e2a\u524d\u7f00\u6811\u3002 struct TrieNode { int data; unordered_map<char, TrieNode*> children; TrieNode() : data(0), children(unordered_map<char, TrieNode*>()) {} }; TrieNode* buildTrie(vector<string> words) { TrieNode* root = new TrieNode(); for (string word: words) { TrieNode* curr = root; for (char c: word) { if (curr->children.find(c) == curr->children.end()) { curr->children[c] = new TrieNode(); } curr = curr->children[c]; // \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684 curr \u5df2\u7ecf\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u5355\u8bcd // \u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6267\u884c\u66f4\u591a\u7684\u64cd\u4f5c\u6765\u7ed9 curr \u6dfb\u52a0\u5c5e\u6027 } } return root; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0ek2gr/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 # \u6ce8\u610f:\u53ea\u6709\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5b58\u50a8\u6570\u636e\u65f6\u624d\u9700\u8981\u4f7f\u7528\u7c7b\u3002 # \u5426\u5219\uff0c\u60a8\u53ef\u4ee5\u53ea\u4f7f\u7528\u54c8\u5e0c\u6620\u5c04\u5b9e\u73b0\u4e00\u4e2a\u524d\u7f00\u6811\u3002 class TrieNode: def __init__(self): # you can store data at nodes if you wish self.data = None self.children = {} def fn(words): root = TrieNode() for word in words: curr = root for c in word: if c not in curr.children: curr.children[c] = TrieNode() curr = curr.children[c] # \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684 curr \u5df2\u7ecf\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u5355\u8bcd # \u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6267\u884c\u66f4\u591a\u7684\u64cd\u4f5c\u6765\u7ed9 curr \u6dfb\u52a0\u5c5e\u6027 return root \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0ek2gr/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u7b97\u6cd5\u9762\u8bd5\u8be6\u89e3 \u4ecb\u7ecd \u5728\u9762\u8bd5\u5f00\u59cb\u65f6\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9762\u8bd5\u5b98\u4f1a\u7b80\u5355\u4ecb\u7ecd\u81ea\u5df1\u548c\u4ed6\u4eec\u5728\u516c\u53f8\u7684\u89d2\u8272\uff0c\u7136\u540e\u8ba9\u4f60\u505a\u81ea\u6211\u4ecb\u7ecd\u3002 \u51c6\u5907\u5e76\u6392\u7ec3\u4e00\u6bb5\u81ea\u6211\u4ecb\u7ecd\u3002\u81ea\u6211\u4ecb\u7ecd\u5e94\u8be5\u5728 30 \u79d2\u5185\u603b\u7ed3\u4f60\u7684\u6559\u80b2\u80cc\u666f\u3001\u5de5\u4f5c\u7ecf\u5386\u548c\u5174\u8da3\u7231\u597d\u3002 \u4fdd\u6301\u5fae\u7b11\uff0c\u4e14\u8ba9\u8bf4\u8bdd\u7684\u58f0\u97f3\u542c\u8d77\u6765\u81ea\u4fe1\u3002 \u5f53\u9762\u8bd5\u5b98\u8c08\u8bba\u4ed6\u4eec\u5728\u516c\u53f8\u7684\u5de5\u4f5c\u65f6\uff0c\u8bf7\u6ce8\u610f\u542c - \u8fd9\u6709\u52a9\u4e8e\u7a0d\u540e\u63d0\u51fa\u76f8\u5173\u95ee\u9898\u3002 \u5982\u679c\u9762\u8bd5\u5b98\u63d0\u5230\u4efb\u4f55\u4f60\u4e5f\u611f\u5174\u8da3\u7684\u4e8b\u60c5\uff0c\u65e0\u8bba\u662f\u4ed6\u4eec\u7684\u5de5\u4f5c\u8fd8\u662f\u7231\u597d\uff0c\u63d0\u51fa\u6765\u3002 \u95ee\u9898\u9648\u8ff0 \u5728\u81ea\u6211\u4ecb\u7ecd\u4e4b\u540e\uff0c\u9762\u8bd5\u5b98\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u95ee\u9898\u9648\u8ff0\u3002\u5982\u679c\u60a8\u5728\u5171\u4eab\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u7b54\u9898\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u5c06\u95ee\u9898\u63cf\u8ff0\u548c\u6d4b\u8bd5\u7528\u4f8b\u4e00\u8d77\u7c98\u8d34\u5230\u7f16\u8f91\u5668\u4e2d\uff0c\u7136\u540e\u5c06\u95ee\u9898\u8bfb\u7ed9\u60a8\u542c\u3002 \u786e\u4fdd\u4f60\u5b8c\u5168\u7406\u89e3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u9762\u8bd5\u5b98\u628a\u95ee\u9898\u8bfb\u5b8c\u4e4b\u540e\uff0c\u901a\u8fc7\u5c06\u5176\u89e3\u91ca\u56de\u7ed9\u4ed6\u4eec\u6765\u786e\u8ba4\u95ee\u9898\u5728\u95ee\u4ec0\u4e48\u3002 \u8be2\u95ee\u6709\u5173\u8f93\u5165\u7684\u95ee\u9898\u9610\u8ff0\uff0c\u4f8b\u5982: \u8f93\u5165\u662f\u53ea\u6709\u6574\u6570\uff0c\u8fd8\u662f\u53ef\u4ee5\u6709\u5176\u4ed6\u7c7b\u578b\uff1f \u6211\u80fd\u5047\u8bbe\u8f93\u5165\u662f\u6709\u5e8f\u7684\u5417\uff1f \u8f93\u5165\u662f\u4fdd\u8bc1\u6709\u5143\u7d20\u8fd8\u662f\u53ef\u4ee5\u4e3a\u7a7a\uff1f \u5982\u679c\u7ed9\u51fa\u4e86\u65e0\u6548\u8f93\u5165\uff0c\u6211\u8be5\u5982\u4f55\u5904\u7406\uff1f \u8be2\u95ee\u9884\u671f\u7684\u8f93\u5165\u5927\u5c0f\u3002\u6709\u65f6\u5019\uff0c\u9762\u8bd5\u5b98\u4f1a\u542b\u7cca\u5176\u8f9e\uff0c\u4f46\u5982\u679c\u4ed6\u4eec\u786e\u5b9e\u7ed9\u4e86\u4f60\u4e00\u4e2a\u8303\u56f4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u7ebf\u7d22\u3002\u4f8b\u5982\uff0c\u5982\u679c n \u975e\u5e38\u5c0f\uff0c\u5219\u53ef\u80fd\u662f\u56de\u6eaf\u3002\u5982\u679c n \u5728 100 - 1000 \u5de6\u53f3\uff0cO(n^2) \u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u6700\u4f18\u7684\u3002 \u5982\u679c n \u975e\u5e38\u5927, \u90a3\u4e48\u4f60\u53ef\u4ee5\u9700\u8981\u6bd4 O(n) \u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u63d0\u51fa\u660e\u786e\u7684\u95ee\u9898\u4e0d\u4ec5\u80fd\u5e2e\u52a9\u4f60\u66f4\u597d\u5730\u7406\u89e3\u95ee\u9898\uff0c\u8fd8\u80fd\u8868\u73b0\u51fa\u5bf9\u7ec6\u8282\u7684\u5173\u6ce8\uff0c\u4ee5\u53ca\u5bf9\u8fb9\u7f18\u60c5\u51b5\u7684\u8003\u8651\u3002 \u5934\u8111\u98ce\u66b4 DS&A \u5c1d\u8bd5\u627e\u51fa\u9002\u7528\u7684\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u3002\u5206\u89e3\u95ee\u9898\u5e76\u5c1d\u8bd5\u627e\u5230\u4f60\u4f1a\u7684\u5e38\u7528\u89e3\u6cd5\u3002\u5f04\u6e05\u695a\u95ee\u9898\u9700\u8981\u4f60\u505a\u4ec0\u4e48\uff0c\u5e76\u8003\u8651\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u53ef\u4ee5\u4ee5\u8f83\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5b8c\u6210\u3002 \u628a\u4f60\u7684\u60f3\u6cd5\u90fd\u8bf4\u51fa\u6765\u3002\u8fd9\u4f1a\u8ba9\u9762\u8bd5\u5b98\u77e5\u9053\u4f60\u5584\u4e8e\u6743\u8861\u5229\u5f0a\u3002\u5982\u679c\u95ee\u9898\u6d89\u53ca\u5230\u67e5\u770b\u5b50\u6570\u7ec4\uff0c\u90a3\u4e48\u5e94\u8be5\u8003\u8651\u6ed1\u52a8\u7a97\u53e3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7a97\u53e3\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b50\u6570\u7ec4\u3002\u5373\u4f7f\u4f60\u9519\u4e86\uff0c\u9762\u8bd5\u5b98\u4ecd\u7136\u4f1a\u6b23\u8d4f\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002 \u901a\u8fc7\u628a\u60f3\u6cd5\u90fd\u8bf4\u51fa\u6765\uff0c\u9762\u8bd5\u5b98\u4e5f\u53ef\u4ee5\u501f\u6b64\u7ed9\u4f60\u63d0\u793a\uff0c\u5e76\u4e3a\u4f60\u6307\u51fa\u6b63\u786e\u7684\u65b9\u5411\u3002 \u4e00\u65e6\u51b3\u5b9a\u4e86\u8981\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784/\u7b97\u6cd5\uff0c\u73b0\u5728\u5c31\u9700\u8981\u6784\u9020\u5b9e\u9645\u7684\u7b97\u6cd5\u3002\u5728\u7f16\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u7b97\u6cd5\u7684\u5927\u81f4\u6b65\u9aa4\uff0c\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u5e76\u786e\u4fdd\u4ed6\u4eec\u7406\u89e3\u5e76\u540c\u610f\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6cd5\u3002\u901a\u5e38\uff0c\u5982\u679c\u4f60\u8d70\u9519\u4e86\u8def\uff0c\u4ed6\u4eec\u4f1a\u5de7\u5999\u5730\u6697\u793a\u4f60\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\u4f60\u80fd\u63a5\u53d7\u9762\u8bd5\u5b98\u6240\u8bf4\u7684\u8bdd\u662f \u975e\u5e38 \u91cd\u8981\u7684\u3002\u8bf7\u8bb0\u4f4f\uff1a\u4ed6\u4eec\u77e5\u9053\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u4ed6\u4eec\u7ed9\u4f60\u63d0\u793a\uff0c\u90a3\u662f\u56e0\u4e3a\u4ed6\u4eec\u5e0c\u671b\u4f60\u6210\u529f\u3002\u4e0d\u8981\u56fa\u6267\uff0c\u51c6\u5907\u597d\u63a2\u7d22\u4ed6\u4eec\u7ed9\u4f60\u7684\u60f3\u6cd5\u3002 \u5b9e\u64cd \u4e00\u65e6\u4f60\u60f3\u51fa\u4e86\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5e76\u8ba9\u9762\u8bd5\u5b98\u540c\u610f\u4e86\uff0c\u5c31\u8be5\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 \u5982\u679c\u4f60\u6253\u7b97\u4f7f\u7528\u4e00\u4e2a\u5e93\u6216\u6a21\u5757\uff0c\u4f8b\u5982 Python \u7684\u96c6\u5408\uff0c\u5728\u5f00\u59cb\u4e4b\u524d\u786e\u4fdd\u9762\u8bd5\u5b98\u53ef\u4ee5\u63a5\u53d7\u3002 \u5f53\u4f60\u5199\u4ee3\u7801\u65f6\uff0c\u89e3\u91ca\u4f60\u7684\u51b3\u7b56\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u89e3\u51b3\u4e00\u4e2a\u56fe\u5f62\u95ee\u9898\uff0c\u5f53\u4f60\u58f0\u660e\u4e00\u4e2a\u96c6\u5408 seen\uff0c\u89e3\u91ca\u5b83\u662f\u4e3a\u4e86\u9632\u6b62\u8bbf\u95ee\u540c\u4e00\u4e2a\u8282\u70b9\u8d85\u8fc7\u4e00\u6b21\uff0c\u4ece\u800c\u4e5f\u9632\u6b62\u4e86\u5faa\u73af\u3002 \u7f16\u5199\u5e72\u51c0\u7684\u4ee3\u7801\u3002\u6bcf\u4e00\u79cd\u4e3b\u6d41\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u4e00\u4e2a\u5173\u4e8e\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u7f16\u5199\u7684\u7ea6\u5b9a\u3002\u786e\u4fdd\u4f60\u77e5\u9053\u4f60\u6253\u7b97\u4f7f\u7528\u7684\u8bed\u8a00\u7684\u57fa\u7840\u77e5\u8bc6\u3002Google \u63d0\u4f9b\u4e86\u9002\u7528\u4e8e\u6240\u6709\u4e3b\u6d41\u8bed\u8a00\u7684 google code style \u603b\u7ed3 \u3002\u6700\u91cd\u8981\u7684\u90e8\u5206\u662f\u5927\u5c0f\u5199\u7ea6\u5b9a\u3001\u7f29\u8fdb\u3001\u7a7a\u683c\u548c\u5168\u5c40\u53d8\u91cf\u3002 \u907f\u514d\u91cd\u590d\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728\u7f51\u683c\u4e0a\u8fdb\u884c DFS \u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u53cd\u590d\u4f7f\u7528\u65b9\u5411\u6570\u7ec4 [(0, 1), (1, 0), (0, -1), (-1, 0)] \uff0c\u800c\u4e0d\u662f\u4e3a\u6bcf\u4e2a\u65b9\u5411\u7f16\u5199\u76f8\u540c\u7684\u903b\u8f91 4 \u6b21\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u591a\u4e2a\u5730\u65b9\u7f16\u5199\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u8003\u8651\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6216\u4f7f\u7528\u5faa\u73af\u6765\u7b80\u5316\u5b83\u3002 \u4e0d\u8981\u5bb3\u6015\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u3002\u5b83\u4eec\u4f7f\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u6a21\u5757\u5316\uff0c\u8fd9\u5728\u5b9e\u9645\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u3002\u4e4b\u540e\u7684\u4ee3\u7801\u8bf4\u4e0d\u5b9a\u8fd8\u4f1a\u7528\u4e0a\u8f85\u52a9\u51fd\u6570\u3002 \u5982\u679c\u4f60\u9047\u5230\u56f0\u96be\u6216\u610f\u8bc6\u5230\u4f60\u6700\u521d\u7684\u8ba1\u5212\u53ef\u80fd\u884c\u4e0d\u901a\uff0c\u4e0d\u8981\u614c\u3002\u4e0e\u9762\u8bd5\u5b98\u4ea4\u6d41\u4f60\u7684\u7591\u8651\u3002\u5982\u679c\u4f60\u9ed8\u9ed8\u5730\u6323\u624e\uff0c\u5f88\u53ef\u80fd\u53c8\u4f1a\u94bb\u725b\u89d2\u5c16\u3002 \u4e00\u79cd\u7b56\u7565\u662f\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u66b4\u529b\u89e3\u51b3\u65b9\u6848\uff0c\u540c\u65f6\u627f\u8ba4 \u8fd9\u662f\u4e00\u4e2a\u6b21\u4f18\u89e3\u51b3\u65b9\u6848\u3002\u5b8c\u6210\u540e\uff0c\u5206\u6790\u7b97\u6cd5\u7684\u6bcf\u4e2a\u90e8\u5206\uff0c\u627e\u51fa\u54ea\u4e9b\u6b65\u9aa4 \u201c\u6162\u201d\uff0c\u5e76\u5c1d\u8bd5\u601d\u8003\u5982\u4f55\u52a0\u5feb\u901f\u5ea6\u3002\u8ba9\u9762\u8bd5\u5b98\u53c2\u4e0e\u8fdb\u6765\uff0c\u8ba9\u4ed6\u4eec\u53c2\u4e0e\u8ba8\u8bba \u2014\u2014 \u4ed6\u4eec\u901a\u5e38\u613f\u610f\u63d0\u4f9b\u5e2e\u52a9\u3002 \u6d4b\u8bd5 & debug \u4e00\u65e6\u4f60\u5199\u5b8c\u4ee3\u7801\uff0c\u4f60\u7684\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u60f3\u8981\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801\u3002\u6839\u636e\u516c\u53f8\u7684\u4e0d\u540c\uff0c\u4f1a\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u73af\u5883: \u5185\u7f6e\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u9700\u8981\u8fd0\u884c \u8fd9\u4e9b\u5e73\u53f0\u7c7b\u4f3c\u4e8e LeetCode\u3002\u5c06\u4f1a\u6709\u5404\u79cd\u5404\u6837\u7684\u6d4b\u8bd5\u7528\u4f8b \u2014\u2014 \u5c0f\u8f93\u5165\uff0c\u5927\u8f93\u5165\uff0c\u6d4b\u8bd5\u8fb9\u7f18\u7528\u4f8b\u7684\u8f93\u5165\u3002 \u8fd9\u79cd\u73af\u5883\u7ed9\u60a8\u7684\u4ee3\u7801\u5e26\u6765\u4e86\u6700\u5927\u7684\u538b\u529b\uff0c\u56e0\u4e3a\u4f1a\u66b4\u9732\u51fa\u4e0d\u5b8c\u7f8e\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4f46\u662f\uff0c\u5b83\u4e5f\u4e3a\u521b\u5efa\u60a8\u81ea\u5df1\u7684\u6d4b\u8bd5\u5e26\u6765\u4e86\u6700\u5c0f\u7684\u538b\u529b\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u5df2\u7ecf\u5185\u7f6e\u5728\u4e86\u5185\u90e8\u3002 \u81ea\u5df1\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u9700\u8981\u8fd0\u884c \u8fd9\u4e9b\u5e73\u53f0\u901a\u5e38\u662f\u652f\u6301\u8fd0\u884c\u4ee3\u7801\u7684\u5171\u4eab\u6587\u672c\u7f16\u8f91\u5668\u3002\u9762\u8bd5\u5b98\u4f1a\u5e0c\u671b\u4f60\u7f16\u5199\u81ea\u5df1\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u8981\u771f\u6b63\u6d4b\u8bd5\u4ee3\u7801\uff0c\u4f60\u5e94\u8be5\u5728\u4ee3\u7801\u7684\u6700\u5916\u5c42\u8303\u56f4\u7f16\u5199\uff0c\u5373\u4ee3\u7801\u5c06\u9996\u5148\u8fd0\u884c\u7684\u5730\u65b9\u3002\u5047\u8bbe\u4f60\u5728\u51fd\u6570\u4e2d\u89e3\u51b3\u4e86\u95ee\u9898 (\u5c31\u50cf\u5728 LeetCode \u4e0a)\uff0c\u4f60\u53ef\u4ee5\u7528\u4f60\u7f16\u5199\u7684\u6d4b\u8bd5\u7528\u4f8b\u8c03\u7528\u4f60\u7684\u51fd\u6570\uff0c\u5e76\u5c06\u7ed3\u679c\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5728\u7f16\u5199\u81ea\u5df1\u7684\u6d4b\u8bd5\u65f6\uff0c\u8bf7\u786e\u4fdd\u5c1d\u8bd5\u5404\u79cd\u6d4b\u8bd5\u3002\u5305\u62ec\u8fb9\u7f18\u60c5\u51b5\u3001\u76f4\u89c9\u8f93\u5165\u548c\u53ef\u80fd\u65e0\u6548\u7684\u8f93\u5165 (\u5982\u679c\u9762\u8bd5\u5b98\u60f3\u8ba9\u4f60\u5904\u7406\u8fd9\u79cd\u60c5\u51b5)\u3002 \u81ea\u5df1\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u4e0d\u9700\u8981\u8fd0\u884c \u8fd9\u4e9b\u5e73\u53f0\u53ea\u662f\u5171\u4eab\u6587\u672c\u7f16\u8f91\u5668\uff0c\u4e0d\u652f\u6301\u8fd0\u884c\u4ee3\u7801\u3002\u9762\u8bd5\u5b98\u4f1a\u5e0c\u671b\u4f60\u7f16\u5199\u81ea\u5df1\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u4e14\u624b\u52a8\u6a21\u62df\u8fd0\u884c\u3002 \u4e3a\u4e86 \u201c\u6d4b\u8bd5\u201d \u4ee3\u7801\uff0c\u4f60\u5fc5\u987b\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u624b\u52a8\u68c0\u67e5\u7b97\u6cd5\u3002\u8bd5\u7740\u538b\u7f29\u4e00\u4e9b\u7410\u788e\u7684\u90e8\u5206 \u2014\u2014 \u4f8b\u5982\uff0c\u4f60\u6b63\u5728\u521b\u5efa\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u4e0d\u8981 \u5b57\u9762\u4e0a \u904d\u5386\u6bcf\u4e2a\u5143\u7d20\u7684 for \u5faa\u73af\u3002\u53ef\u4ee5\u8fd9\u6837\u8bf4:\u201c\u5728\u8fd9\u4e2a for \u5faa\u73af\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u6709\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u4ed6\u662f\u8fd9\u6837\u7684\u2026\u2026\u201d\u3002 \u5728\u904d\u5386\u4ee3\u7801\u65f6\uff0c\u5c06\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u5199\u5165 (\u5728\u7f16\u8f91\u5668\u4e2d\uff0c\u51fd\u6570\u5916\u90e8\u7684\u67d0\u5904)\uff0c\u5e76\u4e0d\u65ad\u66f4\u65b0\u5b83\u4eec\u3002 \u4e0d\u7ba1\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u7684\u4ee3\u7801\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u4e0d\u8981\u614c!\u5982\u679c\u73af\u5883\u652f\u6301\u8fd0\u884c\u4ee3\u7801\uff0c\u8bf7\u5728\u76f8\u5173\u4f4d\u7f6e\u653e\u7f6e\u6253\u5370\u8bed\u53e5\u4ee5\u5c1d\u8bd5\u8bc6\u522b\u95ee\u9898\u3002\u7528\u4e00\u4e2a\u5c0f\u7684\u6d4b\u8bd5\u7528\u4f8b\u624b\u52a8\u904d\u5386(\u5c31\u50cf\u4f60\u6ca1\u6709\u8fd0\u884c\u73af\u5883\u65f6\u6240\u505a\u7684\u90a3\u6837)\u3002\u5f53\u4f60\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u8ba8\u8bba\u53d8\u91cf\u7684\u671f\u671b\u503c\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u5b9e\u9645\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u518d\u8bf4\u4e00\u904d\uff0c\u4f60\u8bf4\u8bdd\u8d8a\u591a\uff0c\u9762\u8bd5\u5b98\u5c31\u8d8a\u5bb9\u6613\u5e2e\u52a9\u4f60\u3002 \u89e3\u91ca\u4e0e\u8ddf\u8fdb \u5728\u7f16\u5199\u7b97\u6cd5\u5e76\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u540e\uff0c\u51c6\u5907\u56de\u7b54\u5173\u4e8e\u7b97\u6cd5\u7684\u95ee\u9898\u3002\u4f60\u5e94\u8be5\u51c6\u5907\u597d\u56de\u7b54\u7684\u95ee\u9898\u5305\u62ec: \u7b97\u6cd5\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f \u4f60\u5e94\u8be5\u4ece\u6700\u574f\u7684\u60c5\u51b5\u6765\u8003\u8651\u3002\u4f46\u662f\uff0c\u5982\u679c\u6700\u574f\u7684\u60c5\u51b5\u5f88\u5c11\uff0c\u5e76\u4e14\u5e73\u5747\u60c5\u51b5\u7684\u8fd0\u884c\u65f6\u660e\u663e\u66f4\u5feb\uff0c\u90a3\u4e48\u4f60\u8fd8\u5e94\u8be5\u63d0\u5230\u8fd9\u4e00\u70b9\u3002 \u4f60\u4e3a\u4ec0\u4e48\u9009\u62e9\u2026\u2026\uff1f \u8fd9\u53ef\u4ee5\u662f\u4f60\u5bf9\u6570\u636e\u7ed3\u6784\u7684\u9009\u62e9\uff0c\u7b97\u6cd5\u7684\u9009\u62e9\uff0c\u5faa\u73af\u914d\u7f6e\u7684\u9009\u62e9\u3002\u51c6\u5907\u597d\u89e3\u91ca\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002 \u4f60\u8ba4\u4e3a\u7b97\u6cd5\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u662f\u5426\u53ef\u4ee5\u6539\u8fdb\uff1f \u5982\u679c\u95ee\u9898\u9700\u8981\u904d\u5386\u8f93\u5165\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 (\u5047\u8bbe\u8f93\u5165\u6ca1\u6709\u6392\u5e8f\uff0c\u9700\u8981\u627e\u5230\u6700\u5927\u7684\u5143\u7d20)\uff0c\u90a3\u4e48\u4f60\u5f88\u53ef\u80fd\u65e0\u6cd5\u6bd4 O(n) \u66f4\u5feb\u3002\u5426\u5219\u4f60\u5f88\u53ef\u80fd\u65e0\u6cd5\u6bd4 O(logn) \u66f4\u5feb\u3002 \u5982\u679c\u9762\u8bd5\u5b98\u95ee\u8fd9\u4e2a\u95ee\u9898\uff0c\u7b54\u6848 \u901a\u5e38 \u662f\u80af\u5b9a\u7684\u3002\u5728\u65ad\u8a00\u4f60\u7684\u7b97\u6cd5\u662f\u6700\u4f18\u7684\u65f6\u5019\u8981\u5c0f\u5fc3 \u2014\u2014 \u4e0d\u8981\u8f7b\u6613\u4f7f\u7528\u7edd\u5bf9\u7684\u5f62\u5bb9\u3002 \u5982\u679c\u9762\u8bd5\u8fd8\u6709\u5269\u4f59\u65f6\u95f4\uff0c\u4f60\u53ef\u80fd\u4f1a\u88ab\u95ee\u5230\u4e00\u4e2a\u5168\u65b0\u7684\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ece\u6b65\u9aa4 2\uff08\u95ee\u9898\u9648\u8ff0\uff09\u91cd\u65b0\u5f00\u59cb\u3002\u4f46\u662f\uff0c\u4f60\u4e5f\u53ef\u80fd\u4f1a\u88ab\u8981\u6c42\u5bf9\u4f60\u5df2\u7ecf\u89e3\u51b3\u7684\u95ee\u9898\u8fdb\u884c\u8ddf\u8fdb\u3002\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u5f15\u5165\u65b0\u7684\u7ea6\u675f\uff0c\u8981\u6c42\u6539\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6216\u4efb\u4f55\u5176\u4ed6\u6570\u91cf\u7684\u4e1c\u897f\u3002 \u8fd9\u90e8\u5206\u662f\u4e3a\u4ec0\u4e48\u771f\u6b63\u7406\u89e3\u89e3\u51b3\u65b9\u6848\u800c\u4e0d\u662f\u4ec5\u4ec5\u8bb0\u4f4f\u5b83\u4eec\u5f88\u91cd\u8981\u7684\u539f\u56e0\u3002 \u7ed3\u5c3e \u9762\u8bd5\u5b98\u901a\u5e38\u4f1a\u5728\u9762\u8bd5\u7ed3\u675f\u65f6\u7559\u51fa\u51e0\u5206\u949f\u7684\u65f6\u95f4\u8ba9\u4f60\u95ee\u4e00\u4e9b\u5173\u4e8e\u4ed6\u4eec\u6216\u516c\u53f8\u7684\u95ee\u9898\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u5f88\u5c11\u80fd\u6539\u5584\u9762\u8bd5\u7684\u7ed3\u679c\uff0c\u4f46\u4f60\u80af\u5b9a\u80fd\u8ba9\u5b83\u53d8\u5f97\u66f4\u7cdf\u3002 \u9762\u8bd5\u662f\u53cc\u5411\u7684\u3002\u4f60\u5e94\u8be5\u5229\u7528\u8fd9\u6bb5\u65f6\u95f4\u6765\u4e86\u89e3\u8fd9\u5bb6\u516c\u53f8\uff0c\u770b\u770b\u4f60\u662f\u5426\u613f\u610f\u5728\u90a3\u91cc\u5de5\u4f5c\u3002\u4f60\u5e94\u8be5\u5728\u9762\u8bd5\u524d\u51c6\u5907\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982: \u5728\u516c\u53f8\u7684\u4e00\u5929\u4e2d\u4f1a\u505a\u4e9b\u4ec0\u4e48\uff1f \u4f60\u4e3a\u4ec0\u4e48\u51b3\u5b9a\u52a0\u5165\u8fd9\u5bb6\u516c\u53f8\u800c\u4e0d\u662f\u53e6\u4e00\u5bb6\u516c\u53f8\uff1f \u5173\u4e8e\u8fd9\u4efd\u5de5\u4f5c\uff0c\u4f60\u6700\u559c\u6b22\u548c\u6700\u4e0d\u559c\u6b22\u7684\u662f\u4ec0\u4e48\uff1f \u6211\u53ef\u4ee5\u4ece\u4e8b\u4ec0\u4e48\u6837\u7684\u5de5\u4f5c\uff1f \u6240\u6709\u7684\u5927\u516c\u53f8\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u79d1\u6280\u535a\u5ba2\u3002\u5c55\u793a\u4f60\u5bf9\u8fd9\u5bb6\u516c\u53f8\u611f\u5174\u8da3\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u662f\u9605\u8bfb\u4e00\u4e9b\u535a\u5ba2\u6587\u7ae0\uff0c\u5e76\u7f16\u5236\u4e00\u4e2a\u5173\u4e8e\u516c\u53f8\u4e3a\u4ec0\u4e48\u505a\u51fa\u8fd9\u4e9b\u51b3\u5b9a\u7684\u95ee\u9898\u6e05\u5355\u3002 \u4fdd\u6301\u5174\u8da3\uff0c\u4fdd\u6301\u5fae\u7b11\uff0c\u503e\u542c\u9762\u8bd5\u5b98\u7684\u56de\u7b54\uff0c\u5e76\u63d0\u51fa\u540e\u7eed\u95ee\u9898\uff0c\u4ee5\u8868\u660e\u4f60\u7406\u89e3\u4ed6\u4eec\u7684\u7b54\u6848\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u9ad8\u8d28\u91cf\u7684\u95ee\u9898\uff0c\u6216\u8005\u8868\u73b0\u5f97\u65e0\u804a\u6216\u4e0d\u611f\u5174\u8da3\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u9762\u8bd5\u5b98\u4e00\u4e2a\u4e0d\u597d\u7684\u4fe1\u53f7\u3002\u5982\u679c\u9762\u8bd5\u5b98\u6700\u540e\u4e0d\u559c\u6b22\u4f60\uff0c\u4f60\u5728\u6280\u672f\u65b9\u9762\u505a\u5f97\u518d\u597d\u4e5f\u6ca1\u7528\u3002 \u9762\u8bd5\u5907\u8003\u603b\u89c8 \u4ee5\u4e0b\u662f\u300c\u9762\u8bd5\u7684\u9636\u6bb5\u300d\u4e00\u6587\u7684\u6458\u8981\u3002\u5982\u679c\u60a8\u8fdb\u884c\u8fdc\u7a0b\u9762\u8bd5\uff0c\u60a8\u53ef\u4ee5\u6253\u5370\u6b64\u6d53\u7f29\u7248\u5e76\u5728\u9762\u8bd5\u671f\u95f4\u5c06\u5176\u653e\u5728\u60a8\u9762\u524d\u3002 \u7b2c\u4e00\u9636\u6bb5\uff1a\u4ecb\u7ecd 30-60 \u79d2\u4ecb\u7ecd\u60a8\u7684\u6559\u80b2\u3001\u5de5\u4f5c\u7ecf\u9a8c\u548c\u5174\u8da3\u3002 \u81ea\u4fe1\uff0c\u4fdd\u6301\u5fae\u7b11\u3002 \u5f53\u9762\u8bd5\u5b98\u8c08\u8bba\u4ed6\u4eec\u81ea\u5df1\u65f6\u8981\u6ce8\u610f\uff0c\u7a0d\u540e\u5c06\u4ed6\u4eec\u7684\u5de5\u4f5c\u7eb3\u5165\u60a8\u7684\u95ee\u9898\u3002 \u7b2c\u4e8c\u9636\u6bb5\uff1a\u95ee\u9898\u9648\u8ff0 \u5728\u9762\u8bd5\u5b98\u5c06\u95ee\u9898\u8bfb\u7ed9\u4f60\u542c\u540e\uff0c\u5c06\u95ee\u9898\u590d\u8ff0\u7ed9\u4ed6\u4eec\u3002 \u8be2\u95ee\u6709\u5173\u8f93\u5165\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u4f8b\u5982\u9884\u671f\u7684\u8f93\u5165\u5927\u5c0f\u3001\u8fb9\u7f18\u60c5\u51b5\u548c\u65e0\u6548\u8f93\u5165\u3002 \u7b2c\u4e09\u9636\u6bb5\uff1a\u5934\u8111\u98ce\u66b4 DS&A \u628a\u4f60\u6240\u6709\u7684\u60f3\u6cd5\u90fd\u8bf4\u51fa\u6765\u3002 \u5206\u89e3\u95ee\u9898\uff1a\u5f04\u6e05\u695a\u4f60\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u5e76\u601d\u8003\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u53ef\u4ee5\u4ee5\u826f\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u5b83\u3002 \u63a5\u53d7\u9762\u8bd5\u5b98\u7684\u4efb\u4f55\u8bc4\u8bba\u6216\u53cd\u9988\uff0c\u4ed6\u4eec\u53ef\u80fd\u8bd5\u56fe\u6697\u793a\u60a8\u627e\u5230\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4e00\u65e6\u4f60\u6709\u4e86\u60f3\u6cd5\uff0c\u5728\u7f16\u7801\u4e4b\u524d\uff0c\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u4f60\u7684\u60f3\u6cd5\uff0c\u5e76\u786e\u4fdd\u4ed6\u4eec\u7406\u89e3\u5e76\u540c\u610f\u8fd9\u662f\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6cd5\u3002 \u7b2c\u56db\u9636\u6bb5\uff1a\u5b9e\u64cd \u5728\u4f60\u5b9e\u9645\u7f16\u7801\u65f6\u89e3\u91ca\u4f60\u7684\u51b3\u7b56\u3002\u5f53\u4f60\u58f0\u660e\u96c6\u5408\u4e4b\u7c7b\u7684\u4e1c\u897f\u65f6\uff0c\u89e3\u91ca\u4e00\u4e0b\u76ee\u7684\u662f\u4ec0\u4e48\u3002 \u7f16\u5199\u7b26\u5408\u89c4\u8303\u7f16\u7a0b\u8bed\u8a00\u7ea6\u5b9a\u7684\u4ee3\u7801\u3002 \u907f\u514d\u7f16\u5199\u91cd\u590d\u4ee3\u7801 - \u5982\u679c\u4f60\u591a\u6b21\u7f16\u5199\u7c7b\u4f3c\u4ee3\u7801\uff0c\u8bf7\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u6216 for \u5faa\u73af\u3002 \u5982\u679c\u4f60\u88ab\u5361\u4f4f\u4e86\uff0c\u4e0d\u8981\u60ca\u614c - \u4e0e\u4f60\u7684\u9762\u8bd5\u5b98\u4ea4\u6d41\u4f60\u7684\u7591\u8651\u3002 \u4e0d\u8981\u5bb3\u6015\u66b4\u529b\u89e3\u51b3\u65b9\u6848\uff08\u540c\u65f6\u627f\u8ba4\u5b83\u662f\u66b4\u529b\u89e3\u6cd5\uff09\uff0c\u7136\u540e\u901a\u8fc7\u4f18\u5316 \u201c\u6162\u201d \u7684\u90e8\u5206\u6765\u6539\u8fdb\u5b83\u3002 \u7ee7\u7eed\u628a\u4f60\u7684\u60f3\u6cd5\u8bf4\u51fa\u6765\u5e76\u4e0e\u9762\u8bd5\u5b98\u4ea4\u8c08\u3002\u8fd9\u8ba9\u4ed6\u4eec\u66f4\u5bb9\u6613\u7ed9\u4f60\u63d0\u793a\u3002 \u7b2c\u4e94\u9636\u6bb5\uff1a\u6d4b\u8bd5 & debug \u904d\u5386\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u901a\u8fc7\u5728\u6587\u4ef6\u5e95\u90e8\u5199\u5165\u6765\u8ddf\u8e2a\u53d8\u91cf\uff0c\u5e76\u4e0d\u65ad\u66f4\u65b0\u5b83\u4eec\u3002\u538b\u7f29\u7410\u788e\u7684\u90e8\u5206\uff0c\u4f8b\u5982\u521b\u5efa\u524d\u7f00\u548c\u4ee5\u8282\u7701\u65f6\u95f4\u3002 \u5982\u679c\u6709\u9519\u8bef\u5e76\u4e14\u73af\u5883\u652f\u6301\u8fd0\u884c\u4ee3\u7801\uff0c\u5c06\u6253\u5370\u8bed\u53e5\u653e\u5165\u4f60\u7684\u7b97\u6cd5\u5e76\u904d\u5386\u4e00\u4e2a\u5c0f\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bd4\u8f83\u53d8\u91cf\u7684\u9884\u671f\u503c\u548c\u5b9e\u9645\u503c\u3002 \u5982\u679c\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u8bf4\u51fa\u95ee\u9898\u5e76\u7ee7\u7eed\u4e0e\u9762\u8bd5\u5b98\u4ea4\u8c08\u3002 \u7b2c\u516d\u9636\u6bb5\uff1a\u89e3\u91ca\u548c\u8ddf\u8fdb \u60a8\u5e94\u8be5\u51c6\u5907\u56de\u7b54\u7684\u95ee\u9898\uff1a \u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\u3002 \u4f60\u4e3a\u4ec0\u4e48\u9009\u62e9\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3001\u7b97\u6cd5\u6216\u903b\u8f91\uff1f \u60a8\u8ba4\u4e3a\u8be5\u7b97\u6cd5\u53ef\u4ee5\u5728\u590d\u6742\u6027\u65b9\u9762\u8fdb\u884c\u6539\u8fdb\u5417\uff1f\u5982\u679c\u4ed6\u4eec\u95ee\u4f60\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u7b54\u6848\u901a\u5e38\u662f\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u7684\u7b97\u6cd5\u6bd4 O(n) \u6162\u3002 \u7b2c\u4e03\u9636\u6bb5\uff1a\u7ed3\u5c3e \u51c6\u5907\u597d\u6709\u5173\u516c\u53f8\u7684\u95ee\u9898\u3002 \u5bf9\u9762\u8bd5\u5b98\u7684\u56de\u7b54\u8868\u73b0\u51fa\u611f\u5174\u8da3\u3001\u5fae\u7b11\u5e76\u63d0\u51fa\u540e\u7eed\u95ee\u9898\u3002 \u6392\u5e8f\u7b97\u6cd5 \u5728\u4e0d\u540c\u9886\u57df\uff0c\u6392\u5e8f\u7b97\u6cd5\u7684\u5b9e\u73b0\u5404\u6709\u5343\u79cb\u3002\u603b\u4f53\u6765\u770b\uff0c\u6392\u5e8f\u7b97\u6cd5\u5927\u81f4\u53ef\u5206\u4e3a\u5341\u7c7b\uff1a \u9009\u6ce1\u63d2\uff1a\u9009\u62e9\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f \u5feb\u5f52\u5e0c\u5806\uff1a\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u3001\u5806\u6392\u5e8f \u6876\u8ba1\u57fa\uff1a\u6876\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f \u867d\u7136\u5de5\u4f5c\u4e2d\u5f88\u5c11\u9700\u8981\u6211\u4eec\u624b\u6253\u6392\u5e8f\u7b97\u6cd5\uff0c\u53ea\u9700\u8981\u8c03\u7528\u57fa\u7840\u5e93\u4e2d\u7684 Arrays.sort() \u4fbf\u53ef\u89e3\u51b3\u6392\u5e8f\u95ee\u9898\u3002\u4f46\u4f60\u53ef\u66fe\u9759\u4e0b\u5fc3\u6765\uff0c\u9605\u8bfb Arrays.sort() \u80cc\u540e\u7684\u539f\u7406\uff0c\u5b83\u662f\u91c7\u7528\u4e86\u54ea\u79cd\u6392\u5e8f\u7b97\u6cd5\u5462\uff1f \u4e8b\u5b9e\u4e0a\uff0cArrays.sort() \u51fd\u6570\u5e76\u6ca1\u6709\u91c7\u7528\u5355\u4e00\u7684\u6392\u5e8f\u7b97\u6cd5\u3002Java \u4e2d\u7684 Arrays.sort() \u51fd\u6570\u662f\u7531 Java \u8bed\u8a00\u7684\u51e0\u4f4d\u521b\u59cb\u4eba\u7f16\u5199\u7684\uff0c\u8fd9\u4e2a\u5c0f\u5c0f\u7684\u51fd\u6570\u903b\u8f91\u4e25\u5bc6\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u88ab\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4e3a\u4e86\u6700\u5927\u5316\u6027\u80fd\u505a\u4e86\u4e00\u5c42\u53c8\u4e00\u5c42\u7684\u4f18\u5316\uff0c\u6839\u636e\u6570\u636e\u7684\u6982\u51b5\u91c7\u7528\u53cc\u8f74\u5feb\u6392\u3001\u5f52\u5e76\u6216\u4e8c\u5206\u63d2\u5165\u7b97\u6cd5\u5b8c\u6210\u6392\u5e8f\uff0c\u582a\u79f0\u5de5\u4e1a\u7ea7\u6392\u5e8f\u7b97\u6cd5\u7684\u5178\u8303\uff0c\u7406\u6e05\u4e4b\u540e\u5176\u4e50\u65e0\u7a77\u3002 \u5e76\u4e14\uff0c\u6392\u5e8f\u7b97\u6cd5\u6df1\u53d7\u9762\u8bd5\u5b98\u7684\u559c\u7231\uff0c\u5728\u4eba\u624d\u62db\u8058\u65f6\uff0c\u603b\u662f\u5c06\u6392\u5e8f\u7b97\u6cd5\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u7684\u57fa\u672c\u529f\u6765\u8003\u5bdf\u3002\u5bf9\u6392\u5e8f\u7b97\u6cd5\u7684\u7406\u89e3\u6df1\u5ea6\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86\u7a0b\u5e8f\u5458\u903b\u8f91\u601d\u7ef4\u7684\u4e25\u8c28\u5ea6\u3002\u653b\u514b\u6392\u5e8f\u7b97\u6cd5\u7684\u96be\u5173\u662f\u6bcf\u4f4d\u7a0b\u5e8f\u5927\u725b\u7684\u5fc5\u7ecf\u4e4b\u8def\u3002 \u5982\u725b\u987f\u6240\u8a00\uff0c\u6b63\u662f\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u6211\u4eec\u624d\u80fd\u671b\u5f97\u66f4\u8fdc\u3002\u672c\u7cfb\u5217\u6587\u7ae0\u6211\u4eec\u5c31\u6765\u4e00\u8d77\u68b3\u7406\u4e00\u4e0b\u6392\u5e8f\u7b97\u6cd5\u7684\u524d\u4e16\u4eca\u751f\u3002 O(n^2) \u7ea7\u6392\u5e8f\u7b97\u6cd5 \u5192\u6ce1\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f\u662f\u5165\u95e8\u7ea7\u7684\u7b97\u6cd5\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u73a9\u6cd5\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u5192\u6ce1\u6392\u5e8f\u6709\u4e09\u79cd\u5199\u6cd5\uff1a \u4e00\u8fb9\u6bd4\u8f83\u4e00\u8fb9\u5411\u540e\u4e24\u4e24\u4ea4\u6362\uff0c\u5c06\u6700\u5927\u503c / \u6700\u5c0f\u503c\u5192\u6ce1\u5230\u6700\u540e\u4e00\u4f4d\uff1b \u7ecf\u8fc7\u4f18\u5316\u7684\u5199\u6cd5\uff1a\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u8f6e\u6b21\u7684\u6bd4\u8f83\u662f\u5426\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u751f\u4ea4\u6362\u8868\u793a\u5df2\u7ecf\u6709\u5e8f\uff0c\u4e0d\u518d\u7ee7\u7eed\u6392\u5e8f\uff1b \u8fdb\u4e00\u6b65\u4f18\u5316\u7684\u5199\u6cd5\uff1a\u9664\u4e86\u4f7f\u7528\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u8f6e\u6b21\u662f\u5426\u53d1\u751f\u4ea4\u6362\u5916\uff0c\u518d\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e0a\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e\uff0c\u4e0b\u4e00\u8f6e\u6392\u5e8f\u65f6\u5230\u8fbe\u4e0a\u6b21\u4ea4\u6362\u7684\u4f4d\u7f6e\u5c31\u505c\u6b62\u6bd4\u8f83\u3002 first method public static void bubbleSort(int[] arr) { for (int i = 0; i < arr.length - 1; i++) { for (int j = 0; j < arr.length - 1 - i; j++) { if (arr[j] > arr[j + 1]) { // \u5982\u679c\u5de6\u8fb9\u7684\u6570\u5927\u4e8e\u53f3\u8fb9\u7684\u6570\uff0c\u5219\u4ea4\u6362\uff0c\u4fdd\u8bc1\u53f3\u8fb9\u7684\u6570\u5b57\u6700\u5927 swap(arr, j, j + 1); } } } } // \u4ea4\u6362\u5143\u7d20 private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } second method public static void bubbleSort(int[] arr) { // \u8bb0\u5f55\u6bcf\u8f6e\u5192\u6ce1\u662f\u5426\u53d1\u751f\u4e86\u4ea4\u6362 boolean swapped; for (int i = 0; i < arr.length - 1; i++) { swapped = false; for (int j = 0; j < arr.length - 1 - i; j++) { if (arr[j] > arr[j + 1]) { swap(arr, j, j + 1); swapped = true; } } // \u5982\u679c\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u76f4\u63a5\u9000\u51fa\u5faa\u73af if (!swapped) break; } } third method public static void bubbleSort(int[] arr) { boolean swapped = true; // \u6700\u540e\u4e00\u4e2a\u6ca1\u6709\u7ecf\u8fc7\u6392\u5e8f\u7684\u5143\u7d20\u7684\u4e0b\u6807 int indexOfLastUnsortedElement = arr.length - 1; // \u4e0a\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e int swappedIndex = -1; while (swapped) { swapped = false; for (int i = 0; i < indexOfLastUnsortedElement; i++) { if (arr[i] > arr[i + 1]) { // \u5982\u679c\u5de6\u8fb9\u7684\u6570\u5927\u4e8e\u53f3\u8fb9\u7684\u6570\uff0c\u5219\u4ea4\u6362\uff0c\u4fdd\u8bc1\u53f3\u8fb9\u7684\u6570\u5b57\u6700\u5927 swap(arr, i, i + 1); // \u8868\u793a\u53d1\u751f\u4e86\u4ea4\u6362 swapped = true; // \u66f4\u65b0\u4ea4\u6362\u7684\u4f4d\u7f6e swappedIndex = i; } } // \u6700\u540e\u4e00\u4e2a\u6ca1\u6709\u7ecf\u8fc7\u6392\u5e8f\u7684\u5143\u7d20\u7684\u4e0b\u6807\u5c31\u662f\u6700\u540e\u4e00\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e indexOfLastUnsortedElement = swappedIndex; } } // \u4ea4\u6362\u5143\u7d20 private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u7ecf\u8fc7\u518d\u4e00\u6b21\u7684\u4f18\u5316\uff0c\u4ee3\u7801\u770b\u8d77\u6765\u5c31\u7a0d\u5fae\u6709\u70b9\u590d\u6742\u4e86\u3002\u6700\u5916\u5c42\u7684 while \u5faa\u73af\u6bcf\u7ecf\u8fc7\u4e00\u8f6e\uff0c\u5269\u4f59\u6570\u5b57\u4e2d\u7684\u6700\u5927\u503c\u4ecd\u7136\u662f\u88ab\u79fb\u52a8\u5230\u5f53\u524d\u8f6e\u6b21\u7684\u6700\u540e\u4e00\u4f4d\u3002 \u5728\u4e0b\u4e00\u8f6e\u6bd4\u8f83\u65f6\uff0c\u53ea\u9700\u6bd4\u8f83\u5230\u4e0a\u4e00\u8f6e\u6bd4\u8f83\u4e2d\uff0c\u6700\u540e\u4e00\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u56e0\u4e3a\u540e\u9762\u7684\u6240\u6709\u5143\u7d20\u90fd\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u5fc5\u7136\u5df2\u7ecf\u6709\u5e8f\u4e86\u3002 \u5f53\u4e00\u8f6e\u6bd4\u8f83\u4e2d\u4ece\u5934\u5230\u5c3e\u90fd\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u5219\u8868\u793a\u6574\u4e2a\u5217\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u6392\u5e8f\u5b8c\u6210\u3002 \u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u6570\u5b57\u4ea4\u6362 a = a ^ b; b = b ^ a; a = a ^ b; \u9009\u62e9\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\u7684\u601d\u60f3\u662f\uff1a\u53cc\u91cd\u5faa\u73af\u904d\u5386\u6570\u7ec4\uff0c\u6bcf\u7ecf\u8fc7\u4e00\u8f6e\u6bd4\u8f83\uff0c\u627e\u5230\u6700\u5c0f\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5c06\u5176\u4ea4\u6362\u81f3\u9996\u4f4d\u3002 public static void selectionSort(int[] arr) { int minIndex; for (int i = 0; i < arr.length - 1; i++) { minIndex = i; for (int j = i + 1; j < arr.length; j++) { if (arr[minIndex] > arr[j]) { // \u8bb0\u5f55\u6700\u5c0f\u503c\u7684\u4e0b\u6807 minIndex = j; } } // \u5c06\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u81f3\u9996\u4f4d int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } } \u76f8\u540c\u70b9\uff1a \u90fd\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a n^2 \u90fd\u53ea\u4f7f\u7528\u6709\u9650\u4e2a\u53d8\u91cf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\u3002 \u4e0d\u540c\u70b9\uff1a \u5192\u6ce1\u6392\u5e8f\u5728\u6bd4\u8f83\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u65ad\u4ea4\u6362\uff1b\u800c\u9009\u62e9\u6392\u5e8f\u589e\u52a0\u4e86\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u6700\u5c0f\u503c / \u6700\u5927\u503c\u7684\u4e0b\u6807\uff0c\u904d\u5386\u5b8c\u6210\u540e\u624d\u4ea4\u6362\uff0c\u51cf\u5c11\u4e86\u4ea4\u6362\u6b21\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5192\u6ce1\u6392\u5e8f\u548c\u9009\u62e9\u6392\u5e8f\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4e0d\u540c\u70b9\uff0c\u90a3\u5c31\u662f\uff1a \u5192\u6ce1\u6392\u5e8f\u6cd5\u662f\u7a33\u5b9a\u7684\uff0c\u9009\u62e9\u6392\u5e8f\u6cd5\u662f\u4e0d\u7a33\u5b9a\u7684\u3002 \u63d2\u5165\u6392\u5e8f \u63d2\u5165\u6392\u5e8f\u6709\u4e24\u79cd\u5199\u6cd5\uff1a \u4ea4\u6362\u6cd5\uff1a\u5728\u65b0\u6570\u5b57\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u4e0e\u524d\u9762\u7684\u6570\u5b57\u4ea4\u6362\uff0c\u76f4\u5230\u627e\u5230\u81ea\u5df1\u5408\u9002\u7684\u4f4d\u7f6e\u3002 \u79fb\u52a8\u6cd5\uff1a\u5728\u65b0\u6570\u5b57\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u4e0e\u524d\u9762\u7684\u6570\u5b57\u4e0d\u65ad\u6bd4\u8f83\uff0c\u524d\u9762\u7684\u6570\u5b57\u4e0d\u65ad\u5411\u540e\u632a\u51fa\u4f4d\u7f6e\uff0c\u5f53\u65b0\u6570\u5b57\u627e\u5230\u81ea\u5df1\u7684\u4f4d\u7f6e\u540e\uff0c\u63d2\u5165\u4e00\u6b21\u5373\u53ef\u3002 public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { // j \u8bb0\u5f55\u5f53\u524d\u6570\u5b57\u4e0b\u6807 int j = i; // \u5f53\u524d\u6570\u5b57\u6bd4\u524d\u4e00\u4e2a\u6570\u5b57\u5c0f\uff0c\u5219\u5c06\u5f53\u524d\u6570\u5b57\u4e0e\u524d\u4e00\u4e2a\u6570\u5b57\u4ea4\u6362 while (j >= 1 && arr[j] < arr[j - 1]) { swap(arr, j, j - 1); // \u66f4\u65b0\u5f53\u524d\u6570\u5b57\u4e0b\u6807 j--; } } } private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u79fb\u52a8\u6cd5\u63d2\u5165\u6392\u5e8f \u6211\u4eec\u53d1\u73b0\uff0c\u5728\u4ea4\u6362\u6cd5\u63d2\u5165\u6392\u5e8f\u4e2d\uff0c\u6bcf\u6b21\u4ea4\u6362\u6570\u5b57\u65f6\uff0cswap \u51fd\u6570\u90fd\u4f1a\u8fdb\u884c\u4e09\u6b21\u8d4b\u503c\u64cd\u4f5c\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u65b0\u63d2\u5165\u7684\u8fd9\u4e2a\u6570\u5b57\u5e76\u4e0d\u4e00\u5b9a\u9002\u5408\u4e0e\u5b83\u4ea4\u6362\u7684\u6570\u5b57\u6240\u5728\u7684\u4f4d\u7f6e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u521a\u6362\u5230\u65b0\u7684\u4f4d\u7f6e\u4e0a\u4e0d\u4e45\uff0c\u4e0b\u4e00\u6b21\u6bd4\u8f83\u540e\uff0c\u5982\u679c\u53c8\u9700\u8981\u4ea4\u6362\uff0c\u5b83\u9a6c\u4e0a\u53c8\u4f1a\u88ab\u6362\u5230\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\u3002 \u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u79cd\u4f18\u5316\u65b9\u6848\uff1a\u8ba9\u65b0\u63d2\u5165\u7684\u6570\u5b57\u5148\u8fdb\u884c\u6bd4\u8f83\uff0c\u524d\u9762\u6bd4\u5b83\u5927\u7684\u6570\u5b57\u4e0d\u65ad\u5411\u540e\u79fb\u52a8\uff0c\u76f4\u5230\u627e\u5230\u9002\u5408\u8fd9\u4e2a\u65b0\u6570\u5b57\u7684\u4f4d\u7f6e\u540e\uff0c\u65b0\u6570\u5b57\u53ea\u505a\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u5373\u53ef\u3002 \u8fd9\u79cd\u65b9\u6848\u6211\u4eec\u9700\u8981\u628a\u65b0\u63d2\u5165\u7684\u6570\u5b57\u6682\u5b58\u8d77\u6765\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { int currentNumber = arr[i]; int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr[j]) { arr[j + 1] = arr[j]; j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr[j + 1] = currentNumber; } } sum \u5192\u6ce1\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f\u6709\u4e24\u79cd\u4f18\u5316\u65b9\u5f0f\uff1a \u8bb0\u5f55\u5f53\u524d\u8f6e\u6b21\u662f\u5426\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\u8868\u793a\u6570\u7ec4\u5df2\u7ecf\u6709\u5e8f\uff1b \u8bb0\u5f55\u4e0a\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e\uff0c\u4e0b\u4e00\u8f6e\u6392\u5e8f\u65f6\u53ea\u6bd4\u8f83\u5230\u6b64\u4f4d\u7f6e\u3002 \u9009\u62e9\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\u53ef\u4ee5\u6f14\u53d8\u4e3a\u4e8c\u5143\u9009\u62e9\u6392\u5e8f\uff1a \u4e8c\u5143\u9009\u62e9\u6392\u5e8f\uff1a\u4e00\u6b21\u904d\u5386\u9009\u51fa\u4e24\u4e2a\u503c\u2014\u2014\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1b \u4e8c\u5143\u9009\u62e9\u6392\u5e8f\u526a\u679d\u4f18\u5316\uff1a\u5f53\u67d0\u4e00\u8f6e\u904d\u5386\u51fa\u73b0\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u76f8\u7b49\uff0c\u8868\u793a\u6570\u7ec4\u4e2d\u5269\u4f59\u5143\u7d20\u5df2\u7ecf\u5168\u90e8\u76f8\u7b49\u3002 \u63d2\u5165\u6392\u5e8f \u63d2\u5165\u6392\u5e8f\u6709\u4e24\u79cd\u5199\u6cd5\uff1a \u4ea4\u6362\u6cd5\uff1a\u65b0\u6570\u5b57\u901a\u8fc7\u4e0d\u65ad\u4ea4\u6362\u627e\u5230\u81ea\u5df1\u5408\u9002\u7684\u4f4d\u7f6e\uff1b \u79fb\u52a8\u6cd5\uff1a\u65e7\u6570\u5b57\u4e0d\u65ad\u5411\u540e\u79fb\u52a8\uff0c\u76f4\u5230\u65b0\u6570\u5b57\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u3002 \u76f8\u540c\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(n^2) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u3002 \u90fd\u9700\u8981\u91c7\u7528\u4e24\u91cd\u5faa\u73af\u3002 \u4e0d\u540c\u70b9 \u9009\u62e9\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u5192\u6ce1\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff1b \u5728\u8fd9\u4e09\u4e2a\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u9009\u62e9\u6392\u5e8f\u4ea4\u6362\u7684\u6b21\u6570\u662f\u6700\u5c11\u7684\uff1b \u5728\u6570\u7ec4\u51e0\u4e4e\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1\u7ebf\u6027\u7ea7\u522b\u3002 O(nlogn) \u7ea7\u6392\u5e8f\u7b97\u6cd5 \u5e0c\u5c14\u6392\u5e8f public static void shellSort(int[] arr) { // \u95f4\u9694\u5e8f\u5217\uff0c\u5728\u5e0c\u5c14\u6392\u5e8f\u4e2d\u6211\u4eec\u79f0\u4e4b\u4e3a\u589e\u91cf\u5e8f\u5217 for (int gap = arr.length / 2; gap > 0; gap /= 2) { // \u5206\u7ec4 for (int groupStartIndex = 0; groupStartIndex < gap; groupStartIndex++) { // \u63d2\u5165\u6392\u5e8f for (int currentIndex = groupStartIndex + gap; currentIndex < arr.length; currentIndex += gap) { // currentNumber \u7ad9\u8d77\u6765\uff0c\u5f00\u59cb\u627e\u4f4d\u7f6e int currentNumber = arr[currentIndex]; int preIndex = currentIndex - gap; while (preIndex >= groupStartIndex && currentNumber < arr[preIndex]) { // \u5411\u540e\u632a\u4f4d\u7f6e arr[preIndex + gap] = arr[preIndex]; preIndex -= gap; } // currentNumber \u627e\u5230\u4e86\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[preIndex + gap] = currentNumber; } } } } \u6ce8\uff1a\u7531\u4e8e\u5e0c\u5c14\u6392\u5e8f\u7406\u89e3\u8d77\u6765\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u6240\u4ee5\u7b14\u8005\u91c7\u7528\u4e86\u66f4\u51c6\u786e\u7684\u547d\u540d\u65b9\u5f0f\u66ff\u4ee3 i\u3001j \u7b49\u53d8\u91cf\u540d\u3002 \u8fd9\u4efd\u4ee3\u7801\u4e0e\u6211\u4eec\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u601d\u8def\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u5148\u5206\u7ec4\uff0c\u518d\u5bf9\u6bcf\u7ec4\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002\u540c\u6837\u5730\uff0c\u8fd9\u91cc\u7684\u63d2\u5165\u6392\u5e8f\u4e5f\u53ef\u4ee5\u91c7\u7528\u4ea4\u6362\u5143\u7d20\u7684\u65b9\u5f0f\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\u3002\u6211\u4eec\u73b0\u5728\u7684\u5904\u7406\u65b9\u5f0f\u662f\uff1a\u5904\u7406\u5b8c\u4e00\u7ec4\u95f4\u9694\u5e8f\u5217\u540e\uff0c\u518d\u56de\u6765\u5904\u7406\u4e0b\u4e00\u7ec4\u95f4\u9694\u5e8f\u5217\uff0c\u8fd9\u975e\u5e38\u7b26\u5408\u4eba\u7c7b\u601d\u7ef4\u3002\u4f46\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u5b83\u66f4\u559c\u6b22\u4ece\u7b2c gap \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6309\u7167\u987a\u5e8f\u5c06\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u524d\u63d2\u5165\u81ea\u5df1\u6240\u5728\u7684\u7ec4\u8fd9\u79cd\u65b9\u5f0f\u3002\u867d\u7136\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u8d77\u6765\u662f\u5728\u4e0d\u540c\u7684\u95f4\u9694\u5e8f\u5217\u4e2d\u4e0d\u65ad\u8df3\u8dc3\uff0c\u4f46\u7ad9\u5728\u8ba1\u7b97\u673a\u7684\u89d2\u5ea6\uff0c\u5b83\u662f\u5728\u8bbf\u95ee\u4e00\u6bb5\u8fde\u7eed\u6570\u7ec4\u3002 public static void shellSort(int[] arr) { // \u95f4\u9694\u5e8f\u5217\uff0c\u5728\u5e0c\u5c14\u6392\u5e8f\u4e2d\u6211\u4eec\u79f0\u4e4b\u4e3a\u589e\u91cf\u5e8f\u5217 for (int gap = arr.length / 2; gap > 0; gap /= 2) { // \u4ece gap \u5f00\u59cb\uff0c\u6309\u7167\u987a\u5e8f\u5c06\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u524d\u63d2\u5165\u81ea\u5df1\u6240\u5728\u7684\u7ec4 for (int i = gap; i < arr.length; i++) { // currentNumber \u7ad9\u8d77\u6765\uff0c\u5f00\u59cb\u627e\u4f4d\u7f6e int currentNumber = arr[i]; // \u8be5\u7ec4\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u7d22\u5f15 int preIndex = i - gap; while (preIndex >= 0 && currentNumber < arr[preIndex]) { // \u5411\u540e\u632a\u4f4d\u7f6e arr[preIndex + gap] = arr[preIndex]; preIndex -= gap; } // currentNumber \u627e\u5230\u4e86\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[preIndex + gap] = currentNumber; } } } \u7ecf\u8fc7\u4f18\u5316\u4e4b\u540e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u770b\u8d77\u6765\u5c31\u548c\u63d2\u5165\u6392\u5e8f\u975e\u5e38\u76f8\u4f3c\u4e86\uff0c\u533a\u522b\u4ec5\u5728\u4e8e\u5e0c\u5c14\u6392\u5e8f\u6700\u5916\u5c42\u5d4c\u5957\u4e86\u4e00\u4e2a\u7f29\u5c0f\u589e\u91cf\u7684 for \u5faa\u73af\uff1b\u5e76\u4e14\u63d2\u5165\u65f6\u4e0d\u518d\u662f\u76f8\u90bb\u6570\u5b57\u632a\u52a8\uff0c\u800c\u662f\u4ee5\u589e\u91cf\u4e3a\u6b65\u957f\u632a\u52a8 public static void shellSortByKnuth(int[] arr) { // \u627e\u5230\u5f53\u524d\u6570\u7ec4\u9700\u8981\u7528\u5230\u7684 Knuth \u5e8f\u5217\u4e2d\u7684\u6700\u5927\u503c int maxKnuthNumber = 1; while (maxKnuthNumber <= arr.length / 3) { maxKnuthNumber = maxKnuthNumber * 3 + 1; } // \u589e\u91cf\u6309\u7167 Knuth \u5e8f\u5217\u89c4\u5219\u4f9d\u6b21\u9012\u51cf for (int gap = maxKnuthNumber; gap > 0; gap = (gap - 1) / 3) { // \u4ece gap \u5f00\u59cb\uff0c\u6309\u7167\u987a\u5e8f\u5c06\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u524d\u63d2\u5165\u81ea\u5df1\u6240\u5728\u7684\u7ec4 for (int i = gap; i < arr.length; i++) { // currentNumber \u7ad9\u8d77\u6765\uff0c\u5f00\u59cb\u627e\u4f4d\u7f6e int currentNumber = arr[i]; // \u8be5\u7ec4\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u7d22\u5f15 int preIndex = i - gap; while (preIndex >= 0 && currentNumber < arr[preIndex]) { // \u5411\u540e\u632a\u4f4d\u7f6e arr[preIndex + gap] = arr[preIndex]; preIndex -= gap; } // currentNumber \u627e\u5230\u4e86\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[preIndex + gap] = currentNumber; } } } \u867d\u7136\u63d2\u5165\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f46\u5e0c\u5c14\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\u3002\u5728\u589e\u91cf\u8f83\u5927\u65f6\uff0c\u6392\u5e8f\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u7834\u574f\u539f\u6709\u6570\u7ec4\u4e2d\u76f8\u540c\u5173\u952e\u5b57\u7684\u76f8\u5bf9\u6b21\u5e8f\u3002 \u5806\u6392\u5e8f \u6570\u7ec4\u3001\u94fe\u8868\u90fd\u662f\u4e00\u7ef4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u800c\u5806\u662f\u4e8c\u7ef4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5bf9\u62bd\u8c61\u601d\u7ef4\u7684\u8981\u6c42\u66f4\u9ad8\uff0c\u6240\u4ee5\u8bb8\u591a\u7a0b\u5e8f\u5458\u300c\u8c08\u5806\u8272\u53d8\u300d\u3002\u4f46\u5806\u53c8\u662f\u6570\u636e\u7ed3\u6784\u8fdb\u9636\u5fc5\u7ecf\u7684\u4e00\u6b65\uff0c\u6211\u4eec\u4e0d\u59a8\u9759\u4e0b\u5fc3\u6765\uff0c\u5c06\u5176\u68b3\u7406\u6e05\u695a\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28 \u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u4e8c\u53c9\u6811\uff0c\u9664\u4e86\u6700\u540e\u4e00\u5c42\u5916\uff0c\u5176\u4ed6\u5c42\u7684\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u603b\u6570 n \u6ee1\u8db3\uff1a2^h - 1 <= n <= 2^(h+1) - 1\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u6700\u540e\u4e24\u5c42\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\u3002 public static void heapSort(int[] arr) { // \u6784\u5efa\u521d\u59cb\u5927\u9876\u5806 buildMaxHeap(arr); for (int i = arr.length - 1; i > 0; i--) { // \u5c06\u6700\u5927\u503c\u4ea4\u6362\u5230\u6570\u7ec4\u6700\u540e swap(arr, 0, i); // \u8c03\u6574\u5269\u4f59\u6570\u7ec4\uff0c\u4f7f\u5176\u6ee1\u8db3\u5927\u9876\u5806 maxHeapify(arr, 0, i); } } // \u6784\u5efa\u521d\u59cb\u5927\u9876\u5806 private static void buildMaxHeap(int[] arr) { // \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u8c03\u6574\u5927\u9876\u5806\uff0c\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u7684\u4e0b\u6807\u5c31\u662f arr.length / 2-1 for (int i = arr.length / 2 - 1; i >= 0; i--) { maxHeapify(arr, i, arr.length); } } // \u8c03\u6574\u5927\u9876\u5806\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u8868\u793a\u5269\u4f59\u672a\u6392\u5e8f\u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u5269\u4f59\u5806\u7684\u5927\u5c0f private static void maxHeapify(int[] arr, int i, int heapSize) { // \u5de6\u5b50\u7ed3\u70b9\u4e0b\u6807 int l = 2 * i + 1; // \u53f3\u5b50\u7ed3\u70b9\u4e0b\u6807 int r = l + 1; // \u8bb0\u5f55\u6839\u7ed3\u70b9\u3001\u5de6\u5b50\u6811\u7ed3\u70b9\u3001\u53f3\u5b50\u6811\u7ed3\u70b9\u4e09\u8005\u4e2d\u7684\u6700\u5927\u503c\u4e0b\u6807 int largest = i; // \u4e0e\u5de6\u5b50\u6811\u7ed3\u70b9\u6bd4\u8f83 if (l < heapSize && arr[l] > arr[largest]) { largest = l; } // \u4e0e\u53f3\u5b50\u6811\u7ed3\u70b9\u6bd4\u8f83 if (r < heapSize && arr[r] > arr[largest]) { largest = r; } if (largest != i) { // \u5c06\u6700\u5927\u503c\u4ea4\u6362\u4e3a\u6839\u7ed3\u70b9 swap(arr, i, largest); // \u518d\u6b21\u8c03\u6574\u4ea4\u6362\u6570\u5b57\u540e\u7684\u5927\u9876\u5806 maxHeapify(arr, largest, heapSize); } } private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u5feb\u901f\u6392\u5e8f public static void quickSort(int[] arr) { quickSort(arr, 0, arr.length - 1); } public static void quickSort(int[] arr, int start, int end) { // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } public static int partition(int[] arr, int start, int end) { // TODO: \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 } public static void quickSort(int[] arr, int start, int end) { // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5f53\u5de6\u8fb9\u533a\u57df\u4e2d\u81f3\u5c11\u6709 2 \u4e2a\u6570\u5b57\u65f6\uff0c\u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f if (start != middle && start != middle - 1) quickSort(arr, start, middle - 1); // \u5f53\u53f3\u8fb9\u533a\u57df\u4e2d\u81f3\u5c11\u6709 2 \u4e2a\u6570\u5b57\u65f6\uff0c\u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f if (middle != end && middle != end - 1) quickSort(arr, middle + 1, end); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start == end || start == end + 1) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u66f4\u8fdb\u4e00\u6b65\uff0c\u7531\u4e0a\u6587\u6240\u8bf4\u7684 middle >= start && middle <= end \u53ef\u4ee5\u63a8\u51fa\uff0c\u9664\u4e86start == end || start == end + 1\u8fd9\u4e24\u4e2a\u6761\u4ef6\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u60c5\u51b5\u4e0b start \u90fd\u5c0f\u4e8e end\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5224\u65ad\u6761\u4ef6\u518d\u6b21\u7b80\u5199\u4e3a\uff1a public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start >= end) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 // \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 public static int partition(int[] arr, int start, int end) { // \u53d6\u7b2c\u4e00\u4e2a\u6570\u4e3a\u57fa\u6570 int pivot = arr[start]; // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\u5206\u533a int left = start + 1; // \u53f3\u8fb9\u754c int right = end; // TODO } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u6700\u7b80\u5355\u7684\u5206\u533a\u7b97\u6cd5 \u5206\u533a\u7684\u65b9\u5f0f\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u6700\u7b80\u5355\u7684\u601d\u8def\u662f\uff1a\u4ece left \u5f00\u59cb\uff0c\u9047\u5230\u6bd4\u57fa\u6570\u5927\u7684\u6570\uff0c\u5c31\u4ea4\u6362\u5230\u6570\u7ec4\u6700\u540e\uff0c\u5e76\u5c06 right \u51cf\u4e00\uff0c\u76f4\u5230 left \u548c right \u76f8\u9047\uff0c\u6b64\u65f6\u6570\u7ec4\u5c31\u88ab\u5206\u6210\u4e86\u5de6\u53f3\u4e24\u4e2a\u533a\u57df\u3002\u518d\u5c06\u57fa\u6570\u548c\u4e2d\u95f4\u7684\u6570\u4ea4\u6362\uff0c\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807\u5373\u53ef\u3002 \u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u6572\u51fa\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a public static void quickSort(int[] arr) { quickSort(arr, 0, arr.length - 1); } public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start >= end) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } // \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 public static int partition(int[] arr, int start, int end) { // \u53d6\u7b2c\u4e00\u4e2a\u6570\u4e3a\u57fa\u6570 int pivot = arr[start]; // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\u5206\u533a int left = start + 1; // \u53f3\u8fb9\u754c int right = end; // left\u3001right \u76f8\u9047\u65f6\u9000\u51fa\u5faa\u73af while (left < right) { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u6570\u7684\u4f4d\u7f6e while (left < right && arr[left] <= pivot) left++; // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5de6\u8fb9\u5206\u533a\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570\uff0c\u53f3\u8fb9\u5206\u533a\u5927\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570 if (left != right) { exchange(arr, left, right); right--; } } // \u5982\u679c left \u548c right \u76f8\u7b49\uff0c\u5355\u72ec\u6bd4\u8f83 arr[right] \u548c pivot if (left == right && arr[right] > pivot) right--; // \u5c06\u57fa\u6570\u548c\u4e2d\u95f4\u6570\u4ea4\u6362 if (right != start) exchange(arr, start, right); // \u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 return right; } private static void exchange(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } public static void quickSort(int[] arr) { quickSort(arr, 0, arr.length - 1); } public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start >= end) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } // \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 public static int partition(int[] arr, int start, int end) { // \u53d6\u7b2c\u4e00\u4e2a\u6570\u4e3a\u57fa\u6570 int pivot = arr[start]; // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\u5206\u533a int left = start + 1; // \u53f3\u8fb9\u754c int right = end; while (left < right) { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u6570\u7684\u4f4d\u7f6e while (left < right && arr[left] <= pivot) left++; // \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u57fa\u6570\u7684\u4f4d\u7f6e while (left < right && arr[right] >= pivot) right--; // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5de6\u8fb9\u5206\u533a\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570\uff0c\u53f3\u8fb9\u5206\u533a\u5927\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570 if (left < right) { exchange(arr, left, right); left++; right--; } } // \u5982\u679c left \u548c right \u76f8\u7b49\uff0c\u5355\u72ec\u6bd4\u8f83 arr[right] \u548c pivot if (left == right && arr[right] > pivot) right--; // \u5c06\u57fa\u6570\u548c\u8f74\u4ea4\u6362 exchange(arr, start, right); return right; } private static void exchange(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 private static final int SHUFFLE_THRESHOLD = 5; public static void shuffle(List<?> list, Random rnd) { int size = list.size(); if (size < SHUFFLE_THRESHOLD || list instanceof RandomAccess) { for (int i=size; i>1; i--) swap(list, i-1, rnd.nextInt(i)); } else { Object arr[] = list.toArray(); // Shuffle array for (int i=size; i>1; i--) swap(arr, i-1, rnd.nextInt(i)); // Dump array back into list // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method ListIterator it = list.listIterator(); for (int i=0; i<arr.length; i++) { it.next(); it.set(arr[i]); } } } public static void swap(List<?> list, int i, int j) { // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method final List l = list; l.set(i, l.set(j, l.get(i))); } private static void swap(Object[] arr, int i, int j) { Object tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5f52\u5e76\u6392\u5e8f // \u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4 private static int[] merge(int[] arr1, int[] arr2) { int[] result = new int[arr1.length + arr2.length]; int index1 = 0, index2 = 0; while (index1 < arr1.length && index2 < arr2.length) { if (arr1[index1] <= arr2[index2]) { result[index1 + index2] = arr1[index1]; index1++; } else { result[index1 + index2] = arr2[index2]; index2++; } } // \u5c06\u5269\u4f59\u6570\u5b57\u8865\u5230\u7ed3\u679c\u6570\u7ec4\u4e4b\u540e while (index1 < arr1.length) { result[index1 + index2] = arr1[index1]; index1++; } while (index2 < arr2.length) { result[index1 + index2] = arr2[index2]; index2++; } return result; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void mergeSort(int[] arr) { if (arr.length == 0) return; int[] result = mergeSort(arr, 0, arr.length - 1); // \u5c06\u7ed3\u679c\u62f7\u8d1d\u5230 arr \u6570\u7ec4\u4e2d for (int i = 0; i < result.length; i++) { arr[i] = result[i]; } } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static int[] mergeSort(int[] arr, int start, int end) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206\uff0c\u8fd4\u56de\u5355\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u6570\u7ec4 if (start == end) return new int[]{arr[start]}; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df int[] left = mergeSort(arr, start, middle); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df int[] right = mergeSort(arr, middle + 1, end); // \u5408\u5e76\u5de6\u53f3\u533a\u57df return merge(left, right); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void mergeSort(int[] arr) { if (arr.length == 0) return; int[] result = new int[arr.length]; mergeSort(arr, 0, arr.length - 1, result); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end, int[] result) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [start, middle] \u533a\u95f4 mergeSort(arr, start, middle, result); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [middle + 1, end] \u533a\u95f4 mergeSort(arr, middle + 1, end, result); // \u5408\u5e76\u5de6\u53f3\u533a\u57df\u5230 result \u7684 [start, end] \u533a\u95f4 merge(arr, start, end, result); } // \u5c06 result \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end, int[] result) { int middle = (start + end) / 2; // \u6570\u7ec4 1 \u7684\u9996\u5c3e\u4f4d\u7f6e int start1 = start; int end1 = middle; // \u6570\u7ec4 2 \u7684\u9996\u5c3e\u4f4d\u7f6e int start2 = middle + 1; int end2 = end; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start1; int index2 = start2; // \u7ed3\u679c\u6570\u7ec4\u7684\u6307\u9488 int resultIndex = start1; while (index1 <= end1 && index2 <= end2) { if (arr[index1] <= arr[index2]) { result[resultIndex++] = arr[index1++]; } else { result[resultIndex++] = arr[index2++]; } } // \u5c06\u5269\u4f59\u6570\u5b57\u8865\u5230\u7ed3\u679c\u6570\u7ec4\u4e4b\u540e while (index1 <= end1) { result[resultIndex++] = arr[index1++]; } while (index2 <= end2) { result[resultIndex++] = arr[index2++]; } // \u5c06 result \u64cd\u4f5c\u533a\u95f4\u7684\u6570\u5b57\u62f7\u8d1d\u5230 arr \u6570\u7ec4\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u6bd4\u8f83 for (int i = start; i <= end; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void mergeSort(int[] arr) { if (arr.length == 0) return; int[] result = new int[arr.length]; mergeSort(arr, 0, arr.length - 1, result); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end, int[] result) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [start, middle] \u533a\u95f4 mergeSort(arr, start, middle, result); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [middle + 1, end] \u533a\u95f4 mergeSort(arr, middle + 1, end, result); // \u5408\u5e76\u5de6\u53f3\u533a\u57df\u5230 result \u7684 [start, end] \u533a\u95f4 merge(arr, start, end, result); } // \u5c06 result \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end, int[] result) { int end1 = (start + end) / 2; int start2 = end1 + 1; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start; int index2 = start2; while (index1 <= end1 && index2 <= end) { if (arr[index1] <= arr[index2]) { result[index1 + index2 - start2] = arr[index1++]; } else { result[index1 + index2 - start2] = arr[index2++]; } } // \u5c06\u5269\u4f59\u6570\u5b57\u8865\u5230\u7ed3\u679c\u6570\u7ec4\u4e4b\u540e while (index1 <= end1) { result[index1 + index2 - start2] = arr[index1++]; } while (index2 <= end) { result[index1 + index2 - start2] = arr[index2++]; } // \u5c06 result \u64cd\u4f5c\u533a\u95f4\u7684\u6570\u5b57\u62f7\u8d1d\u5230 arr \u6570\u7ec4\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u6bd4\u8f83 while (start <= end) { arr[start] = result[start++]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff1f \u73b0\u5728\u7684\u5f52\u5e76\u6392\u5e8f\u770b\u8d77\u6765\u4ecd\"\u7f8e\u4e2d\u4e0d\u8db3\"\uff0c\u90a3\u5c31\u662f\u4ecd\u7136\u9700\u8981\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u80fd\u4e0d\u80fd\u5b9e\u73b0\u4e0d\u5f00\u8f9f\u989d\u5916\u7a7a\u95f4\u7684\u5f52\u5e76\u6392\u5e8f\u5462\uff1f\u597d\u50cf\u662f\u53ef\u4ee5\u505a\u5230\u7684\u3002\u5728\u4e00\u4e9b\u6587\u7ae0\u4e2d\uff0c\u5c06\u8fd9\u6837\u7684\u5f52\u5e76\u6392\u5e8f\u79f0\u4e4b\u4e3a In-Place Merge Sort\uff0c\u76f4\u8bd1\u4e3a\u539f\u5730\u5f52\u5e76\u6392\u5e8f\u3002 \u4ee3\u7801\u5b9e\u73b0\u601d\u8def\u4e3b\u8981\u6709\u4e24\u79cd\uff1a public static void mergeSort(int[] arr) { if (arr.length == 0) return; mergeSort(arr, 0, arr.length - 1); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df mergeSort(arr, start, middle); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df mergeSort(arr, middle + 1, end); // \u5408\u5e76\u5de6\u53f3\u533a\u57df merge(arr, start, end); } // \u5c06 arr \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end) { int end1 = (start + end) / 2; int start2 = end1 + 1; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start; int index2 = start2; while (index1 <= end1 && index2 <= end) { if (arr[index1] <= arr[index2]) { index1++; } else { // \u53f3\u8fb9\u533a\u57df\u7684\u8fd9\u4e2a\u6570\u5b57\u6bd4\u5de6\u8fb9\u533a\u57df\u7684\u6570\u5b57\u5c0f\uff0c\u4e8e\u662f\u5b83\u7ad9\u4e86\u8d77\u6765 int value = arr[index2]; int index = index2; // \u524d\u9762\u7684\u6570\u5b57\u4e0d\u65ad\u5730\u540e\u79fb while (index > index1) { arr[index] = arr[index - 1]; index--; } // \u8fd9\u4e2a\u6570\u5b57\u5750\u5230 index1 \u6240\u5728\u7684\u4f4d\u7f6e\u4e0a arr[index] = value; // \u66f4\u65b0\u6240\u6709\u4e0b\u6807\uff0c\u4f7f\u5176\u524d\u8fdb\u4e00\u683c index1++; index2++; end1++; } } } \u8fd9\u6bb5\u4ee3\u7801\u5728\u5408\u5e76 arr \u7684 [start, middle] \u533a\u95f4\u548c [middle + 1, end] \u533a\u95f4\u65f6\uff0c\u5c06\u4e24\u4e2a\u533a\u95f4\u8f83\u5c0f\u7684\u6570\u5b57\u79fb\u52a8\u5230 index1 \u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5c06\u5de6\u8fb9\u533a\u57df\u4e0d\u65ad\u540e\u79fb\uff0c\u76ee\u7684\u662f\u7ed9\u65b0\u63d2\u5165\u7684\u6570\u5b57\u817e\u51fa\u4f4d\u7f6e\u3002\u6700\u540e\u66f4\u65b0\u4e24\u4e2a\u533a\u95f4\u7684\u4e0b\u6807\uff0c\u7ee7\u7eed\u5408\u5e76\u66f4\u65b0\u540e\u7684\u533a\u95f4\u3002 \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u601d\u8def\uff1a public static void mergeSort(int[] arr) { if (arr.length == 0) return; mergeSort(arr, 0, arr.length - 1); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df mergeSort(arr, start, middle); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df mergeSort(arr, middle + 1, end); // \u5408\u5e76\u5de6\u53f3\u533a\u57df merge(arr, start, end); } // \u5c06 arr \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end) { int end1 = (start + end) / 2; int start2 = end1 + 1; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start; while (index1 <= end1 && start2 <= end) { if (arr[index1] > arr[start2]) { // \u5c06 index1 \u548c start2 \u4e0b\u6807\u7684\u6570\u5b57\u4ea4\u6362 exchange(arr, index1, start2); if (start2 != end) { // \u8c03\u6574\u4ea4\u6362\u5230 start2 \u4e0a\u7684\u8fd9\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\uff0c\u4f7f\u53f3\u8fb9\u533a\u57df\u7ee7\u7eed\u4fdd\u6301\u6709\u5e8f int value = arr[start2]; int index = start2; // \u53f3\u8fb9\u533a\u57df\u6bd4 arr[start2] \u5c0f\u7684\u6570\u5b57\u4e0d\u65ad\u524d\u79fb while (index < end && arr[index + 1] < value) { arr[index] = arr[index + 1]; index++; } // \u4ea4\u6362\u5230\u53f3\u8fb9\u533a\u57df\u7684\u8fd9\u4e2a\u6570\u5b57\u627e\u5230\u4e86\u81ea\u5df1\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[index] = value; } } index1++; } } private static void exchange(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5c0f\u7ed3 O(n) \u7ea7\u6392\u5e8f\u7b97\u6cd5 \u8ba1\u6570\u6392\u5e8f public static void countingSort9(int[] arr) { // \u5efa\u7acb\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~8 \u5bf9\u5e94\u6570\u5b57 1~9 int[] counting = new int[9]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e counting[element - 1]++; } int index = 0; // \u904d\u5386\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u8f93\u51fa for (int i = 0; i < 9; i++) { // \u8f93\u51fa\u7684\u6b21\u6570\u5c31\u662f\u5bf9\u5e94\u4f4d\u7f6e\u8bb0\u5f55\u7684\u6b21\u6570 while (counting[i] != 0) { arr[index++] = i + 1; counting[i]--; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void countingSort9(int[] arr) { // \u5efa\u7acb\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~8 \u5bf9\u5e94\u6570\u5b57 1~9 int[] counting = new int[9]; // \u8bb0\u5f55\u6bcf\u4e2a\u4e0b\u6807\u4e2d\u5305\u542b\u7684\u771f\u5b9e\u5143\u7d20\uff0c\u4f7f\u7528\u961f\u5217\u53ef\u4ee5\u4fdd\u8bc1\u6392\u5e8f\u7684\u7a33\u5b9a\u6027 HashMap<Integer, Queue<Integer>> records = new HashMap<>(); // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e counting[element - 1]++; if (!records.containsKey(element - 1)) { records.put(element - 1, new LinkedList<>()); } records.get(element - 1).add(element); } int index = 0; // \u904d\u5386\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u8f93\u51fa for (int i = 0; i < 9; i++) { // \u8f93\u51fa\u7684\u6b21\u6570\u5c31\u662f\u5bf9\u5e94\u4f4d\u7f6e\u8bb0\u5f55\u7684\u6b21\u6570 while (counting[i] != 0) { // \u8f93\u51fa\u8bb0\u5f55\u7684\u771f\u5b9e\u5143\u7d20 arr[index++] = records.get(i).remove(); counting[i]--; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void countingSort9(int[] arr) { // \u5efa\u7acb\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~8 \u5bf9\u5e94\u6570\u5b57 1~9 int[] counting = new int[9]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e counting[element - 1]++; } // \u8bb0\u5f55\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 int preCounts = 0; for (int i = 0; i < counting.length; i++) { int temp = counting[i]; // \u5c06 counting \u8ba1\u7b97\u6210\u5f53\u524d\u6570\u5b57\u5728\u7ed3\u679c\u4e2d\u7684\u8d77\u59cb\u4e0b\u6807\u4f4d\u7f6e\u3002\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570\u3002 counting[i] = preCounts; // \u5f53\u524d\u7684\u6570\u5b57\u6bd4\u4e0b\u4e00\u4e2a\u6570\u5b57\u5c0f\uff0c\u7d2f\u8ba1\u5230 preCounts \u4e2d preCounts += temp; } int[] result = new int[arr.length]; for (int element : arr) { // counting[element - 1] \u8868\u793a\u6b64\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 int index = counting[element - 1]; result[index] = element; // \u66f4\u65b0 counting[element - 1]\uff0c\u6307\u5411\u6b64\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4e0b\u6807 counting[element - 1]++; } // \u5c06\u7ed3\u679c\u8d4b\u503c\u56de arr for (int i = 0; i < arr.length; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void countingSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u8ba1\u6570\u8303\u56f4 int range = max - min + 1; // \u5efa\u7acb\u957f\u5ea6\u4e3a range \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~range-1 \u5bf9\u5e94\u6570\u5b57 min~max int[] counting = new int[range]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u9700\u8981\u5c06\u6bcf\u4e2a\u5143\u7d20\u51cf\u53bb min\uff0c\u624d\u80fd\u6620\u5c04\u5230 0\uff5erange-1 \u8303\u56f4\u5185 counting[element - min]++; } // \u8bb0\u5f55\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 int preCounts = 0; for (int i = 0; i < range; i++) { // \u5f53\u524d\u7684\u6570\u5b57\u6bd4\u4e0b\u4e00\u4e2a\u6570\u5b57\u5c0f\uff0c\u7d2f\u8ba1\u5230 preCounts \u4e2d preCounts += counting[i]; // \u5c06 counting \u8ba1\u7b97\u6210\u5f53\u524d\u6570\u5b57\u5728\u7ed3\u679c\u4e2d\u7684\u8d77\u59cb\u4e0b\u6807\u4f4d\u7f6e\u3002\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570\u3002 counting[i] = preCounts - counting[i]; } int[] result = new int[arr.length]; for (int element : arr) { // counting[element - min] \u8868\u793a\u6b64\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 result[counting[element - min]] = element; // \u66f4\u65b0 counting[element - min]\uff0c\u6307\u5411\u6b64\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4e0b\u6807 counting[element - min]++; } // \u5c06\u7ed3\u679c\u8d4b\u503c\u56de arr for (int i = 0; i < arr.length; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u8fd9\u5c31\u662f\u5b8c\u6574\u7684\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\u3002 \u5012\u5e8f\u904d\u5386\u7684\u8ba1\u6570\u6392\u5e8f \u8ba1\u6570\u6392\u5e8f\u8fd8\u6709\u4e00\u79cd\u5199\u6cd5\uff0c\u5728\u8ba1\u7b97\u5143\u7d20\u5728\u6700\u7ec8\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4f4d\u7f6e\u8fd9\u4e00\u6b65\uff0c\u4e0d\u662f\u8ba1\u7b97\u521d\u59cb\u4e0b\u6807\u4f4d\u7f6e\uff0c\u800c\u662f\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u4f4d\u7f6e\u3002\u6700\u540e\u5012\u5e8f\u904d\u5386 arr \u6570\u7ec4\uff0c\u9010\u4e2a\u5c06 arr \u4e2d\u7684\u5143\u7d20\u653e\u5230\u6700\u7ec8\u4f4d\u7f6e\u4e0a\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a public static void countingSort(int[] arr) { // \u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u8ba1\u6570\u8303\u56f4 int range = max - min + 1; // \u5efa\u7acb\u957f\u5ea6\u4e3a range \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~range-1 \u5bf9\u5e94\u6570\u5b57 min~max int[] counting = new int[range]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u9700\u8981\u5c06\u6bcf\u4e2a\u5143\u7d20\u51cf\u53bb min\uff0c\u624d\u80fd\u6620\u5c04\u5230 0\uff5erange-1 \u8303\u56f4\u5185 counting[element - min]++; } // \u6bcf\u4e2a\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 + \u81ea\u5df1\u7684\u6570\u91cf - 1\u3002\u6211\u4eec\u5c06 counting[0] \u5148\u51cf\u53bb 1\uff0c\u540e\u7eed counting \u76f4\u63a5\u7d2f\u52a0\u5373\u53ef counting[0]--; for (int i = 1; i < range; i++) { // \u5c06 counting \u8ba1\u7b97\u6210\u5f53\u524d\u6570\u5b57\u5728\u7ed3\u679c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u4f4d\u7f6e\u3002\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 + \u81ea\u5df1\u7684\u6570\u91cf - 1 // \u7531\u4e8e counting[0] \u5df2\u7ecf\u51cf\u4e86 1\uff0c\u6240\u4ee5\u540e\u7eed\u7684\u51cf 1 \u53ef\u4ee5\u7701\u7565\u3002 counting[i] += counting[i - 1]; } int[] result = new int[arr.length]; // \u4ece\u540e\u5f80\u524d\u904d\u5386\u6570\u7ec4\uff0c\u901a\u8fc7 counting \u4e2d\u8bb0\u5f55\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u5c06 arr \u4e2d\u7684\u5143\u7d20\u653e\u5230 result \u6570\u7ec4\u4e2d for (int i = arr.length - 1; i >= 0; i--) { // counting[arr[i] - min] \u8868\u793a\u6b64\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 result[counting[arr[i] - min]] = arr[i]; // \u66f4\u65b0 counting[arr[i] - min]\uff0c\u6307\u5411\u6b64\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u4e0b\u6807 counting[arr[i] - min]--; } // \u5c06\u7ed3\u679c\u8d4b\u503c\u56de arr for (int i = 0; i < arr.length; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u57fa\u6570\u6392\u5e8f int mod = 10; int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { int radix = value % mod / dev; // \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f } mod *= 10; dev *= 10; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 second int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { int radix = value / dev % 10; // \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f } dev *= 10; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e24\u8005\u7684\u533a\u522b\u662f\u5148\u505a\u9664\u6cd5\u8fd0\u7b97\u8fd8\u662f\u5148\u505a\u6a21\u8fd0\u7b97\uff0c\u63a8\u8350\u4f7f\u7528\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u8282\u7701\u4e00\u4e2a\u53d8\u91cf\u3002 \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f\u975e\u5e38\u9002\u5408\u4f7f\u7528\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u5b66\u4e60\u7684\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u57fa\u6570\u90fd\u5728 [0,9] \u4e4b\u95f4\uff0c\u5e76\u4e14\u8ba1\u6570\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u7b97\u6cd5\u3002 LSD \u65b9\u5f0f\u7684\u57fa\u6570\u6392\u5e8f\u4ee3\u7801\u5982\u4e0b\uff1a public class RadixSort { public static void radixSort(int[] arr) { if (arr == null) return; // \u627e\u51fa\u6700\u5927\u503c int max = 0; for (int value : arr) { if (value > max) { max = value; } } // \u8ba1\u7b97\u6700\u5927\u6570\u5b57\u7684\u957f\u5ea6 int maxDigitLength = 0; while (max != 0) { maxDigitLength++; max /= 10; } // \u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f int[] counting = new int[10]; int[] result = new int[arr.length]; int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { int radix = value / dev % 10; counting[radix]++; } for (int j = 1; j < counting.length; j++) { counting[j] += counting[j - 1]; } // \u4f7f\u7528\u5012\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u5b8c\u6210\u8ba1\u6570\u6392\u5e8f for (int j = arr.length - 1; j >= 0; j--) { int radix = arr[j] / dev % 10; result[--counting[radix]] = arr[j]; } // \u8ba1\u6570\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u5c06\u7ed3\u679c\u62f7\u8d1d\u56de arr \u6570\u7ec4 System.arraycopy(result, 0, arr, 0, arr.length); // \u5c06\u8ba1\u6570\u6570\u7ec4\u91cd\u7f6e\u4e3a 0 Arrays.fill(counting, 0); dev *= 10; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public class RadixSort { public static void radixSort(int[] arr) { if (arr == null) return; // \u627e\u51fa\u6700\u957f\u7684\u6570 int max = 0; for (int value : arr) { if (Math.abs(value) > max) { max = Math.abs(value); } } // \u8ba1\u7b97\u6700\u957f\u6570\u5b57\u7684\u957f\u5ea6 int maxDigitLength = 0; while (max != 0) { maxDigitLength++; max /= 10; } // \u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0b\u6807 [0, 18] \u5bf9\u5e94\u57fa\u6570 [-9, 9] int[] counting = new int[19]; int[] result = new int[arr.length]; int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { // \u4e0b\u6807\u8c03\u6574 int radix = value / dev % 10 + 9; counting[radix]++; } for (int j = 1; j < counting.length; j++) { counting[j] += counting[j - 1]; } // \u4f7f\u7528\u5012\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u5b8c\u6210\u8ba1\u6570\u6392\u5e8f for (int j = arr.length - 1; j >= 0; j--) { // \u4e0b\u6807\u8c03\u6574 int radix = arr[j] / dev % 10 + 9; result[--counting[radix]] = arr[j]; } // \u8ba1\u6570\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u5c06\u7ed3\u679c\u62f7\u8d1d\u56de arr \u6570\u7ec4 System.arraycopy(result, 0, arr, 0, arr.length); // \u5c06\u8ba1\u6570\u6570\u7ec4\u91cd\u7f6e\u4e3a 0 Arrays.fill(counting, 0); dev *= 10; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public class RadixSort { public static void radixSort(int[] arr) { if (arr == null) return; // \u627e\u5230\u6700\u5927\u503c int max = 0; for (int value : arr) { if (Math.abs(value) > max) { max = Math.abs(value); } } // \u8ba1\u7b97\u6700\u5927\u957f\u5ea6 int maxDigitLength = 0; while (max != 0) { maxDigitLength++; max /= 10; } radixSort(arr, 0, arr.length - 1, maxDigitLength); } // \u5bf9 arr \u6570\u7ec4\u4e2d\u7684 [start, end] \u533a\u95f4\u8fdb\u884c\u57fa\u6570\u6392\u5e8f private static void radixSort(int[] arr, int start, int end, int position) { if (start == end || position == 0) return; // \u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f int[] counting = new int[19]; int[] result = new int[end - start + 1]; int dev = (int) Math.pow(10, position - 1); for (int i = start; i <= end; i++) { // MSD, \u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb int radix = arr[i] / dev % 10 + 9; counting[radix]++; } for (int j = 1; j < counting.length; j++) { counting[j] += counting[j - 1]; } // \u62f7\u8d1d counting\uff0c\u7528\u4e8e\u5f85\u4f1a\u7684\u9012\u5f52 int[] countingCopy = new int[counting.length]; System.arraycopy(counting, 0, countingCopy, 0, counting.length); for (int i = end; i >= start; i--) { int radix = arr[i] / dev % 10 + 9; result[--counting[radix]] = arr[i]; } // \u8ba1\u6570\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u5c06\u7ed3\u679c\u62f7\u8d1d\u56de arr \u6570\u7ec4 System.arraycopy(result, 0, arr, start, result.length); // \u5bf9 [start, end] \u533a\u95f4\u5185\u7684\u6bcf\u4e00\u4f4d\u57fa\u6570\u8fdb\u884c\u9012\u5f52\u6392\u5e8f for (int i = 0; i < counting.length; i++) { radixSort(arr, i == 0 ? start : start + countingCopy[i - 1], start + countingCopy[i] - 1, position - 1); } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u6876\u6392\u5e8f public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // ... } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u8fd9\u91cc\u9700\u8981\u904d\u5386\u4e00\u8f6e\u6570\u7ec4\u3002 \u4e0b\u4e00\u6b65\uff0c\u5f00\u59cb\u88c5\u6876\uff1a // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); // \u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u88c5\u6876\uff0c\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662f\u6876\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u662f\u6876\u4e2d\u7684\u6570\u5b57\u3002\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6\u5fc5\u987b\u8bbe\u7f6e\u4e3a arr.length\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u505a\u597d\u6700\u574f\u7684\u6253\u7b97\uff1a\u6240\u6709\u7684\u6570\u5b57\u90fd\u88ab\u88c5\u5165\u4e86\u4e00\u4e2a\u6876\u4e2d\u3002 int[][] buckets = new int[bucketAmount][arr.length]; // \u5355\u72ec\u91c7\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u6bcf\u4e2a\u6876\u5f53\u524d\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u6876\u5185\u5171\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u3002 int[] bucketLength = new int[bucketAmount]; // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); // \u88c5\u6876\u540e\uff0c\u66f4\u65b0 bucketLength[index] buckets[index][bucketLength[index]++] = value; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u8fd9\u5c31\u662f\u4ee5\u6570\u7ec4\u4f5c\u4e3a\u6876\u5b9e\u73b0\u7684\u6876\u6392\u5e8f\uff0c\u5b83\u6700\u5927\u7684\u7f3a\u70b9\u5c31\u662f\u6bcf\u4e2a\u6876\u90fd\u548c\u5f85\u6392\u5e8f\u6570\u7ec4\u4e00\u6837\u957f\uff0c\u975e\u5e38\u6d88\u8017\u5185\u5b58\uff0c\u5bb9\u6613\u5bfc\u81f4\u300c\u8d85\u51fa\u5185\u5b58\u9650\u5236\u300d\u9519\u8bef\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4efd\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u505a\u4e00\u4e2a\u4f18\u5316\uff1a\u58f0\u660e\u65f6\u6240\u6709\u7684\u6570\u7ec4\u90fd\u4e3a\u7a7a\uff0c\u5f53\u9700\u8981\u6dfb\u52a0\u6570\u5b57\u65f6\uff0c\u4e0d\u65ad\u6269\u5bb9\uff0c\u5e76\u52a0\u5165\u65b0\u6570\u5b57\u3002\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); // \u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u88c5\u6876\uff0c\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662f\u6876\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u662f\u6876\u4e2d\u7684\u6570\u5b57\u3002\u521d\u59cb\u5316\u957f\u5ea6\u4e3a 0 int[][] buckets = new int[bucketAmount][]; // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); buckets[index] = add(buckets[index], value); } int index = 0; // \u5bf9\u6bcf\u4e2a\u6876\u5185\u7684\u6570\u5b57\u8fdb\u884c\u5355\u72ec\u6392\u5e8f for (int i = 0; i < bucketAmount; i++) { if (buckets[i] == null || buckets[i].length == 0) continue; // \u8fd9\u91cc\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f8b\u5982\uff1a\u63d2\u5165\u6392\u5e8f insertSort(buckets[i]); // \u6392\u5e8f\u5b8c\u6210\u540e\u5c06\u6876\u5185\u7684\u7ed3\u679c\u6536\u96c6\u8d77\u6765 System.arraycopy(buckets[i], 0, arr, index, buckets[i].length); index += buckets[i].length; } } // \u6570\u7ec4\u6269\u5bb9 public static int[] add(int[] arr, int num) { if (arr == null) return new int[]{num}; int[] newArr = Arrays.copyOf(arr, arr.length + 1); newArr[arr.length] = num; return newArr; } // \u63d2\u5165\u6392\u5e8f public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { int currentNumber = arr[i]; int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr[j]) { arr[j + 1] = arr[j]; j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr[j + 1] = currentNumber; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); HashMap<Integer, LinkedList<Integer>> buckets = new HashMap<>(); // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); if (!buckets.containsKey(index)) { buckets.put(index, new LinkedList<>()); } buckets.get(index).add(value); } int index = 0; // \u5bf9\u6bcf\u4e2a\u6876\u5185\u7684\u6570\u5b57\u8fdb\u884c\u5355\u72ec\u6392\u5e8f for (int i = 0; i < bucketAmount; i++) { LinkedList<Integer> bucket = buckets.get(i); if (bucket == null) continue; // \u8fd9\u91cc\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f8b\u5982\uff1a\u63d2\u5165\u6392\u5e8f insertSort(bucket); // \u6392\u5e8f\u5b8c\u6210\u540e\u5c06\u6876\u5185\u7684\u7ed3\u679c\u6536\u96c6\u8d77\u6765 for (int num : bucket) { arr[index++] = num; } } } // \u5bf9\u94fe\u8868\u63d2\u5165\u6392\u5e8f public static void insertSort(LinkedList<Integer> arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.size(); i++) { int currentNumber = arr.get(i); int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr.get(j)) { arr.set(j + 1, arr.get(j)); j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr.set(j + 1, currentNumber); } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); HashMap<Integer, Queue<Integer>> buckets = new HashMap<>(); // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); if (!buckets.containsKey(index)) { buckets.put(index, new LinkedList<>()); } buckets.get(index).add(value); } int index = 0; // \u5bf9\u6bcf\u4e2a\u6876\u5185\u7684\u6570\u5b57\u8fdb\u884c\u5355\u72ec\u6392\u5e8f for (int i = 0; i < bucketAmount; i++) { Queue<Integer> bucket = buckets.get(i); if (bucket == null) continue; // \u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4\uff0c\u63d0\u5347\u6392\u5e8f\u6027\u80fd int[] arrInBucket = bucket.stream().mapToInt(Integer::intValue).toArray(); // \u8fd9\u91cc\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f8b\u5982\uff1a\u63d2\u5165\u6392\u5e8f insertSort(arrInBucket); // \u6392\u5e8f\u5b8c\u6210\u540e\u5c06\u6876\u5185\u7684\u7ed3\u679c\u6536\u96c6\u8d77\u6765 System.arraycopy(arrInBucket, 0, arr, index, arrInBucket.length); index += arrInBucket.length; } } // \u63d2\u5165\u6392\u5e8f public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { int currentNumber = arr[i]; int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr[j]) { arr[j + 1] = arr[j]; j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr[j + 1] = currentNumber; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5de5\u4e1a\u7ea7\u6392\u5e8f\uff1aJava \u6e90\u7801\u4e2d\u7684 Arrays.sort() \u539f\u7406\u89e3\u6790 Arrays.sort() \u6e90\u7801\u5206\u6790\uff08\u4e00\uff09\u2014\u2014 \u8109\u7edc \u5e76\u67e5\u96c6 \u5e76\u67e5\u96c6\uff08Union Find\uff09\u4e5f\u53eb\u300c\u4e0d\u76f8\u4ea4\u96c6\u5408\uff08Disjoint Set\uff09\u300d\uff0c\u4e13\u95e8\u7528\u4e8e \u52a8\u6001\u5904\u7406 \u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u300c\u67e5\u8be2\u300d\u4e0e\u300c\u5408\u5e76\u300d\u95ee\u9898\u3002 \u5f88\u591a\u6570\u636e\u7ed3\u6784\u90fd\u56e0\u4e3a\u5177\u6709 \u52a8\u6001 \u5904\u7406\u95ee\u9898\u7684\u80fd\u529b\u800c\u53d8\u5f97\u9ad8\u6548\uff0c\u4f8b\u5982\u300c\u5806\u300d\u300c\u4e8c\u53c9\u67e5\u627e\u6811\u300d\u7b49\u3002\u6240\u8c13\u300c\u52a8\u6001\u300d\u7684\u610f\u601d\u662f\uff1a\u8981\u5904\u7406\u7684\u6570\u636e\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u786e\u5b9a\u597d\u7684\uff0c\u7406\u89e3\u300c\u5e76\u67e5\u96c6\u300d\u52a8\u6001\u5904\u7406\u6570\u636e\u7684\u6700\u597d\u7684\u4f8b\u5b50\u662f\u300c\u6700\u5c0f\u751f\u6210\u6811\u300d\u7b97\u6cd5\uff08\u672c\u4e13\u9898\u7b2c 3 \u8282\u4ecb\u7ecd\uff09\u3002 \u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u7684\u95ee\u9898\u4e00\u822c\u90fd\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u904d\u5386\u7684\u641c\u7d22\u7b97\u6cd5\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u5b8c\u6210\uff0c\u4f46\u662f\u4f7f\u7528\u5e76\u67e5\u96c6\u4f1a\u4f7f\u5f97\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u66f4\u52a0\u6e05\u6670\u3001\u76f4\u89c2\u3002 \u5e76\u67e5\u96c6\u7684\u95ee\u9898\u5c5e\u4e8e\u7ade\u8d5b\u7ea7\u522b\u9700\u8981\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5176\u672c\u8eab\u4ee3\u7801\u91cf\u5c11\u4e14\u597d\u7406\u89e3\uff0c\u4f46\u96be\u5728\u5e94\u7528\u3002\u76ee\u524d\u770b\u6765\u300c\u5e76\u67e5\u96c6\u300d\u4e0d\u662f\u666e\u901a\u516c\u53f8\u9762\u8bd5\u548c\u7b14\u8bd5\u7684\u8003\u70b9\uff0c\u8bf7\u5927\u5bb6\u5408\u7406\u5206\u914d\u65f6\u95f4\u8fdb\u884c\u5b66\u4e60\u3002 \u57fa\u672c\u77e5\u8bc6 \u5e76\u67e5\u96c6\u52a8\u6001\u5904\u7406\u7684 \u4e24\u4e2a\u95ee\u9898 \u8bbe\u8ba1\u5e76\u67e5\u96c6\u7684\u4e24\u79cd\u601d\u60f3 \u300c\u57fa\u4e8e id\u300d\u7684\u601d\u60f3\u5e76\u4e0d\u5e38\u7528\uff0c\u4e86\u89e3\u5373\u53ef\uff0c\u6548\u7387\u592a\u4f4e \u6309\u79e9\u5408\u5e76 \u8def\u5f84\u538b\u7f29 \u54c8\u5e0c\u8868 \u5b9e\u9645\u5229\u7528\u6876\u7684\u4e2a\u6570 \u4e0e \u6876\u7684\u603b\u6570 \u7684\u6bd4\u503c\uff0c\u79f0\u4e3a\u8d1f\u8f7d\u56e0\u5b50\u3002\u5728\u8fd9\u4e2a\u5b9e\u4f8b\u4e2d\uff0c\u8d1f\u8f7d\u56e0\u5b50\u592a\u5c0f\u751a\u81f3\u63a5\u8fd1\u4e8e 0\uff0c\u8fd9\u6837\u7684\u65b9\u6848\u663e\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\u3002 \u6bd4\u8f83\u5408\u7406\u7684\u8d1f\u8f7d\u56e0\u5b50\u662f 0.7\uff0c\u5982\u679c\u6570\u636e\u91cf\u662f 7\uff0c\u5219\u4f1a\u521b\u5efa 10 \u4e2a\u6876\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u968f\u7740\u63d2\u5165\u7684\u6570\u636e\u91cf\u7684\u589e\u52a0\uff0c\u8ba1\u7b97\u673a\u4f1a\u9010\u6e10\u589e\u52a0\u6876\u7684\u4e2a\u6570\uff0c\u5e76\u9009\u62e9\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u4f7f\u5f97\u6570\u636e\u7ecf\u8fc7\u6620\u5c04\u4e4b\u540e\u80fd\u5747\u5300\u5730\u5206\u5e03\u5728\u6876\u4e2d\u3002 \u8bbe\u8ba1\u54c8\u5e0c\u8868 \u89e3\u51b3\u51b2\u7a81\u7684\u529e\u6cd5 \u7ebf\u6027\u8bd5\u63a2\u6cd5 \u5b9e\u9645\u5e94\u7528 \u54c8\u5e0c\u96c6\u5408\u7684\u64cd\u4f5c \u54c8\u5e0c\u96c6\u5408\u662f\u96c6\u5408\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e4b\u4e00\uff0c\u5b83\u662f\u4e00\u79cd\u5b58\u50a8 \u4e0d\u91cd\u590d\u503c \u7684\u6570\u636e\u7ed3\u6784\u3002 #include <unordered_set> int main() { // 1. \u521d\u59cb\u5316\u54c8\u5e0c\u96c6 unordered_set<int> hashset; // 2. \u65b0\u589e\u952e hashset.insert(3); hashset.insert(2); hashset.insert(1); // 3. \u5220\u9664\u952e hashset.erase(2); // 4. \u67e5\u8be2\u952e\u662f\u5426\u5305\u542b\u5728\u54c8\u5e0c\u96c6\u5408\u4e2d if (hashset.count(2) <= 0) { cout << \"\u952e 2 \u4e0d\u5728\u54c8\u5e0c\u96c6\u5408\u4e2d\" << endl; } // 5. \u54c8\u5e0c\u96c6\u5408\u7684\u5927\u5c0f cout << \"\u54c8\u5e0c\u96c6\u5408\u7684\u5927\u5c0f\u4e3a: \" << hashset.size() << endl; // 6. \u904d\u5386\u54c8\u5e0c\u96c6\u5408 for (auto it = hashset.begin(); it != hashset.end(); ++it) { cout << (*it) << \" \"; } cout << \"\u5728\u54c8\u5e0c\u96c6\u5408\u4e2d\" << endl; // 7. \u6e05\u7a7a\u54c8\u5e0c\u96c6\u5408 hashset.clear(); // 8. \u67e5\u770b\u54c8\u5e0c\u96c6\u5408\u662f\u5426\u4e3a\u7a7a if (hashset.empty()) { cout << \"\u54c8\u5e0c\u96c6\u5408\u4e3a\u7a7a\uff01\" << endl; } } # 1. \u521d\u59cb\u5316\u96c6\u5408 hashset = set() # 2. \u65b0\u589e\u952e hashset.add(3) hashset.add(2) hashset.add(1) # 3. \u5220\u9664\u952e hashset.remove(2) # 4. \u67e5\u8be2\u952e\u662f\u5426\u5305\u542b\u5728\u96c6\u5408\u4e2d if (2 not in hashset): print(\"2 \u4e0d\u5728\u96c6\u5408\u4e2d\") # 5. \u96c6\u5408\u7684\u5927\u5c0f print(\"\u96c6\u5408\u7684\u5927\u5c0f\u4e3a\uff1a\", len(hashset)) # 6. \u904d\u5386\u96c6\u5408 for x in hashset: print(x, end=\" \") print(\"\u5728\u96c6\u5408\u4e2d\") # 7. \u6e05\u7a7a\u96c6\u5408 hashset.clear() print(\"\u96c6\u5408\u7684\u5927\u5c0f\u4e3a\uff1a\", len(hashset)) \u4f7f\u7528\u54c8\u5e0c\u96c6\u5408\u67e5\u91cd \u6211\u4eec\u77e5\u9053\uff0c\u7531\u4e8e\u54c8\u5e0c\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f \u4e0d\u91cd\u590d\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u96c6\u5408\u6765\u5224\u65ad\u662f\u5426\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u4e2d\u662f\u5426\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002 \u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u95ee\u9898\uff0c\u7528\u6765\u5224\u65ad\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u662f\u5426\u5305\u542b\u91cd\u590d\u5143\u7d20\uff0c\u6216\u8005\u5bf9\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u8fdb\u884c \u53bb\u91cd \u7684\u64cd\u4f5c\u3002 \u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u7b80\u5355\u601d\u8def\u662f\u904d\u5386\u8be5\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u5c06\u503c\u63d2\u5165\u5230\u54c8\u5e0c\u96c6\u5408\u4e2d\u3002\u5982\u679c\u8be5\u503c\u5df2\u7ecf\u5b58\u5728\u4e8e\u54c8\u5e0c\u96c6\u5408\u4e2d\uff0c\u8868\u660e\u53d1\u751f\u4e86\u91cd\u590d\u3002 /* * \u4f7f\u7528\u54c8\u5e0c\u96c6\u5408\u5bfb\u627e\u91cd\u590d\u5143\u7d20\u7684\u6a21\u677f */ bool findDuplicates(vector<Type>& keys) { // \u5c06 type \u66ff\u6362\u4e3a keys \u7684\u5b9e\u9645\u7c7b\u578b unordered_set<Type> hashset; for (Type key : keys) { if (hashset.count(key) > 0) { return true; } hashset.insert(key); } return false; } \u54c8\u5e0c\u6620\u5c04 \u5806 \u5728\u8ba1\u7b97\u673a\u7684\u4e16\u754c\u91cc\uff0c\u5f88\u591a\u7684\u5e94\u7528\u573a\u666f\u53ea\u9700\u8981\u53d6\u5f97\u5f53\u524d\u6570\u636e\u96c6\u4e2d\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u5bf9\u4e8e\u6570\u636e\u96c6\u4e2d\u5176\u5b83\u6570\u636e\uff0c\u5e76\u4e0d\u9700\u8981\u4ed6\u4eec\u4e00\u5b9a\u662f\u6709\u5e8f\u7684\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u9ad8\u6548\u5feb\u901f\u5730\u53d6\u5f97\u5f53\u524d\u6570\u636e\u96c6\u4e2d\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\u5143\u7d20\u5462\uff1f\u6b64\u65f6\uff0c\u65b0\u7684\u6570\u636e\u7ed3\u6784\u300c\u5806\u300d\u5c31\u8bde\u751f\u4e86\u3002 \u5728\u672c LeetBook \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u300c\u5806\u300d\uff0c\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\uff1a \u7406\u89e3\u300c\u5806\u300d\u6570\u636e\u7ed3\u6784\u548c\u5b9e\u73b0\uff1b \u7406\u89e3\u300c\u6700\u5927\u5806\u300d\u548c\u300c\u6700\u5c0f\u5806\u300d\u7684\u57fa\u7840\u6982\u5ff5\u548c\u6838\u5fc3\u64cd\u4f5c\uff1b \u7406\u89e3\u300c\u5806\u6392\u5e8f\u300d\uff1b \u7406\u89e3\u300c\u5806\u300d\u7684\u5e94\u7528\u573a\u666f\uff1b \u80fd\u591f\u8fd0\u7528\u300c\u5806\u300d\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u3002 \u5b9a\u4e49 \u5728\u5806\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u5e38\u7528\u5806\u7684\u63d2\u5165\u3001\u5220\u9664\u3001\u83b7\u53d6\u5806\u9876\u5143\u7d20\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u6570\u7ec4\u5b9e\u73b0\u5806\u3002\u6211\u4eec\u5c06\u5806\u4e2d\u7684\u5143\u7d20\u4ee5\u4e8c\u53c9\u6811\u7684\u5f62\u5f0f\u5b58\u5165\u5728\u6570\u7ec4\u4e2d\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c06\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\u6574\u6570\u7c7b\u578b\u7684\u300c\u6700\u5927\u5806\u300d\u548c\u300c\u6700\u5c0f\u5806\u300d\uff0c\u4ec5\u4f9b\u5927\u5bb6\u53c2\u8003\uff08\u5728\u5b9e\u9645\u89e3\u9898\u6216\u8005\u5de5\u4f5c\u4e2d\uff0c\u4e00\u822c\u5f88\u5c11\u9700\u8981\u81ea\u5df1\u53bb\u5b9e\u73b0\u5806\uff09 # \u300c\u6700\u5927\u5806\u300d\u7684\u5b9e\u73b0 import sys class MaxHeap: def __init__(self, heapSize): # heapSize\u7528\u4e8e\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6570\u7ec4\u5728\u521b\u5efa\u7684\u65f6\u5019\u81f3\u5c11\u9700\u8981\u6307\u660e\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570 self.heapSize = heapSize # \u4f7f\u7528\u6570\u7ec4\u521b\u5efa\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7136\u540e\u4f7f\u7528\u4e8c\u53c9\u6811\u6784\u5efa\u4e00\u4e2a\u300c\u5806\u300d self.maxheap = [0]*(heapSize+1) # realSize\u7528\u4e8e\u8bb0\u5f55\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 self.realSize = 0 # \u6dfb\u52a0\u5143\u7d20\u51fd\u6570 def add(self, element): self.realSize += 1 # \u5982\u679c\u300c\u5806\u300d\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u5927\u4e8e\u4e00\u5f00\u59cb\u8bbe\u5b9a\u7684\u6570\u7ec4\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u300cAdd too many elements\u300d if self.realSize > self.heapSize: print(\"Add too many elements!\") self.realSize -= 1 return # \u5c06\u6dfb\u52a0\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d self.maxheap[self.realSize] = element # \u65b0\u589e\u5143\u7d20\u7684\u7d22\u5f15\u4f4d\u7f6e index = self.realSize # \u65b0\u589e\u5143\u7d20\u7684\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e # \u6ce8\u610f\uff0c\u5982\u679c\u7528\u6570\u7ec4\u8868\u793a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u6839\u7ed3\u70b9\u5b58\u50a8\u5728\u6570\u7ec4\u7684\u7d22\u5f151\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e/2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2+1\u300d parent = index // 2 # \u5f53\u6dfb\u52a0\u7684\u5143\u7d20\u5927\u4e8e\u7236\u8282\u70b9\u65f6\uff0c\u9700\u8981\u5c06\u7236\u8282\u70b9\u7684\u503c\u548c\u65b0\u589e\u5143\u7d20\u7684\u503c\u4ea4\u6362 while (self.maxheap[index] > self.maxheap[parent] and index > 1): self.maxheap[parent], self.maxheap[index] = self.maxheap[index], self.maxheap[parent] index = parent parent = index // 2 # \u83b7\u53d6\u5806\u9876\u5143\u7d20\u51fd\u6570 def peek(self): return self.maxheap[1] # \u5220\u9664\u5806\u9876\u5143\u7d20\u51fd\u6570 def pop(self): # \u5982\u679c\u5f53\u524d\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c \u5219\u8fd4\u56de\u300cDon't have any element\u300d if self.realSize < 1: print(\"Don't have any element!\") return sys.maxsize else: # \u5f53\u524d\u300c\u5806\u300d\u4e2d\u542b\u6709\u5143\u7d20 # self.realSize >= 1 removeElement = self.maxheap[1] # \u5c06\u300c\u5806\u300d\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u5806\u9876\u5143\u7d20 self.maxheap[1] = self.maxheap[self.realSize] self.realSize -= 1 index = 1 # \u5f53\u5220\u9664\u7684\u5143\u7d20\u4e0d\u662f\u5b69\u5b50\u8282\u70b9\u65f6 while (index < self.realSize and index <= self.realSize // 2): # \u88ab\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9 left = index * 2 # \u88ab\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9 right = (index * 2) + 1 # \u5f53\u5220\u9664\u8282\u70b9\u7684\u5143\u7d20\u5c0f\u4e8e \u5de6\u5b69\u5b50\u8282\u70b9\u6216\u8005\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u4ee3\u8868\u8be5\u5143\u7d20\u7684\u503c\u5c0f\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u8be5\u5143\u7d20\u4e0e\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u503c\u8fdb\u884c\u4ea4\u6362 if (self.maxheap[index] < self.maxheap[left] or self.maxheap[index] < self.maxheap[right]): if self.maxheap[left] > self.maxheap[right]: self.maxheap[left], self.maxheap[index] = self.maxheap[index], self.maxheap[left] index = left else: self.maxheap[right], self.maxheap[index] = self.maxheap[index], self.maxheap[right] index = right else: break return removeElement # \u8fd4\u56de\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 def size(self): return self.realSize def toString(self): print(self.maxheap[1 : self.realSize+1]) if __name__ == \"__main__\": # \u6d4b\u8bd5\u7528\u4f8b maxHeap = MaxHeap(5) maxHeap.add(1) maxHeap.add(2) maxHeap.add(3) # [3,1,2] maxHeap.toString() # 3 print(maxHeap.peek()) # 3 print(maxHeap.pop()) # 2 print(maxHeap.pop()) # 1 print(maxHeap.pop()) maxHeap.add(4) maxHeap.add(5) # [5,4] maxHeap.toString() \u4f5c\u8005\uff1a\u7231\u5b66\u4e60\u7684\u9972\u517b\u5458 \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/heap/evmih5/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 # \u300c\u6700\u5c0f\u5806\u300d\u7684\u5b9e\u73b0 import sys class MinHeap: def __init__(self, heapSize): # heapSize\u7528\u4e8e\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6570\u7ec4\u5728\u521b\u5efa\u7684\u65f6\u5019\u81f3\u5c11\u9700\u8981\u6307\u660e\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570 self.heapSize = heapSize # \u4f7f\u7528\u6570\u7ec4\u521b\u5efa\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7136\u540e\u4f7f\u7528\u4e8c\u53c9\u6811\u6784\u5efa\u4e00\u4e2a\u300c\u5806\u300d self.minheap = [0]*(heapSize+1) # realSize\u7528\u4e8e\u8bb0\u5f55\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 self.realSize = 0 # \u6dfb\u52a0\u5143\u7d20\u51fd\u6570 def add(self, element): self.realSize += 1 # \u5982\u679c\u300c\u5806\u300d\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u5927\u4e8e\u4e00\u5f00\u59cb\u8bbe\u5b9a\u7684\u6570\u7ec4\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u300cAdd too many elements\u300d if self.realSize > self.heapSize: print(\"Add too many elements!\") self.realSize -= 1 return # \u5c06\u6dfb\u52a0\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d self.minheap[self.realSize] = element # \u65b0\u589e\u5143\u7d20\u7684\u7d22\u5f15\u4f4d\u7f6e index = self.realSize # \u65b0\u589e\u5143\u7d20\u7684\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e # \u6ce8\u610f\uff0c\u5982\u679c\u7528\u6570\u7ec4\u8868\u793a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u6839\u7ed3\u70b9\u5b58\u50a8\u5728\u6570\u7ec4\u7684\u7d22\u5f151\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e/2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2+1\u300d parent = index // 2 # \u5f53\u6dfb\u52a0\u7684\u5143\u7d20\u5c0f\u4e8e\u7236\u8282\u70b9\u65f6\uff0c\u9700\u8981\u5c06\u7236\u8282\u70b9\u7684\u503c\u548c\u65b0\u589e\u5143\u7d20\u7684\u503c\u4ea4\u6362 while (self.minheap[index] < self.minheap[parent] and index > 1): self.minheap[parent], self.minheap[index] = self.minheap[index], self.minheap[parent] index = parent parent = index // 2 # \u83b7\u53d6\u5806\u9876\u5143\u7d20\u51fd\u6570 def peek(self): return self.minheap[1] # \u5220\u9664\u5806\u9876\u5143\u7d20\u51fd\u6570 def pop(self): # \u5982\u679c\u5f53\u524d\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c \u5219\u8fd4\u56de\u300cDon't have any element\u300d if self.realSize < 1: print(\"Don't have any element!\") return sys.maxsize else: # \u5f53\u524d\u300c\u5806\u300d\u4e2d\u542b\u6709\u5143\u7d20 # self.realSize >= 1 removeElement = self.minheap[1] # \u5c06\u300c\u5806\u300d\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u5806\u9876\u5143\u7d20 self.minheap[1] = self.minheap[self.realSize] self.realSize -= 1 index = 1 # \u5f53\u5220\u9664\u7684\u5143\u7d20\u4e0d\u662f\u5b69\u5b50\u8282\u70b9\u65f6 while (index < self.realSize and index <= self.realSize // 2): # \u88ab\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9 left = index * 2 # \u88ab\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9 right = (index * 2) + 1 # \u5f53\u5220\u9664\u8282\u70b9\u7684\u5143\u7d20\u5927\u4e8e \u5de6\u5b69\u5b50\u8282\u70b9\u6216\u8005\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u4ee3\u8868\u8be5\u5143\u7d20\u7684\u503c\u5927\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u8be5\u5143\u7d20\u4e0e\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u503c\u8fdb\u884c\u4ea4\u6362 if (self.minheap[index] > self.minheap[left] or self.minheap[index] > self.minheap[right]): if self.minheap[left] < self.minheap[right]: self.minheap[left], self.minheap[index] = self.minheap[index], self.minheap[left] index = left else: self.minheap[right], self.minheap[index] = self.minheap[index], self.minheap[right] index = right else: break return removeElement # \u8fd4\u56de\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 def size(self): return self.realSize def toString(self): print(self.minheap[1 : self.realSize+1]) if __name__ == \"__main__\": # \u6d4b\u8bd5\u7528\u4f8b minHeap = MinHeap(5) minHeap.add(3) minHeap.add(1) minHeap.add(2) # [1,3,2] minHeap.toString() # 1 print(minHeap.peek()) # 1 print(minHeap.pop()) # 2 print(minHeap.pop()) # 3 print(minHeap.pop()) minHeap.add(4) minHeap.add(5) # [4,5] minHeap.toString() \u4f5c\u8005\uff1a\u7231\u5b66\u4e60\u7684\u9972\u517b\u5458 \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/heap/evmih5/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5806\u7684\u5e38\u7528\u65b9\u6cd5 \u521b\u5efa \u5806 \u6307\u7684\u662f\u521d\u59cb\u5316\u4e00\u4e2a\u5806\u5b9e\u4f8b\u3002\u6240\u6709\u5806\u65b9\u6cd5\u7684\u524d\u63d0\u5fc5\u987b\u662f\u5728\u5806\u5b9e\u4f8b\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u9996\u5148\u521b\u5efa\u4e00\u4e2a \u5806 \u5b9e\u4f8b\uff0c\u7136\u540e\u624d\u80fd\u4f7f\u7528 \u5806 \u7684\u5e38\u7528\u65b9\u6cd5\u3002\u5728\u521b\u5efa \u5806 \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c \u5806\u5316 \u64cd\u4f5c\u3002\u5806\u5316 \u5c31\u662f\u5c06\u4e00\u7ec4\u6570\u636e\u53d8\u6210 \u5806 \u7684\u8fc7\u7a0b\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(N)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(N)\u3002 import heapq # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6700\u5c0f\u5806 minHeap = [] heapq.heapify(minHeap) # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6700\u5927\u5806 # \u7531\u4e8ePython\u4e2d\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u6700\u5927\u5806\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6700\u5927\u5806\u3002 # \u521b\u5efa\u5e26\u521d\u59cb\u503c\u7684\u300c\u5806\u300d\uff0c \u6216\u8005\u79f0\u4e3a\u300c\u5806\u5316\u300d\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u300c\u5806\u300d\u4e3a\u300c\u6700\u5c0f\u5806\u300d heapWithValues = [3,1,2] heapq.heapify(heapWithValues) # \u521b\u5efa\u6700\u5927\u5806\u6280\u5de7 # Python\u4e2d\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u6700\u5927\u5806\u3002 # \u4f46\u6211\u4eec\u53ef\u4ee5\u5c06[\u6bcf\u4e2a\u5143\u7d20*-1]\uff0c\u518d\u5c06\u65b0\u5143\u7d20\u96c6\u8fdb\u884c\u300c\u5806\u5316\u300d\u64cd\u4f5c\u3002\u6b64\u65f6\uff0c\u5806\u9876\u5143\u7d20\u662f\u65b0\u7684\u5143\u7d20\u96c6\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u53ef\u4ee5\u8f6c\u6362\u6210\u539f\u59cb\u5143\u7d20\u96c6\u7684\u6700\u5927\u503c\u3002 # \u793a\u4f8b maxHeap = [1,2,3] maxHeap = [-x for x in maxHeap] heapq.heapify(maxHeap) # \u6b64\u65f6\u7684maxHeap\u7684\u5806\u9876\u5143\u7d20\u662f-3 # \u5c06-3\u8f6c\u6362\u4e3a\u539f\u6765\u7684\u5143\u7d203\uff0c\u65e2\u53ef\u83b7\u5f97\u539f\u6765\u7684maxHeap\u4e2d\u6700\u5927\u7684\u503c\u662f3 \u4f5c\u8005\uff1a\u7231\u5b66\u4e60\u7684\u9972\u517b\u5458 \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/heap/en1ztc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5806\u7684\u5e94\u7528 \u89e3\u6cd52 \u56fe \u4f60\u5c06\u4e86\u89e3\u5230\uff1a \u5e76\u67e5\u96c6\uff08 Union Find \uff09\u6570\u636e\u7ed3\u6784 \u300c\u56fe\u300d\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u300c\u56fe\u300d\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u6700\u5c0f\u751f\u6210\u6811\u76f8\u5173\u5b9a\u7406\u548c\u7b97\u6cd5 \u5207\u5206\u5b9a\u7406 Kruskal \u7b97\u6cd5 Prim \u7b97\u6cd5 \u5355\u6e90\u6700\u77ed\u8def\u5f84\u76f8\u5173\u7b97\u6cd5 Dijkstra \u7b97\u6cd5 Bellman-Ford \u7b97\u6cd5 \u62d3\u6251\u6392\u5e8f\u4e4b Kahn \u7b97\u6cd5 \u56fe\u7684\u5b58\u50a8 \u77e9\u9635 \u90bb\u63a5\u8868 \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u6cd5 \u5e76\u67e5\u96c6 \u4ee5\u4e0b\u662f Quick Find \u7684\u300c\u5e76\u67e5\u96c6\u300d\u5b9e\u73b0\u4ee3\u7801 // UnionFind.class public class UnionFind { int root[]; public UnionFind(int size) { root = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; } } public int find(int x) { return root[x]; } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { for (int i = 0; i < root.length; i++) { if (root[i] == rootY) { root[i] = rootX; } } } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u4ee5\u4e0b\u662f Quick Union \u7684\u300c\u5e76\u67e5\u96c6\u300d\u5b9e\u73b0\u4ee3\u7801 public class UnionFind { int root[]; public UnionFind(int size) { root = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; } } public int find(int x) { while (x != root[x]) { x = root[x]; } return x; } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { root[rootY] = rootX; } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u6309\u79e9\u5408\u5e76 // UnionFind.class public class UnionFind { int root[]; int rank[]; public UnionFind(int size) { root = new int[size]; rank = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; rank[i] = 1; } } public int find(int x) { while (x != root[x]) { x = root[x]; } return x; } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { if (rank[rootX] > rank[rootY]) { root[rootY] = rootX; } else if (rank[rootX] < rank[rootY]) { root[rootX] = rootY; } else { root[rootY] = rootX; rank[rootX] += 1; } } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u8def\u5f84\u538b\u7f29\u4f18\u5316 // UnionFind.class public class UnionFind { int root[]; public UnionFind(int size) { root = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; } } public int find(int x) { if (x == root[x]) { return x; } return root[x] = find(root[x]); } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { root[rootY] = rootX; } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u57fa\u4e8e\u8def\u5f84\u538b\u7f29\u7684\u6309\u79e9\u5408\u5e76\u4f18\u5316\u7684\u300c\u5e76\u67e5\u96c6\u300d \u8fd9\u4e2a\u4f18\u5316\u5c31\u662f\u5c06\u300c\u8def\u5f84\u538b\u7f29\u4f18\u5316\u300d\u548c\u300c\u6309\u79e9\u5408\u5e76\u4f18\u5316\u300d\u5408\u5e76\u540e\u5f62\u6210\u7684\u300c\u5e76\u67e5\u96c6\u300d\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 // UnionFind.class public class UnionFind { int root[]; // \u6dfb\u52a0\u4e86 rank \u6570\u7ec4\u6765\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u9ad8\u5ea6\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u9876\u70b9\u7684\u300c\u79e9\u300d int rank[]; public UnionFind(int size) { root = new int[size]; rank = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; rank[i] = 1; // \u4e00\u5f00\u59cb\u6bcf\u4e2a\u9876\u70b9\u7684\u521d\u59cb\u300c\u79e9\u300d\u4e3a1\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u6709\u81ea\u5df1\u672c\u8eab\u7684\u4e00\u4e2a\u9876\u70b9\u3002 } } // \u6b64\u5904\u7684 find \u51fd\u6570\u4e0e\u8def\u5f84\u538b\u4f18\u5316\u7f29\u7248\u672c\u7684 find \u51fd\u6570\u4e00\u6837\u3002 public int find(int x) { if (x == root[x]) { return x; } return root[x] = find(root[x]); } // \u6309\u79e9\u5408\u5e76\u4f18\u5316\u7684 union \u51fd\u6570 public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { if (rank[rootX] > rank[rootY]) { root[rootY] = rootX; } else if (rank[rootX] < rank[rootY]) { root[rootX] = rootY; } else { root[rootY] = rootX; rank[rootX] += 1; } } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u6df1\u5ea6\u4f18\u5148 \u904d\u5386\u6240\u6709\u9876\u70b9 - \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u904d\u5386\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u8def\u5f84 - \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u904d\u5386\u6240\u6709\u9876\u70b9 - \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u6c42\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84 - \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u6700\u5c0f\u751f\u6210\u6811\u76f8\u5173\u7b97\u6cd5 \u5207\u5206\u5b9a\u7406 Kruskal \u7b97\u6cd5 \u300cKruskal \u7b97\u6cd5\u300d\u662f\u6c42\u89e3\u300c\u52a0\u6743\u65e0\u5411\u56fe\u300d\u7684\u300c\u6700\u5c0f\u751f\u6210\u6811\u300d\u7684\u4e00\u79cd\u7b97\u6cd5 Prim \u7b97\u6cd5 \u300cPrim \u7b97\u6cd5\u300d\u662f\u6c42\u89e3\u300c\u52a0\u6743\u65e0\u5411\u56fe\u300d\u7684\u300c\u6700\u5c0f\u751f\u6210\u6811\u300d\u7684\u53e6\u4e00\u79cd\u7b97\u6cd5\u3002 \u8fd9\u4e24\u4e2a\u90fd\u662f\u8ba1\u7b97\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5 \u5355\u6e90\u6700\u77ed\u8def\u5f84\u76f8\u5173\u7b97\u6cd5 \u6211\u4eec\u5c06\u5b66\u4e60\u4e24\u4e2a\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u7684\u7b97\u6cd5\uff1a Dijkstra \u7b97\u6cd5 Bellman-Ford \u7b97\u6cd5 \u5176\u4e2d\uff0c\u300cDijkstra \u7b97\u6cd5\u300d\u53ea\u80fd\u89e3\u51b3\u52a0\u6743\u6709\u5411\u56fe\u7684\u6743\u91cd\u4e3a\u975e\u8d1f\u6570\u7684\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u3002\u300cBellman-Ford \u7b97\u6cd5\u300d\u80fd\u89e3\u51b3\u52a0\u6743\u6709\u5411\u56fe\u4e2d\u5305\u542b\u6743\u91cd\u4e3a\u8d1f\u6570\u7684\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u3002 Dijkstra \u7b97\u6cd5 \u300cDijkstra \u7b97\u6cd5\u300d\u89e3\u51b3\u7684\u662f\u52a0\u6743\u6709\u5411\u56fe\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\uff0c\u5176\u4e2d\u8be5\u56fe\u7684\u6240\u6709\u6743\u91cd\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\u3002 Bellman-Ford \u7b97\u6cd5 \u5728\u524d\u9762\u4ecb\u7ecd\u7684\u300cDijkstra \u7b97\u6cd5\u300d\u4e2d\uff0c\u5b83\u53ea\u80fd\u89e3\u51b3\u6ca1\u6709\u300c\u8d1f\u6743\u56fe\u300d\u7684\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u3002\u5982\u679c\u9047\u5230\u6709\u300c\u8d1f\u6743\u56fe\u300d\uff0c\u5e94\u8be5\u600e\u4e48\u89e3\u51b3\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u5462\uff1f\u90a3\u5c31\u662f\u8fd9\u4e00\u5c0f\u8282\u7684\u91cd\u70b9\uff1a\u300cBellman-Ford \u7b97\u6cd5\u300d\u3002 \u57fa\u4e8e\u300c\u961f\u5217\u300d\u4f18\u5316\u7684 Bellman-Ford \u7b97\u6cd5 \u2014 SPFA \u7b97\u6cd5 \u5728\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86\u300cBellman-Ford \u7b97\u6cd5\u300d\uff0c\u4e5f\u540c\u65f6\u5f15\u8fdb\u4e86\u4f18\u5316\u7248\u7684 Bellman-Ford \u7b97\u6cd5\uff1a\u9488\u5bf9\u4e00\u4e2a\u65e0\u8d1f\u6743\u73af\u7684\u56fe\u6765\u8bf4\uff0c\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c N-1 \u6b21\u7684\u677e\u5f1b\u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u8d77\u70b9\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5728\u9009\u62e9\u8fb9\u904d\u5386\u7684\u65f6\u5019\u4f1a\u505a\u5f88\u591a\u65e0\u7528\u529f\uff0c\u8fd9\u65e0\u7591\u4f1a\u589e\u52a0\u6211\u4eec\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u62d3\u6251\u6392\u5e8f\u4e4b Kahn \u7b97\u6cd5 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u6811 \u56fe \u904d\u5386\u53ef\u4ee5\u7528\u4e8e\u641c\u7d22\uff0c\u601d\u60f3\u662f\u7a77\u4e3e\uff0c\u904d\u5386\u662f\u5b9e\u73b0\u641c\u7d22\u7684\u624b\u6bb5\uff1b \u6811\u7684\u300c\u524d\u3001\u4e2d\u3001\u540e\u300d\u5e8f\u904d\u5386\u90fd\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff1b \u6811\u7684\u540e\u5e8f\u904d\u5386\u5f88\u91cd\u8981\uff1b \u7531\u4e8e\u56fe\u4e2d\u5b58\u5728\u73af\uff08\u56de\u8def\uff09\uff0c\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u9700\u8981\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u4ee5\u907f\u514d\u91cd\u590d\u8bbf\u95ee\uff1b \u904d\u5386\u662f\u4e00\u79cd\u7b80\u5355\u3001\u6734\u7d20\u4f46\u662f\u5f88\u91cd\u8981\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u5f88\u591a\u6811\u548c\u56fe\u7684\u95ee\u9898\u5c31\u662f\u5728\u6811\u548c\u56fe\u4e0a\u6267\u884c\u4e00\u6b21\u904d\u5386\uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5f97\u5230\u9700\u8981\u7ed3\u679c\uff0c\u533a\u522b\u5728\u4e8e\u4e3a\u4e86\u89e3\u51b3\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u5728\u904d\u5386\u7684\u65f6\u5019\u4f20\u9012\u4e86\u4e0d\u540c\u7684 \u4e0e\u95ee\u9898\u76f8\u5173 \u7684\u6570\u636e\u3002 \u6808 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f \u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06 \u5f53\u524d\u904d\u5386\u5230\u7684\u7ed3\u70b9 \u7684\u76f8\u90bb\u7ed3\u70b9 \u6682\u65f6\u4fdd\u5b58 \u8d77\u6765\uff0c\u4ee5\u4fbf\u5728\u56de\u9000\u7684\u65f6\u5019\u53ef\u4ee5\u7ee7\u7eed\u8bbf\u95ee\u5b83\u4eec\u3002\u904d\u5386\u5230\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5448\u73b0\u300c\u540e\u8fdb\u5148\u51fa\u300d\u7684\u7279\u70b9\uff0c\u56e0\u6b64 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u901a\u8fc7\u300c\u6808\u300d\u5b9e\u73b0\u3002 \u518d\u8005\uff0c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6709\u660e\u663e\u7684\u9012\u5f52\u7ed3\u6784\u3002\u6211\u4eec\u77e5\u9053\u652f\u6301\u9012\u5f52\u5b9e\u73b0\u7684\u6570\u636e\u7ed3\u6784\u4e5f\u662f\u6808\u3002\u56e0\u6b64\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u5199\u9012\u5f52\u65b9\u6cd5\uff1b \u7f16\u5199\u6808\uff0c\u901a\u8fc7\u8fed\u4ee3\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u5e94\u7528 \u83b7\u5f97\u56fe\uff08\u6811\uff09\u7684\u4e00\u4e9b\u5c5e\u6027 \u5728\u4e00\u4e9b\u6811\u7684\u95ee\u9898\u4e2d\uff0c\u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u83b7\u5f97\u6811\u7684\u67d0\u4e9b\u5c5e\u6027\u3002\u4f8b\u5982\uff1a\u300c\u4e8c\u53c9\u6811\u300d\u7684\u6700\u5927\u6df1\u5ea6\u3001\u300c\u4e8c\u53c9\u6811\u300d\u7684\u6700\u5c0f\u6df1\u5ea6\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u3001\u662f\u5426 BST\u3002\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u901a\u5e38\u9700\u8981\u8bbe\u8ba1\u4e00\u4e9b\u53d8\u91cf\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u66f4\u65b0\u8bbe\u8ba1\u7684\u53d8\u91cf\u7684\u503c \u8ba1\u7b97\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf import java.util.ArrayList; import java.util.List; public class Solution { public int countComponents(int n, int[][] edges) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<>(); } // \u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u53cc\u5411\u5f15\u7528 for (int[] edge : edges) { adj[edge[0]].add(edge[1]); adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 int count = 0; boolean[] visited = new boolean[n]; for (int i = 0; i < n; i++) { if (!visited[i]) { dfs(adj, i, visited); count++; } } return count; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param visited \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 */ private void dfs(List<Integer>[] adj, int u, boolean[] visited) { visited[u] = true; List<Integer> successors = adj[u]; for (int successor : successors) { if (!visited[successor]) { dfs(adj, successor, visited); } } } } \u68c0\u6d4b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u73af \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u73af\u7684\u68c0\u6d4b\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u9700\u8981\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u4ee5\u4fbf\u5728\u9047\u5230\u5df2\u8bbf\u95ee\u7684\u8282\u70b9\u65f6\u5224\u65ad\u662f\u5426\u5f62\u6210\u73af\u3002 import java.util.ArrayList; import java.util.List; public class Solution { public boolean hasCycle(int n, int[][] edges) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<>(); } // \u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u53cc\u5411\u5f15\u7528 for (int[] edge : edges) { adj[edge[0]].add(edge[1]); adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 boolean[] visited = new boolean[n]; for (int i = 0; i < n; i++) { if (!visited[i]) { if (dfs(adj, i, visited, -1)) { return true; } } } return false; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param visited \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 * @param parent \u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u8282\u70b9 */ private boolean dfs(List<Integer>[] adj, int u, boolean[] visited, int parent) { visited[u] = true; List<Integer> successors = adj[u]; for (int successor : successors) { if (!visited[successor]) { if (dfs(adj, successor, visited, u)) { return true; } } else if (successor != parent) { // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5e76\u4e14\u4e0d\u662f\u7236\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u5b58\u5728\u73af return true; } } return false; } } \u4e8c\u5206\u56fe\u68c0\u6d4b \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u4e8c\u5206\u56fe\u7684\u68c0\u6d4b\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7ed9\u6bcf\u4e2a\u8282\u70b9\u67d3\u8272\uff0c\u4f7f\u7528\u4e24\u79cd\u989c\u8272\u4ea4\u66ff\u7740\u8272\uff0c\u5982\u679c\u53d1\u73b0\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u989c\u8272\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u8be5\u56fe\u4e0d\u662f\u4e8c\u5206\u56fe\u3002 import java.util.ArrayList; import java.util.List; public class Solution { public boolean isBipartite(int n, int[][] edges) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<>(); } // \u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u53cc\u5411\u5f15\u7528 for (int[] edge : edges) { adj[edge[0]].add(edge[1]); adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 int[] color = new int[n]; for (int i = 0; i < n; i++) { if (color[i] == 0) { if (!dfs(adj, i, color, 1)) { return false; } } } return true; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param color \u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u989c\u8272 * @param c \u5f53\u524d\u8282\u70b9\u7684\u989c\u8272 */ private boolean dfs(List<Integer>[] adj, int u, int[] color, int c) { color[u] = c; List<Integer> successors = adj[u]; for (int successor : successors) { if (color[successor] == 0) { // \u5982\u679c\u76f8\u90bb\u8282\u70b9\u672a\u88ab\u67d3\u8272\uff0c\u5219\u7ee7\u7eed\u6df1\u5ea6\u4f18\u5148\u904d\u5386 if (!dfs(adj, successor, color, 3 - c)) { return false; } } else if (color[successor] == c) { // \u5982\u679c\u76f8\u90bb\u8282\u70b9\u5df2\u88ab\u67d3\u8272\uff0c\u5e76\u4e14\u989c\u8272\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u4e0d\u662f\u4e8c\u5206\u56fe return false; } } return true; } } \u62d3\u6251\u6392\u5e8f \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u62d3\u6251\u6392\u5e8f\u662f\u5c06\u56fe\u4e2d\u7684\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e00\u6761\u6709\u5411\u8fb9 (u, v)\uff0c\u9876\u70b9 u \u5728\u9876\u70b9 v \u4e4b\u524d\u3002\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u6216 Kahn \u7b97\u6cd5\u5b9e\u73b0\u3002 \u65b9\u6cd5\u4e00\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09 import java.util.ArrayList; import java.util.List; public class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[numCourses]; for (int i = 0; i < numCourses; i++) { adj[i] = new ArrayList<>(); } for (int[] edge : prerequisites) { adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 boolean[] visited = new boolean[numCourses]; boolean[] onPath = new boolean[numCourses]; List<Integer> result = new ArrayList<>(); for (int i = 0; i < numCourses; i++) { if (!visited[i]) { if (dfs(adj, i, visited, onPath, result)) { return new int[0]; // \u6709\u73af\uff0c\u65e0\u6cd5\u5b8c\u6210\u62d3\u6251\u6392\u5e8f } } } // \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u6570\u7ec4\u5e76\u8fd4\u56de int[] order = new int[result.size()]; for (int i = 0; i < result.size(); i++) { order[i] = result.get(result.size() - 1 - i); } return order; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param visited \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 * @param onPath \u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9 * @param result \u5b58\u653e\u62d3\u6251\u6392\u5e8f\u7ed3\u679c */ private boolean dfs(List<Integer>[] adj, int u, boolean[] visited, boolean[] onPath, List<Integer> result) { visited[u] = true; onPath[u] = true; List<Integer> successors = adj[u]; for (int successor : successors) { if (!visited[successor]) { if (dfs(adj, successor, visited, onPath, result)) { return true; } } else if (onPath[successor]) { // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u5728\u5f53\u524d\u8def\u5f84\u4e0a\uff0c\u5219\u8bf4\u660e\u5b58\u5728\u73af return true; } } onPath[u] = false; result.add(u); return false; } } \u65b9\u6cd5\u4e8c\uff1aKahn \u7b97\u6cd5 import java.util.ArrayList; import java.util.LinkedList; import java.util.List; import java.util.Queue; public class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[numCourses]; int[] inDegree = new int[numCourses]; for (int i = 0; i < numCourses; i++) { adj[i] = new ArrayList<>(); } for (int[] edge : prerequisites) { adj[edge[1]].add(edge[0]); inDegree[edge[0]]++; } // \u7b2c 2 \u6b65\uff1a\u4f7f\u7528\u961f\u5217\u8fdb\u884c\u62d3\u6251\u6392\u5e8f Queue<Integer> queue = new LinkedList<>(); for (int i = 0; i < numCourses; i++) { if (inDegree[i] == 0) { queue.offer(i); } } int[] order = new int[numCourses]; int index = 0; while (!queue.isEmpty()) { int u = queue.poll(); order[index++] = u; List<Integer> successors = adj[u]; for (int successor : successors) { inDegree[successor]--; if (inDegree[successor] == 0) { queue.offer(successor); } } } // \u5982\u679c\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u5305\u542b\u6240\u6709\u8bfe\u7a0b\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\uff0c\u5426\u5219\u8fd4\u56de\u7a7a\u6570\u7ec4 return index == numCourses ? order : new int[0]; } } \u56de\u6eaf\u7b97\u6cd5 \u8ba1\u7b97\u673a\u64c5\u957f\u505a\u7684\u4e8b\u60c5\u662f\u300c\u8ba1\u7b97\u300d\uff0c\u5373\u300c\u505a\u91cd\u590d\u7684\u4e8b\u60c5\u300d\u3002\u80fd\u7528\u7f16\u7a0b\u7684\u65b9\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u901a\u5e38 \u7ed3\u6784\u76f8\u540c\uff0c\u95ee\u9898\u89c4\u6a21\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u901a\u5e38\u9700\u8981\u5c06\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u8fdb\u884c\u62c6\u89e3\uff0c\u628a\u4e00\u4e2a\u5927\u95ee\u9898\u62c6\u89e3\u4e3a\u7ed3\u6784\u76f8\u540c\u7684\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\u3002 \u53cb\u60c5\u63d0\u793a\uff1a\u6211\u4eec\u4ecb\u7ecd\u300c\u72b6\u6001\u300d\u548c\u300c\u72b6\u6001\u7a7a\u95f4\u300d\u8fd9\u4e24\u4e2a\u6982\u5ff5\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u5176\u5b9e\u5927\u5bb6\u5728\u5b8c\u6210\u4e86\u4e00\u5b9a\u7ec3\u4e60\u4ee5\u540e\u5bf9\u8fd9\u4e24\u4e2a\u6982\u5ff5\u5c31\u4f1a\u6709\u5f62\u8c61\u7684\u7406\u89e3\u3002\u5982\u679c\u4e00\u5f00\u59cb\u4e0d\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u5b8c\u5168\u53ef\u4ee5\u8df3\u8fc7\u3002 \u300c\u72b6\u6001\u300d\u548c\u300c\u72b6\u6001\u7a7a\u95f4\u300d \u4e3a\u4e86\u533a\u5206\u89e3\u51b3\u95ee\u9898\u7684\u4e0d\u540c\u9636\u6bb5\u3001\u4e0d\u540c\u89c4\u6a21\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bed\u8a00\u63cf\u8ff0\u8fdb\u884c\u4ea4\u6d41\u3002\u5728\u7b97\u6cd5\u7684\u4e16\u754c\u91cc\uff0c\u662f\u901a\u8fc7\u53d8\u91cf\u8fdb\u884c\u63cf\u8ff0\u7684\uff0c\u4e0d\u540c\u7684\u53d8\u91cf\u7684\u503c\u5c31\u4ee3\u8868\u4e86\u89e3\u51b3\u4e00\u4e2a\u5b9e\u9645\u95ee\u9898\u4e2d\u6240\u5904\u7684\u4e0d\u540c\u7684\u9636\u6bb5\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c31\u53eb\u505a\u300c\u72b6\u6001\u53d8\u91cf\u300d\u3002\u6240\u6709\u7684\u72b6\u6001\u53d8\u91cf\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3a\u300c\u72b6\u6001\u7a7a\u95f4\u300d\u3002 \u53cb\u60c5\u63d0\u793a\uff1a\u300c\u7a7a\u95f4\u300d\u8fd9\u4e2a\u8bcd\u7ecf\u5e38\u4ee3\u8868\u7684\u542b\u4e49\u662f\u300c\u6240\u6709\u300d\u3002\u5728\u300a\u7ebf\u6027\u4ee3\u6570\u300b\u91cc\uff0c\u7ebf\u6027\u7a7a\u95f4\uff08\u5411\u91cf\u7a7a\u95f4\uff09\u5c31\u662f\u89c4\u5b9a\u4e86\u300c\u52a0\u6cd5\u300d\u548c\u300c\u6570\u4e58\u300d\uff0c\u4e14\u5bf9\u8fd9\u4e24\u79cd\u8fd0\u7b97\u5c01\u95ed\u7684 \u6240\u6709 \u5143\u7d20\u7684\u96c6\u5408\u3002 \u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8054\u7cfb\u5f62\u6210\u56fe\uff08\u6811\uff09\u7ed3\u6784 \u6211\u4eec\u53ef\u4ee5\u628a\u67d0\u79cd\u89c4\u6a21\u7684\u95ee\u9898\u63cf\u8ff0\u60f3\u8c61\u6210\u4e00\u4e2a\u7ed3\u70b9\u3002\u7531\u4e8e\u89c4\u6a21\u76f8\u8fd1\u7684\u95ee\u9898\u4e4b\u95f4\u5b58\u5728\u8054\u7cfb\uff0c\u6211\u4eec\u628a\u6709\u8054\u7cfb\u7684\u7ed3\u70b9\u4e4b\u95f4\u4f7f\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u56e0\u6b64\u5f62\u6210\u7684\u72b6\u6001\u7a7a\u95f4\u5c31\u662f\u4e00\u5f20\u56fe\u3002 \u6811\u7ed3\u6784\u6709\u552f\u4e00\u7684\u8d77\u59cb\u7ed3\u70b9\uff08\u6839\u7ed3\u70b9\uff09\uff0c\u4e14\u4e0d\u5b58\u5728\u73af\uff0c\u6811\u662f\u7279\u6b8a\u7684\u56fe\u3002\u8fd9\u4e00\u7ae0\u8282\u7edd\u5927\u591a\u6570\u7684\u95ee\u9898\u90fd\u4ece\u4e00\u4e2a\u57fa\u672c\u7684\u95ee\u9898\u51fa\u53d1\uff0c\u62c6\u5206\u6210\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u7ee7\u7eed\u62c6\u5206\u7684\u5b50\u95ee\u9898\u6ca1\u6709\u76f8\u540c\u7684\u90e8\u5206\uff0c\u56e0\u6b64\u8fd9\u4e00\u7ae0\u8282\u9047\u5230\u7684\u7edd\u5927\u591a\u6570\u95ee\u9898\u7684\u72b6\u6001\u7a7a\u95f4\u662f\u4e00\u68f5\u6811\u3002 \u6211\u4eec\u8981\u4e86\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u5c31\u9700\u8981\u901a\u8fc7 \u904d\u5386 \u7684\u65b9\u5f0f\u3002\u6b63\u662f\u56e0\u4e3a\u901a\u8fc7\u904d\u5386\uff0c\u6211\u4eec\u80fd\u591f\u8bbf\u95ee\u5230\u72b6\u6001\u7a7a\u95f4\u7684\u6240\u6709\u7ed3\u70b9\uff0c\u56e0\u6b64\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u95ee\u9898\u7684 \u6240\u6709 \u89e3\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u9012\u5f52\u548c\u5206\u6cbb \u5728\u7f16\u7a0b\u8bed\u8a00\u7684\u4e2d\uff0c\u9012\u5f52\uff08Recursion\uff09\u662f\u6307\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u7684\u8bed\u6cd5\u73b0\u8c61\u3002\u9012\u5f52\u65b9\u6cd5\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4e5f\u662f\u521d\u5b66\u7f16\u7a0b\u8bed\u8a00\u7684\u96be\u70b9\u3002\u6df1\u523b\u7406\u89e3\u9012\u5f52\u662f\u5b66\u597d\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u57fa\u7840\u3002 \u672c\u6559\u7a0b\u9700\u8981\u5927\u5bb6\u6709\u4e00\u4e9b\u7f16\u5199\u9012\u5f52\u51fd\u6570\u7ecf\u9a8c\uff0c\u5e76\u4e14\u5bf9\u300c\u5206\u6cbb\u7b97\u6cd5\u300d\u300c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u300d\u300c\u6808\u300d\u6709\u4e00\u5b9a\u7684\u6982\u5ff5\u548c\u7406\u89e3\u3002\u4e8b\u5b9e\u4e0a\u300c\u9012\u5f52\u300d\u548c\u5b83\u4eec\u7684\u5173\u7cfb\u5bc6\u4e0d\u53ef\u5206\u3002 \u5206\u800c\u6cbb\u4e4b\u7684\u7b97\u6cd5\u8bbe\u8ba1\u601d\u60f3 \u9012\u5f52\u662f\u7f16\u7a0b\u6280\u5de7\uff0c\u76f4\u63a5\u4f53\u73b0\u5728\u4ee3\u7801\u4e0a \uff0c\u5373\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\uff1b\u5728\u8c03\u7528\u7684\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u7a0b\u5e8f\u4f1a\u56de\u5230\u4ea7\u751f\u8c03\u7528\u7684\u5730\u65b9\uff0c\u7ee7\u7eed\u505a\u4e00\u4e9b\u5176\u4ed6\u4e8b\u60c5\u3002\u8c03\u7528\u7684\u8fc7\u7a0b\u88ab\u79f0\u4f5c\u4e3a\u9012\u5f52\uff0c\u8fd4\u56de\u7684\u8fc7\u7a0b\u88ab\u79f0\u4f5c\u4e3a\u56de\u6eaf\u3002 \u5206\u6cbb\u662f\u4e00\u79cd\u7b97\u6cd5\u8bbe\u8ba1\u7684\u601d\u60f3\uff0c\u5c06\u5927\u95ee\u9898\u5206\u89e3\u6210\u591a\u4e2a\u5c0f\u95ee\u9898\uff0c\u4f8b\u5982\u5f52\u5e76\u6392\u5e8f\u5c06\u5927\u95ee\u9898\uff1a\u300c\u6392\u5e8f\u6574\u4e2a\u6570\u7ec4\u300d\uff0c\u5206\u89e3\u4e3a\u5c0f\u95ee\u9898\uff1a\u300c\u6392\u5e8f\u5de6\u534a\u548c\u53f3\u534a\u300d\uff1b\u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u300c\u5206\u6cbb\u7b97\u6cd5\u300d\u901a\u8fc7\u300c\u9012\u5f52\u300d\u5b9e\u73b0\u3002\u5373\uff1a\u5b50\u95ee\u9898\u7684\u6c42\u89e3\u901a\u8fc7\u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\u3002 \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5e76\u4e0d\u662f\u51ed\u7a7a\u60f3\u8c61\u51fa\u6765\u7684\uff0c\u300c\u9012\u5f52\u300d\u51fd\u6570\u4e5f\u4e0d\u4f8b\u5916\u3002\u300c\u9012\u5f52\u300d\u51fd\u6570\u57fa\u4e8e \u300c\u81ea\u9876\u5411\u4e0b\u300d\u62c6\u5206\u95ee\u9898\uff0c\u518d\u300c\u81ea\u5e95\u5411\u4e0a\u300d\u9010\u5c42\u89e3\u51b3\u95ee\u9898\u7684\u601d\u60f3\u8bbe\u8ba1\u800c\u6210\uff0c\u8fd9\u662f\u6240\u719f\u77e5\u7684\u300c\u5206\u800c\u6cbb\u4e4b\u300d\u7684\u7b97\u6cd5\u601d\u60f3\u3002 \u5206\u800c\u6cbb\u4e4b\uff08Divide-and-Conquer\uff09\u7684\u601d\u60f3\u5206\u4e3a\u5982\u4e0b\u4e09\u6b65\uff1a \u62c6\u5206\uff1a\u5c06\u539f\u95ee\u9898\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898\uff1b \u89e3\u51b3\uff1a\u89e3\u51b3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff1b \u5408\u5e76\uff1a\u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002 \u8fd9\u6837\u7684\u4e09\u6b65\u6070\u597d\u4e0e\u9012\u5f52\u7684\u7a0b\u5e8f\u5199\u6cd5\u76f8\u543b\u5408\uff1a \u62c6\u5206\uff1a\u5373\u5bf9\u5f53\u524d\u7684\u5927\u95ee\u9898\u8fdb\u884c\u5206\u6790\uff0c\u5199\u51fa\u76f8\u5e94\u4ee3\u7801\uff0c\u5206\u89e3\u4e3a\u5b50\u95ee\u9898\u3002 \u89e3\u51b3\uff1a\u5373\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u89e3\u51b3\u5b50\u95ee\u9898\uff1b \u5408\u5e76\uff1a\u5373\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u9012\u5f52\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u5bf9\u5b50\u95ee\u9898\u8fdb\u884c\u5408\u5e76\uff0c\u5f97\u5230\u5927\u95ee\u9898\u7684\u89e3\u3002 \u56e0\u6b64\uff0c\u5206\u6cbb\u7b97\u6cd5\u4e00\u822c\u901a\u8fc7\u9012\u5f52\u5b9e\u73b0\u3002 \u5178\u578b\u7684\u5206\u6cbb\u601d\u60f3\u7684\u5e94\u7528\u662f\uff1a \u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u7edd\u5927\u591a\u6570\u300c\u6811\u300d\u4e2d\u7684\u95ee\u9898 \uff08\u5148\u628a\u539f\u95ee\u9898\u62c6\u5206\u6210\u5b50\u6811\u7684\u95ee\u9898\uff0c\u5f53\u5b50\u6811\u4e2d\u7684\u95ee\u9898\u89e3\u51b3\u4ee5\u540e\uff0c\u7ed3\u5408\u5b50\u6811\u6c42\u89e3\u7684\u7ed3\u679c\u5904\u7406\u5f53\u524d\u7ed3\u70b9\uff09\u3001\u94fe\u8868\u4e2d\u7684\u95ee\u9898\u3002\u6211\u4eec\u5728\u672c\u6559\u7a0b\u91cc\u4e0d\u5bf9\u300c\u5206\u6cbb\u601d\u60f3\u300d\u5c55\u5f00\u53d9\u8ff0\u3002 \u300c\u5206\u6cbb\u601d\u60f3\u300d\u7684\u7279\u4f8b\u662f\u300c\u51cf\u6cbb\u601d\u60f3\uff08Decrease-and-Conquer\uff09\u300d\uff1a\u6bcf\u4e00\u6b65\u5c06\u95ee\u9898\u8f6c\u6362\u6210\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002\u300c\u51cf\u6cbb\u601d\u60f3\u300d\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\u662f\u300c\u4e8c\u5206\u67e5\u627e\u300d\u300c\u9009\u62e9\u6392\u5e8f\u300d\u300c\u63d2\u5165\u6392\u5e8f\u300d\u300c\u5feb\u901f\u6392\u5e8f\u300d\u7b97\u6cd5\u3002\u300c\u5206\u6cbb\u300d\u4e0e\u300c\u51cf\u6cbb\u601d\u60f3\u300d\u7684\u533a\u522b\u5982\u4e0b\uff1a \u5206\u6cbb\u601d\u60f3\uff1a\u5c06\u4e00\u4e2a\u95ee\u9898\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898\uff0c\u7136\u540e\u518d\u9010\u4e2a\u6c42\u89e3\uff0c\u6839\u636e\u5404\u4e2a\u5b50\u95ee\u9898\u5f97\u5230\u7684\u7ed3\u679c\u5f97\u5230\u539f\u95ee\u9898\u7684\u7ed3\u679c\uff1b \u51cf\u6cbb\u601d\u60f3\uff1a\u5728\u62c6\u5206\u5b50\u95ee\u9898\u7684\u65f6\u5019\uff0c\u53ea\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u6210 \u4e00\u4e2a \u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u56e0\u6b64\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u5c31\u662f\u4e0a\u4e00\u5c42\u539f\u95ee\u9898\u7684\u7ed3\u679c\uff0c\u6bcf\u4e00\u6b65\u53ea\u9700\u8981\u89e3\u51b3\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f8\u6bd4\u8f83\u4e8e\u300c\u5206\u6cbb\u601d\u60f3\u300d\u800c\u8a00\uff0c\u5b83 \u6ca1\u6709\u300c\u5408\u5e76\u300d\u7684\u8fc7\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u4f7f\u7528\u6808\uff1f \u5728\u8ba1\u7b97 5 ! 5! \u7684\u8fc7\u7a0b\u5f53\u4e2d\uff0c\u9700\u8981\u8bb0\u5f55\u62c6\u5206\u7684\u8fc7\u7a0b\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u5728\u6c42\u89e3\u6bcf\u4e00\u4e2a\u5b50\u95ee\u9898\u4ee5\u540e\uff0c\u9010\u5c42\u5411\u4e0a\u6c47\u62a5\u7ed3\u679c\u3002\u540e\u62c6\u5206\u7684\u5b50\u95ee\u9898\u5148\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u6574\u4e2a\u8fc7\u7a0b\u6070\u597d\u7b26\u5408\u300c\u540e\u8fdb\u5148\u51fa\u300d\u7684\u89c4\u5f8b \uff0c\u56e0\u6b64\u9700\u8981\u501f\u52a9\u7684\u6570\u636e\u7ed3\u6784\u662f\u300c\u6808\u300d\u3002 \u4f7f\u7528\u300c\u9012\u5f52\u300d\u5b9e\u73b0\u7684\u7b97\u6cd5\u9700\u8981\u8d70\u5b8c\u4e0b\u9762\u4e24\u6761\u8def\u5f84\uff1a \u5148\u300c\u81ea\u9876\u5411\u4e0b\u300d\u62c6\u5206\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u62c6\u5206\u4e3a\u6b62\uff1b \u518d\u300c\u81ea\u5e95\u5411\u4e0a\u300d\u9010\u5c42\u628a\u5e95\u5c42\u7684\u7ed3\u679c\u5411\u4e0a\u6c47\u62a5\uff0c\u76f4\u81f3\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002 \u56e0\u6b64\u4f7f\u7528\u300c\u9012\u5f52\u300d\u51fd\u6570\u89e3\u51b3\u7684\u95ee\u9898\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6709\u300c\u5148\u8d70\u51fa\u53bb\uff0c\u518d\u8d70\u56de\u6765\u300d\u7684\u8fc7\u7a0b \u81ea\u9876\u5411\u4e0b\u4e0e\u81ea\u5e95\u5411\u4e0a \u6211\u4eec\u901a\u8fc7\u300c\u9012\u5f52\u300d\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e86\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u4e24\u79cd\u601d\u8003\u7684\u8def\u5f84\uff1a\u300c\u81ea\u9876\u5411\u4e0b\u300d\u548c\u300c\u81ea\u5e95\u5411\u4e0a\u300d\u3002 \u300c\u81ea\u9876\u5411\u4e0b\u300d\u4e0e\u300c\u9012\u5f52\u300d \u300c\u81ea\u9876\u5411\u4e0b\u300d\u662f\u76f4\u63a5\u9762\u5bf9\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u9010\u5c42\u62c6\u5206\uff0c\u76f4\u5230\u4e0d\u80fd\u62c6\u5206\u4e3a\u6b62\uff0c\u518d\u6309\u7167\u62c6\u5206\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u9010\u5c42\u89e3\u51b3\uff0c\u76f4\u81f3\u539f\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u8fd9\u662f\u300c\u9012\u5f52\u300d\u3002 \u300c\u81ea\u5e95\u5411\u4e0a\u300d\u4e0e\u300c\u9012\u63a8\u300d \u5982\u679c\u6211\u4eec\u975e\u5e38\u6e05\u695a\u4e00\u4e2a\u95ee\u9898\u6700\u5f00\u59cb\u7684\u6837\u5b50\uff0c\u5e76\u4e14\u4e5f\u6e05\u695a\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u4ece\u5b83\u6700\u5f00\u59cb\u7684\u6837\u5b50\u9010\u6b65\u6f14\u53d8\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u6c42\u89e3\u7684\u95ee\u9898\u7684\u6837\u5b50\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u300c\u9012\u63a8\u300d\u7684\u65b9\u5f0f\uff0c\u4ece\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5f00\u59cb\u9010\u6b65\u300c\u9012\u63a8\u300d\u5f97\u5230\u6700\u7ec8\u8981\u89e3\u51b3\u7684\u5927\u95ee\u9898\u7684\u89e3\u3002 \u666e\u901a\u6811 \u6811\u7684\u57fa\u672c\u6982\u5ff5 \u6811\u7684\u904d\u5386\u95ee\u9898 \u5927\u90e8\u5206\u7684\u6811\u7684\u95ee\u9898\uff0c\u90fd\u662f\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u89e3\u51b3\u7684\u3002\u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u904d\u5386\uff0c\u9700\u8981\u7ed3\u5408\u5177\u4f53\u7684\u95ee\u9898\u8fdb\u884c\u5206\u6790\u3002 \u6811\u7684\u904d\u5386\u662f\u6811\u4e0a\u6700\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u672c\u8eab\u975e\u5e38\u7b80\u5355\uff0c\u5355\u72ec\u89e3\u51b3\u6811\u7684\u904d\u5386\u95ee\u9898\uff0c\u5e76\u4e0d\u6d89\u53ca\u5230\u6280\u5de7\u3002\u4f46\u662f\u6811\u7684\u904d\u5386\u7684\u5e94\u7528\u573a\u666f\u592a\u591a\uff0c\u5f88\u591a\u7ecf\u5178\u95ee\u9898\u80cc\u540e\u5176\u5b9e\u5c31\u662f\u6811\u7684\u904d\u5386\u3002\u56e0\u6b64\u8fd9\u4e00\u7ae0\u6211\u4eec\u5c06\u300c\u529b\u6263\u300d\u4e0a\u7684\u6811\u7684\u904d\u5386\u95ee\u9898\u6839\u636e\u5e94\u7528\u573a\u666f\u8fdb\u884c\u68b3\u7406\uff0c\u4ece\u800c\u638c\u63e1\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\u7075\u6d3b\u5e94\u7528\u6811\u7684\u904d\u5386\u7684\u6280\u5de7\u3002 \u6d89\u53ca\u5230\u7684\u7ecf\u5178\u95ee\u9898\u6709\u5efa\u6811\u95ee\u9898\u3001\u7ed3\u6784\u5224\u65ad\u95ee\u9898\u3001\u6570\u636e\u538b\u7f29\u95ee\u9898\u3001\u7f16\u7801\u89e3\u7801\u95ee\u9898\u3001\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316\u95ee\u9898\u3001\u81ea\u5e95\u5411\u4e0a\u6574\u5408\u5b50\u6811\u7ed3\u679c\u3001\u5c42\u5e8f\u904d\u5386\u7684\u53d8\u79cd\u3002 \u6811\u7684\u641c\u7d22\u95ee\u9898 \u6811\u7684\u7b97\u6cd5\u6280\u5de7 \u5173\u4e8e\u6811\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u4e24\u7c7b\u95ee\u9898\u975e\u5e38\u80fd\u4f53\u73b0\u7b97\u6cd5\u6280\u5de7\uff0c\u5206\u522b\u662f\u6811\u5f62 DP \u548c\u6700\u8fd1\u516c\u5171\u7956\u5148","title":"Lc"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_1","text":"","title":"\u7b97\u6cd5\u9762\u8bd5\u5c0f\u6284"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_2","text":"","title":"\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_3","text":"\u8fd9\u5f20\u8868\u5f88\u5168\u9762","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_4","text":"","title":"\u8f93\u5165\u89c4\u6a21"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_5","text":"\u6240\u6709\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u5047\u8bbe\u5e76\u8bf4\u6392\u5e8f\u6210\u672c\u4e3a O(n\u22c5logn)\u3002\u901a\u5e38\u662f\u6b63\u786e\u7684\uff0c\u5176\u4e2d n \u662f\u8981\u6392\u5e8f\u7684\u5143\u7d20\u6570\u3002\u4e3a\u4e86\u5b8c\u6574\u8d77\u89c1\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\u8868\uff0c\u5217\u51fa\u4e86\u8bb8\u591a\u5e38\u89c1\u7684\u6392\u5e8f\u7b97\u6cd5\u53ca\u5176\u5b8c\u6574\u6027\u3002\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u7684\u7b97\u6cd5\u5404\u4e0d\u76f8\u540c\uff1b\u4f8b\u5982\uff0cPython \u4f7f\u7528 Timsort\uff0c\u4f46\u5728 C++ \u4e2d\uff0c\u7279\u5b9a\u7b97\u6cd5\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u5e76\u4e14\u4f1a\u6709\u6240\u4e0d\u540c","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dsa","text":"\u8fd9\u662f\u4e00\u4e2a\u6d41\u7a0b\u56fe\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u5b9a\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u6d41\u7a0b\u56fe\u975e\u5e38\u7b3c\u7edf\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u6db5\u76d6\u6bcf\u4e2a\u573a\u666f\u3002","title":"\u901a\u7528DSA\u6d41\u7a0b\u56fe"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_6","text":"","title":"\u7b97\u6cd5\u9898\u4ee3\u7801\u6a21\u677f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_7","text":"\u53ea\u6709\u4e00\u4e2a\u8f93\u5165, \u4ece\u4e24\u7aef\u5f00\u59cb\u904d\u5386","title":"\u53cc\u6307\u9488"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_8","text":"\u6709\u4e24\u4e2a\u8f93\u5165, \u4e24\u4e2a\u90fd\u9700\u8981\u904d\u5386\u5b8c","title":"\u53cc\u6307\u9488"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_9","text":"","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_10","text":"","title":"\u6784\u5efa\u524d\u7f00\u548c"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_11","text":"","title":"\u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u6784\u5efa"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_12","text":"","title":"\u94fe\u8868: \u5feb\u6162\u6307\u9488"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_13","text":"","title":"\u53cd\u8f6c\u94fe\u8868"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_14","text":"","title":"\u627e\u5230\u7b26\u5408\u786e\u5207\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\u6570"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_15","text":"","title":"\u5355\u8c03\u9012\u589e\u6808"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dfs","text":"","title":"\u4e8c\u53c9\u6811: DFS (\u9012\u5f52)"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dfs_1","text":"public int dfs(TreeNode root) { Stack<TreeNode> stack = new Stack<>(); stack.push(root); int ans = 0; while (!stack.empty()) { TreeNode node = stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node.left != null) { stack.push(node.left); } if (node.right != null) { stack.push(node.right); } } return ans; } int dfs(TreeNode* root) { stack<TreeNode*> stack; stack.push(root); int ans = 0; while (!stack.empty()) { TreeNode* node = stack.top(); stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node->left != nullptr) { stack.push(node->left); } if (node->right != nullptr) { stack.push(node->right); } } return ans; } def dfs(root): stack = [root] ans = 0 while stack: node = stack.pop() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if node.left: stack.append(node.left) if node.right: stack.append(node.right) return ans","title":"\u4e8c\u53c9\u6811: DFS (\u8fed\u4ee3)"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#bfs","text":"public int fn(TreeNode root) { Queue<TreeNode> queue = new LinkedList<>(); queue.add(root); int ans = 0; while (!queue.isEmpty()) { int currentLength = queue.size(); // \u505a\u4e00\u4e9b\u5f53\u524d\u5c42\u7684\u64cd\u4f5c for (int i = 0; i < currentLength; i++) { TreeNode node = queue.remove(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node.left != null) { queue.add(node.left); } if (node.right != null) { queue.add(node.right); } } } return ans; } int fn(TreeNode* root) { queue<TreeNode*> queue; queue.push(root); int ans = 0; while (!queue.empty()) { int currentLength = queue.size(); // \u505a\u4e00\u4e9b\u5f53\u524d\u5c42\u7684\u64cd\u4f5c for (int i = 0; i < currentLength; i++) { TreeNode* node = queue.front(); queue.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if (node->left != nullptr) { queue.push(node->left); } if (node->right != nullptr) { queue.push(node->right); } } } return ans; } from collections import deque def fn(root): queue = deque([root]) ans = 0 while queue: current_length = len(queue) # \u505a\u4e00\u4e9b\u5f53\u524d\u5c42\u7684\u64cd\u4f5c for _ in range(current_length): node = queue.popleft() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 if node.left: queue.append(node.left) if node.right: queue.append(node.right) return ans","title":"\u4e8c\u53c9\u6811: BFS"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dfs_2","text":"\u4ee5\u4e0b\u56fe\u6a21\u677f\u5047\u8bbe\u8282\u70b9\u7f16\u53f7\u4ece 0 \u5230 n - 1 \uff0c\u5e76\u4e14\u56fe\u662f\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u7ed9\u51fa\u7684\u3002\u6839\u636e\u95ee\u9898\u7684\u4e0d\u540c\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u4f7f\u7528\u6a21\u677f\u4e4b\u524d\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u7b49\u6548\u7684\u90bb\u63a5\u8868\u3002 Set<Integer> seen = new HashSet<>(); public int fn(int[][] graph) { seen.add(START_NODE); return dfs(START_NODE, graph); } public int dfs(int node, int[][] graph) { int ans = 0; // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (!seen.contains(neighbor)) { seen.add(neighbor); ans += dfs(neighbor, graph); } } return ans; } unordered_set<int> seen; int fn(vector<vector<int>>& graph) { seen.insert(START_NODE); return dfs(START_NODE, graph); } int fn dfs(int node, vector<vector<int>>& graph) { int ans = 0; // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (seen.find(neighbor) == seen.end()) { seen.insert(neighbor); ans += dfs(neighbor, graph); } } return ans; } def fn(graph): def dfs(node): ans = 0 # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for neighbor in graph[node]: if neighbor not in seen: seen.add(neighbor) ans += dfs(neighbor) return ans seen = {START_NODE} return dfs(START_NODE)","title":"\u56fe: DFS (\u9012\u5f52)"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dfs_3","text":"public int fn(int[][] graph) { Stack<Integer> stack = new Stack<>(); Set<Integer> seen = new HashSet<>(); stack.push(START_NODE); seen.add(START_NODE); int ans = 0; while (!stack.empty()) { int node = stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (!seen.contains(neighbor)) { seen.add(neighbor); stack.push(neighbor); } } } return ans; } int fn(vector<vector<int>>& graph) { stack<int> stack; unordered_set<int> seen; stack.push(START_NODE); seen.insert(START_NODE); int ans = 0; while (!stack.empty()) { int node = stack.top(); stack.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (seen.find(neighbor) == seen.end()) { seen.insert(neighbor); stack.push(neighbor); } } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0el556/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(graph): stack = [START_NODE] seen = {START_NODE} ans = 0 while stack: node = stack.pop() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for neighbor in graph[node]: if neighbor not in seen: seen.add(neighbor) stack.append(neighbor) return ans \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0el556/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u56fe: DFS (\u8fed\u4ee3)"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#bfs_1","text":"public int fn(int[][] graph) { Queue<Integer> queue = new LinkedList<>(); Set<Integer> seen = new HashSet<>(); queue.add(START_NODE); seen.add(START_NODE); int ans = 0; while (!queue.isEmpty()) { int node = queue.remove(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (!seen.contains(neighbor)) { seen.add(neighbor); queue.add(neighbor); } } } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0elfx2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int fn(vector<vector<int>>& graph) { queue<int> queue; unordered_set<int> seen; queue.add(START_NODE); seen.insert(START_NODE); int ans = 0; while (!queue.empty()) { int node = queue.front(); queue.pop(); // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for (int neighbor: graph[node]) { if (seen.find(neighbor) == seen.end()) { seen.insert(neighbor); queue.push(neighbor); } } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0elfx2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 from collections import deque def fn(graph): queue = deque([START_NODE]) seen = {START_NODE} ans = 0 while queue: node = queue.popleft() # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 for neighbor in graph[node]: if neighbor not in seen: seen.add(neighbor) queue.append(neighbor) return ans \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0elfx2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u56fe: BFS"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#k","text":"public int[] fn(int[] arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<>(CRITERIA); for (int num: arr) { heap.add(num); if (heap.size() > k) { heap.remove(); } } int[] ans = new int[k]; for (int i = 0; i < k; i++) { ans[i] = heap.remove(); } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eiyfc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 vector<int> fn(vector<int>& arr, int k) { priority_queue<int, CRITERIA> heap; for (int num: arr) { heap.push(num); if (heap.size() > k) { heap.pop(); } } vector<int> ans; while (heap.size() > 0) { ans.push_back(heap.top()); heap.pop(); } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eiyfc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 import heapq def fn(arr, k): heap = [] for num in arr: # \u505a\u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801\uff0c\u6839\u636e\u95ee\u9898\u7684\u6761\u4ef6\u6765\u63a8\u5165\u5806\u4e2d heapq.heappush(heap, (CRITERIA, num)) if len(heap) > k: heapq.heappop(heap) return [num for num in heap] \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eiyfc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u627e\u5230\u5806\u7684\u524d k \u4e2a\u5143\u7d20"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_16","text":"public int fn(int[] arr, int target) { int left = 0; int right = arr.length - 1; while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == target) { // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 return mid; } if (arr[mid] > target) { right = mid - 1; } else { left = mid + 1; } } // left \u662f\u63d2\u5165\u70b9 return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eusji/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int binarySearch(vector<int>& arr, int target) { int left = 0; int right = int(arr.size()) - 1; while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == target) { // \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 return mid; } if (arr[mid] > target) { right = mid - 1; } else { left = mid + 1; } } // left \u662f\u63d2\u5165\u70b9 return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eusji/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr, target): left = 0 right = len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: # \u6839\u636e\u9898\u610f\u8865\u5145\u4ee3\u7801 return if arr[mid] > target: right = mid - 1 else: left = mid + 1 # left \u662f\u63d2\u5165\u70b9 return left \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eusji/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_17","text":"public int fn(int[] arr, int target) { int left = 0; int right = arr.length; while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] >= target) { right = mid } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0etkbe/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int binarySearch(vector<int>& arr, int target) { int left = 0; int right = arr.size(); while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] >= target) { right = mid; } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0etkbe/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr, target): left = 0 right = len(arr) while left < right: mid = (left + right) // 2 if arr[mid] >= target: right = mid else: left = mid + 1 return left \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0etkbe/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u4e8c\u5206\u67e5\u627e: \u91cd\u590d\u5143\u7d20\uff0c\u6700\u5de6\u8fb9\u7684\u63d2\u5165\u70b9"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_18","text":"public int fn(int[] arr, int target) { int left = 0; int right = arr.length; while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] > target) { right = mid; } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e83yg/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 int binarySearch(vector<int>& arr, int target) { int left = 0; int right = arr.size(); while (left < right) { int mid = left + (right - left) / 2; if (arr[mid] > target) { right = mid; } else { left = mid + 1; } } return left; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e83yg/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr, target): left = 0 right = len(arr) while left < right: mid = (left + right) // 2 if arr[mid] > target: right = mid else: left = mid + 1 return left \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e83yg/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u4e8c\u5206\u67e5\u627e: \u91cd\u590d\u5143\u7d20\uff0c\u6700\u53f3\u8fb9\u7684\u63d2\u5165\u70b9"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_19","text":"\u5bfb\u627e\u6700\u5c0f\u503c int fn(vector<int>& arr) { int left = MINIMUM_POSSIBLE_ANSWER; int right = MAXIMUM_POSSIBLE_ANSWER; while (left <= right) { int mid = left + (right - left) / 2; if (check(mid)) { right = mid - 1; } else { left = mid + 1; } } return left; } bool check(int x) { // \u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u95ee\u9898 return BOOLEAN; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e3u1v/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u5bfb\u627e\u6700\u5927\u503c int fn(vector<int>& arr) { int left = MINIMUM_POSSIBLE_ANSWER; int right = MAXIMUM_POSSIBLE_ANSWER; while (left <= right) { int mid = left + (right - left) / 2; if (check(mid)) { left = mid + 1; } else { right = mid - 1; } } return right; } bool check(int x) { // \u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u95ee\u9898 return BOOLEAN; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e3u1v/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr): def check(x): # \u8fd9\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53d6\u51b3\u4e8e\u95ee\u9898 return BOOLEAN left = MINIMUM_POSSIBLE_ANSWER right = MAXIMUM_POSSIBLE_ANSWER while left <= right: mid = (left + right) // 2 if check(mid): left = mid + 1 else: right = mid - 1 return right \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e3u1v/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u4e8c\u5206\u67e5\u627e: \u8d2a\u5fc3\u95ee\u9898"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_20","text":"int backtrack(STATE curr, OTHER_ARGUMENTS...) { if (BASE_CASE) { // \u4fee\u6539\u7b54\u6848 return 0; } int ans = 0; for (ITERATE_OVER_INPUT) { // \u4fee\u6539\u5f53\u524d\u72b6\u6001 ans += backtrack(curr, OTHER_ARGUMENTS...) // \u64a4\u6d88\u5bf9\u5f53\u524d\u72b6\u6001\u7684\u4fee\u6539 } return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eq7sj/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def backtrack(curr, OTHER_ARGUMENTS...): if (BASE_CASE): # \u4fee\u6539\u7b54\u6848 return ans = 0 for (ITERATE_OVER_INPUT): # \u4fee\u6539\u5f53\u524d\u72b6\u6001 ans += backtrack(curr, OTHER_ARGUMENTS...) # \u64a4\u6d88\u5bf9\u5f53\u524d\u72b6\u6001\u7684\u4fee\u6539 return ans \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0eq7sj/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u56de\u6eaf"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_21","text":"unordered_map<STATE, int> memo; int fn(vector<int>& arr) { return dp(STATE_FOR_WHOLE_INPUT, arr); } int dp(STATE, vector<int>& arr) { if (BASE_CASE) { return 0; } if (memo.find(STATE) != memo.end()) { return memo[STATE]; } int ans = RECURRENCE_RELATION(STATE); memo[STATE] = ans; return ans; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e6wzt/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 def fn(arr): def dp(STATE): if BASE_CASE: return 0 if STATE in memo: return memo[STATE] ans = RECURRENCE_RELATION(STATE) memo[STATE] = ans return ans memo = {} return dp(STATE_FOR_WHOLE_INPUT) \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0e6wzt/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u52a8\u6001\u89c4\u5212: \u81ea\u9876\u5411\u4e0b\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_22","text":"// \u6ce8\u610f:\u53ea\u6709\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5b58\u50a8\u6570\u636e\u65f6\u624d\u9700\u8981\u4f7f\u7528\u7c7b\u3002 // \u5426\u5219\uff0c\u60a8\u53ef\u4ee5\u53ea\u4f7f\u7528\u54c8\u5e0c\u6620\u5c04\u5b9e\u73b0\u4e00\u4e2a\u524d\u7f00\u6811\u3002 struct TrieNode { int data; unordered_map<char, TrieNode*> children; TrieNode() : data(0), children(unordered_map<char, TrieNode*>()) {} }; TrieNode* buildTrie(vector<string> words) { TrieNode* root = new TrieNode(); for (string word: words) { TrieNode* curr = root; for (char c: word) { if (curr->children.find(c) == curr->children.end()) { curr->children[c] = new TrieNode(); } curr = curr->children[c]; // \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684 curr \u5df2\u7ecf\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u5355\u8bcd // \u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6267\u884c\u66f4\u591a\u7684\u64cd\u4f5c\u6765\u7ed9 curr \u6dfb\u52a0\u5c5e\u6027 } } return root; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0ek2gr/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 # \u6ce8\u610f:\u53ea\u6709\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5b58\u50a8\u6570\u636e\u65f6\u624d\u9700\u8981\u4f7f\u7528\u7c7b\u3002 # \u5426\u5219\uff0c\u60a8\u53ef\u4ee5\u53ea\u4f7f\u7528\u54c8\u5e0c\u6620\u5c04\u5b9e\u73b0\u4e00\u4e2a\u524d\u7f00\u6811\u3002 class TrieNode: def __init__(self): # you can store data at nodes if you wish self.data = None self.children = {} def fn(words): root = TrieNode() for word in words: curr = root for c in word: if c not in curr.children: curr.children[c] = TrieNode() curr = curr.children[c] # \u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684 curr \u5df2\u7ecf\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u5355\u8bcd # \u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6267\u884c\u66f4\u591a\u7684\u64cd\u4f5c\u6765\u7ed9 curr \u6dfb\u52a0\u5c5e\u6027 return root \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/arithmetic-interview-cheat-sheet/0ek2gr/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u6784\u5efa\u524d\u7f00\u6811\uff08\u5b57\u5178\u6811\uff09"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_23","text":"","title":"\u7b97\u6cd5\u9762\u8bd5\u8be6\u89e3"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_24","text":"\u5728\u9762\u8bd5\u5f00\u59cb\u65f6\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9762\u8bd5\u5b98\u4f1a\u7b80\u5355\u4ecb\u7ecd\u81ea\u5df1\u548c\u4ed6\u4eec\u5728\u516c\u53f8\u7684\u89d2\u8272\uff0c\u7136\u540e\u8ba9\u4f60\u505a\u81ea\u6211\u4ecb\u7ecd\u3002 \u51c6\u5907\u5e76\u6392\u7ec3\u4e00\u6bb5\u81ea\u6211\u4ecb\u7ecd\u3002\u81ea\u6211\u4ecb\u7ecd\u5e94\u8be5\u5728 30 \u79d2\u5185\u603b\u7ed3\u4f60\u7684\u6559\u80b2\u80cc\u666f\u3001\u5de5\u4f5c\u7ecf\u5386\u548c\u5174\u8da3\u7231\u597d\u3002 \u4fdd\u6301\u5fae\u7b11\uff0c\u4e14\u8ba9\u8bf4\u8bdd\u7684\u58f0\u97f3\u542c\u8d77\u6765\u81ea\u4fe1\u3002 \u5f53\u9762\u8bd5\u5b98\u8c08\u8bba\u4ed6\u4eec\u5728\u516c\u53f8\u7684\u5de5\u4f5c\u65f6\uff0c\u8bf7\u6ce8\u610f\u542c - \u8fd9\u6709\u52a9\u4e8e\u7a0d\u540e\u63d0\u51fa\u76f8\u5173\u95ee\u9898\u3002 \u5982\u679c\u9762\u8bd5\u5b98\u63d0\u5230\u4efb\u4f55\u4f60\u4e5f\u611f\u5174\u8da3\u7684\u4e8b\u60c5\uff0c\u65e0\u8bba\u662f\u4ed6\u4eec\u7684\u5de5\u4f5c\u8fd8\u662f\u7231\u597d\uff0c\u63d0\u51fa\u6765\u3002","title":"\u4ecb\u7ecd"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_25","text":"\u5728\u81ea\u6211\u4ecb\u7ecd\u4e4b\u540e\uff0c\u9762\u8bd5\u5b98\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u95ee\u9898\u9648\u8ff0\u3002\u5982\u679c\u60a8\u5728\u5171\u4eab\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u7b54\u9898\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u5c06\u95ee\u9898\u63cf\u8ff0\u548c\u6d4b\u8bd5\u7528\u4f8b\u4e00\u8d77\u7c98\u8d34\u5230\u7f16\u8f91\u5668\u4e2d\uff0c\u7136\u540e\u5c06\u95ee\u9898\u8bfb\u7ed9\u60a8\u542c\u3002 \u786e\u4fdd\u4f60\u5b8c\u5168\u7406\u89e3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u9762\u8bd5\u5b98\u628a\u95ee\u9898\u8bfb\u5b8c\u4e4b\u540e\uff0c\u901a\u8fc7\u5c06\u5176\u89e3\u91ca\u56de\u7ed9\u4ed6\u4eec\u6765\u786e\u8ba4\u95ee\u9898\u5728\u95ee\u4ec0\u4e48\u3002 \u8be2\u95ee\u6709\u5173\u8f93\u5165\u7684\u95ee\u9898\u9610\u8ff0\uff0c\u4f8b\u5982: \u8f93\u5165\u662f\u53ea\u6709\u6574\u6570\uff0c\u8fd8\u662f\u53ef\u4ee5\u6709\u5176\u4ed6\u7c7b\u578b\uff1f \u6211\u80fd\u5047\u8bbe\u8f93\u5165\u662f\u6709\u5e8f\u7684\u5417\uff1f \u8f93\u5165\u662f\u4fdd\u8bc1\u6709\u5143\u7d20\u8fd8\u662f\u53ef\u4ee5\u4e3a\u7a7a\uff1f \u5982\u679c\u7ed9\u51fa\u4e86\u65e0\u6548\u8f93\u5165\uff0c\u6211\u8be5\u5982\u4f55\u5904\u7406\uff1f \u8be2\u95ee\u9884\u671f\u7684\u8f93\u5165\u5927\u5c0f\u3002\u6709\u65f6\u5019\uff0c\u9762\u8bd5\u5b98\u4f1a\u542b\u7cca\u5176\u8f9e\uff0c\u4f46\u5982\u679c\u4ed6\u4eec\u786e\u5b9e\u7ed9\u4e86\u4f60\u4e00\u4e2a\u8303\u56f4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u7ebf\u7d22\u3002\u4f8b\u5982\uff0c\u5982\u679c n \u975e\u5e38\u5c0f\uff0c\u5219\u53ef\u80fd\u662f\u56de\u6eaf\u3002\u5982\u679c n \u5728 100 - 1000 \u5de6\u53f3\uff0cO(n^2) \u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u662f\u6700\u4f18\u7684\u3002 \u5982\u679c n \u975e\u5e38\u5927, \u90a3\u4e48\u4f60\u53ef\u4ee5\u9700\u8981\u6bd4 O(n) \u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u63d0\u51fa\u660e\u786e\u7684\u95ee\u9898\u4e0d\u4ec5\u80fd\u5e2e\u52a9\u4f60\u66f4\u597d\u5730\u7406\u89e3\u95ee\u9898\uff0c\u8fd8\u80fd\u8868\u73b0\u51fa\u5bf9\u7ec6\u8282\u7684\u5173\u6ce8\uff0c\u4ee5\u53ca\u5bf9\u8fb9\u7f18\u60c5\u51b5\u7684\u8003\u8651\u3002","title":"\u95ee\u9898\u9648\u8ff0"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dsa_1","text":"\u5c1d\u8bd5\u627e\u51fa\u9002\u7528\u7684\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u3002\u5206\u89e3\u95ee\u9898\u5e76\u5c1d\u8bd5\u627e\u5230\u4f60\u4f1a\u7684\u5e38\u7528\u89e3\u6cd5\u3002\u5f04\u6e05\u695a\u95ee\u9898\u9700\u8981\u4f60\u505a\u4ec0\u4e48\uff0c\u5e76\u8003\u8651\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u53ef\u4ee5\u4ee5\u8f83\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5b8c\u6210\u3002 \u628a\u4f60\u7684\u60f3\u6cd5\u90fd\u8bf4\u51fa\u6765\u3002\u8fd9\u4f1a\u8ba9\u9762\u8bd5\u5b98\u77e5\u9053\u4f60\u5584\u4e8e\u6743\u8861\u5229\u5f0a\u3002\u5982\u679c\u95ee\u9898\u6d89\u53ca\u5230\u67e5\u770b\u5b50\u6570\u7ec4\uff0c\u90a3\u4e48\u5e94\u8be5\u8003\u8651\u6ed1\u52a8\u7a97\u53e3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7a97\u53e3\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b50\u6570\u7ec4\u3002\u5373\u4f7f\u4f60\u9519\u4e86\uff0c\u9762\u8bd5\u5b98\u4ecd\u7136\u4f1a\u6b23\u8d4f\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002 \u901a\u8fc7\u628a\u60f3\u6cd5\u90fd\u8bf4\u51fa\u6765\uff0c\u9762\u8bd5\u5b98\u4e5f\u53ef\u4ee5\u501f\u6b64\u7ed9\u4f60\u63d0\u793a\uff0c\u5e76\u4e3a\u4f60\u6307\u51fa\u6b63\u786e\u7684\u65b9\u5411\u3002 \u4e00\u65e6\u51b3\u5b9a\u4e86\u8981\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784/\u7b97\u6cd5\uff0c\u73b0\u5728\u5c31\u9700\u8981\u6784\u9020\u5b9e\u9645\u7684\u7b97\u6cd5\u3002\u5728\u7f16\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u7b97\u6cd5\u7684\u5927\u81f4\u6b65\u9aa4\uff0c\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u5e76\u786e\u4fdd\u4ed6\u4eec\u7406\u89e3\u5e76\u540c\u610f\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6cd5\u3002\u901a\u5e38\uff0c\u5982\u679c\u4f60\u8d70\u9519\u4e86\u8def\uff0c\u4ed6\u4eec\u4f1a\u5de7\u5999\u5730\u6697\u793a\u4f60\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\u4f60\u80fd\u63a5\u53d7\u9762\u8bd5\u5b98\u6240\u8bf4\u7684\u8bdd\u662f \u975e\u5e38 \u91cd\u8981\u7684\u3002\u8bf7\u8bb0\u4f4f\uff1a\u4ed6\u4eec\u77e5\u9053\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u4ed6\u4eec\u7ed9\u4f60\u63d0\u793a\uff0c\u90a3\u662f\u56e0\u4e3a\u4ed6\u4eec\u5e0c\u671b\u4f60\u6210\u529f\u3002\u4e0d\u8981\u56fa\u6267\uff0c\u51c6\u5907\u597d\u63a2\u7d22\u4ed6\u4eec\u7ed9\u4f60\u7684\u60f3\u6cd5\u3002","title":"\u5934\u8111\u98ce\u66b4 DS&amp;A"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_26","text":"\u4e00\u65e6\u4f60\u60f3\u51fa\u4e86\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5e76\u8ba9\u9762\u8bd5\u5b98\u540c\u610f\u4e86\uff0c\u5c31\u8be5\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 \u5982\u679c\u4f60\u6253\u7b97\u4f7f\u7528\u4e00\u4e2a\u5e93\u6216\u6a21\u5757\uff0c\u4f8b\u5982 Python \u7684\u96c6\u5408\uff0c\u5728\u5f00\u59cb\u4e4b\u524d\u786e\u4fdd\u9762\u8bd5\u5b98\u53ef\u4ee5\u63a5\u53d7\u3002 \u5f53\u4f60\u5199\u4ee3\u7801\u65f6\uff0c\u89e3\u91ca\u4f60\u7684\u51b3\u7b56\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u89e3\u51b3\u4e00\u4e2a\u56fe\u5f62\u95ee\u9898\uff0c\u5f53\u4f60\u58f0\u660e\u4e00\u4e2a\u96c6\u5408 seen\uff0c\u89e3\u91ca\u5b83\u662f\u4e3a\u4e86\u9632\u6b62\u8bbf\u95ee\u540c\u4e00\u4e2a\u8282\u70b9\u8d85\u8fc7\u4e00\u6b21\uff0c\u4ece\u800c\u4e5f\u9632\u6b62\u4e86\u5faa\u73af\u3002 \u7f16\u5199\u5e72\u51c0\u7684\u4ee3\u7801\u3002\u6bcf\u4e00\u79cd\u4e3b\u6d41\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u4e00\u4e2a\u5173\u4e8e\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u7f16\u5199\u7684\u7ea6\u5b9a\u3002\u786e\u4fdd\u4f60\u77e5\u9053\u4f60\u6253\u7b97\u4f7f\u7528\u7684\u8bed\u8a00\u7684\u57fa\u7840\u77e5\u8bc6\u3002Google \u63d0\u4f9b\u4e86\u9002\u7528\u4e8e\u6240\u6709\u4e3b\u6d41\u8bed\u8a00\u7684 google code style \u603b\u7ed3 \u3002\u6700\u91cd\u8981\u7684\u90e8\u5206\u662f\u5927\u5c0f\u5199\u7ea6\u5b9a\u3001\u7f29\u8fdb\u3001\u7a7a\u683c\u548c\u5168\u5c40\u53d8\u91cf\u3002 \u907f\u514d\u91cd\u590d\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728\u7f51\u683c\u4e0a\u8fdb\u884c DFS \u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u53cd\u590d\u4f7f\u7528\u65b9\u5411\u6570\u7ec4 [(0, 1), (1, 0), (0, -1), (-1, 0)] \uff0c\u800c\u4e0d\u662f\u4e3a\u6bcf\u4e2a\u65b9\u5411\u7f16\u5199\u76f8\u540c\u7684\u903b\u8f91 4 \u6b21\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u591a\u4e2a\u5730\u65b9\u7f16\u5199\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u8003\u8651\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6216\u4f7f\u7528\u5faa\u73af\u6765\u7b80\u5316\u5b83\u3002 \u4e0d\u8981\u5bb3\u6015\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u3002\u5b83\u4eec\u4f7f\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u6a21\u5757\u5316\uff0c\u8fd9\u5728\u5b9e\u9645\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u3002\u4e4b\u540e\u7684\u4ee3\u7801\u8bf4\u4e0d\u5b9a\u8fd8\u4f1a\u7528\u4e0a\u8f85\u52a9\u51fd\u6570\u3002 \u5982\u679c\u4f60\u9047\u5230\u56f0\u96be\u6216\u610f\u8bc6\u5230\u4f60\u6700\u521d\u7684\u8ba1\u5212\u53ef\u80fd\u884c\u4e0d\u901a\uff0c\u4e0d\u8981\u614c\u3002\u4e0e\u9762\u8bd5\u5b98\u4ea4\u6d41\u4f60\u7684\u7591\u8651\u3002\u5982\u679c\u4f60\u9ed8\u9ed8\u5730\u6323\u624e\uff0c\u5f88\u53ef\u80fd\u53c8\u4f1a\u94bb\u725b\u89d2\u5c16\u3002 \u4e00\u79cd\u7b56\u7565\u662f\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u66b4\u529b\u89e3\u51b3\u65b9\u6848\uff0c\u540c\u65f6\u627f\u8ba4 \u8fd9\u662f\u4e00\u4e2a\u6b21\u4f18\u89e3\u51b3\u65b9\u6848\u3002\u5b8c\u6210\u540e\uff0c\u5206\u6790\u7b97\u6cd5\u7684\u6bcf\u4e2a\u90e8\u5206\uff0c\u627e\u51fa\u54ea\u4e9b\u6b65\u9aa4 \u201c\u6162\u201d\uff0c\u5e76\u5c1d\u8bd5\u601d\u8003\u5982\u4f55\u52a0\u5feb\u901f\u5ea6\u3002\u8ba9\u9762\u8bd5\u5b98\u53c2\u4e0e\u8fdb\u6765\uff0c\u8ba9\u4ed6\u4eec\u53c2\u4e0e\u8ba8\u8bba \u2014\u2014 \u4ed6\u4eec\u901a\u5e38\u613f\u610f\u63d0\u4f9b\u5e2e\u52a9\u3002","title":"\u5b9e\u64cd"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#debug","text":"\u4e00\u65e6\u4f60\u5199\u5b8c\u4ee3\u7801\uff0c\u4f60\u7684\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u60f3\u8981\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801\u3002\u6839\u636e\u516c\u53f8\u7684\u4e0d\u540c\uff0c\u4f1a\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u73af\u5883: \u5185\u7f6e\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u9700\u8981\u8fd0\u884c \u8fd9\u4e9b\u5e73\u53f0\u7c7b\u4f3c\u4e8e LeetCode\u3002\u5c06\u4f1a\u6709\u5404\u79cd\u5404\u6837\u7684\u6d4b\u8bd5\u7528\u4f8b \u2014\u2014 \u5c0f\u8f93\u5165\uff0c\u5927\u8f93\u5165\uff0c\u6d4b\u8bd5\u8fb9\u7f18\u7528\u4f8b\u7684\u8f93\u5165\u3002 \u8fd9\u79cd\u73af\u5883\u7ed9\u60a8\u7684\u4ee3\u7801\u5e26\u6765\u4e86\u6700\u5927\u7684\u538b\u529b\uff0c\u56e0\u4e3a\u4f1a\u66b4\u9732\u51fa\u4e0d\u5b8c\u7f8e\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4f46\u662f\uff0c\u5b83\u4e5f\u4e3a\u521b\u5efa\u60a8\u81ea\u5df1\u7684\u6d4b\u8bd5\u5e26\u6765\u4e86\u6700\u5c0f\u7684\u538b\u529b\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u5df2\u7ecf\u5185\u7f6e\u5728\u4e86\u5185\u90e8\u3002 \u81ea\u5df1\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u9700\u8981\u8fd0\u884c \u8fd9\u4e9b\u5e73\u53f0\u901a\u5e38\u662f\u652f\u6301\u8fd0\u884c\u4ee3\u7801\u7684\u5171\u4eab\u6587\u672c\u7f16\u8f91\u5668\u3002\u9762\u8bd5\u5b98\u4f1a\u5e0c\u671b\u4f60\u7f16\u5199\u81ea\u5df1\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u8981\u771f\u6b63\u6d4b\u8bd5\u4ee3\u7801\uff0c\u4f60\u5e94\u8be5\u5728\u4ee3\u7801\u7684\u6700\u5916\u5c42\u8303\u56f4\u7f16\u5199\uff0c\u5373\u4ee3\u7801\u5c06\u9996\u5148\u8fd0\u884c\u7684\u5730\u65b9\u3002\u5047\u8bbe\u4f60\u5728\u51fd\u6570\u4e2d\u89e3\u51b3\u4e86\u95ee\u9898 (\u5c31\u50cf\u5728 LeetCode \u4e0a)\uff0c\u4f60\u53ef\u4ee5\u7528\u4f60\u7f16\u5199\u7684\u6d4b\u8bd5\u7528\u4f8b\u8c03\u7528\u4f60\u7684\u51fd\u6570\uff0c\u5e76\u5c06\u7ed3\u679c\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5728\u7f16\u5199\u81ea\u5df1\u7684\u6d4b\u8bd5\u65f6\uff0c\u8bf7\u786e\u4fdd\u5c1d\u8bd5\u5404\u79cd\u6d4b\u8bd5\u3002\u5305\u62ec\u8fb9\u7f18\u60c5\u51b5\u3001\u76f4\u89c9\u8f93\u5165\u548c\u53ef\u80fd\u65e0\u6548\u7684\u8f93\u5165 (\u5982\u679c\u9762\u8bd5\u5b98\u60f3\u8ba9\u4f60\u5904\u7406\u8fd9\u79cd\u60c5\u51b5)\u3002 \u81ea\u5df1\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee3\u7801\u4e0d\u9700\u8981\u8fd0\u884c \u8fd9\u4e9b\u5e73\u53f0\u53ea\u662f\u5171\u4eab\u6587\u672c\u7f16\u8f91\u5668\uff0c\u4e0d\u652f\u6301\u8fd0\u884c\u4ee3\u7801\u3002\u9762\u8bd5\u5b98\u4f1a\u5e0c\u671b\u4f60\u7f16\u5199\u81ea\u5df1\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5e76\u4e14\u624b\u52a8\u6a21\u62df\u8fd0\u884c\u3002 \u4e3a\u4e86 \u201c\u6d4b\u8bd5\u201d \u4ee3\u7801\uff0c\u4f60\u5fc5\u987b\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u624b\u52a8\u68c0\u67e5\u7b97\u6cd5\u3002\u8bd5\u7740\u538b\u7f29\u4e00\u4e9b\u7410\u788e\u7684\u90e8\u5206 \u2014\u2014 \u4f8b\u5982\uff0c\u4f60\u6b63\u5728\u521b\u5efa\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u4e0d\u8981 \u5b57\u9762\u4e0a \u904d\u5386\u6bcf\u4e2a\u5143\u7d20\u7684 for \u5faa\u73af\u3002\u53ef\u4ee5\u8fd9\u6837\u8bf4:\u201c\u5728\u8fd9\u4e2a for \u5faa\u73af\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u6709\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u4ed6\u662f\u8fd9\u6837\u7684\u2026\u2026\u201d\u3002 \u5728\u904d\u5386\u4ee3\u7801\u65f6\uff0c\u5c06\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u5199\u5165 (\u5728\u7f16\u8f91\u5668\u4e2d\uff0c\u51fd\u6570\u5916\u90e8\u7684\u67d0\u5904)\uff0c\u5e76\u4e0d\u65ad\u66f4\u65b0\u5b83\u4eec\u3002 \u4e0d\u7ba1\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u7684\u4ee3\u7801\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u4e0d\u8981\u614c!\u5982\u679c\u73af\u5883\u652f\u6301\u8fd0\u884c\u4ee3\u7801\uff0c\u8bf7\u5728\u76f8\u5173\u4f4d\u7f6e\u653e\u7f6e\u6253\u5370\u8bed\u53e5\u4ee5\u5c1d\u8bd5\u8bc6\u522b\u95ee\u9898\u3002\u7528\u4e00\u4e2a\u5c0f\u7684\u6d4b\u8bd5\u7528\u4f8b\u624b\u52a8\u904d\u5386(\u5c31\u50cf\u4f60\u6ca1\u6709\u8fd0\u884c\u73af\u5883\u65f6\u6240\u505a\u7684\u90a3\u6837)\u3002\u5f53\u4f60\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u8ba8\u8bba\u53d8\u91cf\u7684\u671f\u671b\u503c\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u5b9e\u9645\u503c\u8fdb\u884c\u6bd4\u8f83\u3002\u518d\u8bf4\u4e00\u904d\uff0c\u4f60\u8bf4\u8bdd\u8d8a\u591a\uff0c\u9762\u8bd5\u5b98\u5c31\u8d8a\u5bb9\u6613\u5e2e\u52a9\u4f60\u3002","title":"\u6d4b\u8bd5 &amp; debug"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_27","text":"\u5728\u7f16\u5199\u7b97\u6cd5\u5e76\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u540e\uff0c\u51c6\u5907\u56de\u7b54\u5173\u4e8e\u7b97\u6cd5\u7684\u95ee\u9898\u3002\u4f60\u5e94\u8be5\u51c6\u5907\u597d\u56de\u7b54\u7684\u95ee\u9898\u5305\u62ec: \u7b97\u6cd5\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f \u4f60\u5e94\u8be5\u4ece\u6700\u574f\u7684\u60c5\u51b5\u6765\u8003\u8651\u3002\u4f46\u662f\uff0c\u5982\u679c\u6700\u574f\u7684\u60c5\u51b5\u5f88\u5c11\uff0c\u5e76\u4e14\u5e73\u5747\u60c5\u51b5\u7684\u8fd0\u884c\u65f6\u660e\u663e\u66f4\u5feb\uff0c\u90a3\u4e48\u4f60\u8fd8\u5e94\u8be5\u63d0\u5230\u8fd9\u4e00\u70b9\u3002 \u4f60\u4e3a\u4ec0\u4e48\u9009\u62e9\u2026\u2026\uff1f \u8fd9\u53ef\u4ee5\u662f\u4f60\u5bf9\u6570\u636e\u7ed3\u6784\u7684\u9009\u62e9\uff0c\u7b97\u6cd5\u7684\u9009\u62e9\uff0c\u5faa\u73af\u914d\u7f6e\u7684\u9009\u62e9\u3002\u51c6\u5907\u597d\u89e3\u91ca\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002 \u4f60\u8ba4\u4e3a\u7b97\u6cd5\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u662f\u5426\u53ef\u4ee5\u6539\u8fdb\uff1f \u5982\u679c\u95ee\u9898\u9700\u8981\u904d\u5386\u8f93\u5165\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 (\u5047\u8bbe\u8f93\u5165\u6ca1\u6709\u6392\u5e8f\uff0c\u9700\u8981\u627e\u5230\u6700\u5927\u7684\u5143\u7d20)\uff0c\u90a3\u4e48\u4f60\u5f88\u53ef\u80fd\u65e0\u6cd5\u6bd4 O(n) \u66f4\u5feb\u3002\u5426\u5219\u4f60\u5f88\u53ef\u80fd\u65e0\u6cd5\u6bd4 O(logn) \u66f4\u5feb\u3002 \u5982\u679c\u9762\u8bd5\u5b98\u95ee\u8fd9\u4e2a\u95ee\u9898\uff0c\u7b54\u6848 \u901a\u5e38 \u662f\u80af\u5b9a\u7684\u3002\u5728\u65ad\u8a00\u4f60\u7684\u7b97\u6cd5\u662f\u6700\u4f18\u7684\u65f6\u5019\u8981\u5c0f\u5fc3 \u2014\u2014 \u4e0d\u8981\u8f7b\u6613\u4f7f\u7528\u7edd\u5bf9\u7684\u5f62\u5bb9\u3002 \u5982\u679c\u9762\u8bd5\u8fd8\u6709\u5269\u4f59\u65f6\u95f4\uff0c\u4f60\u53ef\u80fd\u4f1a\u88ab\u95ee\u5230\u4e00\u4e2a\u5168\u65b0\u7684\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ece\u6b65\u9aa4 2\uff08\u95ee\u9898\u9648\u8ff0\uff09\u91cd\u65b0\u5f00\u59cb\u3002\u4f46\u662f\uff0c\u4f60\u4e5f\u53ef\u80fd\u4f1a\u88ab\u8981\u6c42\u5bf9\u4f60\u5df2\u7ecf\u89e3\u51b3\u7684\u95ee\u9898\u8fdb\u884c\u8ddf\u8fdb\u3002\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u5f15\u5165\u65b0\u7684\u7ea6\u675f\uff0c\u8981\u6c42\u6539\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6216\u4efb\u4f55\u5176\u4ed6\u6570\u91cf\u7684\u4e1c\u897f\u3002 \u8fd9\u90e8\u5206\u662f\u4e3a\u4ec0\u4e48\u771f\u6b63\u7406\u89e3\u89e3\u51b3\u65b9\u6848\u800c\u4e0d\u662f\u4ec5\u4ec5\u8bb0\u4f4f\u5b83\u4eec\u5f88\u91cd\u8981\u7684\u539f\u56e0\u3002","title":"\u89e3\u91ca\u4e0e\u8ddf\u8fdb"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_28","text":"\u9762\u8bd5\u5b98\u901a\u5e38\u4f1a\u5728\u9762\u8bd5\u7ed3\u675f\u65f6\u7559\u51fa\u51e0\u5206\u949f\u7684\u65f6\u95f4\u8ba9\u4f60\u95ee\u4e00\u4e9b\u5173\u4e8e\u4ed6\u4eec\u6216\u516c\u53f8\u7684\u95ee\u9898\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u5f88\u5c11\u80fd\u6539\u5584\u9762\u8bd5\u7684\u7ed3\u679c\uff0c\u4f46\u4f60\u80af\u5b9a\u80fd\u8ba9\u5b83\u53d8\u5f97\u66f4\u7cdf\u3002 \u9762\u8bd5\u662f\u53cc\u5411\u7684\u3002\u4f60\u5e94\u8be5\u5229\u7528\u8fd9\u6bb5\u65f6\u95f4\u6765\u4e86\u89e3\u8fd9\u5bb6\u516c\u53f8\uff0c\u770b\u770b\u4f60\u662f\u5426\u613f\u610f\u5728\u90a3\u91cc\u5de5\u4f5c\u3002\u4f60\u5e94\u8be5\u5728\u9762\u8bd5\u524d\u51c6\u5907\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982: \u5728\u516c\u53f8\u7684\u4e00\u5929\u4e2d\u4f1a\u505a\u4e9b\u4ec0\u4e48\uff1f \u4f60\u4e3a\u4ec0\u4e48\u51b3\u5b9a\u52a0\u5165\u8fd9\u5bb6\u516c\u53f8\u800c\u4e0d\u662f\u53e6\u4e00\u5bb6\u516c\u53f8\uff1f \u5173\u4e8e\u8fd9\u4efd\u5de5\u4f5c\uff0c\u4f60\u6700\u559c\u6b22\u548c\u6700\u4e0d\u559c\u6b22\u7684\u662f\u4ec0\u4e48\uff1f \u6211\u53ef\u4ee5\u4ece\u4e8b\u4ec0\u4e48\u6837\u7684\u5de5\u4f5c\uff1f \u6240\u6709\u7684\u5927\u516c\u53f8\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u79d1\u6280\u535a\u5ba2\u3002\u5c55\u793a\u4f60\u5bf9\u8fd9\u5bb6\u516c\u53f8\u611f\u5174\u8da3\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u662f\u9605\u8bfb\u4e00\u4e9b\u535a\u5ba2\u6587\u7ae0\uff0c\u5e76\u7f16\u5236\u4e00\u4e2a\u5173\u4e8e\u516c\u53f8\u4e3a\u4ec0\u4e48\u505a\u51fa\u8fd9\u4e9b\u51b3\u5b9a\u7684\u95ee\u9898\u6e05\u5355\u3002 \u4fdd\u6301\u5174\u8da3\uff0c\u4fdd\u6301\u5fae\u7b11\uff0c\u503e\u542c\u9762\u8bd5\u5b98\u7684\u56de\u7b54\uff0c\u5e76\u63d0\u51fa\u540e\u7eed\u95ee\u9898\uff0c\u4ee5\u8868\u660e\u4f60\u7406\u89e3\u4ed6\u4eec\u7684\u7b54\u6848\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u9ad8\u8d28\u91cf\u7684\u95ee\u9898\uff0c\u6216\u8005\u8868\u73b0\u5f97\u65e0\u804a\u6216\u4e0d\u611f\u5174\u8da3\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u9762\u8bd5\u5b98\u4e00\u4e2a\u4e0d\u597d\u7684\u4fe1\u53f7\u3002\u5982\u679c\u9762\u8bd5\u5b98\u6700\u540e\u4e0d\u559c\u6b22\u4f60\uff0c\u4f60\u5728\u6280\u672f\u65b9\u9762\u505a\u5f97\u518d\u597d\u4e5f\u6ca1\u7528\u3002","title":"\u7ed3\u5c3e"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_29","text":"\u4ee5\u4e0b\u662f\u300c\u9762\u8bd5\u7684\u9636\u6bb5\u300d\u4e00\u6587\u7684\u6458\u8981\u3002\u5982\u679c\u60a8\u8fdb\u884c\u8fdc\u7a0b\u9762\u8bd5\uff0c\u60a8\u53ef\u4ee5\u6253\u5370\u6b64\u6d53\u7f29\u7248\u5e76\u5728\u9762\u8bd5\u671f\u95f4\u5c06\u5176\u653e\u5728\u60a8\u9762\u524d\u3002 \u7b2c\u4e00\u9636\u6bb5\uff1a\u4ecb\u7ecd 30-60 \u79d2\u4ecb\u7ecd\u60a8\u7684\u6559\u80b2\u3001\u5de5\u4f5c\u7ecf\u9a8c\u548c\u5174\u8da3\u3002 \u81ea\u4fe1\uff0c\u4fdd\u6301\u5fae\u7b11\u3002 \u5f53\u9762\u8bd5\u5b98\u8c08\u8bba\u4ed6\u4eec\u81ea\u5df1\u65f6\u8981\u6ce8\u610f\uff0c\u7a0d\u540e\u5c06\u4ed6\u4eec\u7684\u5de5\u4f5c\u7eb3\u5165\u60a8\u7684\u95ee\u9898\u3002 \u7b2c\u4e8c\u9636\u6bb5\uff1a\u95ee\u9898\u9648\u8ff0 \u5728\u9762\u8bd5\u5b98\u5c06\u95ee\u9898\u8bfb\u7ed9\u4f60\u542c\u540e\uff0c\u5c06\u95ee\u9898\u590d\u8ff0\u7ed9\u4ed6\u4eec\u3002 \u8be2\u95ee\u6709\u5173\u8f93\u5165\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u4f8b\u5982\u9884\u671f\u7684\u8f93\u5165\u5927\u5c0f\u3001\u8fb9\u7f18\u60c5\u51b5\u548c\u65e0\u6548\u8f93\u5165\u3002 \u7b2c\u4e09\u9636\u6bb5\uff1a\u5934\u8111\u98ce\u66b4 DS&A \u628a\u4f60\u6240\u6709\u7684\u60f3\u6cd5\u90fd\u8bf4\u51fa\u6765\u3002 \u5206\u89e3\u95ee\u9898\uff1a\u5f04\u6e05\u695a\u4f60\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u5e76\u601d\u8003\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u53ef\u4ee5\u4ee5\u826f\u597d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u5b83\u3002 \u63a5\u53d7\u9762\u8bd5\u5b98\u7684\u4efb\u4f55\u8bc4\u8bba\u6216\u53cd\u9988\uff0c\u4ed6\u4eec\u53ef\u80fd\u8bd5\u56fe\u6697\u793a\u60a8\u627e\u5230\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4e00\u65e6\u4f60\u6709\u4e86\u60f3\u6cd5\uff0c\u5728\u7f16\u7801\u4e4b\u524d\uff0c\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u4f60\u7684\u60f3\u6cd5\uff0c\u5e76\u786e\u4fdd\u4ed6\u4eec\u7406\u89e3\u5e76\u540c\u610f\u8fd9\u662f\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6cd5\u3002 \u7b2c\u56db\u9636\u6bb5\uff1a\u5b9e\u64cd \u5728\u4f60\u5b9e\u9645\u7f16\u7801\u65f6\u89e3\u91ca\u4f60\u7684\u51b3\u7b56\u3002\u5f53\u4f60\u58f0\u660e\u96c6\u5408\u4e4b\u7c7b\u7684\u4e1c\u897f\u65f6\uff0c\u89e3\u91ca\u4e00\u4e0b\u76ee\u7684\u662f\u4ec0\u4e48\u3002 \u7f16\u5199\u7b26\u5408\u89c4\u8303\u7f16\u7a0b\u8bed\u8a00\u7ea6\u5b9a\u7684\u4ee3\u7801\u3002 \u907f\u514d\u7f16\u5199\u91cd\u590d\u4ee3\u7801 - \u5982\u679c\u4f60\u591a\u6b21\u7f16\u5199\u7c7b\u4f3c\u4ee3\u7801\uff0c\u8bf7\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u6216 for \u5faa\u73af\u3002 \u5982\u679c\u4f60\u88ab\u5361\u4f4f\u4e86\uff0c\u4e0d\u8981\u60ca\u614c - \u4e0e\u4f60\u7684\u9762\u8bd5\u5b98\u4ea4\u6d41\u4f60\u7684\u7591\u8651\u3002 \u4e0d\u8981\u5bb3\u6015\u66b4\u529b\u89e3\u51b3\u65b9\u6848\uff08\u540c\u65f6\u627f\u8ba4\u5b83\u662f\u66b4\u529b\u89e3\u6cd5\uff09\uff0c\u7136\u540e\u901a\u8fc7\u4f18\u5316 \u201c\u6162\u201d \u7684\u90e8\u5206\u6765\u6539\u8fdb\u5b83\u3002 \u7ee7\u7eed\u628a\u4f60\u7684\u60f3\u6cd5\u8bf4\u51fa\u6765\u5e76\u4e0e\u9762\u8bd5\u5b98\u4ea4\u8c08\u3002\u8fd9\u8ba9\u4ed6\u4eec\u66f4\u5bb9\u6613\u7ed9\u4f60\u63d0\u793a\u3002 \u7b2c\u4e94\u9636\u6bb5\uff1a\u6d4b\u8bd5 & debug \u904d\u5386\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u901a\u8fc7\u5728\u6587\u4ef6\u5e95\u90e8\u5199\u5165\u6765\u8ddf\u8e2a\u53d8\u91cf\uff0c\u5e76\u4e0d\u65ad\u66f4\u65b0\u5b83\u4eec\u3002\u538b\u7f29\u7410\u788e\u7684\u90e8\u5206\uff0c\u4f8b\u5982\u521b\u5efa\u524d\u7f00\u548c\u4ee5\u8282\u7701\u65f6\u95f4\u3002 \u5982\u679c\u6709\u9519\u8bef\u5e76\u4e14\u73af\u5883\u652f\u6301\u8fd0\u884c\u4ee3\u7801\uff0c\u5c06\u6253\u5370\u8bed\u53e5\u653e\u5165\u4f60\u7684\u7b97\u6cd5\u5e76\u904d\u5386\u4e00\u4e2a\u5c0f\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bd4\u8f83\u53d8\u91cf\u7684\u9884\u671f\u503c\u548c\u5b9e\u9645\u503c\u3002 \u5982\u679c\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u8bf4\u51fa\u95ee\u9898\u5e76\u7ee7\u7eed\u4e0e\u9762\u8bd5\u5b98\u4ea4\u8c08\u3002 \u7b2c\u516d\u9636\u6bb5\uff1a\u89e3\u91ca\u548c\u8ddf\u8fdb \u60a8\u5e94\u8be5\u51c6\u5907\u56de\u7b54\u7684\u95ee\u9898\uff1a \u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\u3002 \u4f60\u4e3a\u4ec0\u4e48\u9009\u62e9\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3001\u7b97\u6cd5\u6216\u903b\u8f91\uff1f \u60a8\u8ba4\u4e3a\u8be5\u7b97\u6cd5\u53ef\u4ee5\u5728\u590d\u6742\u6027\u65b9\u9762\u8fdb\u884c\u6539\u8fdb\u5417\uff1f\u5982\u679c\u4ed6\u4eec\u95ee\u4f60\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u7b54\u6848\u901a\u5e38\u662f\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u7684\u7b97\u6cd5\u6bd4 O(n) \u6162\u3002 \u7b2c\u4e03\u9636\u6bb5\uff1a\u7ed3\u5c3e \u51c6\u5907\u597d\u6709\u5173\u516c\u53f8\u7684\u95ee\u9898\u3002 \u5bf9\u9762\u8bd5\u5b98\u7684\u56de\u7b54\u8868\u73b0\u51fa\u611f\u5174\u8da3\u3001\u5fae\u7b11\u5e76\u63d0\u51fa\u540e\u7eed\u95ee\u9898\u3002","title":"\u9762\u8bd5\u5907\u8003\u603b\u89c8"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_30","text":"\u5728\u4e0d\u540c\u9886\u57df\uff0c\u6392\u5e8f\u7b97\u6cd5\u7684\u5b9e\u73b0\u5404\u6709\u5343\u79cb\u3002\u603b\u4f53\u6765\u770b\uff0c\u6392\u5e8f\u7b97\u6cd5\u5927\u81f4\u53ef\u5206\u4e3a\u5341\u7c7b\uff1a \u9009\u6ce1\u63d2\uff1a\u9009\u62e9\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f \u5feb\u5f52\u5e0c\u5806\uff1a\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u3001\u5806\u6392\u5e8f \u6876\u8ba1\u57fa\uff1a\u6876\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f \u867d\u7136\u5de5\u4f5c\u4e2d\u5f88\u5c11\u9700\u8981\u6211\u4eec\u624b\u6253\u6392\u5e8f\u7b97\u6cd5\uff0c\u53ea\u9700\u8981\u8c03\u7528\u57fa\u7840\u5e93\u4e2d\u7684 Arrays.sort() \u4fbf\u53ef\u89e3\u51b3\u6392\u5e8f\u95ee\u9898\u3002\u4f46\u4f60\u53ef\u66fe\u9759\u4e0b\u5fc3\u6765\uff0c\u9605\u8bfb Arrays.sort() \u80cc\u540e\u7684\u539f\u7406\uff0c\u5b83\u662f\u91c7\u7528\u4e86\u54ea\u79cd\u6392\u5e8f\u7b97\u6cd5\u5462\uff1f \u4e8b\u5b9e\u4e0a\uff0cArrays.sort() \u51fd\u6570\u5e76\u6ca1\u6709\u91c7\u7528\u5355\u4e00\u7684\u6392\u5e8f\u7b97\u6cd5\u3002Java \u4e2d\u7684 Arrays.sort() \u51fd\u6570\u662f\u7531 Java \u8bed\u8a00\u7684\u51e0\u4f4d\u521b\u59cb\u4eba\u7f16\u5199\u7684\uff0c\u8fd9\u4e2a\u5c0f\u5c0f\u7684\u51fd\u6570\u903b\u8f91\u4e25\u5bc6\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u88ab\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4e3a\u4e86\u6700\u5927\u5316\u6027\u80fd\u505a\u4e86\u4e00\u5c42\u53c8\u4e00\u5c42\u7684\u4f18\u5316\uff0c\u6839\u636e\u6570\u636e\u7684\u6982\u51b5\u91c7\u7528\u53cc\u8f74\u5feb\u6392\u3001\u5f52\u5e76\u6216\u4e8c\u5206\u63d2\u5165\u7b97\u6cd5\u5b8c\u6210\u6392\u5e8f\uff0c\u582a\u79f0\u5de5\u4e1a\u7ea7\u6392\u5e8f\u7b97\u6cd5\u7684\u5178\u8303\uff0c\u7406\u6e05\u4e4b\u540e\u5176\u4e50\u65e0\u7a77\u3002 \u5e76\u4e14\uff0c\u6392\u5e8f\u7b97\u6cd5\u6df1\u53d7\u9762\u8bd5\u5b98\u7684\u559c\u7231\uff0c\u5728\u4eba\u624d\u62db\u8058\u65f6\uff0c\u603b\u662f\u5c06\u6392\u5e8f\u7b97\u6cd5\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u7684\u57fa\u672c\u529f\u6765\u8003\u5bdf\u3002\u5bf9\u6392\u5e8f\u7b97\u6cd5\u7684\u7406\u89e3\u6df1\u5ea6\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53cd\u6620\u4e86\u7a0b\u5e8f\u5458\u903b\u8f91\u601d\u7ef4\u7684\u4e25\u8c28\u5ea6\u3002\u653b\u514b\u6392\u5e8f\u7b97\u6cd5\u7684\u96be\u5173\u662f\u6bcf\u4f4d\u7a0b\u5e8f\u5927\u725b\u7684\u5fc5\u7ecf\u4e4b\u8def\u3002 \u5982\u725b\u987f\u6240\u8a00\uff0c\u6b63\u662f\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u6211\u4eec\u624d\u80fd\u671b\u5f97\u66f4\u8fdc\u3002\u672c\u7cfb\u5217\u6587\u7ae0\u6211\u4eec\u5c31\u6765\u4e00\u8d77\u68b3\u7406\u4e00\u4e0b\u6392\u5e8f\u7b97\u6cd5\u7684\u524d\u4e16\u4eca\u751f\u3002","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#on2","text":"","title":"O(n^2) \u7ea7\u6392\u5e8f\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_31","text":"\u5192\u6ce1\u6392\u5e8f\u662f\u5165\u95e8\u7ea7\u7684\u7b97\u6cd5\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u73a9\u6cd5\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u5192\u6ce1\u6392\u5e8f\u6709\u4e09\u79cd\u5199\u6cd5\uff1a \u4e00\u8fb9\u6bd4\u8f83\u4e00\u8fb9\u5411\u540e\u4e24\u4e24\u4ea4\u6362\uff0c\u5c06\u6700\u5927\u503c / \u6700\u5c0f\u503c\u5192\u6ce1\u5230\u6700\u540e\u4e00\u4f4d\uff1b \u7ecf\u8fc7\u4f18\u5316\u7684\u5199\u6cd5\uff1a\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u8f6e\u6b21\u7684\u6bd4\u8f83\u662f\u5426\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u751f\u4ea4\u6362\u8868\u793a\u5df2\u7ecf\u6709\u5e8f\uff0c\u4e0d\u518d\u7ee7\u7eed\u6392\u5e8f\uff1b \u8fdb\u4e00\u6b65\u4f18\u5316\u7684\u5199\u6cd5\uff1a\u9664\u4e86\u4f7f\u7528\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u8f6e\u6b21\u662f\u5426\u53d1\u751f\u4ea4\u6362\u5916\uff0c\u518d\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e0a\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e\uff0c\u4e0b\u4e00\u8f6e\u6392\u5e8f\u65f6\u5230\u8fbe\u4e0a\u6b21\u4ea4\u6362\u7684\u4f4d\u7f6e\u5c31\u505c\u6b62\u6bd4\u8f83\u3002 first method public static void bubbleSort(int[] arr) { for (int i = 0; i < arr.length - 1; i++) { for (int j = 0; j < arr.length - 1 - i; j++) { if (arr[j] > arr[j + 1]) { // \u5982\u679c\u5de6\u8fb9\u7684\u6570\u5927\u4e8e\u53f3\u8fb9\u7684\u6570\uff0c\u5219\u4ea4\u6362\uff0c\u4fdd\u8bc1\u53f3\u8fb9\u7684\u6570\u5b57\u6700\u5927 swap(arr, j, j + 1); } } } } // \u4ea4\u6362\u5143\u7d20 private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } second method public static void bubbleSort(int[] arr) { // \u8bb0\u5f55\u6bcf\u8f6e\u5192\u6ce1\u662f\u5426\u53d1\u751f\u4e86\u4ea4\u6362 boolean swapped; for (int i = 0; i < arr.length - 1; i++) { swapped = false; for (int j = 0; j < arr.length - 1 - i; j++) { if (arr[j] > arr[j + 1]) { swap(arr, j, j + 1); swapped = true; } } // \u5982\u679c\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u76f4\u63a5\u9000\u51fa\u5faa\u73af if (!swapped) break; } } third method public static void bubbleSort(int[] arr) { boolean swapped = true; // \u6700\u540e\u4e00\u4e2a\u6ca1\u6709\u7ecf\u8fc7\u6392\u5e8f\u7684\u5143\u7d20\u7684\u4e0b\u6807 int indexOfLastUnsortedElement = arr.length - 1; // \u4e0a\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e int swappedIndex = -1; while (swapped) { swapped = false; for (int i = 0; i < indexOfLastUnsortedElement; i++) { if (arr[i] > arr[i + 1]) { // \u5982\u679c\u5de6\u8fb9\u7684\u6570\u5927\u4e8e\u53f3\u8fb9\u7684\u6570\uff0c\u5219\u4ea4\u6362\uff0c\u4fdd\u8bc1\u53f3\u8fb9\u7684\u6570\u5b57\u6700\u5927 swap(arr, i, i + 1); // \u8868\u793a\u53d1\u751f\u4e86\u4ea4\u6362 swapped = true; // \u66f4\u65b0\u4ea4\u6362\u7684\u4f4d\u7f6e swappedIndex = i; } } // \u6700\u540e\u4e00\u4e2a\u6ca1\u6709\u7ecf\u8fc7\u6392\u5e8f\u7684\u5143\u7d20\u7684\u4e0b\u6807\u5c31\u662f\u6700\u540e\u4e00\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e indexOfLastUnsortedElement = swappedIndex; } } // \u4ea4\u6362\u5143\u7d20 private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u7ecf\u8fc7\u518d\u4e00\u6b21\u7684\u4f18\u5316\uff0c\u4ee3\u7801\u770b\u8d77\u6765\u5c31\u7a0d\u5fae\u6709\u70b9\u590d\u6742\u4e86\u3002\u6700\u5916\u5c42\u7684 while \u5faa\u73af\u6bcf\u7ecf\u8fc7\u4e00\u8f6e\uff0c\u5269\u4f59\u6570\u5b57\u4e2d\u7684\u6700\u5927\u503c\u4ecd\u7136\u662f\u88ab\u79fb\u52a8\u5230\u5f53\u524d\u8f6e\u6b21\u7684\u6700\u540e\u4e00\u4f4d\u3002 \u5728\u4e0b\u4e00\u8f6e\u6bd4\u8f83\u65f6\uff0c\u53ea\u9700\u6bd4\u8f83\u5230\u4e0a\u4e00\u8f6e\u6bd4\u8f83\u4e2d\uff0c\u6700\u540e\u4e00\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u56e0\u4e3a\u540e\u9762\u7684\u6240\u6709\u5143\u7d20\u90fd\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u5fc5\u7136\u5df2\u7ecf\u6709\u5e8f\u4e86\u3002 \u5f53\u4e00\u8f6e\u6bd4\u8f83\u4e2d\u4ece\u5934\u5230\u5c3e\u90fd\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u5219\u8868\u793a\u6574\u4e2a\u5217\u8868\u5df2\u7ecf\u6709\u5e8f\uff0c\u6392\u5e8f\u5b8c\u6210\u3002 \u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u6570\u5b57\u4ea4\u6362 a = a ^ b; b = b ^ a; a = a ^ b;","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_32","text":"\u9009\u62e9\u6392\u5e8f\u7684\u601d\u60f3\u662f\uff1a\u53cc\u91cd\u5faa\u73af\u904d\u5386\u6570\u7ec4\uff0c\u6bcf\u7ecf\u8fc7\u4e00\u8f6e\u6bd4\u8f83\uff0c\u627e\u5230\u6700\u5c0f\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5c06\u5176\u4ea4\u6362\u81f3\u9996\u4f4d\u3002 public static void selectionSort(int[] arr) { int minIndex; for (int i = 0; i < arr.length - 1; i++) { minIndex = i; for (int j = i + 1; j < arr.length; j++) { if (arr[minIndex] > arr[j]) { // \u8bb0\u5f55\u6700\u5c0f\u503c\u7684\u4e0b\u6807 minIndex = j; } } // \u5c06\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u81f3\u9996\u4f4d int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } } \u76f8\u540c\u70b9\uff1a \u90fd\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a n^2 \u90fd\u53ea\u4f7f\u7528\u6709\u9650\u4e2a\u53d8\u91cf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\u3002 \u4e0d\u540c\u70b9\uff1a \u5192\u6ce1\u6392\u5e8f\u5728\u6bd4\u8f83\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u65ad\u4ea4\u6362\uff1b\u800c\u9009\u62e9\u6392\u5e8f\u589e\u52a0\u4e86\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u6700\u5c0f\u503c / \u6700\u5927\u503c\u7684\u4e0b\u6807\uff0c\u904d\u5386\u5b8c\u6210\u540e\u624d\u4ea4\u6362\uff0c\u51cf\u5c11\u4e86\u4ea4\u6362\u6b21\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5192\u6ce1\u6392\u5e8f\u548c\u9009\u62e9\u6392\u5e8f\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4e0d\u540c\u70b9\uff0c\u90a3\u5c31\u662f\uff1a \u5192\u6ce1\u6392\u5e8f\u6cd5\u662f\u7a33\u5b9a\u7684\uff0c\u9009\u62e9\u6392\u5e8f\u6cd5\u662f\u4e0d\u7a33\u5b9a\u7684\u3002","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_33","text":"\u63d2\u5165\u6392\u5e8f\u6709\u4e24\u79cd\u5199\u6cd5\uff1a \u4ea4\u6362\u6cd5\uff1a\u5728\u65b0\u6570\u5b57\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u4e0e\u524d\u9762\u7684\u6570\u5b57\u4ea4\u6362\uff0c\u76f4\u5230\u627e\u5230\u81ea\u5df1\u5408\u9002\u7684\u4f4d\u7f6e\u3002 \u79fb\u52a8\u6cd5\uff1a\u5728\u65b0\u6570\u5b57\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u4e0e\u524d\u9762\u7684\u6570\u5b57\u4e0d\u65ad\u6bd4\u8f83\uff0c\u524d\u9762\u7684\u6570\u5b57\u4e0d\u65ad\u5411\u540e\u632a\u51fa\u4f4d\u7f6e\uff0c\u5f53\u65b0\u6570\u5b57\u627e\u5230\u81ea\u5df1\u7684\u4f4d\u7f6e\u540e\uff0c\u63d2\u5165\u4e00\u6b21\u5373\u53ef\u3002 public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { // j \u8bb0\u5f55\u5f53\u524d\u6570\u5b57\u4e0b\u6807 int j = i; // \u5f53\u524d\u6570\u5b57\u6bd4\u524d\u4e00\u4e2a\u6570\u5b57\u5c0f\uff0c\u5219\u5c06\u5f53\u524d\u6570\u5b57\u4e0e\u524d\u4e00\u4e2a\u6570\u5b57\u4ea4\u6362 while (j >= 1 && arr[j] < arr[j - 1]) { swap(arr, j, j - 1); // \u66f4\u65b0\u5f53\u524d\u6570\u5b57\u4e0b\u6807 j--; } } } private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u79fb\u52a8\u6cd5\u63d2\u5165\u6392\u5e8f \u6211\u4eec\u53d1\u73b0\uff0c\u5728\u4ea4\u6362\u6cd5\u63d2\u5165\u6392\u5e8f\u4e2d\uff0c\u6bcf\u6b21\u4ea4\u6362\u6570\u5b57\u65f6\uff0cswap \u51fd\u6570\u90fd\u4f1a\u8fdb\u884c\u4e09\u6b21\u8d4b\u503c\u64cd\u4f5c\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u65b0\u63d2\u5165\u7684\u8fd9\u4e2a\u6570\u5b57\u5e76\u4e0d\u4e00\u5b9a\u9002\u5408\u4e0e\u5b83\u4ea4\u6362\u7684\u6570\u5b57\u6240\u5728\u7684\u4f4d\u7f6e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u521a\u6362\u5230\u65b0\u7684\u4f4d\u7f6e\u4e0a\u4e0d\u4e45\uff0c\u4e0b\u4e00\u6b21\u6bd4\u8f83\u540e\uff0c\u5982\u679c\u53c8\u9700\u8981\u4ea4\u6362\uff0c\u5b83\u9a6c\u4e0a\u53c8\u4f1a\u88ab\u6362\u5230\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\u3002 \u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u79cd\u4f18\u5316\u65b9\u6848\uff1a\u8ba9\u65b0\u63d2\u5165\u7684\u6570\u5b57\u5148\u8fdb\u884c\u6bd4\u8f83\uff0c\u524d\u9762\u6bd4\u5b83\u5927\u7684\u6570\u5b57\u4e0d\u65ad\u5411\u540e\u79fb\u52a8\uff0c\u76f4\u5230\u627e\u5230\u9002\u5408\u8fd9\u4e2a\u65b0\u6570\u5b57\u7684\u4f4d\u7f6e\u540e\uff0c\u65b0\u6570\u5b57\u53ea\u505a\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u5373\u53ef\u3002 \u8fd9\u79cd\u65b9\u6848\u6211\u4eec\u9700\u8981\u628a\u65b0\u63d2\u5165\u7684\u6570\u5b57\u6682\u5b58\u8d77\u6765\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { int currentNumber = arr[i]; int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr[j]) { arr[j + 1] = arr[j]; j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr[j + 1] = currentNumber; } }","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#sum","text":"\u5192\u6ce1\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f\u6709\u4e24\u79cd\u4f18\u5316\u65b9\u5f0f\uff1a \u8bb0\u5f55\u5f53\u524d\u8f6e\u6b21\u662f\u5426\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u6ca1\u6709\u53d1\u751f\u8fc7\u4ea4\u6362\u8868\u793a\u6570\u7ec4\u5df2\u7ecf\u6709\u5e8f\uff1b \u8bb0\u5f55\u4e0a\u6b21\u53d1\u751f\u4ea4\u6362\u7684\u4f4d\u7f6e\uff0c\u4e0b\u4e00\u8f6e\u6392\u5e8f\u65f6\u53ea\u6bd4\u8f83\u5230\u6b64\u4f4d\u7f6e\u3002 \u9009\u62e9\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\u53ef\u4ee5\u6f14\u53d8\u4e3a\u4e8c\u5143\u9009\u62e9\u6392\u5e8f\uff1a \u4e8c\u5143\u9009\u62e9\u6392\u5e8f\uff1a\u4e00\u6b21\u904d\u5386\u9009\u51fa\u4e24\u4e2a\u503c\u2014\u2014\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1b \u4e8c\u5143\u9009\u62e9\u6392\u5e8f\u526a\u679d\u4f18\u5316\uff1a\u5f53\u67d0\u4e00\u8f6e\u904d\u5386\u51fa\u73b0\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u76f8\u7b49\uff0c\u8868\u793a\u6570\u7ec4\u4e2d\u5269\u4f59\u5143\u7d20\u5df2\u7ecf\u5168\u90e8\u76f8\u7b49\u3002 \u63d2\u5165\u6392\u5e8f \u63d2\u5165\u6392\u5e8f\u6709\u4e24\u79cd\u5199\u6cd5\uff1a \u4ea4\u6362\u6cd5\uff1a\u65b0\u6570\u5b57\u901a\u8fc7\u4e0d\u65ad\u4ea4\u6362\u627e\u5230\u81ea\u5df1\u5408\u9002\u7684\u4f4d\u7f6e\uff1b \u79fb\u52a8\u6cd5\uff1a\u65e7\u6570\u5b57\u4e0d\u65ad\u5411\u540e\u79fb\u52a8\uff0c\u76f4\u5230\u65b0\u6570\u5b57\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u3002 \u76f8\u540c\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(n^2) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u3002 \u90fd\u9700\u8981\u91c7\u7528\u4e24\u91cd\u5faa\u73af\u3002 \u4e0d\u540c\u70b9 \u9009\u62e9\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u5192\u6ce1\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff1b \u5728\u8fd9\u4e09\u4e2a\u6392\u5e8f\u7b97\u6cd5\u4e2d\uff0c\u9009\u62e9\u6392\u5e8f\u4ea4\u6362\u7684\u6b21\u6570\u662f\u6700\u5c11\u7684\uff1b \u5728\u6570\u7ec4\u51e0\u4e4e\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1\u7ebf\u6027\u7ea7\u522b\u3002","title":"sum"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#onlogn","text":"","title":"O(nlogn) \u7ea7\u6392\u5e8f\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_34","text":"public static void shellSort(int[] arr) { // \u95f4\u9694\u5e8f\u5217\uff0c\u5728\u5e0c\u5c14\u6392\u5e8f\u4e2d\u6211\u4eec\u79f0\u4e4b\u4e3a\u589e\u91cf\u5e8f\u5217 for (int gap = arr.length / 2; gap > 0; gap /= 2) { // \u5206\u7ec4 for (int groupStartIndex = 0; groupStartIndex < gap; groupStartIndex++) { // \u63d2\u5165\u6392\u5e8f for (int currentIndex = groupStartIndex + gap; currentIndex < arr.length; currentIndex += gap) { // currentNumber \u7ad9\u8d77\u6765\uff0c\u5f00\u59cb\u627e\u4f4d\u7f6e int currentNumber = arr[currentIndex]; int preIndex = currentIndex - gap; while (preIndex >= groupStartIndex && currentNumber < arr[preIndex]) { // \u5411\u540e\u632a\u4f4d\u7f6e arr[preIndex + gap] = arr[preIndex]; preIndex -= gap; } // currentNumber \u627e\u5230\u4e86\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[preIndex + gap] = currentNumber; } } } } \u6ce8\uff1a\u7531\u4e8e\u5e0c\u5c14\u6392\u5e8f\u7406\u89e3\u8d77\u6765\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u6240\u4ee5\u7b14\u8005\u91c7\u7528\u4e86\u66f4\u51c6\u786e\u7684\u547d\u540d\u65b9\u5f0f\u66ff\u4ee3 i\u3001j \u7b49\u53d8\u91cf\u540d\u3002 \u8fd9\u4efd\u4ee3\u7801\u4e0e\u6211\u4eec\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u601d\u8def\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u5148\u5206\u7ec4\uff0c\u518d\u5bf9\u6bcf\u7ec4\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002\u540c\u6837\u5730\uff0c\u8fd9\u91cc\u7684\u63d2\u5165\u6392\u5e8f\u4e5f\u53ef\u4ee5\u91c7\u7528\u4ea4\u6362\u5143\u7d20\u7684\u65b9\u5f0f\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\u3002\u6211\u4eec\u73b0\u5728\u7684\u5904\u7406\u65b9\u5f0f\u662f\uff1a\u5904\u7406\u5b8c\u4e00\u7ec4\u95f4\u9694\u5e8f\u5217\u540e\uff0c\u518d\u56de\u6765\u5904\u7406\u4e0b\u4e00\u7ec4\u95f4\u9694\u5e8f\u5217\uff0c\u8fd9\u975e\u5e38\u7b26\u5408\u4eba\u7c7b\u601d\u7ef4\u3002\u4f46\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u5b83\u66f4\u559c\u6b22\u4ece\u7b2c gap \u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6309\u7167\u987a\u5e8f\u5c06\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u524d\u63d2\u5165\u81ea\u5df1\u6240\u5728\u7684\u7ec4\u8fd9\u79cd\u65b9\u5f0f\u3002\u867d\u7136\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u8d77\u6765\u662f\u5728\u4e0d\u540c\u7684\u95f4\u9694\u5e8f\u5217\u4e2d\u4e0d\u65ad\u8df3\u8dc3\uff0c\u4f46\u7ad9\u5728\u8ba1\u7b97\u673a\u7684\u89d2\u5ea6\uff0c\u5b83\u662f\u5728\u8bbf\u95ee\u4e00\u6bb5\u8fde\u7eed\u6570\u7ec4\u3002 public static void shellSort(int[] arr) { // \u95f4\u9694\u5e8f\u5217\uff0c\u5728\u5e0c\u5c14\u6392\u5e8f\u4e2d\u6211\u4eec\u79f0\u4e4b\u4e3a\u589e\u91cf\u5e8f\u5217 for (int gap = arr.length / 2; gap > 0; gap /= 2) { // \u4ece gap \u5f00\u59cb\uff0c\u6309\u7167\u987a\u5e8f\u5c06\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u524d\u63d2\u5165\u81ea\u5df1\u6240\u5728\u7684\u7ec4 for (int i = gap; i < arr.length; i++) { // currentNumber \u7ad9\u8d77\u6765\uff0c\u5f00\u59cb\u627e\u4f4d\u7f6e int currentNumber = arr[i]; // \u8be5\u7ec4\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u7d22\u5f15 int preIndex = i - gap; while (preIndex >= 0 && currentNumber < arr[preIndex]) { // \u5411\u540e\u632a\u4f4d\u7f6e arr[preIndex + gap] = arr[preIndex]; preIndex -= gap; } // currentNumber \u627e\u5230\u4e86\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[preIndex + gap] = currentNumber; } } } \u7ecf\u8fc7\u4f18\u5316\u4e4b\u540e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u770b\u8d77\u6765\u5c31\u548c\u63d2\u5165\u6392\u5e8f\u975e\u5e38\u76f8\u4f3c\u4e86\uff0c\u533a\u522b\u4ec5\u5728\u4e8e\u5e0c\u5c14\u6392\u5e8f\u6700\u5916\u5c42\u5d4c\u5957\u4e86\u4e00\u4e2a\u7f29\u5c0f\u589e\u91cf\u7684 for \u5faa\u73af\uff1b\u5e76\u4e14\u63d2\u5165\u65f6\u4e0d\u518d\u662f\u76f8\u90bb\u6570\u5b57\u632a\u52a8\uff0c\u800c\u662f\u4ee5\u589e\u91cf\u4e3a\u6b65\u957f\u632a\u52a8 public static void shellSortByKnuth(int[] arr) { // \u627e\u5230\u5f53\u524d\u6570\u7ec4\u9700\u8981\u7528\u5230\u7684 Knuth \u5e8f\u5217\u4e2d\u7684\u6700\u5927\u503c int maxKnuthNumber = 1; while (maxKnuthNumber <= arr.length / 3) { maxKnuthNumber = maxKnuthNumber * 3 + 1; } // \u589e\u91cf\u6309\u7167 Knuth \u5e8f\u5217\u89c4\u5219\u4f9d\u6b21\u9012\u51cf for (int gap = maxKnuthNumber; gap > 0; gap = (gap - 1) / 3) { // \u4ece gap \u5f00\u59cb\uff0c\u6309\u7167\u987a\u5e8f\u5c06\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u5411\u524d\u63d2\u5165\u81ea\u5df1\u6240\u5728\u7684\u7ec4 for (int i = gap; i < arr.length; i++) { // currentNumber \u7ad9\u8d77\u6765\uff0c\u5f00\u59cb\u627e\u4f4d\u7f6e int currentNumber = arr[i]; // \u8be5\u7ec4\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u7d22\u5f15 int preIndex = i - gap; while (preIndex >= 0 && currentNumber < arr[preIndex]) { // \u5411\u540e\u632a\u4f4d\u7f6e arr[preIndex + gap] = arr[preIndex]; preIndex -= gap; } // currentNumber \u627e\u5230\u4e86\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[preIndex + gap] = currentNumber; } } } \u867d\u7136\u63d2\u5165\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f46\u5e0c\u5c14\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\u3002\u5728\u589e\u91cf\u8f83\u5927\u65f6\uff0c\u6392\u5e8f\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u7834\u574f\u539f\u6709\u6570\u7ec4\u4e2d\u76f8\u540c\u5173\u952e\u5b57\u7684\u76f8\u5bf9\u6b21\u5e8f\u3002","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_35","text":"\u6570\u7ec4\u3001\u94fe\u8868\u90fd\u662f\u4e00\u7ef4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u800c\u5806\u662f\u4e8c\u7ef4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5bf9\u62bd\u8c61\u601d\u7ef4\u7684\u8981\u6c42\u66f4\u9ad8\uff0c\u6240\u4ee5\u8bb8\u591a\u7a0b\u5e8f\u5458\u300c\u8c08\u5806\u8272\u53d8\u300d\u3002\u4f46\u5806\u53c8\u662f\u6570\u636e\u7ed3\u6784\u8fdb\u9636\u5fc5\u7ecf\u7684\u4e00\u6b65\uff0c\u6211\u4eec\u4e0d\u59a8\u9759\u4e0b\u5fc3\u6765\uff0c\u5c06\u5176\u68b3\u7406\u6e05\u695a\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28 \u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u4e8c\u53c9\u6811\uff0c\u9664\u4e86\u6700\u540e\u4e00\u5c42\u5916\uff0c\u5176\u4ed6\u5c42\u7684\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u603b\u6570 n \u6ee1\u8db3\uff1a2^h - 1 <= n <= 2^(h+1) - 1\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u6700\u540e\u4e24\u5c42\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\u3002 public static void heapSort(int[] arr) { // \u6784\u5efa\u521d\u59cb\u5927\u9876\u5806 buildMaxHeap(arr); for (int i = arr.length - 1; i > 0; i--) { // \u5c06\u6700\u5927\u503c\u4ea4\u6362\u5230\u6570\u7ec4\u6700\u540e swap(arr, 0, i); // \u8c03\u6574\u5269\u4f59\u6570\u7ec4\uff0c\u4f7f\u5176\u6ee1\u8db3\u5927\u9876\u5806 maxHeapify(arr, 0, i); } } // \u6784\u5efa\u521d\u59cb\u5927\u9876\u5806 private static void buildMaxHeap(int[] arr) { // \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u8c03\u6574\u5927\u9876\u5806\uff0c\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u7684\u4e0b\u6807\u5c31\u662f arr.length / 2-1 for (int i = arr.length / 2 - 1; i >= 0; i--) { maxHeapify(arr, i, arr.length); } } // \u8c03\u6574\u5927\u9876\u5806\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u8868\u793a\u5269\u4f59\u672a\u6392\u5e8f\u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u5269\u4f59\u5806\u7684\u5927\u5c0f private static void maxHeapify(int[] arr, int i, int heapSize) { // \u5de6\u5b50\u7ed3\u70b9\u4e0b\u6807 int l = 2 * i + 1; // \u53f3\u5b50\u7ed3\u70b9\u4e0b\u6807 int r = l + 1; // \u8bb0\u5f55\u6839\u7ed3\u70b9\u3001\u5de6\u5b50\u6811\u7ed3\u70b9\u3001\u53f3\u5b50\u6811\u7ed3\u70b9\u4e09\u8005\u4e2d\u7684\u6700\u5927\u503c\u4e0b\u6807 int largest = i; // \u4e0e\u5de6\u5b50\u6811\u7ed3\u70b9\u6bd4\u8f83 if (l < heapSize && arr[l] > arr[largest]) { largest = l; } // \u4e0e\u53f3\u5b50\u6811\u7ed3\u70b9\u6bd4\u8f83 if (r < heapSize && arr[r] > arr[largest]) { largest = r; } if (largest != i) { // \u5c06\u6700\u5927\u503c\u4ea4\u6362\u4e3a\u6839\u7ed3\u70b9 swap(arr, i, largest); // \u518d\u6b21\u8c03\u6574\u4ea4\u6362\u6570\u5b57\u540e\u7684\u5927\u9876\u5806 maxHeapify(arr, largest, heapSize); } } private static void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; }","title":"\u5806\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_36","text":"public static void quickSort(int[] arr) { quickSort(arr, 0, arr.length - 1); } public static void quickSort(int[] arr, int start, int end) { // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } public static int partition(int[] arr, int start, int end) { // TODO: \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 } public static void quickSort(int[] arr, int start, int end) { // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5f53\u5de6\u8fb9\u533a\u57df\u4e2d\u81f3\u5c11\u6709 2 \u4e2a\u6570\u5b57\u65f6\uff0c\u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f if (start != middle && start != middle - 1) quickSort(arr, start, middle - 1); // \u5f53\u53f3\u8fb9\u533a\u57df\u4e2d\u81f3\u5c11\u6709 2 \u4e2a\u6570\u5b57\u65f6\uff0c\u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f if (middle != end && middle != end - 1) quickSort(arr, middle + 1, end); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start == end || start == end + 1) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u66f4\u8fdb\u4e00\u6b65\uff0c\u7531\u4e0a\u6587\u6240\u8bf4\u7684 middle >= start && middle <= end \u53ef\u4ee5\u63a8\u51fa\uff0c\u9664\u4e86start == end || start == end + 1\u8fd9\u4e24\u4e2a\u6761\u4ef6\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u60c5\u51b5\u4e0b start \u90fd\u5c0f\u4e8e end\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5224\u65ad\u6761\u4ef6\u518d\u6b21\u7b80\u5199\u4e3a\uff1a public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start >= end) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 // \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 public static int partition(int[] arr, int start, int end) { // \u53d6\u7b2c\u4e00\u4e2a\u6570\u4e3a\u57fa\u6570 int pivot = arr[start]; // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\u5206\u533a int left = start + 1; // \u53f3\u8fb9\u754c int right = end; // TODO } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u6700\u7b80\u5355\u7684\u5206\u533a\u7b97\u6cd5 \u5206\u533a\u7684\u65b9\u5f0f\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u6700\u7b80\u5355\u7684\u601d\u8def\u662f\uff1a\u4ece left \u5f00\u59cb\uff0c\u9047\u5230\u6bd4\u57fa\u6570\u5927\u7684\u6570\uff0c\u5c31\u4ea4\u6362\u5230\u6570\u7ec4\u6700\u540e\uff0c\u5e76\u5c06 right \u51cf\u4e00\uff0c\u76f4\u5230 left \u548c right \u76f8\u9047\uff0c\u6b64\u65f6\u6570\u7ec4\u5c31\u88ab\u5206\u6210\u4e86\u5de6\u53f3\u4e24\u4e2a\u533a\u57df\u3002\u518d\u5c06\u57fa\u6570\u548c\u4e2d\u95f4\u7684\u6570\u4ea4\u6362\uff0c\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807\u5373\u53ef\u3002 \u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u6572\u51fa\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a public static void quickSort(int[] arr) { quickSort(arr, 0, arr.length - 1); } public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start >= end) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } // \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 public static int partition(int[] arr, int start, int end) { // \u53d6\u7b2c\u4e00\u4e2a\u6570\u4e3a\u57fa\u6570 int pivot = arr[start]; // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\u5206\u533a int left = start + 1; // \u53f3\u8fb9\u754c int right = end; // left\u3001right \u76f8\u9047\u65f6\u9000\u51fa\u5faa\u73af while (left < right) { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u6570\u7684\u4f4d\u7f6e while (left < right && arr[left] <= pivot) left++; // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5de6\u8fb9\u5206\u533a\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570\uff0c\u53f3\u8fb9\u5206\u533a\u5927\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570 if (left != right) { exchange(arr, left, right); right--; } } // \u5982\u679c left \u548c right \u76f8\u7b49\uff0c\u5355\u72ec\u6bd4\u8f83 arr[right] \u548c pivot if (left == right && arr[right] > pivot) right--; // \u5c06\u57fa\u6570\u548c\u4e2d\u95f4\u6570\u4ea4\u6362 if (right != start) exchange(arr, start, right); // \u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 return right; } private static void exchange(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } public static void quickSort(int[] arr) { quickSort(arr, 0, arr.length - 1); } public static void quickSort(int[] arr, int start, int end) { // \u5982\u679c\u533a\u57df\u5185\u7684\u6570\u5b57\u5c11\u4e8e 2 \u4e2a\uff0c\u9000\u51fa\u9012\u5f52 if (start >= end) return; // \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u83b7\u5f97\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 int middle = partition(arr, start, end); // \u5bf9\u5de6\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, start, middle - 1); // \u5bf9\u53f3\u8fb9\u533a\u57df\u5feb\u901f\u6392\u5e8f quickSort(arr, middle + 1, end); } // \u5c06 arr \u4ece start \u5230 end \u5206\u533a\uff0c\u5de6\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5c0f\uff0c\u53f3\u8fb9\u533a\u57df\u6bd4\u57fa\u6570\u5927\uff0c\u7136\u540e\u8fd4\u56de\u4e2d\u95f4\u503c\u7684\u4e0b\u6807 public static int partition(int[] arr, int start, int end) { // \u53d6\u7b2c\u4e00\u4e2a\u6570\u4e3a\u57fa\u6570 int pivot = arr[start]; // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\u5206\u533a int left = start + 1; // \u53f3\u8fb9\u754c int right = end; while (left < right) { // \u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u6570\u7684\u4f4d\u7f6e while (left < right && arr[left] <= pivot) left++; // \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u57fa\u6570\u7684\u4f4d\u7f6e while (left < right && arr[right] >= pivot) right--; // \u4ea4\u6362\u8fd9\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5de6\u8fb9\u5206\u533a\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570\uff0c\u53f3\u8fb9\u5206\u533a\u5927\u4e8e\u6216\u7b49\u4e8e\u57fa\u6570 if (left < right) { exchange(arr, left, right); left++; right--; } } // \u5982\u679c left \u548c right \u76f8\u7b49\uff0c\u5355\u72ec\u6bd4\u8f83 arr[right] \u548c pivot if (left == right && arr[right] > pivot) right--; // \u5c06\u57fa\u6570\u548c\u8f74\u4ea4\u6362 exchange(arr, start, right); return right; } private static void exchange(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 private static final int SHUFFLE_THRESHOLD = 5; public static void shuffle(List<?> list, Random rnd) { int size = list.size(); if (size < SHUFFLE_THRESHOLD || list instanceof RandomAccess) { for (int i=size; i>1; i--) swap(list, i-1, rnd.nextInt(i)); } else { Object arr[] = list.toArray(); // Shuffle array for (int i=size; i>1; i--) swap(arr, i-1, rnd.nextInt(i)); // Dump array back into list // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method ListIterator it = list.listIterator(); for (int i=0; i<arr.length; i++) { it.next(); it.set(arr[i]); } } } public static void swap(List<?> list, int i, int j) { // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method final List l = list; l.set(i, l.set(j, l.get(i))); } private static void swap(Object[] arr, int i, int j) { Object tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/eul7hm/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_37","text":"// \u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4 private static int[] merge(int[] arr1, int[] arr2) { int[] result = new int[arr1.length + arr2.length]; int index1 = 0, index2 = 0; while (index1 < arr1.length && index2 < arr2.length) { if (arr1[index1] <= arr2[index2]) { result[index1 + index2] = arr1[index1]; index1++; } else { result[index1 + index2] = arr2[index2]; index2++; } } // \u5c06\u5269\u4f59\u6570\u5b57\u8865\u5230\u7ed3\u679c\u6570\u7ec4\u4e4b\u540e while (index1 < arr1.length) { result[index1 + index2] = arr1[index1]; index1++; } while (index2 < arr2.length) { result[index1 + index2] = arr2[index2]; index2++; } return result; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void mergeSort(int[] arr) { if (arr.length == 0) return; int[] result = mergeSort(arr, 0, arr.length - 1); // \u5c06\u7ed3\u679c\u62f7\u8d1d\u5230 arr \u6570\u7ec4\u4e2d for (int i = 0; i < result.length; i++) { arr[i] = result[i]; } } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static int[] mergeSort(int[] arr, int start, int end) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206\uff0c\u8fd4\u56de\u5355\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u6570\u7ec4 if (start == end) return new int[]{arr[start]}; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df int[] left = mergeSort(arr, start, middle); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df int[] right = mergeSort(arr, middle + 1, end); // \u5408\u5e76\u5de6\u53f3\u533a\u57df return merge(left, right); } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void mergeSort(int[] arr) { if (arr.length == 0) return; int[] result = new int[arr.length]; mergeSort(arr, 0, arr.length - 1, result); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end, int[] result) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [start, middle] \u533a\u95f4 mergeSort(arr, start, middle, result); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [middle + 1, end] \u533a\u95f4 mergeSort(arr, middle + 1, end, result); // \u5408\u5e76\u5de6\u53f3\u533a\u57df\u5230 result \u7684 [start, end] \u533a\u95f4 merge(arr, start, end, result); } // \u5c06 result \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end, int[] result) { int middle = (start + end) / 2; // \u6570\u7ec4 1 \u7684\u9996\u5c3e\u4f4d\u7f6e int start1 = start; int end1 = middle; // \u6570\u7ec4 2 \u7684\u9996\u5c3e\u4f4d\u7f6e int start2 = middle + 1; int end2 = end; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start1; int index2 = start2; // \u7ed3\u679c\u6570\u7ec4\u7684\u6307\u9488 int resultIndex = start1; while (index1 <= end1 && index2 <= end2) { if (arr[index1] <= arr[index2]) { result[resultIndex++] = arr[index1++]; } else { result[resultIndex++] = arr[index2++]; } } // \u5c06\u5269\u4f59\u6570\u5b57\u8865\u5230\u7ed3\u679c\u6570\u7ec4\u4e4b\u540e while (index1 <= end1) { result[resultIndex++] = arr[index1++]; } while (index2 <= end2) { result[resultIndex++] = arr[index2++]; } // \u5c06 result \u64cd\u4f5c\u533a\u95f4\u7684\u6570\u5b57\u62f7\u8d1d\u5230 arr \u6570\u7ec4\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u6bd4\u8f83 for (int i = start; i <= end; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void mergeSort(int[] arr) { if (arr.length == 0) return; int[] result = new int[arr.length]; mergeSort(arr, 0, arr.length - 1, result); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end, int[] result) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [start, middle] \u533a\u95f4 mergeSort(arr, start, middle, result); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df\uff0c\u5e76\u5c06\u5f52\u5e76\u6392\u5e8f\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 result \u7684 [middle + 1, end] \u533a\u95f4 mergeSort(arr, middle + 1, end, result); // \u5408\u5e76\u5de6\u53f3\u533a\u57df\u5230 result \u7684 [start, end] \u533a\u95f4 merge(arr, start, end, result); } // \u5c06 result \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end, int[] result) { int end1 = (start + end) / 2; int start2 = end1 + 1; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start; int index2 = start2; while (index1 <= end1 && index2 <= end) { if (arr[index1] <= arr[index2]) { result[index1 + index2 - start2] = arr[index1++]; } else { result[index1 + index2 - start2] = arr[index2++]; } } // \u5c06\u5269\u4f59\u6570\u5b57\u8865\u5230\u7ed3\u679c\u6570\u7ec4\u4e4b\u540e while (index1 <= end1) { result[index1 + index2 - start2] = arr[index1++]; } while (index2 <= end) { result[index1 + index2 - start2] = arr[index2++]; } // \u5c06 result \u64cd\u4f5c\u533a\u95f4\u7684\u6570\u5b57\u62f7\u8d1d\u5230 arr \u6570\u7ec4\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u6bd4\u8f83 while (start <= end) { arr[start] = result[start++]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff1f \u73b0\u5728\u7684\u5f52\u5e76\u6392\u5e8f\u770b\u8d77\u6765\u4ecd\"\u7f8e\u4e2d\u4e0d\u8db3\"\uff0c\u90a3\u5c31\u662f\u4ecd\u7136\u9700\u8981\u5f00\u8f9f\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u80fd\u4e0d\u80fd\u5b9e\u73b0\u4e0d\u5f00\u8f9f\u989d\u5916\u7a7a\u95f4\u7684\u5f52\u5e76\u6392\u5e8f\u5462\uff1f\u597d\u50cf\u662f\u53ef\u4ee5\u505a\u5230\u7684\u3002\u5728\u4e00\u4e9b\u6587\u7ae0\u4e2d\uff0c\u5c06\u8fd9\u6837\u7684\u5f52\u5e76\u6392\u5e8f\u79f0\u4e4b\u4e3a In-Place Merge Sort\uff0c\u76f4\u8bd1\u4e3a\u539f\u5730\u5f52\u5e76\u6392\u5e8f\u3002 \u4ee3\u7801\u5b9e\u73b0\u601d\u8def\u4e3b\u8981\u6709\u4e24\u79cd\uff1a public static void mergeSort(int[] arr) { if (arr.length == 0) return; mergeSort(arr, 0, arr.length - 1); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df mergeSort(arr, start, middle); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df mergeSort(arr, middle + 1, end); // \u5408\u5e76\u5de6\u53f3\u533a\u57df merge(arr, start, end); } // \u5c06 arr \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end) { int end1 = (start + end) / 2; int start2 = end1 + 1; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start; int index2 = start2; while (index1 <= end1 && index2 <= end) { if (arr[index1] <= arr[index2]) { index1++; } else { // \u53f3\u8fb9\u533a\u57df\u7684\u8fd9\u4e2a\u6570\u5b57\u6bd4\u5de6\u8fb9\u533a\u57df\u7684\u6570\u5b57\u5c0f\uff0c\u4e8e\u662f\u5b83\u7ad9\u4e86\u8d77\u6765 int value = arr[index2]; int index = index2; // \u524d\u9762\u7684\u6570\u5b57\u4e0d\u65ad\u5730\u540e\u79fb while (index > index1) { arr[index] = arr[index - 1]; index--; } // \u8fd9\u4e2a\u6570\u5b57\u5750\u5230 index1 \u6240\u5728\u7684\u4f4d\u7f6e\u4e0a arr[index] = value; // \u66f4\u65b0\u6240\u6709\u4e0b\u6807\uff0c\u4f7f\u5176\u524d\u8fdb\u4e00\u683c index1++; index2++; end1++; } } } \u8fd9\u6bb5\u4ee3\u7801\u5728\u5408\u5e76 arr \u7684 [start, middle] \u533a\u95f4\u548c [middle + 1, end] \u533a\u95f4\u65f6\uff0c\u5c06\u4e24\u4e2a\u533a\u95f4\u8f83\u5c0f\u7684\u6570\u5b57\u79fb\u52a8\u5230 index1 \u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5c06\u5de6\u8fb9\u533a\u57df\u4e0d\u65ad\u540e\u79fb\uff0c\u76ee\u7684\u662f\u7ed9\u65b0\u63d2\u5165\u7684\u6570\u5b57\u817e\u51fa\u4f4d\u7f6e\u3002\u6700\u540e\u66f4\u65b0\u4e24\u4e2a\u533a\u95f4\u7684\u4e0b\u6807\uff0c\u7ee7\u7eed\u5408\u5e76\u66f4\u65b0\u540e\u7684\u533a\u95f4\u3002 \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u601d\u8def\uff1a public static void mergeSort(int[] arr) { if (arr.length == 0) return; mergeSort(arr, 0, arr.length - 1); } // \u5bf9 arr \u7684 [start, end] \u533a\u95f4\u5f52\u5e76\u6392\u5e8f private static void mergeSort(int[] arr, int start, int end) { // \u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u505c\u6b62\u62c6\u5206 if (start == end) return; int middle = (start + end) / 2; // \u62c6\u5206\u5de6\u8fb9\u533a\u57df mergeSort(arr, start, middle); // \u62c6\u5206\u53f3\u8fb9\u533a\u57df mergeSort(arr, middle + 1, end); // \u5408\u5e76\u5de6\u53f3\u533a\u57df merge(arr, start, end); } // \u5c06 arr \u7684 [start, middle] \u548c [middle + 1, end] \u533a\u95f4\u5408\u5e76 private static void merge(int[] arr, int start, int end) { int end1 = (start + end) / 2; int start2 = end1 + 1; // \u7528\u6765\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488 int index1 = start; while (index1 <= end1 && start2 <= end) { if (arr[index1] > arr[start2]) { // \u5c06 index1 \u548c start2 \u4e0b\u6807\u7684\u6570\u5b57\u4ea4\u6362 exchange(arr, index1, start2); if (start2 != end) { // \u8c03\u6574\u4ea4\u6362\u5230 start2 \u4e0a\u7684\u8fd9\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\uff0c\u4f7f\u53f3\u8fb9\u533a\u57df\u7ee7\u7eed\u4fdd\u6301\u6709\u5e8f int value = arr[start2]; int index = start2; // \u53f3\u8fb9\u533a\u57df\u6bd4 arr[start2] \u5c0f\u7684\u6570\u5b57\u4e0d\u65ad\u524d\u79fb while (index < end && arr[index + 1] < value) { arr[index] = arr[index + 1]; index++; } // \u4ea4\u6362\u5230\u53f3\u8fb9\u533a\u57df\u7684\u8fd9\u4e2a\u6570\u5b57\u627e\u5230\u4e86\u81ea\u5df1\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u5750\u4e0b arr[index] = value; } } index1++; } } private static void exchange(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/euivj1/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_38","text":"","title":"\u5c0f\u7ed3"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#on","text":"","title":"O(n) \u7ea7\u6392\u5e8f\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_39","text":"public static void countingSort9(int[] arr) { // \u5efa\u7acb\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~8 \u5bf9\u5e94\u6570\u5b57 1~9 int[] counting = new int[9]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e counting[element - 1]++; } int index = 0; // \u904d\u5386\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u8f93\u51fa for (int i = 0; i < 9; i++) { // \u8f93\u51fa\u7684\u6b21\u6570\u5c31\u662f\u5bf9\u5e94\u4f4d\u7f6e\u8bb0\u5f55\u7684\u6b21\u6570 while (counting[i] != 0) { arr[index++] = i + 1; counting[i]--; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void countingSort9(int[] arr) { // \u5efa\u7acb\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~8 \u5bf9\u5e94\u6570\u5b57 1~9 int[] counting = new int[9]; // \u8bb0\u5f55\u6bcf\u4e2a\u4e0b\u6807\u4e2d\u5305\u542b\u7684\u771f\u5b9e\u5143\u7d20\uff0c\u4f7f\u7528\u961f\u5217\u53ef\u4ee5\u4fdd\u8bc1\u6392\u5e8f\u7684\u7a33\u5b9a\u6027 HashMap<Integer, Queue<Integer>> records = new HashMap<>(); // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e counting[element - 1]++; if (!records.containsKey(element - 1)) { records.put(element - 1, new LinkedList<>()); } records.get(element - 1).add(element); } int index = 0; // \u904d\u5386\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u8f93\u51fa for (int i = 0; i < 9; i++) { // \u8f93\u51fa\u7684\u6b21\u6570\u5c31\u662f\u5bf9\u5e94\u4f4d\u7f6e\u8bb0\u5f55\u7684\u6b21\u6570 while (counting[i] != 0) { // \u8f93\u51fa\u8bb0\u5f55\u7684\u771f\u5b9e\u5143\u7d20 arr[index++] = records.get(i).remove(); counting[i]--; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void countingSort9(int[] arr) { // \u5efa\u7acb\u957f\u5ea6\u4e3a 9 \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~8 \u5bf9\u5e94\u6570\u5b57 1~9 int[] counting = new int[9]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e counting[element - 1]++; } // \u8bb0\u5f55\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 int preCounts = 0; for (int i = 0; i < counting.length; i++) { int temp = counting[i]; // \u5c06 counting \u8ba1\u7b97\u6210\u5f53\u524d\u6570\u5b57\u5728\u7ed3\u679c\u4e2d\u7684\u8d77\u59cb\u4e0b\u6807\u4f4d\u7f6e\u3002\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570\u3002 counting[i] = preCounts; // \u5f53\u524d\u7684\u6570\u5b57\u6bd4\u4e0b\u4e00\u4e2a\u6570\u5b57\u5c0f\uff0c\u7d2f\u8ba1\u5230 preCounts \u4e2d preCounts += temp; } int[] result = new int[arr.length]; for (int element : arr) { // counting[element - 1] \u8868\u793a\u6b64\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 int index = counting[element - 1]; result[index] = element; // \u66f4\u65b0 counting[element - 1]\uff0c\u6307\u5411\u6b64\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4e0b\u6807 counting[element - 1]++; } // \u5c06\u7ed3\u679c\u8d4b\u503c\u56de arr for (int i = 0; i < arr.length; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void countingSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u8ba1\u6570\u8303\u56f4 int range = max - min + 1; // \u5efa\u7acb\u957f\u5ea6\u4e3a range \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~range-1 \u5bf9\u5e94\u6570\u5b57 min~max int[] counting = new int[range]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u9700\u8981\u5c06\u6bcf\u4e2a\u5143\u7d20\u51cf\u53bb min\uff0c\u624d\u80fd\u6620\u5c04\u5230 0\uff5erange-1 \u8303\u56f4\u5185 counting[element - min]++; } // \u8bb0\u5f55\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 int preCounts = 0; for (int i = 0; i < range; i++) { // \u5f53\u524d\u7684\u6570\u5b57\u6bd4\u4e0b\u4e00\u4e2a\u6570\u5b57\u5c0f\uff0c\u7d2f\u8ba1\u5230 preCounts \u4e2d preCounts += counting[i]; // \u5c06 counting \u8ba1\u7b97\u6210\u5f53\u524d\u6570\u5b57\u5728\u7ed3\u679c\u4e2d\u7684\u8d77\u59cb\u4e0b\u6807\u4f4d\u7f6e\u3002\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570\u3002 counting[i] = preCounts - counting[i]; } int[] result = new int[arr.length]; for (int element : arr) { // counting[element - min] \u8868\u793a\u6b64\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 result[counting[element - min]] = element; // \u66f4\u65b0 counting[element - min]\uff0c\u6307\u5411\u6b64\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4e0b\u6807 counting[element - min]++; } // \u5c06\u7ed3\u679c\u8d4b\u503c\u56de arr for (int i = 0; i < arr.length; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u8fd9\u5c31\u662f\u5b8c\u6574\u7684\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\u3002 \u5012\u5e8f\u904d\u5386\u7684\u8ba1\u6570\u6392\u5e8f \u8ba1\u6570\u6392\u5e8f\u8fd8\u6709\u4e00\u79cd\u5199\u6cd5\uff0c\u5728\u8ba1\u7b97\u5143\u7d20\u5728\u6700\u7ec8\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4f4d\u7f6e\u8fd9\u4e00\u6b65\uff0c\u4e0d\u662f\u8ba1\u7b97\u521d\u59cb\u4e0b\u6807\u4f4d\u7f6e\uff0c\u800c\u662f\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u4f4d\u7f6e\u3002\u6700\u540e\u5012\u5e8f\u904d\u5386 arr \u6570\u7ec4\uff0c\u9010\u4e2a\u5c06 arr \u4e2d\u7684\u5143\u7d20\u653e\u5230\u6700\u7ec8\u4f4d\u7f6e\u4e0a\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a public static void countingSort(int[] arr) { // \u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u8ba1\u6570\u8303\u56f4 int range = max - min + 1; // \u5efa\u7acb\u957f\u5ea6\u4e3a range \u7684\u6570\u7ec4\uff0c\u4e0b\u6807 0~range-1 \u5bf9\u5e94\u6570\u5b57 min~max int[] counting = new int[range]; // \u904d\u5386 arr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 for (int element : arr) { // \u5c06\u6bcf\u4e2a\u6574\u6570\u51fa\u73b0\u7684\u6b21\u6570\u7edf\u8ba1\u5230\u8ba1\u6570\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4e0b\u6807\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u9700\u8981\u5c06\u6bcf\u4e2a\u5143\u7d20\u51cf\u53bb min\uff0c\u624d\u80fd\u6620\u5c04\u5230 0\uff5erange-1 \u8303\u56f4\u5185 counting[element - min]++; } // \u6bcf\u4e2a\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 + \u81ea\u5df1\u7684\u6570\u91cf - 1\u3002\u6211\u4eec\u5c06 counting[0] \u5148\u51cf\u53bb 1\uff0c\u540e\u7eed counting \u76f4\u63a5\u7d2f\u52a0\u5373\u53ef counting[0]--; for (int i = 1; i < range; i++) { // \u5c06 counting \u8ba1\u7b97\u6210\u5f53\u524d\u6570\u5b57\u5728\u7ed3\u679c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u4f4d\u7f6e\u3002\u4f4d\u7f6e = \u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u7684\u603b\u6570 + \u81ea\u5df1\u7684\u6570\u91cf - 1 // \u7531\u4e8e counting[0] \u5df2\u7ecf\u51cf\u4e86 1\uff0c\u6240\u4ee5\u540e\u7eed\u7684\u51cf 1 \u53ef\u4ee5\u7701\u7565\u3002 counting[i] += counting[i - 1]; } int[] result = new int[arr.length]; // \u4ece\u540e\u5f80\u524d\u904d\u5386\u6570\u7ec4\uff0c\u901a\u8fc7 counting \u4e2d\u8bb0\u5f55\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u5c06 arr \u4e2d\u7684\u5143\u7d20\u653e\u5230 result \u6570\u7ec4\u4e2d for (int i = arr.length - 1; i >= 0; i--) { // counting[arr[i] - min] \u8868\u793a\u6b64\u5143\u7d20\u5728\u7ed3\u679c\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 result[counting[arr[i] - min]] = arr[i]; // \u66f4\u65b0 counting[arr[i] - min]\uff0c\u6307\u5411\u6b64\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u4e0b\u6807 counting[arr[i] - min]--; } // \u5c06\u7ed3\u679c\u8d4b\u503c\u56de arr for (int i = 0; i < arr.length; i++) { arr[i] = result[i]; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/ozyo63/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u8ba1\u6570\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_40","text":"int mod = 10; int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { int radix = value % mod / dev; // \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f } mod *= 10; dev *= 10; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 second int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { int radix = value / dev % 10; // \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f } dev *= 10; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u4e24\u8005\u7684\u533a\u522b\u662f\u5148\u505a\u9664\u6cd5\u8fd0\u7b97\u8fd8\u662f\u5148\u505a\u6a21\u8fd0\u7b97\uff0c\u63a8\u8350\u4f7f\u7528\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u8282\u7701\u4e00\u4e2a\u53d8\u91cf\u3002 \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f \u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f\u975e\u5e38\u9002\u5408\u4f7f\u7528\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u5b66\u4e60\u7684\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u57fa\u6570\u90fd\u5728 [0,9] \u4e4b\u95f4\uff0c\u5e76\u4e14\u8ba1\u6570\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u7b97\u6cd5\u3002 LSD \u65b9\u5f0f\u7684\u57fa\u6570\u6392\u5e8f\u4ee3\u7801\u5982\u4e0b\uff1a public class RadixSort { public static void radixSort(int[] arr) { if (arr == null) return; // \u627e\u51fa\u6700\u5927\u503c int max = 0; for (int value : arr) { if (value > max) { max = value; } } // \u8ba1\u7b97\u6700\u5927\u6570\u5b57\u7684\u957f\u5ea6 int maxDigitLength = 0; while (max != 0) { maxDigitLength++; max /= 10; } // \u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f int[] counting = new int[10]; int[] result = new int[arr.length]; int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { int radix = value / dev % 10; counting[radix]++; } for (int j = 1; j < counting.length; j++) { counting[j] += counting[j - 1]; } // \u4f7f\u7528\u5012\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u5b8c\u6210\u8ba1\u6570\u6392\u5e8f for (int j = arr.length - 1; j >= 0; j--) { int radix = arr[j] / dev % 10; result[--counting[radix]] = arr[j]; } // \u8ba1\u6570\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u5c06\u7ed3\u679c\u62f7\u8d1d\u56de arr \u6570\u7ec4 System.arraycopy(result, 0, arr, 0, arr.length); // \u5c06\u8ba1\u6570\u6570\u7ec4\u91cd\u7f6e\u4e3a 0 Arrays.fill(counting, 0); dev *= 10; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public class RadixSort { public static void radixSort(int[] arr) { if (arr == null) return; // \u627e\u51fa\u6700\u957f\u7684\u6570 int max = 0; for (int value : arr) { if (Math.abs(value) > max) { max = Math.abs(value); } } // \u8ba1\u7b97\u6700\u957f\u6570\u5b57\u7684\u957f\u5ea6 int maxDigitLength = 0; while (max != 0) { maxDigitLength++; max /= 10; } // \u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7b97\u6cd5\u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0b\u6807 [0, 18] \u5bf9\u5e94\u57fa\u6570 [-9, 9] int[] counting = new int[19]; int[] result = new int[arr.length]; int dev = 1; for (int i = 0; i < maxDigitLength; i++) { for (int value : arr) { // \u4e0b\u6807\u8c03\u6574 int radix = value / dev % 10 + 9; counting[radix]++; } for (int j = 1; j < counting.length; j++) { counting[j] += counting[j - 1]; } // \u4f7f\u7528\u5012\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u5b8c\u6210\u8ba1\u6570\u6392\u5e8f for (int j = arr.length - 1; j >= 0; j--) { // \u4e0b\u6807\u8c03\u6574 int radix = arr[j] / dev % 10 + 9; result[--counting[radix]] = arr[j]; } // \u8ba1\u6570\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u5c06\u7ed3\u679c\u62f7\u8d1d\u56de arr \u6570\u7ec4 System.arraycopy(result, 0, arr, 0, arr.length); // \u5c06\u8ba1\u6570\u6570\u7ec4\u91cd\u7f6e\u4e3a 0 Arrays.fill(counting, 0); dev *= 10; } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public class RadixSort { public static void radixSort(int[] arr) { if (arr == null) return; // \u627e\u5230\u6700\u5927\u503c int max = 0; for (int value : arr) { if (Math.abs(value) > max) { max = Math.abs(value); } } // \u8ba1\u7b97\u6700\u5927\u957f\u5ea6 int maxDigitLength = 0; while (max != 0) { maxDigitLength++; max /= 10; } radixSort(arr, 0, arr.length - 1, maxDigitLength); } // \u5bf9 arr \u6570\u7ec4\u4e2d\u7684 [start, end] \u533a\u95f4\u8fdb\u884c\u57fa\u6570\u6392\u5e8f private static void radixSort(int[] arr, int start, int end, int position) { if (start == end || position == 0) return; // \u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u5bf9\u57fa\u6570\u8fdb\u884c\u6392\u5e8f int[] counting = new int[19]; int[] result = new int[end - start + 1]; int dev = (int) Math.pow(10, position - 1); for (int i = start; i <= end; i++) { // MSD, \u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb int radix = arr[i] / dev % 10 + 9; counting[radix]++; } for (int j = 1; j < counting.length; j++) { counting[j] += counting[j - 1]; } // \u62f7\u8d1d counting\uff0c\u7528\u4e8e\u5f85\u4f1a\u7684\u9012\u5f52 int[] countingCopy = new int[counting.length]; System.arraycopy(counting, 0, countingCopy, 0, counting.length); for (int i = end; i >= start; i--) { int radix = arr[i] / dev % 10 + 9; result[--counting[radix]] = arr[i]; } // \u8ba1\u6570\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u5c06\u7ed3\u679c\u62f7\u8d1d\u56de arr \u6570\u7ec4 System.arraycopy(result, 0, arr, start, result.length); // \u5bf9 [start, end] \u533a\u95f4\u5185\u7684\u6bcf\u4e00\u4f4d\u57fa\u6570\u8fdb\u884c\u9012\u5f52\u6392\u5e8f for (int i = 0; i < counting.length; i++) { radixSort(arr, i == 0 ? start : start + countingCopy[i - 1], start + countingCopy[i] - 1, position - 1); } } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/raydw2/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u57fa\u6570\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_41","text":"public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // ... } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u8fd9\u91cc\u9700\u8981\u904d\u5386\u4e00\u8f6e\u6570\u7ec4\u3002 \u4e0b\u4e00\u6b65\uff0c\u5f00\u59cb\u88c5\u6876\uff1a // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); // \u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u88c5\u6876\uff0c\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662f\u6876\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u662f\u6876\u4e2d\u7684\u6570\u5b57\u3002\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6\u5fc5\u987b\u8bbe\u7f6e\u4e3a arr.length\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u505a\u597d\u6700\u574f\u7684\u6253\u7b97\uff1a\u6240\u6709\u7684\u6570\u5b57\u90fd\u88ab\u88c5\u5165\u4e86\u4e00\u4e2a\u6876\u4e2d\u3002 int[][] buckets = new int[bucketAmount][arr.length]; // \u5355\u72ec\u91c7\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u6bcf\u4e2a\u6876\u5f53\u524d\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u6876\u5185\u5171\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u3002 int[] bucketLength = new int[bucketAmount]; // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); // \u88c5\u6876\u540e\uff0c\u66f4\u65b0 bucketLength[index] buckets[index][bucketLength[index]++] = value; } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u8fd9\u5c31\u662f\u4ee5\u6570\u7ec4\u4f5c\u4e3a\u6876\u5b9e\u73b0\u7684\u6876\u6392\u5e8f\uff0c\u5b83\u6700\u5927\u7684\u7f3a\u70b9\u5c31\u662f\u6bcf\u4e2a\u6876\u90fd\u548c\u5f85\u6392\u5e8f\u6570\u7ec4\u4e00\u6837\u957f\uff0c\u975e\u5e38\u6d88\u8017\u5185\u5b58\uff0c\u5bb9\u6613\u5bfc\u81f4\u300c\u8d85\u51fa\u5185\u5b58\u9650\u5236\u300d\u9519\u8bef\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4efd\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u505a\u4e00\u4e2a\u4f18\u5316\uff1a\u58f0\u660e\u65f6\u6240\u6709\u7684\u6570\u7ec4\u90fd\u4e3a\u7a7a\uff0c\u5f53\u9700\u8981\u6dfb\u52a0\u6570\u5b57\u65f6\uff0c\u4e0d\u65ad\u6269\u5bb9\uff0c\u5e76\u52a0\u5165\u65b0\u6570\u5b57\u3002\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); // \u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u88c5\u6876\uff0c\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662f\u6876\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u662f\u6876\u4e2d\u7684\u6570\u5b57\u3002\u521d\u59cb\u5316\u957f\u5ea6\u4e3a 0 int[][] buckets = new int[bucketAmount][]; // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); buckets[index] = add(buckets[index], value); } int index = 0; // \u5bf9\u6bcf\u4e2a\u6876\u5185\u7684\u6570\u5b57\u8fdb\u884c\u5355\u72ec\u6392\u5e8f for (int i = 0; i < bucketAmount; i++) { if (buckets[i] == null || buckets[i].length == 0) continue; // \u8fd9\u91cc\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f8b\u5982\uff1a\u63d2\u5165\u6392\u5e8f insertSort(buckets[i]); // \u6392\u5e8f\u5b8c\u6210\u540e\u5c06\u6876\u5185\u7684\u7ed3\u679c\u6536\u96c6\u8d77\u6765 System.arraycopy(buckets[i], 0, arr, index, buckets[i].length); index += buckets[i].length; } } // \u6570\u7ec4\u6269\u5bb9 public static int[] add(int[] arr, int num) { if (arr == null) return new int[]{num}; int[] newArr = Arrays.copyOf(arr, arr.length + 1); newArr[arr.length] = num; return newArr; } // \u63d2\u5165\u6392\u5e8f public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { int currentNumber = arr[i]; int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr[j]) { arr[j + 1] = arr[j]; j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr[j + 1] = currentNumber; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); HashMap<Integer, LinkedList<Integer>> buckets = new HashMap<>(); // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); if (!buckets.containsKey(index)) { buckets.put(index, new LinkedList<>()); } buckets.get(index).add(value); } int index = 0; // \u5bf9\u6bcf\u4e2a\u6876\u5185\u7684\u6570\u5b57\u8fdb\u884c\u5355\u72ec\u6392\u5e8f for (int i = 0; i < bucketAmount; i++) { LinkedList<Integer> bucket = buckets.get(i); if (bucket == null) continue; // \u8fd9\u91cc\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f8b\u5982\uff1a\u63d2\u5165\u6392\u5e8f insertSort(bucket); // \u6392\u5e8f\u5b8c\u6210\u540e\u5c06\u6876\u5185\u7684\u7ed3\u679c\u6536\u96c6\u8d77\u6765 for (int num : bucket) { arr[index++] = num; } } } // \u5bf9\u94fe\u8868\u63d2\u5165\u6392\u5e8f public static void insertSort(LinkedList<Integer> arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.size(); i++) { int currentNumber = arr.get(i); int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr.get(j)) { arr.set(j + 1, arr.get(j)); j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr.set(j + 1, currentNumber); } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 public static void bucketSort(int[] arr) { // \u5224\u7a7a\u53ca\u9632\u6b62\u6570\u7ec4\u8d8a\u754c if (arr == null || arr.length <= 1) return; // \u627e\u5230\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c int max = arr[0]; int min = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) max = arr[i]; else if (arr[i] < min) min = arr[i]; } // \u786e\u5b9a\u53d6\u503c\u8303\u56f4 int range = max - min; // \u8bbe\u7f6e\u6876\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u4e3a 100 \u4e2a\uff0c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u3002 int bucketAmount = 100; // \u6876\u548c\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd double gap = range * 1.0 / (bucketAmount - 1); HashMap<Integer, Queue<Integer>> buckets = new HashMap<>(); // \u88c5\u6876 for (int value : arr) { // \u627e\u5230 value \u5c5e\u4e8e\u54ea\u4e2a\u6876 int index = (int) ((value - min) / gap); if (!buckets.containsKey(index)) { buckets.put(index, new LinkedList<>()); } buckets.get(index).add(value); } int index = 0; // \u5bf9\u6bcf\u4e2a\u6876\u5185\u7684\u6570\u5b57\u8fdb\u884c\u5355\u72ec\u6392\u5e8f for (int i = 0; i < bucketAmount; i++) { Queue<Integer> bucket = buckets.get(i); if (bucket == null) continue; // \u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4\uff0c\u63d0\u5347\u6392\u5e8f\u6027\u80fd int[] arrInBucket = bucket.stream().mapToInt(Integer::intValue).toArray(); // \u8fd9\u91cc\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f8b\u5982\uff1a\u63d2\u5165\u6392\u5e8f insertSort(arrInBucket); // \u6392\u5e8f\u5b8c\u6210\u540e\u5c06\u6876\u5185\u7684\u7ed3\u679c\u6536\u96c6\u8d77\u6765 System.arraycopy(arrInBucket, 0, arr, index, arrInBucket.length); index += arrInBucket.length; } } // \u63d2\u5165\u6392\u5e8f public static void insertSort(int[] arr) { // \u4ece\u7b2c\u4e8c\u4e2a\u6570\u5f00\u59cb\uff0c\u5f80\u524d\u63d2\u5165\u6570\u5b57 for (int i = 1; i < arr.length; i++) { int currentNumber = arr[i]; int j = i - 1; // \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5730\u5c06\u6bd4 currentNumber \u5927\u7684\u6570\u5b57\u5411\u540e\u632a while (j >= 0 && currentNumber < arr[j]) { arr[j + 1] = arr[j]; j--; } // \u4e24\u79cd\u60c5\u51b5\u4f1a\u8df3\u51fa\u5faa\u73af\uff1a1. \u9047\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u8df3\u51fa\u5faa\u73af\uff0ccurrentNumber \u5c31\u5750\u5230\u5b83\u540e\u9762\u3002 // 2. \u5df2\u7ecf\u8d70\u5230\u6570\u5217\u5934\u90e8\uff0c\u4ecd\u7136\u6ca1\u6709\u9047\u5230\u5c0f\u4e8e\u6216\u7b49\u4e8e currentNumber \u7684\u6570\u5b57\uff0c\u4e5f\u4f1a\u8df3\u51fa\u5faa\u73af\uff0c\u6b64\u65f6 j \u7b49\u4e8e -1\uff0ccurrentNumber \u5c31\u5750\u5230\u6570\u5217\u5934\u90e8\u3002 arr[j + 1] = currentNumber; } } \u4f5c\u8005\uff1aLeetCode \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/sort-algorithms/phtz1j/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u6876\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#java-arrayssort","text":"","title":"\u5de5\u4e1a\u7ea7\u6392\u5e8f\uff1aJava \u6e90\u7801\u4e2d\u7684 Arrays.sort() \u539f\u7406\u89e3\u6790"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#arrayssort","text":"","title":"Arrays.sort() \u6e90\u7801\u5206\u6790\uff08\u4e00\uff09\u2014\u2014 \u8109\u7edc"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_42","text":"\u5e76\u67e5\u96c6\uff08Union Find\uff09\u4e5f\u53eb\u300c\u4e0d\u76f8\u4ea4\u96c6\u5408\uff08Disjoint Set\uff09\u300d\uff0c\u4e13\u95e8\u7528\u4e8e \u52a8\u6001\u5904\u7406 \u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u300c\u67e5\u8be2\u300d\u4e0e\u300c\u5408\u5e76\u300d\u95ee\u9898\u3002 \u5f88\u591a\u6570\u636e\u7ed3\u6784\u90fd\u56e0\u4e3a\u5177\u6709 \u52a8\u6001 \u5904\u7406\u95ee\u9898\u7684\u80fd\u529b\u800c\u53d8\u5f97\u9ad8\u6548\uff0c\u4f8b\u5982\u300c\u5806\u300d\u300c\u4e8c\u53c9\u67e5\u627e\u6811\u300d\u7b49\u3002\u6240\u8c13\u300c\u52a8\u6001\u300d\u7684\u610f\u601d\u662f\uff1a\u8981\u5904\u7406\u7684\u6570\u636e\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u786e\u5b9a\u597d\u7684\uff0c\u7406\u89e3\u300c\u5e76\u67e5\u96c6\u300d\u52a8\u6001\u5904\u7406\u6570\u636e\u7684\u6700\u597d\u7684\u4f8b\u5b50\u662f\u300c\u6700\u5c0f\u751f\u6210\u6811\u300d\u7b97\u6cd5\uff08\u672c\u4e13\u9898\u7b2c 3 \u8282\u4ecb\u7ecd\uff09\u3002 \u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u7684\u95ee\u9898\u4e00\u822c\u90fd\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u904d\u5386\u7684\u641c\u7d22\u7b97\u6cd5\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u5b8c\u6210\uff0c\u4f46\u662f\u4f7f\u7528\u5e76\u67e5\u96c6\u4f1a\u4f7f\u5f97\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u66f4\u52a0\u6e05\u6670\u3001\u76f4\u89c2\u3002 \u5e76\u67e5\u96c6\u7684\u95ee\u9898\u5c5e\u4e8e\u7ade\u8d5b\u7ea7\u522b\u9700\u8981\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5176\u672c\u8eab\u4ee3\u7801\u91cf\u5c11\u4e14\u597d\u7406\u89e3\uff0c\u4f46\u96be\u5728\u5e94\u7528\u3002\u76ee\u524d\u770b\u6765\u300c\u5e76\u67e5\u96c6\u300d\u4e0d\u662f\u666e\u901a\u516c\u53f8\u9762\u8bd5\u548c\u7b14\u8bd5\u7684\u8003\u70b9\uff0c\u8bf7\u5927\u5bb6\u5408\u7406\u5206\u914d\u65f6\u95f4\u8fdb\u884c\u5b66\u4e60\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_43","text":"\u5e76\u67e5\u96c6\u52a8\u6001\u5904\u7406\u7684","title":"\u57fa\u672c\u77e5\u8bc6"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_44","text":"","title":"\u4e24\u4e2a\u95ee\u9898"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_45","text":"\u300c\u57fa\u4e8e id\u300d\u7684\u601d\u60f3\u5e76\u4e0d\u5e38\u7528\uff0c\u4e86\u89e3\u5373\u53ef\uff0c\u6548\u7387\u592a\u4f4e","title":"\u8bbe\u8ba1\u5e76\u67e5\u96c6\u7684\u4e24\u79cd\u601d\u60f3"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_46","text":"","title":"\u6309\u79e9\u5408\u5e76"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_47","text":"","title":"\u8def\u5f84\u538b\u7f29"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_48","text":"\u5b9e\u9645\u5229\u7528\u6876\u7684\u4e2a\u6570 \u4e0e \u6876\u7684\u603b\u6570 \u7684\u6bd4\u503c\uff0c\u79f0\u4e3a\u8d1f\u8f7d\u56e0\u5b50\u3002\u5728\u8fd9\u4e2a\u5b9e\u4f8b\u4e2d\uff0c\u8d1f\u8f7d\u56e0\u5b50\u592a\u5c0f\u751a\u81f3\u63a5\u8fd1\u4e8e 0\uff0c\u8fd9\u6837\u7684\u65b9\u6848\u663e\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\u3002 \u6bd4\u8f83\u5408\u7406\u7684\u8d1f\u8f7d\u56e0\u5b50\u662f 0.7\uff0c\u5982\u679c\u6570\u636e\u91cf\u662f 7\uff0c\u5219\u4f1a\u521b\u5efa 10 \u4e2a\u6876\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u968f\u7740\u63d2\u5165\u7684\u6570\u636e\u91cf\u7684\u589e\u52a0\uff0c\u8ba1\u7b97\u673a\u4f1a\u9010\u6e10\u589e\u52a0\u6876\u7684\u4e2a\u6570\uff0c\u5e76\u9009\u62e9\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u4f7f\u5f97\u6570\u636e\u7ecf\u8fc7\u6620\u5c04\u4e4b\u540e\u80fd\u5747\u5300\u5730\u5206\u5e03\u5728\u6876\u4e2d\u3002","title":"\u54c8\u5e0c\u8868"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_49","text":"\u89e3\u51b3\u51b2\u7a81\u7684\u529e\u6cd5","title":"\u8bbe\u8ba1\u54c8\u5e0c\u8868"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_50","text":"","title":"\u7ebf\u6027\u8bd5\u63a2\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_51","text":"\u54c8\u5e0c\u96c6\u5408\u7684\u64cd\u4f5c \u54c8\u5e0c\u96c6\u5408\u662f\u96c6\u5408\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e4b\u4e00\uff0c\u5b83\u662f\u4e00\u79cd\u5b58\u50a8 \u4e0d\u91cd\u590d\u503c \u7684\u6570\u636e\u7ed3\u6784\u3002 #include <unordered_set> int main() { // 1. \u521d\u59cb\u5316\u54c8\u5e0c\u96c6 unordered_set<int> hashset; // 2. \u65b0\u589e\u952e hashset.insert(3); hashset.insert(2); hashset.insert(1); // 3. \u5220\u9664\u952e hashset.erase(2); // 4. \u67e5\u8be2\u952e\u662f\u5426\u5305\u542b\u5728\u54c8\u5e0c\u96c6\u5408\u4e2d if (hashset.count(2) <= 0) { cout << \"\u952e 2 \u4e0d\u5728\u54c8\u5e0c\u96c6\u5408\u4e2d\" << endl; } // 5. \u54c8\u5e0c\u96c6\u5408\u7684\u5927\u5c0f cout << \"\u54c8\u5e0c\u96c6\u5408\u7684\u5927\u5c0f\u4e3a: \" << hashset.size() << endl; // 6. \u904d\u5386\u54c8\u5e0c\u96c6\u5408 for (auto it = hashset.begin(); it != hashset.end(); ++it) { cout << (*it) << \" \"; } cout << \"\u5728\u54c8\u5e0c\u96c6\u5408\u4e2d\" << endl; // 7. \u6e05\u7a7a\u54c8\u5e0c\u96c6\u5408 hashset.clear(); // 8. \u67e5\u770b\u54c8\u5e0c\u96c6\u5408\u662f\u5426\u4e3a\u7a7a if (hashset.empty()) { cout << \"\u54c8\u5e0c\u96c6\u5408\u4e3a\u7a7a\uff01\" << endl; } } # 1. \u521d\u59cb\u5316\u96c6\u5408 hashset = set() # 2. \u65b0\u589e\u952e hashset.add(3) hashset.add(2) hashset.add(1) # 3. \u5220\u9664\u952e hashset.remove(2) # 4. \u67e5\u8be2\u952e\u662f\u5426\u5305\u542b\u5728\u96c6\u5408\u4e2d if (2 not in hashset): print(\"2 \u4e0d\u5728\u96c6\u5408\u4e2d\") # 5. \u96c6\u5408\u7684\u5927\u5c0f print(\"\u96c6\u5408\u7684\u5927\u5c0f\u4e3a\uff1a\", len(hashset)) # 6. \u904d\u5386\u96c6\u5408 for x in hashset: print(x, end=\" \") print(\"\u5728\u96c6\u5408\u4e2d\") # 7. \u6e05\u7a7a\u96c6\u5408 hashset.clear() print(\"\u96c6\u5408\u7684\u5927\u5c0f\u4e3a\uff1a\", len(hashset)) \u4f7f\u7528\u54c8\u5e0c\u96c6\u5408\u67e5\u91cd \u6211\u4eec\u77e5\u9053\uff0c\u7531\u4e8e\u54c8\u5e0c\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f \u4e0d\u91cd\u590d\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u96c6\u5408\u6765\u5224\u65ad\u662f\u5426\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u4e2d\u662f\u5426\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002 \u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u95ee\u9898\uff0c\u7528\u6765\u5224\u65ad\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u662f\u5426\u5305\u542b\u91cd\u590d\u5143\u7d20\uff0c\u6216\u8005\u5bf9\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u8fdb\u884c \u53bb\u91cd \u7684\u64cd\u4f5c\u3002 \u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u7b80\u5355\u601d\u8def\u662f\u904d\u5386\u8be5\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u5c06\u503c\u63d2\u5165\u5230\u54c8\u5e0c\u96c6\u5408\u4e2d\u3002\u5982\u679c\u8be5\u503c\u5df2\u7ecf\u5b58\u5728\u4e8e\u54c8\u5e0c\u96c6\u5408\u4e2d\uff0c\u8868\u660e\u53d1\u751f\u4e86\u91cd\u590d\u3002 /* * \u4f7f\u7528\u54c8\u5e0c\u96c6\u5408\u5bfb\u627e\u91cd\u590d\u5143\u7d20\u7684\u6a21\u677f */ bool findDuplicates(vector<Type>& keys) { // \u5c06 type \u66ff\u6362\u4e3a keys \u7684\u5b9e\u9645\u7c7b\u578b unordered_set<Type> hashset; for (Type key : keys) { if (hashset.count(key) > 0) { return true; } hashset.insert(key); } return false; }","title":"\u5b9e\u9645\u5e94\u7528"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_52","text":"","title":"\u54c8\u5e0c\u6620\u5c04"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_53","text":"\u5728\u8ba1\u7b97\u673a\u7684\u4e16\u754c\u91cc\uff0c\u5f88\u591a\u7684\u5e94\u7528\u573a\u666f\u53ea\u9700\u8981\u53d6\u5f97\u5f53\u524d\u6570\u636e\u96c6\u4e2d\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u800c\u5bf9\u4e8e\u6570\u636e\u96c6\u4e2d\u5176\u5b83\u6570\u636e\uff0c\u5e76\u4e0d\u9700\u8981\u4ed6\u4eec\u4e00\u5b9a\u662f\u6709\u5e8f\u7684\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u9ad8\u6548\u5feb\u901f\u5730\u53d6\u5f97\u5f53\u524d\u6570\u636e\u96c6\u4e2d\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\u5143\u7d20\u5462\uff1f\u6b64\u65f6\uff0c\u65b0\u7684\u6570\u636e\u7ed3\u6784\u300c\u5806\u300d\u5c31\u8bde\u751f\u4e86\u3002 \u5728\u672c LeetBook \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u300c\u5806\u300d\uff0c\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\uff1a \u7406\u89e3\u300c\u5806\u300d\u6570\u636e\u7ed3\u6784\u548c\u5b9e\u73b0\uff1b \u7406\u89e3\u300c\u6700\u5927\u5806\u300d\u548c\u300c\u6700\u5c0f\u5806\u300d\u7684\u57fa\u7840\u6982\u5ff5\u548c\u6838\u5fc3\u64cd\u4f5c\uff1b \u7406\u89e3\u300c\u5806\u6392\u5e8f\u300d\uff1b \u7406\u89e3\u300c\u5806\u300d\u7684\u5e94\u7528\u573a\u666f\uff1b \u80fd\u591f\u8fd0\u7528\u300c\u5806\u300d\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u3002","title":"\u5806"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_54","text":"\u5728\u5806\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u5e38\u7528\u5806\u7684\u63d2\u5165\u3001\u5220\u9664\u3001\u83b7\u53d6\u5806\u9876\u5143\u7d20\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u6570\u7ec4\u5b9e\u73b0\u5806\u3002\u6211\u4eec\u5c06\u5806\u4e2d\u7684\u5143\u7d20\u4ee5\u4e8c\u53c9\u6811\u7684\u5f62\u5f0f\u5b58\u5165\u5728\u6570\u7ec4\u4e2d\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c06\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\u6574\u6570\u7c7b\u578b\u7684\u300c\u6700\u5927\u5806\u300d\u548c\u300c\u6700\u5c0f\u5806\u300d\uff0c\u4ec5\u4f9b\u5927\u5bb6\u53c2\u8003\uff08\u5728\u5b9e\u9645\u89e3\u9898\u6216\u8005\u5de5\u4f5c\u4e2d\uff0c\u4e00\u822c\u5f88\u5c11\u9700\u8981\u81ea\u5df1\u53bb\u5b9e\u73b0\u5806\uff09 # \u300c\u6700\u5927\u5806\u300d\u7684\u5b9e\u73b0 import sys class MaxHeap: def __init__(self, heapSize): # heapSize\u7528\u4e8e\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6570\u7ec4\u5728\u521b\u5efa\u7684\u65f6\u5019\u81f3\u5c11\u9700\u8981\u6307\u660e\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570 self.heapSize = heapSize # \u4f7f\u7528\u6570\u7ec4\u521b\u5efa\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7136\u540e\u4f7f\u7528\u4e8c\u53c9\u6811\u6784\u5efa\u4e00\u4e2a\u300c\u5806\u300d self.maxheap = [0]*(heapSize+1) # realSize\u7528\u4e8e\u8bb0\u5f55\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 self.realSize = 0 # \u6dfb\u52a0\u5143\u7d20\u51fd\u6570 def add(self, element): self.realSize += 1 # \u5982\u679c\u300c\u5806\u300d\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u5927\u4e8e\u4e00\u5f00\u59cb\u8bbe\u5b9a\u7684\u6570\u7ec4\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u300cAdd too many elements\u300d if self.realSize > self.heapSize: print(\"Add too many elements!\") self.realSize -= 1 return # \u5c06\u6dfb\u52a0\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d self.maxheap[self.realSize] = element # \u65b0\u589e\u5143\u7d20\u7684\u7d22\u5f15\u4f4d\u7f6e index = self.realSize # \u65b0\u589e\u5143\u7d20\u7684\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e # \u6ce8\u610f\uff0c\u5982\u679c\u7528\u6570\u7ec4\u8868\u793a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u6839\u7ed3\u70b9\u5b58\u50a8\u5728\u6570\u7ec4\u7684\u7d22\u5f151\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e/2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2+1\u300d parent = index // 2 # \u5f53\u6dfb\u52a0\u7684\u5143\u7d20\u5927\u4e8e\u7236\u8282\u70b9\u65f6\uff0c\u9700\u8981\u5c06\u7236\u8282\u70b9\u7684\u503c\u548c\u65b0\u589e\u5143\u7d20\u7684\u503c\u4ea4\u6362 while (self.maxheap[index] > self.maxheap[parent] and index > 1): self.maxheap[parent], self.maxheap[index] = self.maxheap[index], self.maxheap[parent] index = parent parent = index // 2 # \u83b7\u53d6\u5806\u9876\u5143\u7d20\u51fd\u6570 def peek(self): return self.maxheap[1] # \u5220\u9664\u5806\u9876\u5143\u7d20\u51fd\u6570 def pop(self): # \u5982\u679c\u5f53\u524d\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c \u5219\u8fd4\u56de\u300cDon't have any element\u300d if self.realSize < 1: print(\"Don't have any element!\") return sys.maxsize else: # \u5f53\u524d\u300c\u5806\u300d\u4e2d\u542b\u6709\u5143\u7d20 # self.realSize >= 1 removeElement = self.maxheap[1] # \u5c06\u300c\u5806\u300d\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u5806\u9876\u5143\u7d20 self.maxheap[1] = self.maxheap[self.realSize] self.realSize -= 1 index = 1 # \u5f53\u5220\u9664\u7684\u5143\u7d20\u4e0d\u662f\u5b69\u5b50\u8282\u70b9\u65f6 while (index < self.realSize and index <= self.realSize // 2): # \u88ab\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9 left = index * 2 # \u88ab\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9 right = (index * 2) + 1 # \u5f53\u5220\u9664\u8282\u70b9\u7684\u5143\u7d20\u5c0f\u4e8e \u5de6\u5b69\u5b50\u8282\u70b9\u6216\u8005\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u4ee3\u8868\u8be5\u5143\u7d20\u7684\u503c\u5c0f\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u8be5\u5143\u7d20\u4e0e\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u503c\u8fdb\u884c\u4ea4\u6362 if (self.maxheap[index] < self.maxheap[left] or self.maxheap[index] < self.maxheap[right]): if self.maxheap[left] > self.maxheap[right]: self.maxheap[left], self.maxheap[index] = self.maxheap[index], self.maxheap[left] index = left else: self.maxheap[right], self.maxheap[index] = self.maxheap[index], self.maxheap[right] index = right else: break return removeElement # \u8fd4\u56de\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 def size(self): return self.realSize def toString(self): print(self.maxheap[1 : self.realSize+1]) if __name__ == \"__main__\": # \u6d4b\u8bd5\u7528\u4f8b maxHeap = MaxHeap(5) maxHeap.add(1) maxHeap.add(2) maxHeap.add(3) # [3,1,2] maxHeap.toString() # 3 print(maxHeap.peek()) # 3 print(maxHeap.pop()) # 2 print(maxHeap.pop()) # 1 print(maxHeap.pop()) maxHeap.add(4) maxHeap.add(5) # [5,4] maxHeap.toString() \u4f5c\u8005\uff1a\u7231\u5b66\u4e60\u7684\u9972\u517b\u5458 \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/heap/evmih5/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 # \u300c\u6700\u5c0f\u5806\u300d\u7684\u5b9e\u73b0 import sys class MinHeap: def __init__(self, heapSize): # heapSize\u7528\u4e8e\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6570\u7ec4\u5728\u521b\u5efa\u7684\u65f6\u5019\u81f3\u5c11\u9700\u8981\u6307\u660e\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570 self.heapSize = heapSize # \u4f7f\u7528\u6570\u7ec4\u521b\u5efa\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7136\u540e\u4f7f\u7528\u4e8c\u53c9\u6811\u6784\u5efa\u4e00\u4e2a\u300c\u5806\u300d self.minheap = [0]*(heapSize+1) # realSize\u7528\u4e8e\u8bb0\u5f55\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 self.realSize = 0 # \u6dfb\u52a0\u5143\u7d20\u51fd\u6570 def add(self, element): self.realSize += 1 # \u5982\u679c\u300c\u5806\u300d\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u5927\u4e8e\u4e00\u5f00\u59cb\u8bbe\u5b9a\u7684\u6570\u7ec4\u7684\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u300cAdd too many elements\u300d if self.realSize > self.heapSize: print(\"Add too many elements!\") self.realSize -= 1 return # \u5c06\u6dfb\u52a0\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d self.minheap[self.realSize] = element # \u65b0\u589e\u5143\u7d20\u7684\u7d22\u5f15\u4f4d\u7f6e index = self.realSize # \u65b0\u589e\u5143\u7d20\u7684\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e # \u6ce8\u610f\uff0c\u5982\u679c\u7528\u6570\u7ec4\u8868\u793a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u6839\u7ed3\u70b9\u5b58\u50a8\u5728\u6570\u7ec4\u7684\u7d22\u5f151\u7684\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e/2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2\u300d\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e\u4e3a\u300c\u8be5\u8282\u70b9\u7684\u7d22\u5f15\u4f4d\u7f6e*2+1\u300d parent = index // 2 # \u5f53\u6dfb\u52a0\u7684\u5143\u7d20\u5c0f\u4e8e\u7236\u8282\u70b9\u65f6\uff0c\u9700\u8981\u5c06\u7236\u8282\u70b9\u7684\u503c\u548c\u65b0\u589e\u5143\u7d20\u7684\u503c\u4ea4\u6362 while (self.minheap[index] < self.minheap[parent] and index > 1): self.minheap[parent], self.minheap[index] = self.minheap[index], self.minheap[parent] index = parent parent = index // 2 # \u83b7\u53d6\u5806\u9876\u5143\u7d20\u51fd\u6570 def peek(self): return self.minheap[1] # \u5220\u9664\u5806\u9876\u5143\u7d20\u51fd\u6570 def pop(self): # \u5982\u679c\u5f53\u524d\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c \u5219\u8fd4\u56de\u300cDon't have any element\u300d if self.realSize < 1: print(\"Don't have any element!\") return sys.maxsize else: # \u5f53\u524d\u300c\u5806\u300d\u4e2d\u542b\u6709\u5143\u7d20 # self.realSize >= 1 removeElement = self.minheap[1] # \u5c06\u300c\u5806\u300d\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u5806\u9876\u5143\u7d20 self.minheap[1] = self.minheap[self.realSize] self.realSize -= 1 index = 1 # \u5f53\u5220\u9664\u7684\u5143\u7d20\u4e0d\u662f\u5b69\u5b50\u8282\u70b9\u65f6 while (index < self.realSize and index <= self.realSize // 2): # \u88ab\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8282\u70b9 left = index * 2 # \u88ab\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8282\u70b9 right = (index * 2) + 1 # \u5f53\u5220\u9664\u8282\u70b9\u7684\u5143\u7d20\u5927\u4e8e \u5de6\u5b69\u5b50\u8282\u70b9\u6216\u8005\u53f3\u5b69\u5b50\u8282\u70b9\uff0c\u4ee3\u8868\u8be5\u5143\u7d20\u7684\u503c\u5927\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u8be5\u5143\u7d20\u4e0e\u5de6\u3001\u53f3\u5b69\u5b50\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u503c\u8fdb\u884c\u4ea4\u6362 if (self.minheap[index] > self.minheap[left] or self.minheap[index] > self.minheap[right]): if self.minheap[left] < self.minheap[right]: self.minheap[left], self.minheap[index] = self.minheap[index], self.minheap[left] index = left else: self.minheap[right], self.minheap[index] = self.minheap[index], self.minheap[right] index = right else: break return removeElement # \u8fd4\u56de\u300c\u5806\u300d\u7684\u5143\u7d20\u4e2a\u6570 def size(self): return self.realSize def toString(self): print(self.minheap[1 : self.realSize+1]) if __name__ == \"__main__\": # \u6d4b\u8bd5\u7528\u4f8b minHeap = MinHeap(5) minHeap.add(3) minHeap.add(1) minHeap.add(2) # [1,3,2] minHeap.toString() # 1 print(minHeap.peek()) # 1 print(minHeap.pop()) # 2 print(minHeap.pop()) # 3 print(minHeap.pop()) minHeap.add(4) minHeap.add(5) # [4,5] minHeap.toString() \u4f5c\u8005\uff1a\u7231\u5b66\u4e60\u7684\u9972\u517b\u5458 \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/heap/evmih5/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u5b9a\u4e49"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_55","text":"\u521b\u5efa \u5806 \u6307\u7684\u662f\u521d\u59cb\u5316\u4e00\u4e2a\u5806\u5b9e\u4f8b\u3002\u6240\u6709\u5806\u65b9\u6cd5\u7684\u524d\u63d0\u5fc5\u987b\u662f\u5728\u5806\u5b9e\u4f8b\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u9996\u5148\u521b\u5efa\u4e00\u4e2a \u5806 \u5b9e\u4f8b\uff0c\u7136\u540e\u624d\u80fd\u4f7f\u7528 \u5806 \u7684\u5e38\u7528\u65b9\u6cd5\u3002\u5728\u521b\u5efa \u5806 \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c \u5806\u5316 \u64cd\u4f5c\u3002\u5806\u5316 \u5c31\u662f\u5c06\u4e00\u7ec4\u6570\u636e\u53d8\u6210 \u5806 \u7684\u8fc7\u7a0b\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(N)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(N)\u3002 import heapq # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6700\u5c0f\u5806 minHeap = [] heapq.heapify(minHeap) # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6700\u5927\u5806 # \u7531\u4e8ePython\u4e2d\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u6700\u5927\u5806\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6700\u5927\u5806\u3002 # \u521b\u5efa\u5e26\u521d\u59cb\u503c\u7684\u300c\u5806\u300d\uff0c \u6216\u8005\u79f0\u4e3a\u300c\u5806\u5316\u300d\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u300c\u5806\u300d\u4e3a\u300c\u6700\u5c0f\u5806\u300d heapWithValues = [3,1,2] heapq.heapify(heapWithValues) # \u521b\u5efa\u6700\u5927\u5806\u6280\u5de7 # Python\u4e2d\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\u6700\u5927\u5806\u3002 # \u4f46\u6211\u4eec\u53ef\u4ee5\u5c06[\u6bcf\u4e2a\u5143\u7d20*-1]\uff0c\u518d\u5c06\u65b0\u5143\u7d20\u96c6\u8fdb\u884c\u300c\u5806\u5316\u300d\u64cd\u4f5c\u3002\u6b64\u65f6\uff0c\u5806\u9876\u5143\u7d20\u662f\u65b0\u7684\u5143\u7d20\u96c6\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u53ef\u4ee5\u8f6c\u6362\u6210\u539f\u59cb\u5143\u7d20\u96c6\u7684\u6700\u5927\u503c\u3002 # \u793a\u4f8b maxHeap = [1,2,3] maxHeap = [-x for x in maxHeap] heapq.heapify(maxHeap) # \u6b64\u65f6\u7684maxHeap\u7684\u5806\u9876\u5143\u7d20\u662f-3 # \u5c06-3\u8f6c\u6362\u4e3a\u539f\u6765\u7684\u5143\u7d203\uff0c\u65e2\u53ef\u83b7\u5f97\u539f\u6765\u7684maxHeap\u4e2d\u6700\u5927\u7684\u503c\u662f3 \u4f5c\u8005\uff1a\u7231\u5b66\u4e60\u7684\u9972\u517b\u5458 \u94fe\u63a5\uff1ahttps://leetcode.cn/leetbook/read/heap/en1ztc/ \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u5806\u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_56","text":"\u89e3\u6cd52","title":"\u5806\u7684\u5e94\u7528"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_57","text":"\u4f60\u5c06\u4e86\u89e3\u5230\uff1a \u5e76\u67e5\u96c6\uff08 Union Find \uff09\u6570\u636e\u7ed3\u6784 \u300c\u56fe\u300d\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u300c\u56fe\u300d\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u6700\u5c0f\u751f\u6210\u6811\u76f8\u5173\u5b9a\u7406\u548c\u7b97\u6cd5 \u5207\u5206\u5b9a\u7406 Kruskal \u7b97\u6cd5 Prim \u7b97\u6cd5 \u5355\u6e90\u6700\u77ed\u8def\u5f84\u76f8\u5173\u7b97\u6cd5 Dijkstra \u7b97\u6cd5 Bellman-Ford \u7b97\u6cd5 \u62d3\u6251\u6392\u5e8f\u4e4b Kahn \u7b97\u6cd5","title":"\u56fe"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_58","text":"\u77e9\u9635 \u90bb\u63a5\u8868 \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u6cd5","title":"\u56fe\u7684\u5b58\u50a8"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_59","text":"\u4ee5\u4e0b\u662f Quick Find \u7684\u300c\u5e76\u67e5\u96c6\u300d\u5b9e\u73b0\u4ee3\u7801 // UnionFind.class public class UnionFind { int root[]; public UnionFind(int size) { root = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; } } public int find(int x) { return root[x]; } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { for (int i = 0; i < root.length; i++) { if (root[i] == rootY) { root[i] = rootX; } } } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u4ee5\u4e0b\u662f Quick Union \u7684\u300c\u5e76\u67e5\u96c6\u300d\u5b9e\u73b0\u4ee3\u7801 public class UnionFind { int root[]; public UnionFind(int size) { root = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; } } public int find(int x) { while (x != root[x]) { x = root[x]; } return x; } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { root[rootY] = rootX; } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u6309\u79e9\u5408\u5e76 // UnionFind.class public class UnionFind { int root[]; int rank[]; public UnionFind(int size) { root = new int[size]; rank = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; rank[i] = 1; } } public int find(int x) { while (x != root[x]) { x = root[x]; } return x; } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { if (rank[rootX] > rank[rootY]) { root[rootY] = rootX; } else if (rank[rootX] < rank[rootY]) { root[rootX] = rootY; } else { root[rootY] = rootX; rank[rootX] += 1; } } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u8def\u5f84\u538b\u7f29\u4f18\u5316 // UnionFind.class public class UnionFind { int root[]; public UnionFind(int size) { root = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; } } public int find(int x) { if (x == root[x]) { return x; } return root[x] = find(root[x]); } public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { root[rootY] = rootX; } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } } \u57fa\u4e8e\u8def\u5f84\u538b\u7f29\u7684\u6309\u79e9\u5408\u5e76\u4f18\u5316\u7684\u300c\u5e76\u67e5\u96c6\u300d \u8fd9\u4e2a\u4f18\u5316\u5c31\u662f\u5c06\u300c\u8def\u5f84\u538b\u7f29\u4f18\u5316\u300d\u548c\u300c\u6309\u79e9\u5408\u5e76\u4f18\u5316\u300d\u5408\u5e76\u540e\u5f62\u6210\u7684\u300c\u5e76\u67e5\u96c6\u300d\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 // UnionFind.class public class UnionFind { int root[]; // \u6dfb\u52a0\u4e86 rank \u6570\u7ec4\u6765\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u9ad8\u5ea6\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u9876\u70b9\u7684\u300c\u79e9\u300d int rank[]; public UnionFind(int size) { root = new int[size]; rank = new int[size]; for (int i = 0; i < size; i++) { root[i] = i; rank[i] = 1; // \u4e00\u5f00\u59cb\u6bcf\u4e2a\u9876\u70b9\u7684\u521d\u59cb\u300c\u79e9\u300d\u4e3a1\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u6709\u81ea\u5df1\u672c\u8eab\u7684\u4e00\u4e2a\u9876\u70b9\u3002 } } // \u6b64\u5904\u7684 find \u51fd\u6570\u4e0e\u8def\u5f84\u538b\u4f18\u5316\u7f29\u7248\u672c\u7684 find \u51fd\u6570\u4e00\u6837\u3002 public int find(int x) { if (x == root[x]) { return x; } return root[x] = find(root[x]); } // \u6309\u79e9\u5408\u5e76\u4f18\u5316\u7684 union \u51fd\u6570 public void union(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX != rootY) { if (rank[rootX] > rank[rootY]) { root[rootY] = rootX; } else if (rank[rootX] < rank[rootY]) { root[rootX] = rootY; } else { root[rootY] = rootX; rank[rootX] += 1; } } }; public boolean connected(int x, int y) { return find(x) == find(y); } } // App.java // \u6d4b\u8bd5\u6837\u4f8b public class App { public static void main(String[] args) throws Exception { UnionFind uf = new UnionFind(10); // 1-2-5-6-7 3-8-9 4 uf.union(1, 2); uf.union(2, 5); uf.union(5, 6); uf.union(6, 7); uf.union(3, 8); uf.union(8, 9); System.out.println(uf.connected(1, 5)); // true System.out.println(uf.connected(5, 7)); // true System.out.println(uf.connected(4, 9)); // false // 1-2-5-6-7 3-8-9-4 uf.union(9, 4); System.out.println(uf.connected(4, 9)); // true } }","title":"\u5e76\u67e5\u96c6"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_60","text":"\u904d\u5386\u6240\u6709\u9876\u70b9 - \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u904d\u5386\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u8def\u5f84 - \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5","title":"\u6df1\u5ea6\u4f18\u5148"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_61","text":"\u904d\u5386\u6240\u6709\u9876\u70b9 - \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 \u6c42\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84 - \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_62","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811\u76f8\u5173\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_63","text":"","title":"\u5207\u5206\u5b9a\u7406"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#kruskal","text":"\u300cKruskal \u7b97\u6cd5\u300d\u662f\u6c42\u89e3\u300c\u52a0\u6743\u65e0\u5411\u56fe\u300d\u7684\u300c\u6700\u5c0f\u751f\u6210\u6811\u300d\u7684\u4e00\u79cd\u7b97\u6cd5","title":"Kruskal \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#prim","text":"\u300cPrim \u7b97\u6cd5\u300d\u662f\u6c42\u89e3\u300c\u52a0\u6743\u65e0\u5411\u56fe\u300d\u7684\u300c\u6700\u5c0f\u751f\u6210\u6811\u300d\u7684\u53e6\u4e00\u79cd\u7b97\u6cd5\u3002 \u8fd9\u4e24\u4e2a\u90fd\u662f\u8ba1\u7b97\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5","title":"Prim \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_64","text":"\u6211\u4eec\u5c06\u5b66\u4e60\u4e24\u4e2a\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u7684\u7b97\u6cd5\uff1a Dijkstra \u7b97\u6cd5 Bellman-Ford \u7b97\u6cd5 \u5176\u4e2d\uff0c\u300cDijkstra \u7b97\u6cd5\u300d\u53ea\u80fd\u89e3\u51b3\u52a0\u6743\u6709\u5411\u56fe\u7684\u6743\u91cd\u4e3a\u975e\u8d1f\u6570\u7684\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u3002\u300cBellman-Ford \u7b97\u6cd5\u300d\u80fd\u89e3\u51b3\u52a0\u6743\u6709\u5411\u56fe\u4e2d\u5305\u542b\u6743\u91cd\u4e3a\u8d1f\u6570\u7684\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u3002","title":"\u5355\u6e90\u6700\u77ed\u8def\u5f84\u76f8\u5173\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dijkstra","text":"\u300cDijkstra \u7b97\u6cd5\u300d\u89e3\u51b3\u7684\u662f\u52a0\u6743\u6709\u5411\u56fe\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\uff0c\u5176\u4e2d\u8be5\u56fe\u7684\u6240\u6709\u6743\u91cd\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\u3002","title":"Dijkstra \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#bellman-ford","text":"\u5728\u524d\u9762\u4ecb\u7ecd\u7684\u300cDijkstra \u7b97\u6cd5\u300d\u4e2d\uff0c\u5b83\u53ea\u80fd\u89e3\u51b3\u6ca1\u6709\u300c\u8d1f\u6743\u56fe\u300d\u7684\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u3002\u5982\u679c\u9047\u5230\u6709\u300c\u8d1f\u6743\u56fe\u300d\uff0c\u5e94\u8be5\u600e\u4e48\u89e3\u51b3\u300c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u300d\u95ee\u9898\u5462\uff1f\u90a3\u5c31\u662f\u8fd9\u4e00\u5c0f\u8282\u7684\u91cd\u70b9\uff1a\u300cBellman-Ford \u7b97\u6cd5\u300d\u3002","title":"Bellman-Ford \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#bellman-ford-spfa","text":"\u5728\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86\u300cBellman-Ford \u7b97\u6cd5\u300d\uff0c\u4e5f\u540c\u65f6\u5f15\u8fdb\u4e86\u4f18\u5316\u7248\u7684 Bellman-Ford \u7b97\u6cd5\uff1a\u9488\u5bf9\u4e00\u4e2a\u65e0\u8d1f\u6743\u73af\u7684\u56fe\u6765\u8bf4\uff0c\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c N-1 \u6b21\u7684\u677e\u5f1b\u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u8d77\u70b9\u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5728\u9009\u62e9\u8fb9\u904d\u5386\u7684\u65f6\u5019\u4f1a\u505a\u5f88\u591a\u65e0\u7528\u529f\uff0c\u8fd9\u65e0\u7591\u4f1a\u589e\u52a0\u6211\u4eec\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u3002","title":"\u57fa\u4e8e\u300c\u961f\u5217\u300d\u4f18\u5316\u7684 Bellman-Ford \u7b97\u6cd5 \u2014 SPFA \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#kahn","text":"","title":"\u62d3\u6251\u6392\u5e8f\u4e4b Kahn \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_65","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_66","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_67","text":"","title":"\u6811"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_68","text":"\u904d\u5386\u53ef\u4ee5\u7528\u4e8e\u641c\u7d22\uff0c\u601d\u60f3\u662f\u7a77\u4e3e\uff0c\u904d\u5386\u662f\u5b9e\u73b0\u641c\u7d22\u7684\u624b\u6bb5\uff1b \u6811\u7684\u300c\u524d\u3001\u4e2d\u3001\u540e\u300d\u5e8f\u904d\u5386\u90fd\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff1b \u6811\u7684\u540e\u5e8f\u904d\u5386\u5f88\u91cd\u8981\uff1b \u7531\u4e8e\u56fe\u4e2d\u5b58\u5728\u73af\uff08\u56de\u8def\uff09\uff0c\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u9700\u8981\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u4ee5\u907f\u514d\u91cd\u590d\u8bbf\u95ee\uff1b \u904d\u5386\u662f\u4e00\u79cd\u7b80\u5355\u3001\u6734\u7d20\u4f46\u662f\u5f88\u91cd\u8981\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u5f88\u591a\u6811\u548c\u56fe\u7684\u95ee\u9898\u5c31\u662f\u5728\u6811\u548c\u56fe\u4e0a\u6267\u884c\u4e00\u6b21\u904d\u5386\uff0c\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5f97\u5230\u9700\u8981\u7ed3\u679c\uff0c\u533a\u522b\u5728\u4e8e\u4e3a\u4e86\u89e3\u51b3\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u5728\u904d\u5386\u7684\u65f6\u5019\u4f20\u9012\u4e86\u4e0d\u540c\u7684 \u4e0e\u95ee\u9898\u76f8\u5173 \u7684\u6570\u636e\u3002","title":"\u56fe"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_69","text":"","title":"\u6808"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_70","text":"\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06 \u5f53\u524d\u904d\u5386\u5230\u7684\u7ed3\u70b9 \u7684\u76f8\u90bb\u7ed3\u70b9 \u6682\u65f6\u4fdd\u5b58 \u8d77\u6765\uff0c\u4ee5\u4fbf\u5728\u56de\u9000\u7684\u65f6\u5019\u53ef\u4ee5\u7ee7\u7eed\u8bbf\u95ee\u5b83\u4eec\u3002\u904d\u5386\u5230\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5448\u73b0\u300c\u540e\u8fdb\u5148\u51fa\u300d\u7684\u7279\u70b9\uff0c\u56e0\u6b64 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u53ef\u4ee5\u901a\u8fc7\u300c\u6808\u300d\u5b9e\u73b0\u3002 \u518d\u8005\uff0c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6709\u660e\u663e\u7684\u9012\u5f52\u7ed3\u6784\u3002\u6211\u4eec\u77e5\u9053\u652f\u6301\u9012\u5f52\u5b9e\u73b0\u7684\u6570\u636e\u7ed3\u6784\u4e5f\u662f\u6808\u3002\u56e0\u6b64\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u5199\u9012\u5f52\u65b9\u6cd5\uff1b \u7f16\u5199\u6808\uff0c\u901a\u8fc7\u8fed\u4ee3\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_71","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u5e94\u7528"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_72","text":"\u5728\u4e00\u4e9b\u6811\u7684\u95ee\u9898\u4e2d\uff0c\u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u83b7\u5f97\u6811\u7684\u67d0\u4e9b\u5c5e\u6027\u3002\u4f8b\u5982\uff1a\u300c\u4e8c\u53c9\u6811\u300d\u7684\u6700\u5927\u6df1\u5ea6\u3001\u300c\u4e8c\u53c9\u6811\u300d\u7684\u6700\u5c0f\u6df1\u5ea6\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u3001\u662f\u5426 BST\u3002\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u901a\u5e38\u9700\u8981\u8bbe\u8ba1\u4e00\u4e9b\u53d8\u91cf\uff0c\u4e00\u8fb9\u904d\u5386\uff0c\u4e00\u8fb9\u66f4\u65b0\u8bbe\u8ba1\u7684\u53d8\u91cf\u7684\u503c","title":"\u83b7\u5f97\u56fe\uff08\u6811\uff09\u7684\u4e00\u4e9b\u5c5e\u6027"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_73","text":"import java.util.ArrayList; import java.util.List; public class Solution { public int countComponents(int n, int[][] edges) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<>(); } // \u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u53cc\u5411\u5f15\u7528 for (int[] edge : edges) { adj[edge[0]].add(edge[1]); adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 int count = 0; boolean[] visited = new boolean[n]; for (int i = 0; i < n; i++) { if (!visited[i]) { dfs(adj, i, visited); count++; } } return count; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param visited \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 */ private void dfs(List<Integer>[] adj, int u, boolean[] visited) { visited[u] = true; List<Integer> successors = adj[u]; for (int successor : successors) { if (!visited[successor]) { dfs(adj, successor, visited); } } } }","title":"\u8ba1\u7b97\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_74","text":"\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u73af\u7684\u68c0\u6d4b\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u9700\u8981\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u4ee5\u4fbf\u5728\u9047\u5230\u5df2\u8bbf\u95ee\u7684\u8282\u70b9\u65f6\u5224\u65ad\u662f\u5426\u5f62\u6210\u73af\u3002 import java.util.ArrayList; import java.util.List; public class Solution { public boolean hasCycle(int n, int[][] edges) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<>(); } // \u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u53cc\u5411\u5f15\u7528 for (int[] edge : edges) { adj[edge[0]].add(edge[1]); adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 boolean[] visited = new boolean[n]; for (int i = 0; i < n; i++) { if (!visited[i]) { if (dfs(adj, i, visited, -1)) { return true; } } } return false; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param visited \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 * @param parent \u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u8282\u70b9 */ private boolean dfs(List<Integer>[] adj, int u, boolean[] visited, int parent) { visited[u] = true; List<Integer> successors = adj[u]; for (int successor : successors) { if (!visited[successor]) { if (dfs(adj, successor, visited, u)) { return true; } } else if (successor != parent) { // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5e76\u4e14\u4e0d\u662f\u7236\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u5b58\u5728\u73af return true; } } return false; } }","title":"\u68c0\u6d4b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u73af"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_75","text":"\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u4e8c\u5206\u56fe\u7684\u68c0\u6d4b\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7ed9\u6bcf\u4e2a\u8282\u70b9\u67d3\u8272\uff0c\u4f7f\u7528\u4e24\u79cd\u989c\u8272\u4ea4\u66ff\u7740\u8272\uff0c\u5982\u679c\u53d1\u73b0\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u989c\u8272\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u8be5\u56fe\u4e0d\u662f\u4e8c\u5206\u56fe\u3002 import java.util.ArrayList; import java.util.List; public class Solution { public boolean isBipartite(int n, int[][] edges) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[n]; for (int i = 0; i < n; i++) { adj[i] = new ArrayList<>(); } // \u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u53cc\u5411\u5f15\u7528 for (int[] edge : edges) { adj[edge[0]].add(edge[1]); adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 int[] color = new int[n]; for (int i = 0; i < n; i++) { if (color[i] == 0) { if (!dfs(adj, i, color, 1)) { return false; } } } return true; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param color \u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u989c\u8272 * @param c \u5f53\u524d\u8282\u70b9\u7684\u989c\u8272 */ private boolean dfs(List<Integer>[] adj, int u, int[] color, int c) { color[u] = c; List<Integer> successors = adj[u]; for (int successor : successors) { if (color[successor] == 0) { // \u5982\u679c\u76f8\u90bb\u8282\u70b9\u672a\u88ab\u67d3\u8272\uff0c\u5219\u7ee7\u7eed\u6df1\u5ea6\u4f18\u5148\u904d\u5386 if (!dfs(adj, successor, color, 3 - c)) { return false; } } else if (color[successor] == c) { // \u5982\u679c\u76f8\u90bb\u8282\u70b9\u5df2\u88ab\u67d3\u8272\uff0c\u5e76\u4e14\u989c\u8272\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u4e0d\u662f\u4e8c\u5206\u56fe return false; } } return true; } }","title":"\u4e8c\u5206\u56fe\u68c0\u6d4b"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_76","text":"\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u62d3\u6251\u6392\u5e8f\u662f\u5c06\u56fe\u4e2d\u7684\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6bcf\u4e00\u6761\u6709\u5411\u8fb9 (u, v)\uff0c\u9876\u70b9 u \u5728\u9876\u70b9 v \u4e4b\u524d\u3002\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\u6216 Kahn \u7b97\u6cd5\u5b9e\u73b0\u3002","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#dfs_4","text":"import java.util.ArrayList; import java.util.List; public class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[numCourses]; for (int i = 0; i < numCourses; i++) { adj[i] = new ArrayList<>(); } for (int[] edge : prerequisites) { adj[edge[1]].add(edge[0]); } // \u7b2c 2 \u6b65\uff1a\u5f00\u59cb\u6df1\u5ea6\u4f18\u5148\u904d\u5386 boolean[] visited = new boolean[numCourses]; boolean[] onPath = new boolean[numCourses]; List<Integer> result = new ArrayList<>(); for (int i = 0; i < numCourses; i++) { if (!visited[i]) { if (dfs(adj, i, visited, onPath, result)) { return new int[0]; // \u6709\u73af\uff0c\u65e0\u6cd5\u5b8c\u6210\u62d3\u6251\u6392\u5e8f } } } // \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u6570\u7ec4\u5e76\u8fd4\u56de int[] order = new int[result.size()]; for (int i = 0; i < result.size(); i++) { order[i] = result.get(result.size() - 1 - i); } return order; } /** * @param adj \u90bb\u63a5\u8868 * @param u \u4ece\u9876\u70b9 u \u5f00\u59cb\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386 * @param visited \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 * @param onPath \u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9 * @param result \u5b58\u653e\u62d3\u6251\u6392\u5e8f\u7ed3\u679c */ private boolean dfs(List<Integer>[] adj, int u, boolean[] visited, boolean[] onPath, List<Integer> result) { visited[u] = true; onPath[u] = true; List<Integer> successors = adj[u]; for (int successor : successors) { if (!visited[successor]) { if (dfs(adj, successor, visited, onPath, result)) { return true; } } else if (onPath[successor]) { // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u5728\u5f53\u524d\u8def\u5f84\u4e0a\uff0c\u5219\u8bf4\u660e\u5b58\u5728\u73af return true; } } onPath[u] = false; result.add(u); return false; } }","title":"\u65b9\u6cd5\u4e00\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#kahn_1","text":"import java.util.ArrayList; import java.util.LinkedList; import java.util.List; import java.util.Queue; public class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { // \u7b2c 1 \u6b65\uff1a\u6784\u5efa\u56fe List<Integer>[] adj = new ArrayList[numCourses]; int[] inDegree = new int[numCourses]; for (int i = 0; i < numCourses; i++) { adj[i] = new ArrayList<>(); } for (int[] edge : prerequisites) { adj[edge[1]].add(edge[0]); inDegree[edge[0]]++; } // \u7b2c 2 \u6b65\uff1a\u4f7f\u7528\u961f\u5217\u8fdb\u884c\u62d3\u6251\u6392\u5e8f Queue<Integer> queue = new LinkedList<>(); for (int i = 0; i < numCourses; i++) { if (inDegree[i] == 0) { queue.offer(i); } } int[] order = new int[numCourses]; int index = 0; while (!queue.isEmpty()) { int u = queue.poll(); order[index++] = u; List<Integer> successors = adj[u]; for (int successor : successors) { inDegree[successor]--; if (inDegree[successor] == 0) { queue.offer(successor); } } } // \u5982\u679c\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u5305\u542b\u6240\u6709\u8bfe\u7a0b\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\uff0c\u5426\u5219\u8fd4\u56de\u7a7a\u6570\u7ec4 return index == numCourses ? order : new int[0]; } }","title":"\u65b9\u6cd5\u4e8c\uff1aKahn \u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_77","text":"\u8ba1\u7b97\u673a\u64c5\u957f\u505a\u7684\u4e8b\u60c5\u662f\u300c\u8ba1\u7b97\u300d\uff0c\u5373\u300c\u505a\u91cd\u590d\u7684\u4e8b\u60c5\u300d\u3002\u80fd\u7528\u7f16\u7a0b\u7684\u65b9\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u901a\u5e38 \u7ed3\u6784\u76f8\u540c\uff0c\u95ee\u9898\u89c4\u6a21\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u901a\u5e38\u9700\u8981\u5c06\u95ee\u9898\u4e00\u6b65\u4e00\u6b65\u8fdb\u884c\u62c6\u89e3\uff0c\u628a\u4e00\u4e2a\u5927\u95ee\u9898\u62c6\u89e3\u4e3a\u7ed3\u6784\u76f8\u540c\u7684\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\u3002 \u53cb\u60c5\u63d0\u793a\uff1a\u6211\u4eec\u4ecb\u7ecd\u300c\u72b6\u6001\u300d\u548c\u300c\u72b6\u6001\u7a7a\u95f4\u300d\u8fd9\u4e24\u4e2a\u6982\u5ff5\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u5176\u5b9e\u5927\u5bb6\u5728\u5b8c\u6210\u4e86\u4e00\u5b9a\u7ec3\u4e60\u4ee5\u540e\u5bf9\u8fd9\u4e24\u4e2a\u6982\u5ff5\u5c31\u4f1a\u6709\u5f62\u8c61\u7684\u7406\u89e3\u3002\u5982\u679c\u4e00\u5f00\u59cb\u4e0d\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u5b8c\u5168\u53ef\u4ee5\u8df3\u8fc7\u3002 \u300c\u72b6\u6001\u300d\u548c\u300c\u72b6\u6001\u7a7a\u95f4\u300d \u4e3a\u4e86\u533a\u5206\u89e3\u51b3\u95ee\u9898\u7684\u4e0d\u540c\u9636\u6bb5\u3001\u4e0d\u540c\u89c4\u6a21\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bed\u8a00\u63cf\u8ff0\u8fdb\u884c\u4ea4\u6d41\u3002\u5728\u7b97\u6cd5\u7684\u4e16\u754c\u91cc\uff0c\u662f\u901a\u8fc7\u53d8\u91cf\u8fdb\u884c\u63cf\u8ff0\u7684\uff0c\u4e0d\u540c\u7684\u53d8\u91cf\u7684\u503c\u5c31\u4ee3\u8868\u4e86\u89e3\u51b3\u4e00\u4e2a\u5b9e\u9645\u95ee\u9898\u4e2d\u6240\u5904\u7684\u4e0d\u540c\u7684\u9636\u6bb5\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c31\u53eb\u505a\u300c\u72b6\u6001\u53d8\u91cf\u300d\u3002\u6240\u6709\u7684\u72b6\u6001\u53d8\u91cf\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3a\u300c\u72b6\u6001\u7a7a\u95f4\u300d\u3002 \u53cb\u60c5\u63d0\u793a\uff1a\u300c\u7a7a\u95f4\u300d\u8fd9\u4e2a\u8bcd\u7ecf\u5e38\u4ee3\u8868\u7684\u542b\u4e49\u662f\u300c\u6240\u6709\u300d\u3002\u5728\u300a\u7ebf\u6027\u4ee3\u6570\u300b\u91cc\uff0c\u7ebf\u6027\u7a7a\u95f4\uff08\u5411\u91cf\u7a7a\u95f4\uff09\u5c31\u662f\u89c4\u5b9a\u4e86\u300c\u52a0\u6cd5\u300d\u548c\u300c\u6570\u4e58\u300d\uff0c\u4e14\u5bf9\u8fd9\u4e24\u79cd\u8fd0\u7b97\u5c01\u95ed\u7684 \u6240\u6709 \u5143\u7d20\u7684\u96c6\u5408\u3002 \u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8054\u7cfb\u5f62\u6210\u56fe\uff08\u6811\uff09\u7ed3\u6784 \u6211\u4eec\u53ef\u4ee5\u628a\u67d0\u79cd\u89c4\u6a21\u7684\u95ee\u9898\u63cf\u8ff0\u60f3\u8c61\u6210\u4e00\u4e2a\u7ed3\u70b9\u3002\u7531\u4e8e\u89c4\u6a21\u76f8\u8fd1\u7684\u95ee\u9898\u4e4b\u95f4\u5b58\u5728\u8054\u7cfb\uff0c\u6211\u4eec\u628a\u6709\u8054\u7cfb\u7684\u7ed3\u70b9\u4e4b\u95f4\u4f7f\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u56e0\u6b64\u5f62\u6210\u7684\u72b6\u6001\u7a7a\u95f4\u5c31\u662f\u4e00\u5f20\u56fe\u3002 \u6811\u7ed3\u6784\u6709\u552f\u4e00\u7684\u8d77\u59cb\u7ed3\u70b9\uff08\u6839\u7ed3\u70b9\uff09\uff0c\u4e14\u4e0d\u5b58\u5728\u73af\uff0c\u6811\u662f\u7279\u6b8a\u7684\u56fe\u3002\u8fd9\u4e00\u7ae0\u8282\u7edd\u5927\u591a\u6570\u7684\u95ee\u9898\u90fd\u4ece\u4e00\u4e2a\u57fa\u672c\u7684\u95ee\u9898\u51fa\u53d1\uff0c\u62c6\u5206\u6210\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u7ee7\u7eed\u62c6\u5206\u7684\u5b50\u95ee\u9898\u6ca1\u6709\u76f8\u540c\u7684\u90e8\u5206\uff0c\u56e0\u6b64\u8fd9\u4e00\u7ae0\u8282\u9047\u5230\u7684\u7edd\u5927\u591a\u6570\u95ee\u9898\u7684\u72b6\u6001\u7a7a\u95f4\u662f\u4e00\u68f5\u6811\u3002 \u6211\u4eec\u8981\u4e86\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u5c31\u9700\u8981\u901a\u8fc7 \u904d\u5386 \u7684\u65b9\u5f0f\u3002\u6b63\u662f\u56e0\u4e3a\u901a\u8fc7\u904d\u5386\uff0c\u6211\u4eec\u80fd\u591f\u8bbf\u95ee\u5230\u72b6\u6001\u7a7a\u95f4\u7684\u6240\u6709\u7ed3\u70b9\uff0c\u56e0\u6b64\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u95ee\u9898\u7684 \u6240\u6709 \u89e3\u3002","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_78","text":"","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_79","text":"\u5728\u7f16\u7a0b\u8bed\u8a00\u7684\u4e2d\uff0c\u9012\u5f52\uff08Recursion\uff09\u662f\u6307\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u7684\u8bed\u6cd5\u73b0\u8c61\u3002\u9012\u5f52\u65b9\u6cd5\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4e5f\u662f\u521d\u5b66\u7f16\u7a0b\u8bed\u8a00\u7684\u96be\u70b9\u3002\u6df1\u523b\u7406\u89e3\u9012\u5f52\u662f\u5b66\u597d\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u57fa\u7840\u3002 \u672c\u6559\u7a0b\u9700\u8981\u5927\u5bb6\u6709\u4e00\u4e9b\u7f16\u5199\u9012\u5f52\u51fd\u6570\u7ecf\u9a8c\uff0c\u5e76\u4e14\u5bf9\u300c\u5206\u6cbb\u7b97\u6cd5\u300d\u300c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u300d\u300c\u6808\u300d\u6709\u4e00\u5b9a\u7684\u6982\u5ff5\u548c\u7406\u89e3\u3002\u4e8b\u5b9e\u4e0a\u300c\u9012\u5f52\u300d\u548c\u5b83\u4eec\u7684\u5173\u7cfb\u5bc6\u4e0d\u53ef\u5206\u3002","title":"\u9012\u5f52\u548c\u5206\u6cbb"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_80","text":"\u9012\u5f52\u662f\u7f16\u7a0b\u6280\u5de7\uff0c\u76f4\u63a5\u4f53\u73b0\u5728\u4ee3\u7801\u4e0a \uff0c\u5373\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\uff1b\u5728\u8c03\u7528\u7684\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u7a0b\u5e8f\u4f1a\u56de\u5230\u4ea7\u751f\u8c03\u7528\u7684\u5730\u65b9\uff0c\u7ee7\u7eed\u505a\u4e00\u4e9b\u5176\u4ed6\u4e8b\u60c5\u3002\u8c03\u7528\u7684\u8fc7\u7a0b\u88ab\u79f0\u4f5c\u4e3a\u9012\u5f52\uff0c\u8fd4\u56de\u7684\u8fc7\u7a0b\u88ab\u79f0\u4f5c\u4e3a\u56de\u6eaf\u3002 \u5206\u6cbb\u662f\u4e00\u79cd\u7b97\u6cd5\u8bbe\u8ba1\u7684\u601d\u60f3\uff0c\u5c06\u5927\u95ee\u9898\u5206\u89e3\u6210\u591a\u4e2a\u5c0f\u95ee\u9898\uff0c\u4f8b\u5982\u5f52\u5e76\u6392\u5e8f\u5c06\u5927\u95ee\u9898\uff1a\u300c\u6392\u5e8f\u6574\u4e2a\u6570\u7ec4\u300d\uff0c\u5206\u89e3\u4e3a\u5c0f\u95ee\u9898\uff1a\u300c\u6392\u5e8f\u5de6\u534a\u548c\u53f3\u534a\u300d\uff1b\u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u300c\u5206\u6cbb\u7b97\u6cd5\u300d\u901a\u8fc7\u300c\u9012\u5f52\u300d\u5b9e\u73b0\u3002\u5373\uff1a\u5b50\u95ee\u9898\u7684\u6c42\u89e3\u901a\u8fc7\u9012\u5f52\u65b9\u6cd5\u5b9e\u73b0\u3002 \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5e76\u4e0d\u662f\u51ed\u7a7a\u60f3\u8c61\u51fa\u6765\u7684\uff0c\u300c\u9012\u5f52\u300d\u51fd\u6570\u4e5f\u4e0d\u4f8b\u5916\u3002\u300c\u9012\u5f52\u300d\u51fd\u6570\u57fa\u4e8e \u300c\u81ea\u9876\u5411\u4e0b\u300d\u62c6\u5206\u95ee\u9898\uff0c\u518d\u300c\u81ea\u5e95\u5411\u4e0a\u300d\u9010\u5c42\u89e3\u51b3\u95ee\u9898\u7684\u601d\u60f3\u8bbe\u8ba1\u800c\u6210\uff0c\u8fd9\u662f\u6240\u719f\u77e5\u7684\u300c\u5206\u800c\u6cbb\u4e4b\u300d\u7684\u7b97\u6cd5\u601d\u60f3\u3002 \u5206\u800c\u6cbb\u4e4b\uff08Divide-and-Conquer\uff09\u7684\u601d\u60f3\u5206\u4e3a\u5982\u4e0b\u4e09\u6b65\uff1a \u62c6\u5206\uff1a\u5c06\u539f\u95ee\u9898\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898\uff1b \u89e3\u51b3\uff1a\u89e3\u51b3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff1b \u5408\u5e76\uff1a\u5408\u5e76\u5b50\u95ee\u9898\u7684\u89e3\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002 \u8fd9\u6837\u7684\u4e09\u6b65\u6070\u597d\u4e0e\u9012\u5f52\u7684\u7a0b\u5e8f\u5199\u6cd5\u76f8\u543b\u5408\uff1a \u62c6\u5206\uff1a\u5373\u5bf9\u5f53\u524d\u7684\u5927\u95ee\u9898\u8fdb\u884c\u5206\u6790\uff0c\u5199\u51fa\u76f8\u5e94\u4ee3\u7801\uff0c\u5206\u89e3\u4e3a\u5b50\u95ee\u9898\u3002 \u89e3\u51b3\uff1a\u5373\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u89e3\u51b3\u5b50\u95ee\u9898\uff1b \u5408\u5e76\uff1a\u5373\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u9012\u5f52\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u5bf9\u5b50\u95ee\u9898\u8fdb\u884c\u5408\u5e76\uff0c\u5f97\u5230\u5927\u95ee\u9898\u7684\u89e3\u3002 \u56e0\u6b64\uff0c\u5206\u6cbb\u7b97\u6cd5\u4e00\u822c\u901a\u8fc7\u9012\u5f52\u5b9e\u73b0\u3002 \u5178\u578b\u7684\u5206\u6cbb\u601d\u60f3\u7684\u5e94\u7528\u662f\uff1a \u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u7edd\u5927\u591a\u6570\u300c\u6811\u300d\u4e2d\u7684\u95ee\u9898 \uff08\u5148\u628a\u539f\u95ee\u9898\u62c6\u5206\u6210\u5b50\u6811\u7684\u95ee\u9898\uff0c\u5f53\u5b50\u6811\u4e2d\u7684\u95ee\u9898\u89e3\u51b3\u4ee5\u540e\uff0c\u7ed3\u5408\u5b50\u6811\u6c42\u89e3\u7684\u7ed3\u679c\u5904\u7406\u5f53\u524d\u7ed3\u70b9\uff09\u3001\u94fe\u8868\u4e2d\u7684\u95ee\u9898\u3002\u6211\u4eec\u5728\u672c\u6559\u7a0b\u91cc\u4e0d\u5bf9\u300c\u5206\u6cbb\u601d\u60f3\u300d\u5c55\u5f00\u53d9\u8ff0\u3002 \u300c\u5206\u6cbb\u601d\u60f3\u300d\u7684\u7279\u4f8b\u662f\u300c\u51cf\u6cbb\u601d\u60f3\uff08Decrease-and-Conquer\uff09\u300d\uff1a\u6bcf\u4e00\u6b65\u5c06\u95ee\u9898\u8f6c\u6362\u6210\u4e3a\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002\u300c\u51cf\u6cbb\u601d\u60f3\u300d\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\u662f\u300c\u4e8c\u5206\u67e5\u627e\u300d\u300c\u9009\u62e9\u6392\u5e8f\u300d\u300c\u63d2\u5165\u6392\u5e8f\u300d\u300c\u5feb\u901f\u6392\u5e8f\u300d\u7b97\u6cd5\u3002\u300c\u5206\u6cbb\u300d\u4e0e\u300c\u51cf\u6cbb\u601d\u60f3\u300d\u7684\u533a\u522b\u5982\u4e0b\uff1a \u5206\u6cbb\u601d\u60f3\uff1a\u5c06\u4e00\u4e2a\u95ee\u9898\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898\uff0c\u7136\u540e\u518d\u9010\u4e2a\u6c42\u89e3\uff0c\u6839\u636e\u5404\u4e2a\u5b50\u95ee\u9898\u5f97\u5230\u7684\u7ed3\u679c\u5f97\u5230\u539f\u95ee\u9898\u7684\u7ed3\u679c\uff1b \u51cf\u6cbb\u601d\u60f3\uff1a\u5728\u62c6\u5206\u5b50\u95ee\u9898\u7684\u65f6\u5019\uff0c\u53ea\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u6210 \u4e00\u4e2a \u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u56e0\u6b64\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u5c31\u662f\u4e0a\u4e00\u5c42\u539f\u95ee\u9898\u7684\u7ed3\u679c\uff0c\u6bcf\u4e00\u6b65\u53ea\u9700\u8981\u89e3\u51b3\u4e00\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f8\u6bd4\u8f83\u4e8e\u300c\u5206\u6cbb\u601d\u60f3\u300d\u800c\u8a00\uff0c\u5b83 \u6ca1\u6709\u300c\u5408\u5e76\u300d\u7684\u8fc7\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u4f7f\u7528\u6808\uff1f \u5728\u8ba1\u7b97 5 ! 5! \u7684\u8fc7\u7a0b\u5f53\u4e2d\uff0c\u9700\u8981\u8bb0\u5f55\u62c6\u5206\u7684\u8fc7\u7a0b\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u5728\u6c42\u89e3\u6bcf\u4e00\u4e2a\u5b50\u95ee\u9898\u4ee5\u540e\uff0c\u9010\u5c42\u5411\u4e0a\u6c47\u62a5\u7ed3\u679c\u3002\u540e\u62c6\u5206\u7684\u5b50\u95ee\u9898\u5148\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u6574\u4e2a\u8fc7\u7a0b\u6070\u597d\u7b26\u5408\u300c\u540e\u8fdb\u5148\u51fa\u300d\u7684\u89c4\u5f8b \uff0c\u56e0\u6b64\u9700\u8981\u501f\u52a9\u7684\u6570\u636e\u7ed3\u6784\u662f\u300c\u6808\u300d\u3002 \u4f7f\u7528\u300c\u9012\u5f52\u300d\u5b9e\u73b0\u7684\u7b97\u6cd5\u9700\u8981\u8d70\u5b8c\u4e0b\u9762\u4e24\u6761\u8def\u5f84\uff1a \u5148\u300c\u81ea\u9876\u5411\u4e0b\u300d\u62c6\u5206\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u62c6\u5206\u4e3a\u6b62\uff1b \u518d\u300c\u81ea\u5e95\u5411\u4e0a\u300d\u9010\u5c42\u628a\u5e95\u5c42\u7684\u7ed3\u679c\u5411\u4e0a\u6c47\u62a5\uff0c\u76f4\u81f3\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002 \u56e0\u6b64\u4f7f\u7528\u300c\u9012\u5f52\u300d\u51fd\u6570\u89e3\u51b3\u7684\u95ee\u9898\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6709\u300c\u5148\u8d70\u51fa\u53bb\uff0c\u518d\u8d70\u56de\u6765\u300d\u7684\u8fc7\u7a0b","title":"\u5206\u800c\u6cbb\u4e4b\u7684\u7b97\u6cd5\u8bbe\u8ba1\u601d\u60f3"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_81","text":"\u6211\u4eec\u901a\u8fc7\u300c\u9012\u5f52\u300d\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e86\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u4e24\u79cd\u601d\u8003\u7684\u8def\u5f84\uff1a\u300c\u81ea\u9876\u5411\u4e0b\u300d\u548c\u300c\u81ea\u5e95\u5411\u4e0a\u300d\u3002 \u300c\u81ea\u9876\u5411\u4e0b\u300d\u4e0e\u300c\u9012\u5f52\u300d \u300c\u81ea\u9876\u5411\u4e0b\u300d\u662f\u76f4\u63a5\u9762\u5bf9\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u9010\u5c42\u62c6\u5206\uff0c\u76f4\u5230\u4e0d\u80fd\u62c6\u5206\u4e3a\u6b62\uff0c\u518d\u6309\u7167\u62c6\u5206\u7684\u987a\u5e8f\u7684\u9006\u5e8f\u9010\u5c42\u89e3\u51b3\uff0c\u76f4\u81f3\u539f\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u8fd9\u662f\u300c\u9012\u5f52\u300d\u3002 \u300c\u81ea\u5e95\u5411\u4e0a\u300d\u4e0e\u300c\u9012\u63a8\u300d \u5982\u679c\u6211\u4eec\u975e\u5e38\u6e05\u695a\u4e00\u4e2a\u95ee\u9898\u6700\u5f00\u59cb\u7684\u6837\u5b50\uff0c\u5e76\u4e14\u4e5f\u6e05\u695a\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u4ece\u5b83\u6700\u5f00\u59cb\u7684\u6837\u5b50\u9010\u6b65\u6f14\u53d8\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u6c42\u89e3\u7684\u95ee\u9898\u7684\u6837\u5b50\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u300c\u9012\u63a8\u300d\u7684\u65b9\u5f0f\uff0c\u4ece\u5c0f\u89c4\u6a21\u7684\u95ee\u9898\u5f00\u59cb\u9010\u6b65\u300c\u9012\u63a8\u300d\u5f97\u5230\u6700\u7ec8\u8981\u89e3\u51b3\u7684\u5927\u95ee\u9898\u7684\u89e3\u3002","title":"\u81ea\u9876\u5411\u4e0b\u4e0e\u81ea\u5e95\u5411\u4e0a"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_82","text":"","title":"\u666e\u901a\u6811"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_83","text":"","title":"\u6811\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_84","text":"\u5927\u90e8\u5206\u7684\u6811\u7684\u95ee\u9898\uff0c\u90fd\u662f\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u89e3\u51b3\u7684\u3002\u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u904d\u5386\uff0c\u9700\u8981\u7ed3\u5408\u5177\u4f53\u7684\u95ee\u9898\u8fdb\u884c\u5206\u6790\u3002 \u6811\u7684\u904d\u5386\u662f\u6811\u4e0a\u6700\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u672c\u8eab\u975e\u5e38\u7b80\u5355\uff0c\u5355\u72ec\u89e3\u51b3\u6811\u7684\u904d\u5386\u95ee\u9898\uff0c\u5e76\u4e0d\u6d89\u53ca\u5230\u6280\u5de7\u3002\u4f46\u662f\u6811\u7684\u904d\u5386\u7684\u5e94\u7528\u573a\u666f\u592a\u591a\uff0c\u5f88\u591a\u7ecf\u5178\u95ee\u9898\u80cc\u540e\u5176\u5b9e\u5c31\u662f\u6811\u7684\u904d\u5386\u3002\u56e0\u6b64\u8fd9\u4e00\u7ae0\u6211\u4eec\u5c06\u300c\u529b\u6263\u300d\u4e0a\u7684\u6811\u7684\u904d\u5386\u95ee\u9898\u6839\u636e\u5e94\u7528\u573a\u666f\u8fdb\u884c\u68b3\u7406\uff0c\u4ece\u800c\u638c\u63e1\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\u7075\u6d3b\u5e94\u7528\u6811\u7684\u904d\u5386\u7684\u6280\u5de7\u3002 \u6d89\u53ca\u5230\u7684\u7ecf\u5178\u95ee\u9898\u6709\u5efa\u6811\u95ee\u9898\u3001\u7ed3\u6784\u5224\u65ad\u95ee\u9898\u3001\u6570\u636e\u538b\u7f29\u95ee\u9898\u3001\u7f16\u7801\u89e3\u7801\u95ee\u9898\u3001\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316\u95ee\u9898\u3001\u81ea\u5e95\u5411\u4e0a\u6574\u5408\u5b50\u6811\u7ed3\u679c\u3001\u5c42\u5e8f\u904d\u5386\u7684\u53d8\u79cd\u3002","title":"\u6811\u7684\u904d\u5386\u95ee\u9898"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_85","text":"","title":"\u6811\u7684\u641c\u7d22\u95ee\u9898"},{"location":"thu/d3/d3s/oi/oj/lc/lc/#_86","text":"\u5173\u4e8e\u6811\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u4e24\u7c7b\u95ee\u9898\u975e\u5e38\u80fd\u4f53\u73b0\u7b97\u6cd5\u6280\u5de7\uff0c\u5206\u522b\u662f\u6811\u5f62 DP \u548c\u6700\u8fd1\u516c\u5171\u7956\u5148","title":"\u6811\u7684\u7b97\u6cd5\u6280\u5de7"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/","text":"\u52a8\u6001\u89c4\u5212\uff1a\u7ebf\u6027 & \u533a\u95f4\u52a8\u6001 \u7406\u89e3\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3 \u4e86\u89e3\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u4f18\u7f3a\u70b9\u548c\u95ee\u9898\u5206\u7c7b \u638c\u63e1\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def \u80fd\u591f\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7ebf\u6027\u3001\u524d\u7f00\u548c\u3001\u533a\u95f4\u8fd9\u4e09\u7c7b\u95ee\u9898 \u7b80\u4ecb \u7ebf\u6027\u52a8\u6001\u89c4\u5212 \u5355\u4e32 \u5e26\u7ef4\u5ea6\u5355\u4e32 dp[i][k] \u53cc\u4e32 \u77e9\u9635 \u77e9\u9635\u76f8\u5173\u7ec3\u4e60\u9898 \u77e9\u9635 dp[i][j] \u77e9\u9635 dp[i][j][k] \u7ebf\u6027\u52a8\u6001\u89c4\u5212\u662f\u52a8\u6001\u89c4\u5212\u4e2d\u6700\u57fa\u7840\u7684\u4e00\u7c7b\uff0c\u5b83\u7684\u72b6\u6001\u4e00\u822c\u7269\u7406\u610f\u4e49\u5f88\u660e\u786e\uff0c\u6613\u4e8e\u5206\u6790\u3002\u5728\u521d\u5b66\u52a8\u6001\u89c4\u5212\u65f6\uff0c\u901a\u8fc7\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u5927\u91cf\u7ec3\u4e60\uff0c\u53ef\u4ee5\u4e0d\u65ad\u52a0\u6df1\u52a8\u6001\u89c4\u5212\u7684\u6982\u5ff5\u7406\u89e3\uff0c\u4f8b\u5982\u52a8\u6001\u89c4\u5212\u4e2d\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u6982\u5ff5\uff1a\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u91cd\u590d\u5b50\u95ee\u9898\uff0c\u65e0\u540e\u6548\u6027\u3002\u4e0b\u9762\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5\u505a\u4e2a\u7b80\u8981\u56de\u987e\uff0c\u5728\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u9898\u76ee\u7ec3\u4e60\u4e2d\u53ef\u4ee5\u4e0d\u65ad\u5730\u52a0\u6df1\u7406\u89e3\uff0c\u4e4b\u540e\u518d\u5b66\u4e60\u5176\u5b83\u7684\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u5c31\u4f1a\u5bb9\u6613\u5f88\u591a\u3002 \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5982\u679c\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6240\u5305\u542b\u7684\u5b50\u95ee\u9898\u7684\u89e3\u4e5f\u662f\u6700\u4f18\u7684\uff0c\u5c31\u79f0\u8be5\u95ee\u9898\u5177\u6709\u6700\u4f18\u5b50\u7ed3\u6784\u3002 \u65e0\u540e\u6548\u6027\uff1a\u5373\u67d0\u9636\u6bb5\u72b6\u6001\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u4e0d\u53d7\u8fd9\u4e2a\u72b6\u6001\u4ee5\u540e\u51b3\u7b56\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u67d0\u72b6\u6001\u4ee5\u540e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u5f71\u54cd\u4ee5\u524d\u7684\u72b6\u6001\uff0c\u53ea\u4e0e\u5f53\u524d\u72b6\u6001\u6709\u5173\u3002 \u91cd\u590d\u5b50\u95ee\u9898\uff1a\u5373\u5b50\u95ee\u9898\u4e4b\u95f4\u662f\u4e0d\u72ec\u7acb\u7684\uff0c\u4e00\u4e2a\u5b50\u95ee\u9898\u5728\u4e0b\u4e00\u9636\u6bb5\u51b3\u7b56\u4e2d\u53ef\u80fd\u88ab\u591a\u6b21\u4f7f\u7528\u5230\u3002\uff08\u8be5\u6027\u8d28\u5e76\u4e0d\u662f\u52a8\u6001\u89c4\u5212\u9002\u7528\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u8fd9\u6761\u6027\u8d28\uff0c\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u540c\u5176\u4ed6\u7b97\u6cd5\u76f8\u6bd4\u5c31\u4e0d\u5177\u5907\u4f18\u52bf\uff09 \u7ebf\u6027\u52a8\u6001\u89c4\u5212\u662f\u52a8\u6001\u89c4\u5212\u4e2d\u53d8\u5316\u6700\u591a\u7684\u4e00\u7c7b\u3002 \u9996\u5148\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u9488\u5bf9\u7684\u95ee\u9898\u662f\u6700\u5e38\u89c1\u7684\u6570\u7ec4\uff0c\u5b57\u7b26\u4e32\uff0c\u77e9\u9635\u7b49\uff0c\u8fd9\u4e09\u79cd\u6570\u636e\u7ed3\u6784\u672c\u8eab\u5c31\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u6b64\u51fa\u73b0\u8fd9\u4e9b\u7c7b\u578b\u7684\u8f93\u5165\u7684\u65f6\u5019\uff0c\u5982\u679c\u8981\u7528\u5230\u52a8\u6001\u89c4\u5212\uff0c\u9996\u5148\u8003\u8651\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u5c31\u5f88\u5408\u7406\u4e86\uff0c\u56e0\u6b64\u5f88\u591a\u95ee\u9898\u4e0d\u8bba\u6700\u540e\u6b63\u89e3\u662f\u4e0d\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\uff0c\u90fd\u4f1a\u9996\u5148\u60f3\u4e00\u4e0b\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u662f\u5426\u53ef\u884c\u3002 \u5176\u6b21\u7531\u4e8e\u5927\u90e8\u5206\u95ee\u9898\u7684\u6570\u636e\u90fd\u662f\u4ee5\u8fd9\u4e09\u79cd\u5f62\u5f0f\u7ed9\u51fa\u7684\uff0c\u56e0\u6b64\u9898\u76ee\u7684\u53d8\u5316\u4f1a\u975e\u5e38\u591a\uff0c\u5f88\u591a\u5e38\u89c1\u7684\u8f93\u5165\u5f62\u5f0f\u4ee5\u53ca\u95ee\u9898\u90fd\u975e\u5e38\u7ecf\u5178\uff0c\u90fd\u5b58\u5728\u7ecf\u5178\u7684\u72b6\u6001\u8bbe\u8ba1\u3002\u56e0\u6b64\u4e0d\u8003\u8651\u4e00\u4e9b\u6bd4\u8f83 Trick \u7684\u89e3\u6cd5\uff0c\u4ec5\u4ec5\u662f\u7ecf\u5178\u95ee\u9898\u7684\u7ecf\u5178\u72b6\u6001\u8bbe\u8ba1\uff0c\u5c31\u6bd4\u5176\u5b83\u79cd\u7c7b\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u591a\u5f88\u591a\u4e86\u3002 \u4f8b\u5982\u5355\u4e2a\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u4e0a\u8bbe\u8ba1\u4e00\u7ef4\u72b6\u6001\uff0c\u4e24\u4e2a\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u4e0a\u8bbe\u8ba1\u4e24\u7ef4\u72b6\u6001\uff0c\u4ee5\u53ca\u77e9\u9635\u4e0a\u8bbe\u8ba1\u4e24\u7ef4\u72b6\u6001\u7b49\u7b49\uff0c\u540c\u65f6\u4ee5\u4e0a\u4e09\u79cd\u60c5\u51b5\u7684\u72b6\u6001\u8bbe\u8ba1\u90fd\u6709\u53ef\u80fd\u518d\u52a0\u4e0a\u989d\u5916\u7684\u6307\u6807\u7684\u72b6\u6001\uff0c\u5c31\u662f\u524d\u9762\u4f8b\u9898\u4e2d\u7684 k\uff0c\u8fd9\u91cc\u9762\u53d8\u5316\u5c31\u5f88\u591a\u4e86\uff0c\u6bd4\u5982\u6709\u7684\u9898\u76ee\u5728 k \u8fd9\u4e00\u7ef4\u4e0a\u8981\u4f7f\u7528\u4e8c\u5206\uff0c\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u6709\u7684\u9898\u76ee\u9700\u8981 DP \u72b6\u6001\u4e0e\u6570\u636e\u7ed3\u6784\u914d\u5408\u6765\u89e3\u51b3\u95ee\u9898\u3002 \u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u7c7b\u95ee\u9898\u6ca1\u6709\u663e\u5f0f\u7684\u6570\u7ec4\uff0c\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5728\u6c42\u89e3\u7684\u65f6\u5019\u4f9d\u7136\u6ee1\u8db3\u524d\u9762\u63d0\u5230\u7684\u52a8\u6001\u89c4\u5212\u4e09\u6761\u57fa\u672c\u6982\u5ff5\uff0c\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\uff0c\u8fd9\u79cd\u95ee\u9898\u901a\u5e38\u4e5f\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u3002\u5982\u6b64\u591a\u7684\u53d8\u5316\u4ec5\u4ec5\u672c\u5c0f\u8282\u4f8b\u4e3e\u7684\u9898\u76ee\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\uff0c\u4e0b\u4e00\u5c0f\u8282\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u7ec3\u4e60\u9898\uff0c\u6d89\u53ca\u5230\u5bf9\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u66f4\u591a\u7684\u53d8\u5316\u3002 \u524d\u7f00\u548c \u524d\u7f00\u548c\u662f\u4e00\u79cd\u67e5\u8be2\u6570\u7ec4\u4e2d\u4efb\u610f\u533a\u95f4\u7684\u5143\u7d20\u7684\u548c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u6570\u7ec4\u7ed9\u5b9a\u4e4b\u540e\u5c31\u4e0d\u53d8\u4e86\u3002\u9488\u5bf9\u8fd9\u4e2a\u4e0d\u53d8\u7684\u6570\u7ec4\uff0c\u524d\u7f00\u548c\u7528\u4e8e\u591a\u6b21\u67e5\u8be2\u533a\u95f4 [i, j] \u4e0a\u5143\u7d20\u7684\u548c\u3002 \u5bf9\u4e8e\u52a8\u6001\u89c4\u5212\u800c\u8a00\uff0c\u524d\u7f00\u548c\u7684\u610f\u4e49\u4e3b\u8981\u6709\u4e24\u70b9\uff1a \u4e00\u7ef4\u548c\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u63a8\u5bfc\uff0c\u5206\u522b\u7528\u5230\u4e86\u5355\u4e32\u548c\u77e9\u9635\u4e2d\u6700\u7ecf\u5178\u7684\u72b6\u6001\u8bbe\u8ba1\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\uff1b \u5728\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u4e2d\uff0c\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u9700\u8981\u4f9d\u8d56\u533a\u95f4\u548c\uff0c\u56e0\u4e3a\u72b6\u6001\u8f6c\u79fb\u662f\u975e\u5e38\u9891\u7e41\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u5fc5\u987b\u9ad8\u6548\u5730\u6c42\u533a\u95f4\u548c\u624d\u80fd\u4f7f\u5f97\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u63a5\u53d7\uff0c\u6b64\u65f6\u5c31\u5fc5\u987b\u7528\u5230\u524d\u7f00\u548c\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u4e00\u4e9b\u95ee\u9898\u9700\u8981\u524d\u7f00\u548c\u4e0e\u5176\u5b83\u6570\u636e\u7ed3\u6784\u914d\u5408\u6765\u89e3\u51b3\uff0c\u4e5f\u6709\u4e24\u7c7b\uff1a \u5148\u9884\u5904\u7406\u51fa\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u8fd9\u4e00\u6b65\u662f\u52a8\u6001\u89c4\u5212\uff0c\u7136\u540e\u5728\u524d\u7f00\u548c\u6570\u7ec4\u4e0a\u7528\u5176\u5b83\u6570\u636e\u7ed3\u6784\u89e3\u51b3\uff1b \u8fd8\u662f\u6309\u7167\u52a8\u6001\u89c4\u5212\u7684\u65b9\u5f0f\u6c42\u524d\u7f00\u548c\uff0c\u4e5f\u9700\u8981\u989d\u5916\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u4f46\u4e0d\u662f\u9884\u5904\u7406\u597d\u524d\u7f00\u548c\u6570\u7ec4\u4e4b\u540e\u518d\u7528\u6570\u636e\u7ed3\u6784\u8ba1\u7b97\uff0c\u800c\u662f\u6bcf\u6c42\u51fa\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u5c31\u66f4\u65b0\u4e00\u6b21\u6570\u636e\u7ed3\u6784\u5e76\u7ef4\u62a4\u7b54\u6848\u3002 \u524d\u7f00\u548c\u7684\u63a8\u5bfc\u548c\u8ba1\u7b97\u9690\u542b\u7740\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\uff0c\u540c\u65f6\u5b83\u7684\u72b6\u6001\u8bbe\u8ba1\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u4e2d\u6bd4\u8f83\u7b80\u5355\u7684\u90a3\u4e00\u7c7b\u3002\u4e0e\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u4e00\u6837\uff0c\u524d\u7f00\u548c\u4e5f\u6709\u4e00\u7ef4\u548c\u4e8c\u7ef4\u4e24\u79cd\u573a\u666f\u3002 \u867d\u7136\u524d\u7f00\u548c\u672c\u8eab\u5f88\u7b80\u5355\uff0c\u4f46\u9700\u8981\u7528\u5230\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u975e\u5e38\u591a\uff0c\u4e0e\u5176\u5b83\u6570\u636e\u7ed3\u6784\u914d\u5408\u7684\u53d8\u5316\u4e5f\u5f88\u591a\uff0c\u56e0\u6b64\u9700\u8981\u4ece\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u4e2d\u5265\u79bb\u51fa\u6765\u5355\u72ec\u5b66\u4e60\u3002 \u6c42\u533a\u95f4\u548c \u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u524d\u7f00\u548c \u8fd0\u7b97\u63a8\u5e7f \u5dee\u5206 \u533a\u95f4\u52a8\u6001\u89c4\u5212 \u5728\u8f93\u5165\u4e3a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\u65f6\uff0c\u5b50\u95ee\u9898\u7528\u533a\u95f4 [i..j] \u8868\u793a\u3002 \u72b6\u6001\u7684\u5b9a\u4e49\u548c\u8f6c\u79fb\u90fd\u4e0e\u533a\u95f4\u6709\u5173\uff0c\u79f0\u4e3a\u533a\u95f4\u52a8\u6001\u89c4\u5212 \u52a8\u6001\u89c4\u5212\uff1a\u72b6\u538b\u3001\u8ba1\u6570 & \u6570\u4f4d\u52a8\u6001 \u80cc\u5305\u52a8\u6001\u89c4\u5212 \u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212 \u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212\u662f\u4e00\u7c7b\u975e\u5e38\u5178\u578b\u7684\u52a8\u6001\u89c4\u5212\uff0c\u901a\u5e38\u4f7f\u7528\u5728 NP \u95ee\u9898\u7684\u5c0f\u89c4\u6a21\u6c42\u89e3\u4e2d\uff0c\u867d\u7136\u662f\u6307\u6570\u7ea7\u522b\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u901f\u5ea6\u6bd4\u641c\u7d22\u5feb\u3002 \u8ba1\u6570\u95ee\u9898 \u52a8\u6001\u89c4\u5212\u4e2d\u7684\u8ba1\u6570\u578b\u95ee\u9898\u5c31\u662f\u5229\u7528\u52a8\u6001\u89c4\u5212\u7684\u7b97\u6cd5\u601d\u60f3\u53bb\u8ba1\u7b97\u51fa\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u3002 \u6bd4\u5982\uff0c\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u53ef\u4ee5\u6709\u591a\u5c11\u6761\u8def\u5f84\uff0c\u6ce8\u610f\uff0c\u662f\u591a\u5c11\u6761\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u8def\u7ebf\u7684\u63cf\u8ff0\u3002 \u5f53\u7136\u4e5f\u6709\u5177\u4f53\u6bcf\u4e00\u6761\u8def\u7ebf\u7684\u95ee\u6cd5\uff0c\u8fd9\u662f dfs \u7684\u95ee\u9898\u4e86\u3002 \u8ba1\u6570\u95ee\u9898\u76f8\u5173\u7ec3\u4e60\u9898 \u8def\u5f84\u95ee\u9898 \u5361\u7279\u5170\u6570 \u94fa\u7816\u95ee\u9898 \u6590\u6ce2\u90a3\u5951 \u9690\u6666\u7684\u9012\u63a8\u5173\u7cfb \u77e9\u9635\u5feb\u901f\u5e42 \u662f\u4e00\u79cd\u57fa\u7840\u7b97\u6cd5\uff0c\u672c\u8eab\u4e0e\u52a8\u6001\u89c4\u5212\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u5b83\u53ef\u4ee5\u7528\u4e8e\u4f18\u5316\u7ebf\u6027\u9012\u63a8\u5173\u7cfb\u7684\u8ba1\u7b97\uff0c\u5e76\u4e14\u5176\u601d\u8def\u6bd4\u8f83\u56fa\u5b9a\uff0c\u56e0\u6b64\u5728\u8ba1\u6570\u95ee\u9898\u7ae0\u8282\u4e4b\u540e\uff0c\u5728\u672c\u7ae0\u5c06\u77e9\u9635\u5feb\u901f\u5e42\u505a\u57fa\u7840\u4ecb\u7ecd\u3002 using ll = long long; const int M = 2; struct Ma { int a[M][M]; Ma() { memset(a, 0, sizeof(a)); } void init() // \u590d\u4f4d\u4e3a\u5355\u4f4d\u9635 { a[0][0] = a[1][1] = 1; a[0][1] = a[1][1] = 0; } Ma operator*(const Ma& B) const { Ma ans; for(int i = 0; i < M; ++i) for(int j = 0; j < M; ++j) for(int k = 0; k < M; ++k) ans.a[i][j] += a[i][k] * B.a[k][j]; return ans; } Ma operator^(int n) const { Ma ans; ans.init(); Ma A = *this; // \u62f7\u8d1d\u4e00\u4e2a\u51fa\u6765\u7528\u4e8e\u81ea\u4e58 while(n) { if(n & 1) ans = ans * A; A = A * A; n >>= 1; } return ans; } }; \u5728\u4e0a\u4e00\u7ae0\u4e2d\u7684 16 \u9053\u7ec3\u4e60\u9898\u4e2d\uff0c\u90e8\u5206\u9898\u76ee\u7684\u9012\u63a8\u5173\u7cfb\u662f\u7ebf\u6027\u7684\uff0c\u8fdb\u800c\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u505a\uff0c\u5c1d\u8bd5\u5224\u65ad\u54ea\u4e9b\u9898\u76ee\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42\u505a\uff0c\u5e76\u7528\u77e9\u9635\u5feb\u901f\u5e42\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u52a0\u6df1\u5bf9\u672c\u8282\u7684\u7406\u89e3\u3002 \u6570\u4f4d DP \u5728\u57fa\u7840\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u5f53\u4e2d\u7b97\u662f\u6bd4\u8f83\u96be\u7684\u4e00\u7c7b\uff0c\u56e0\u4e3a\u6570\u4f4d DP \u7684\u72b6\u6001\u7684\u7269\u7406\u610f\u4e49\u4e0d\u592a\u597d\u7406\u89e3\u3002\u5176\u5b83\u7684\u52a8\u6001\u89c4\u5212\uff0c\u6bd4\u5982\u533a\u95f4 DP \u72b6\u6001\u7684\u7269\u7406\u610f\u4e49\u5c31\u662f\u533a\u95f4\uff0c\u72b6\u6001\u538b\u7f29 DP \u4e2d\u72b6\u6001\u7684\u7269\u7406\u610f\u4e49\u5c31\u662f\u96c6\u5408\uff0c\u8fd9\u90fd\u6bd4\u8f83\u597d\u7406\u89e3\u3002 \u4f46\u662f\u6570\u4f4d DP \u6bd4\u5176\u5b83 DP \u597d\u7684\u4e00\u9762\u662f\u6570\u4f4d DP \u7684\u601d\u7ef4\u76f8\u5bf9\u6bd4\u8f83\u56fa\u5b9a\u3002 \u4e00\u4e2a\u662f\u89e3\u51b3\u7684\u95ee\u9898\u6a21\u5f0f\u6bd4\u8f83\u56fa\u5b9a\uff0c\u4e00\u4e2a\u662f\u72b6\u6001\u8bbe\u8ba1\u4e5f\u6bd4\u8f83\u56fa\u5b9a\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\u628a\u6570\u4f4d DP \u7684\u5957\u8def\u4e86\u89e3\u4e2a\u5927\u6982\u3002 \u529b\u6263\u4e0a\u6709\u51e0\u9053\u6570\u4f4d DP \u7684\u9898\u76ee\uff0c\u901a\u8fc7\u8fd9\u4e9b\u9898\u76ee\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u4e86\u89e3\u6570\u4f4d DP \u7684\u601d\u8003\u8fc7\u7a0b\u548c\u505a\u6cd5\u3002 int getdp(int pos, int lim, const vector<int>& digits, const set<int>& num_set, vector<vector<int>>& dp) { if(pos == -1) return 1; if(dp[pos][lim] != -1) return dp[pos][lim]; dp[pos][lim] = 0; int up = lim ? digits[pos] : 9; // \u5f53\u524d\u8981\u679a\u4e3e\u5230\u7684\u4e0a\u754c for(int i: num_set) // \u679a\u4e3e\u5f53\u524d\u4f4d\u6240\u6709\u53ef\u80fd\u6570\u5b57 { if(i > up) break; dp[pos][lim] += getdp(pos - 1, lim && i == up, digits, num_set, dp); // \u672c\u4f4d\u88ab\u9650\u5236\u4e14\u9009\u9876\u5230\u4e0a\u754c\u7684\u6570\u5b57,\u4e0b\u4e00\u4f4d\u624d\u88ab\u9650\u5236 } return dp[pos][lim]; } \u524d\u5bfc\u96f6\u7684\u5206\u6790 \u589e\u52a0 zero \u72b6\u6001, \u8868\u793a\u9ad8\u4f4d\u662f\u5426\u662f\u524d\u5bfc\u96f6\u3002 \u5982\u679c\u9ad8\u4f4d\u9009\u4e86\u524d\u5bfc\u96f6\uff0c\u5219\u5f53\u524d\u4f4d\u65e0\u9650\u5236\uff0c\u4e14\u8fd8\u53ef\u4ee5\u9009\u524d\u5bfc\u96f6\u3002 \u5982\u679c\u9ad8\u4f4d\u6ca1\u6709\u9009\u524d\u5bfc\u96f6\u4e14\u672a\u9876\u5230\u4e0a\u754c\uff0c\u5219\u5f53\u524d\u4f4d\u5728\u53ef\u9009\u6570\u5b57\u96c6\u5408\u7684\u8303\u56f4\u5185\u65e0\u9650\u5236\u3002 \u5982\u679c\u9ad8\u4f4d\u9876\u5230\u4e86\u4e0a\u754c\uff0c\u5219\u5f53\u524d\u4f4d\u7684\u9009\u62e9\u88ab\u9650\u5236\u3002 \u529b\u6263\u4e0a\u6570\u4f4d DP \u7684\u9898\u76ee\u4e0d\u591a\uff0c\u4e0b\u4e00\u8282\u63d0\u4f9b\u4e86 9 \u9053\u7ec3\u4e60\u9898\uff0c\u53ef\u4ee5\u5de9\u56fa\u6570\u4f4d DP \u7684\u601d\u7ef4\u65b9\u5f0f\u3002 \u52a8\u6001\u89c4\u5212\uff1a\u6811\u5f62\u3001\u56fe\u4e0a\u3001\u6982\u7387 & \u535a\u5f08\u52a8\u6001 1 2\u671f\u56de\u987e \u300c\u5355\u4e32 DP\u300d \u5bf9\u4e8e\u300c\u5355\u4e32\u7ebf\u6027 DP\u300d\u95ee\u9898\uff0ci \u662f\u5355\u4e32 s \u4e0a\u7684\u4f4d\u7f6e\u3002\u4f5c\u4e3a\u9636\u6bb5\u5177\u6709\u65f6\u95f4\u6216\u8005\u4f4d\u7f6e\u7b49\u542b\u4e49\u3002\u6709\u65f6\u53ea\u6709\u5355\u4e32\u4e0a\u7684\u4f4d\u7f6e\u4e0d\u8db3\u4ee5\u8868\u793a\u72b6\u6001\uff0c\u9700\u8981\u540c\u65f6\u9644\u52a0\u4e00\u4e2a\u7ef4\u5ea6 k\uff0c\u4e00\u822c k \u6709\u957f\u5ea6\u3001\u4e2a\u6570\u3001\u6b21\u6570\u3001\u989c\u8272\u7b49\u542b\u4e49\u3002\u53e6\uff0c\u6240\u9644\u52a0\u7684\u7ef4\u5ea6\u6709\u65f6\u5019\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u5982 k1, k2, ... \u672c\u7ae0\u6211\u4eec\u4ecb\u7ecd\u300c\u7ebf\u6027 DP\u300d\u4e2d\u6bd4\u8f83\u91cd\u8981\uff0c\u540c\u65f6\u5728\u524d\u4e24\u671f\u6ca1\u6709\u8be6\u7ec6\u4ecb\u7ecd\u7684\u4e24\u5757\u5185\u5bb9\uff0c\u4e00\u4e2a\u662f\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u4e00\u4e2a\u662f\u300c\u68cb\u76d8 DP\u300d\u3002 \u5728\u52a8\u6001\u89c4\u5212\u7cbe\u8bb2\u7b2c\u4e00\u671f\u4e2d\uff0c\u6211\u4eec\u6709\u4ecb\u7ecd\u8fc7\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u5e76\u7528\u52a8\u6001\u89c4\u5212\u7684\u65b9\u6cd5\u8fdb\u884c\u89e3\u51b3\u3002\u5b9e\u9645\u4e0a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u8fd8\u6709\u5176\u5b83\u89e3\u6cd5\uff0c\u4ee5\u53ca\u529b\u6263\u4e0a\u6709\u5f88\u591a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u53d8\u79cd\u95ee\u9898\u4ee5\u53ca\u5305\u88c5\u4e4b\u540e\u7684\u95ee\u9898\u3002\u6211\u4eec\u5728\u8fd9\u4e00\u5c0f\u8282\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u57fa\u4e8e\u4e8c\u5206\u7684\u89e3\u6cd5\uff0c\u8fd9\u662f LIS \u95ee\u9898\u7684\u6700\u597d\u7684\u89e3\u6cd5\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u7528\u7ebf\u6bb5\u6811\u4f18\u5316DP\u7684\u65b9\u5f0f\u7684\u89e3\u6cd5\uff0c\u8fd9\u90e8\u5206\u5728\u52a8\u6001\u89c4\u5212\u7cbe\u8bb2\u7b2c\u56db\u671f\u5173\u4e8eDP\u7684\u4f18\u5316\u65b9\u6cd5\u4e2d\u4ecb\u7ecd\u3002 \u7136\u540e\u6211\u4eec\u4ecb\u7ecd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u53d8\u5f62\u95ee\u9898\uff0c\u4e00\u4e2a\u662f\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u4e00\u4e2a\u662f\u6700\u957f\u4e0a\u5347\u5b50\u4e32\u3002 \u7136\u540e\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u529b\u6263\u4e0a\u7684\u4e00\u4e9b\u591a\u7ef4\u5c5e\u6027\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u3002 \u6700\u540e\u6211\u95e8\u4ecb\u7ecd\u9700\u8981\u81ea\u5b9a\u4e49 LIS \u4e2d\u7684\u5c0f\u4e8e\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ea\u8981\u80fd\u6b63\u786e\u5b9a\u4e49\u5c0f\u4e8e\uff0c\u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u3002 \u5728\u52a8\u6001\u89c4\u5212\u7cbe\u8bb2\u7b2c\u4e00\u671f\u4e2d\uff0c\u6211\u4eec\u6709\u4ecb\u7ecd\u8fc7\u5728\u77e9\u9635\u4e0a\u8fdb\u884c\u7ebf\u6027\u63a8\u5bfc\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u4f46\u662f\u6ca1\u6709\u7cfb\u7edf\u5730\u4ecb\u7ecd\uff0c\u672c\u5c0f\u8282\u5c06\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u8865\u5145\u4e00\u4e0b\u3002 \u300c\u68cb\u76d8 DP\u300d\u662f\u4e00\u79cd\u5728\u77e9\u9635\u4e0a\u8fdb\u884c\u72b6\u6001\u63a8\u5bfc\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002i, j \u5206\u522b\u662f\u68cb\u76d8(\u77e9\u9635)\u7684\u6a2a\u7eb5\u5750\u6807\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u8981\u5171\u540c\u4f5c\u4e3a\u9636\u6bb5\u3002\u9636\u6bb5\u5212\u5206\u6709\u4e24\u79cd\u60c5\u51b5\u90fd\u6bd4\u8f83\u5e38\u89c1\uff1a \u4ec5 i \u4f5c\u4e3a\u9636\u6bb5\uff0c\u5177\u6709\u4f4d\u7f6e\u7b49\u542b\u4e49\u3002\u540c\u65f6 j \u662f\u9644\u52a0\u72b6\u6001\u3002 i, j \u5171\u540c\u4f5c\u4e3a\u9636\u6bb5\uff0c\u5177\u6709\u4f4d\u7f6e\u7b49\u542b\u4e49\u3002\u6ca1\u6709\u9644\u52a0\u7ef4\u5ea6\u3002 \u8fd9\u4e24\u79cd\u9636\u6bb5\u5212\u5206\u65b9\u5f0f\u7684\u601d\u8def\u6709\u533a\u522b\uff0c\u7b2c\u4e00\u79cd\u662f\u4e00\u884c\u4e00\u884c\u5730\u8003\u8651\uff0c\u7b2c\u4e8c\u79cd\u662f\u4e00\u4e2a\u4f4d\u7f6e\u4e00\u4e2a\u4f4d\u7f6e\u5730\u8003\u8651\u3002 \u6811\u5f62\u52a8\u6001\u89c4\u5212 \u6ce8\u610f\u5230\u5728\u8282\u70b9 u \u65f6\uff0c\u72b6\u6001\u8f6c\u79fb\u8fc7\u7a0b\u53ea\u9700\u8981 dp[v][0]\uff0c\u800c\u4e0d\u9700\u8981 dp[v][1]\uff0c\u56e0\u6b64 dfs \u4ec5\u8fd4\u56de dp[v][0] \u5373\u53ef\u3002 \u4ee3\u7801\u4e2d max1 \u8868\u793a dp[u][0], max2 \u8868\u793a dp[u][1]\u3002 class Solution { public: int treeDiameter(vector<vector<int>>& edges) { int n = edges.size(); vector<vector<int> > g(n + 1); for(const auto &e: edges) { g[e[0]].push_back(e[1]); g[e[1]].push_back(e[0]); } int ans = 0; dfs(0, -1, g, ans); return ans; } private: int dfs(int u, int fa, const vector<vector<int> >& g, int& ans) { int max1 = 0, max2 = 0; for(int v: g[u]) { if(v != fa) { int t = dfs(v, u, g, ans) + 1; if(max1 < t) { max2 = max1; max1 = t; } else if(max2 < t) max2 = t; } } ans = max(ans, (max1 + max2)); return max1; } }; class Solution { public: vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) { vector<vector<int> > g(n); // \u90bb\u63a5\u8868 for(vector<int> &edge: edges) { g[edge[0]].push_back(edge[1]); g[edge[1]].push_back(edge[0]); } vector<int> dpdown(n, 0), dpup(n, 0); // \u7b2c\u4e00\u6b21DFS\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u5728\u4f5c\u4e3a\u5b50\u6811\u6839\u7ed3\u70b9\u7684\u6700\u5927\u9ad8\u5ea6\u3002 dfs_1(0, -1, dpdown, g); // \u7b2c\u4e8c\u6b21DFS\u8865\u5168\u6bcf\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u603b\u6839\u7ed3\u70b9\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u5dee\u8ddd\u5c31\u5728\u4e8e\u9700\u8981\u7edf\u8ba1\u4e0a\u4ece\u7236\u7ed3\u70b9\u4f20\u9012\u8fc7\u6765\u7684\u5b50\u6811\u5206\u652f\u3002 dfs_2(0, -1, dpdown, dpup, g); int min_ans = n; vector<int> ans; for(int i = 0; i < n; ++i) { if(min_ans > dpdown[i]) { min_ans = dpdown[i]; ans.clear(); ans.push_back(i); } else if(min_ans == dpdown[i]) ans.push_back(i); } return ans; } private: void dfs_1(int u, int fa, vector<int>& dpdown, vector<vector<int> >& g) { dpdown[u] = 0; for(auto &v: g[u]) { if(v == fa) continue; dfs_1(v, u, dpdown, g); dpdown[u] = max(dpdown[u], dpdown[v] + 1); } } void dfs_2(int u, int fa, vector<int>& dpdown, vector<int>& dpup, vector<vector<int> >& g) { dpdown[u] = max(dpdown[u], dpup[u]); int max_1 = 0, max_2 = 0; // \u8fd9\u91cc\u9700\u8981\u6700\u5927\u9ad8\u5ea6\u548c\u6b21\u5927\u9ad8\u5ea6 for(auto &v: g[u]) { if(v == fa) continue; if(max_1 < dpdown[v] + 1) { max_2 = max_1; max_1 = dpdown[v] + 1; } else if(max_2 < dpdown[v] + 1) max_2 = dpdown[v] + 1; } for(auto &v: g[u]) { if(v == fa) continue; if (max_1 == dpdown[v] + 1) { // u \u5728 fa \u7684\u6700\u957f\u94fe\u4e0a dpup[v] = max(dpup[u], max_2) + 1; dfs_2(v, u, dpdown, dpup, g); } else { dpup[v] = max(dpup[u], max_1) + 1; dfs_2(v, u, dpdown, dpup, g); } } } }; 834. \u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c 1569. \u5c06\u5b50\u6570\u7ec4\u91cd\u65b0\u6392\u5e8f\u5f97\u5230\u540c\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u65b9\u6848\u6570 124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c 543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84 333. \u6700\u5927 BST \u5b50\u6811 337. \u6253\u5bb6\u52ab\u820d III 1373. \u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c 1372. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u957f\u4ea4\u9519\u8def\u5f84 968. \u76d1\u63a7\u4e8c\u53c9\u6811 1273. \u5220\u9664\u6811\u8282\u70b9 1519. \u5b50\u6811\u4e2d\u6807\u7b7e\u76f8\u540c\u7684\u8282\u70b9\u6570 1617. \u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb \u56fe\u4e0a\u52a8\u6001\u89c4\u5212 \u300c\u56fe\u4e0a DP\u300d\u5c31\u662f\u5728\u56fe\u7ed3\u6784\u4e0a\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002\u4e00\u822c\u56fe\u8282\u70b9\u672c\u8eab\u4e0d\u4f5c\u4e3a\u9636\u6bb5\uff0c\u800c\u662f\u4f5c\u4e3a\u9636\u6bb5\u6301\u6709\u7684\u72b6\u6001\u3002\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u5982\u679c\u662f\u65e0\u73af\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u8282\u70b9\u672c\u8eab\u4f5c\u4e3a\u9636\u6bb5\uff0c\u6b64\u65f6\u4e00\u822c\u7528\u62d3\u6251\u5e8f\u8fdb\u884c\u63a8\u5bfc\u3002 class Solution { public: vector<int> mostSimilar(int n, vector<vector<int>>& roads, vector<string>& names, vector<string>& targetPath) { vector<vector<int>> g(n); for(vector<int> &e: roads) { g[e[0]].push_back(e[1]); g[e[1]].push_back(e[0]); } int m = targetPath.size(); vector<vector<int>> ed(n, vector<int>(m, -1)); for(int v = 0; v < n; ++v) { for(int i = 0; i < m; ++i) ed[v][i] = names[v] != targetPath[i]; } vector<vector<int>> dp(n, vector<int>(m + 1, INT_MAX / 2)); for(int v = 0; v < n; ++v) dp[v][0] = ed[v][0]; for(int i = 1; i < m; ++i) for(int v = 0; v < n; ++v) { for(int u: g[v]) dp[v][i] = min(dp[v][i], ed[v][i] + dp[u][i - 1]); } int end = -1; int min_ed = INT_MAX / 2; for(int v = 0; v < n; ++v) { if(dp[v][m - 1] < min_ed) { end = v; min_ed = dp[v][m - 1]; } } vector<int> result(m); result[m - 1] = end; int next = end; for(int i = m - 2; i >= 0; --i) { int u = -1; for(int v: g[next]) if(dp[v][i] == dp[next][i + 1] - ed[next][i + 1]) { u = v; break; } result[i] = u; next = u; } return result; } }; class Solution { public: int maxVacationDays(vector<vector<int>>& flights, vector<vector<int>>& days) { int N = days.size(); int K = days[0].size(); // days : N * K vector<vector<int>> dp(N, vector<int>(K, 0)); vector<vector<int>> &adj = flights; for(int i = 0; i < N; ++i) dp[i][K - 1] = days[i][K - 1]; for(int k = K - 2; k >= 0; --k) for(int i = 0; i < N; ++i) { dp[i][k] = dp[i][k + 1]; // \u4e0d\u5750\u822a\u73ed for(int j = 0; j < N; ++j) { if(adj[i][j] == 1) dp[i][k] = max(dp[i][k], dp[j][k + 1]); } dp[i][k] += days[i][k]; } int ans = dp[0][0]; for(int start = 1; start < N; ++start) { if(adj[0][start] == 1) ans = max(ans, dp[start][0]); } return ans; } }; class Solution { public: int maxJumps(vector<int>& arr, int d) { if(arr.empty()) return 0; int n = arr.size(); dp = vector<int>(n, -1); int ans = 1; for(int i = 0; i < n; ++i) if(dp[i] == -1) ans = max(ans, solve(arr, d, i)); return ans; } private: // dp[i] := \u4ee5 i \u5f00\u5934\u7684\u6700\u957f\u8def\u5f84 vector<int> dp; int solve(const vector<int>& arr, const int d, int pos) { if(dp[pos] != -1) return dp[pos]; dp[pos] = 0; int n = arr.size(); for(int k = 1; k <= d; ++k) { int nxt = pos + k; if(nxt >= n || arr[pos] <= arr[nxt]) break; dp[pos] = max(dp[pos], 1 + solve(arr, d, nxt)); } for(int k = 1; k <= d; ++k) { int nxt = pos - k; if(nxt < 0 || arr[pos] <= arr[nxt]) break; dp[pos] = max(dp[pos], 1 + solve(arr, d, nxt)); } dp[pos] = max(1, dp[pos]); return dp[pos]; } }; \u6982\u7387\u52a8\u6001\u89c4\u5212 \u300c\u6982\u7387 DP\u300d\u3001\u300c\u671f\u671b DP\u300d \u662f\u4e00\u79cd\u5e94\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u6c42\u6982\u7387\u3001\u671f\u671b\u95ee\u9898\u7684\u4e00\u7c7b\u65b9\u6cd5\u3002 \u672c\u7ae0\u5206\u4e3a\u300c\u6982\u7387 DP\u300d \u548c \u300c\u671f\u671b DP\u300d \u4e24\u90e8\u5206\u3002\u9996\u5148\u7ed9\u51fa\u5176\u7406\u8bba\u57fa\u7840\u4ee5\u53ca\u5bf9\u5e94\u7684 DP \u8f6c\u79fb\u65b9\u7a0b\u7684\u5f62\u5f0f\uff1b\u7136\u540e\u901a\u8fc7\u62c6\u89e3\u4e24\u9053\u4f8b\u9898\u5e2e\u52a9\u5404\u4f4d\u52a0\u6df1\u7406\u89e3\uff1b\u6700\u540e\u5217\u51fa\u540c\u7c7b\u578b\u9898\u76ee\u6e05\u5355\uff0c\u5e2e\u52a9\u5927\u5bb6\u5de9\u56fa\u5b66\u4e60\u3002 \u72b6\u6001\u5b9a\u4e49 dp[i][j] := \u7b2c j \u8f6e i \u83b7\u80dc \u7b54\u6848 max(dp[n - 1][i]) \u521d\u59cb\u5316 dp[i][0] = p[i][k], if check(i, 0, k) \u72b6\u6001\u8f6c\u79fb dp[i][j] = sum(dp[i][j - 1] * dp[k]dp[j - 1] * p[i][k]) #include <cmath> #include <iostream> #include <vector> using namespace std; bool check(int i, int j, int k) { // \u5224\u65ad i, k \u662f\u5426\u53ef\u80fd\u5728\u7b2c j \u8f6e\u6210\u4e3a\u5bf9\u624b i >>= j; k >>= j; return i ^ k == 1; } int main() { int n; cin >> n; int N = pow(2, n); vector<vector<double>> P(N, vector<double>(N, -1.0)); for(int i = 0; i < N; ++i) for(int j = 0; j < N; ++j) cin >> P[i][j]; vector<vector<double>> dp(N, vector<double>(n, -1.0)); for(int i = 0; i < N; ++i) { if(i & 1) dp[i][0] = P[i][i - 1]; else dp[i][0] = P[i][i + 1]; } for(int j = 1; j < n; ++j) { for(int i = 0; i < N; ++i) for(int k = 0; k < N; ++k) if(check(i, j, k)) dp[i][j] += dp[i][j - 1] * dp[k][j - 1] * P[i][k]; } double max_p = -1.0; int ans = -1; for(int i = 0; i < n; ++i) if(dp[i][n - 1] > max_p) { max_p = dp[i][n - 1]; ans = i; } cout << ans + 1 << endl; } #include <vector> #include <iostream> #include <iomanip> using namespace std; int main() { int M, T, N; cin >> M >> T >> N; vector<vector<double>> P(T, vector<double>(M, -1.0)); for(int i = 0; i < T; ++i) for(int j = 0; j < M; ++j) cin >> P[i][j]; vector<vector<double>> dp(M, vector<double>(M + 1, -1.0)); double pa = 1.0; double pb_a = 1.0; for(int t = 0; t < T; ++t) { dp.assign(N, vector<double>(M + 1, -1.0)); dp[0][0] = (1 - P[t][0]); dp[0][1] = P[t][0]; for(int i = 1; i < M; ++i) { dp[i][0] = (1 - P[t][0]) * dp[i - 1][0]; for(int j = 1; j <= i; ++j) dp[i][j] = P[t][i] * dp[i - 1][j - 1] + (1 - P[t][i]) * dp[i - 1][j]; } pa *= 1 - dp[M - 1][0]; double tmp = 0.0; for(int j = 1; j < N; ++j) tmp += dp[M - 1][j]; pb_a *= tmp / (1 - dp[M - 1][0]); } pb_a = 1 - pb_a; double ans = pa * pb_a; cout << std::fixed << std::setprecision(4); cout << ans << endl; } \u672c\u8282\u4e3a\u5927\u5bb6\u6c47\u603b\u4e86\u529b\u6263\u4e0a 8 \u9053\u300c\u6982\u7387 DP\u300d\u7684\u9898\u76ee\uff0c\u5927\u5bb6\u53ef\u4ee5\u96c6\u4e2d\u7ec3\u4e60\u3002 \u5206\u6c64 \u65b021\u70b9 \u629b\u63b7\u786c\u5e01 \u201c\u9a6c\u201d\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387 \u4e24\u4e2a\u76d2\u5b50\u4e2d\u7403\u7684\u989c\u8272\u6570\u76f8\u540c\u7684\u6982\u7387 \u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \u98de\u673a\u5ea7\u4f4d\u5206\u914d\u6982\u7387 T \u79d2\u540e\u9752\u86d9\u7684\u4f4d\u7f6e #include <vector> #include <fstream> #include <iostream> using namespace std; double solve(int i, const int n, const int m, vector<double>& dp) { if(dp[i] > -0.5) return dp[i]; if(i == m) return dp[i] = 0.0; return dp[i] = (n + (n - i) * solve(i + 1, n, m, dp)) / (n - i); } int main() { ifstream fin(\"data.txt\"); vector<double> dp; int n, m; while((fin >> n) && (fin >> m)) { cout << \"n: \" << n << \", m: \" << m << endl; dp.assign(m + 1, -1.0); double ans = solve(0, n, m, dp); cout << ans << endl; } } \u6a21\u62df\u4ee3\u7801 import numpy as np from multiprocessing import Pool class Simulater: def __init__(self, n, m): self.n = n self.m = m def test(self, T): np.random.seed() N = 0 for _ in range(T): i = 0 j = 0 visited = [False] * self.n while j < self.m: i += 1 x = np.random.randint(0, self.n) if not visited[x]: visited[x] = True j += 1 N += i return N / T with open(\"data.txt\") as f: for line in f.readlines(): line = line.strip().split(\" \") n = int(line[0]) m = int(line[1]) s = Simulater(n, m) T = int(5e5) pool = Pool(8) ts = pool.map(s.test, [T] * 8) print(sum(ts) / 8) #include <vector> #include <fstream> #include <iostream> using namespace std; double solve(int i, int j, const int n, const int m, vector<vector<double>>& dp) { if(dp[i][j] > -0.5) return dp[i][j]; if(i == m) return dp[i][j] = 0.0; double ans = 0.0; ans += j / (double)n * solve(i + 1, j, n, m, dp); ans += (n - j) / (double)n * (1 + solve(i + 1, j + 1, n, m, dp)); return dp[i][j] = ans; } int main() { ifstream fin(\"data.txt\"); vector<vector<double>> dp; int n, m; while((fin >> n) && (fin >> m)) { cout << \"n: \" << n << \", m: \" << m << endl; dp.assign(m + 1, vector<double>(m + 1, -1.0)); double ans = solve(0, 0, n, m, dp); cout << ans << endl; } } \u601d\u8def2 #include <vector> #include <fstream> #include <iostream> using namespace std; double solve(int i, const int n, const int m, vector<double>& dp) { if(dp[i] > -0.5) return dp[i]; if(i == 0) return dp[i] = 0.0; return dp[i] = 1 + (n - 1) / (double)n * solve(i - 1, n, m, dp); } int main() { ifstream fin(\"data.txt\"); vector<double> dp; int n, m; while((fin >> n) && (fin >> m)) { cout << \"n: \" << n << \", m: \" << m << endl; dp.assign(m + 1, -1.0); double ans = solve(m, n, m, dp); cout << ans << endl; } } \u535a\u5f08\u52a8\u6001\u89c4\u5212 \u535a\u5f08\u52a8\u6001\u89c4\u5212 \u300c\u535a\u5f08 DP\u300d\uff0c\u4e00\u79cd\u5e94\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u535a\u5f08\u95ee\u9898\u7684\u7b97\u6cd5\u3002\u672c\u7ae0\u9996\u5148\u7ed9\u51fa\u7406\u8bba\u57fa\u7840\uff08minimax\uff09\u4ee5\u53ca\u5bf9\u5e94\u7684 DP \u8f6c\u79fb\u65b9\u7a0b\u5f62\u5f0f\uff1b\u7136\u540e\u901a\u8fc7\u8be6\u7ec6\u62c6\u89e3 Leetcode \u4e0a 4 \u9053\u9898\u6765\u5b66\u4e60\u8fd9\u7c7b\u95ee\u9898\u7684\u89e3\u51b3\u601d\u8def\u3002\u300c\u535a\u5f08 DP\u300d\u5728 Leetocde \u4e0a\u6709\u4e0d\u5c11\u9898\u76ee\uff0c\u7ae0\u8282\u672b\u5c3e\u5c06\u96c6\u4e2d\u5217\u51fa\u6765\uff0c\u5927\u5bb6\u53ef\u4ee5\u8fdb\u884c\u9488\u5bf9\u6027\u7ec3\u4e60\u3002 class Solution { public: bool stoneGame(vector<int>& piles) { int n = piles.size(); vector<vector<int>> dp(n, vector<int>(n)); int all = 0; for(int i = 0; i < n; ++i) { all += piles[i]; dp[i][i] = piles[i]; } for(int i = 0; i < n - 1; ++i) dp[i][i + 1] = max(piles[i], piles[i + 1]); for(int l = 3; l <= n; ++l) { // l \u4e3a\u533a\u95f4\u957f\u5ea6 for(int i = 0; i + l <= n; ++i) { int j = i + l - 1; dp[i][j] = max(piles[i] + min(dp[i + 2][j], dp[i + 1][j - 1]) ,piles[j] + min(dp[i + 1][j - 1], dp[i][j - 2]) ); } } return dp[0][n - 1] * 2 > all; } }; class Solution { public: bool nimGame(vector<int>& piles) { int n = piles.size(); vector<int> dp(1 << (n * 3), -1); dp[0] = 0; int t = 0; for(int i = 0; i < n; ++i) t += (piles[i] << (3 * i)); return solve(t, n, dp) == 1; } private: int solve(int s, const int n, vector<int>& dp) { if(dp[s] != -1) return dp[s]; for(int i = 0; i < n; ++i) { int m = ((s >> (i * 3)) & 7); for(int j = 0; j < m; ++j) { int t = s & (~(7 << (i * 3))); t += j << (i * 3); if(solve(t, n, dp) == 0) return dp[s] = 1; } } return dp[s] = 0; } }; class Solution { public: int getMoneyAmount(int n) { vector<vector<int> > dp(n + 1, vector<int>(n + 1, INT_MAX)); for(int i = 1; i <= n; ++i) dp[i][i] = 0; for(int j = 2; j <= n; ++j) for(int i = j - 1; i >= 1; --i) { dp[i][j] = min(dp[i + 1][j] + i, dp[i][j - 1] + j); for(int k = i + 1; k <= j - 1; ++k) dp[i][j] = min(dp[i][j], max(dp[k + 1][j], dp[i][k - 1]) + k); } return dp[1][n]; } }; class Solution { public: bool canWin(string s) { int n = s.size(); if(n < 2) return false; unordered_map<string, bool> dp; return solve(s, dp); } private: bool solve(string& s, unordered_map<string, bool>& dp) { int n = s.size(); if(dp.find(s) != dp.end()) // \u8be5\u72b6\u6001\u5df2\u7ecf\u7b97\u8fc7 return dp[s]; for(int i = 0; i < n - 1; ++i) // \u679a\u4e3e\u6240\u6709\u6b21\u6001 { if(s[i] == '+' && s[i + 1] == '+') { s[i] = '-'; s[i + 1] = '-'; bool f = solve(s, dp); s[i] = '+'; s[i + 1] = '+'; if(!f) return dp[s] = true; } } return dp[s] = false; } }; \u672c\u5c0f\u8282\u4e3a\u5927\u5bb6\u6c47\u603b\u4e86\u529b\u6263\u4e0a 12 \u9053\u5173\u4e8e\u300c\u535a\u5f08 DP\u300d\u7684\u9898\u76ee\uff0c\u5927\u5bb6\u53ef\u4ee5\u96c6\u4e2d\u7ec3\u4e60\u3002 \u7ffb\u8f6c\u6e38\u620f 293. \u7ffb\u8f6c\u6e38\u620f Nim \u6e38\u620f 292. Nim \u6e38\u620f \u77f3\u5b50\u6e38\u620f 1140. \u77f3\u5b50\u6e38\u620f II 1406. \u77f3\u5b50\u6e38\u620f III 1510. \u77f3\u5b50\u6e38\u620f IV \u4e95\u5b57\u6e38\u620f 348. \u5224\u5b9a\u4e95\u5b57\u68cb\u80dc\u8d1f 794. \u6709\u6548\u7684\u4e95\u5b57\u6e38\u620f 1275. \u627e\u51fa\u4e95\u5b57\u68cb\u7684\u83b7\u80dc\u8005 \u5176\u5b83 486. \u9884\u6d4b\u8d62\u5bb6 464. \u6211\u80fd\u8d62\u5417 1025. \u9664\u6570\u535a\u5f08 913. \u732b\u548c\u8001\u9f20 \u6ed1\u52a8\u7a97\u53e3\u548c\u53cc\u6307\u9488 \u6ed1\u52a8\u7a97\u53e3\u548c\u53cc\u6307\u9488\u662f\u89e3\u51b3\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u7b49\u95ee\u9898\u7684\u5e38\u7528\u6280\u5de7\u3002\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u7a97\u53e3\u6216\u4e24\u4e2a\u6307\u9488\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u904d\u5386\u6570\u636e\u7ed3\u6784\uff0c\u8fbe\u5230\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u76ee\u7684\u3002 \u6ed1\u52a8\u7a97\u53e3\u901a\u5e38\u7528\u4e8e\u5904\u7406\u8fde\u7eed\u5b50\u6570\u7ec4\u6216\u5b50\u5b57\u7b26\u4e32\u7684\u95ee\u9898\u3002\u901a\u8fc7\u52a8\u6001\u8c03\u6574\u7a97\u53e3\u7684\u5de6\u53f3\u8fb9\u754c\uff0c\u53ef\u4ee5\u5728 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\u6216\u5b50\u5b57\u7b26\u4e32\u3002 \u53cc\u6307\u9488\u5219\u5e38\u7528\u4e8e\u6392\u5e8f\u6570\u7ec4\u6216\u94fe\u8868\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u904d\u5386\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u89e3\u51b3\u67e5\u627e\u3001\u5408\u5e76\u7b49\u95ee\u9898\u3002 \u5faa\u73af\u4e0d\u53d8\u91cf \u5faa\u73af\u524d\u3001\u4e2d\u3001\u540e\u4fdd\u6301\u4e0d\u53d8 \u300c\u5faa\u73af\u4e0d\u53d8\u91cf\u300d\u4e0d\u662f\u5f88\u9ad8\u6df1\u7684\u6982\u5ff5\uff0c\u5728\u300c\u7b97\u6cd5\u300d\u548c\u300c\u6570\u636e\u7ed3\u6784\u300d\u7684\u4e16\u754c\u91cc\uff0c\u5230\u5904\u90fd\u6709\u5b83\u7684\u8eab\u5f71\u3002 \u300c\u5faa\u73af\u4e0d\u53d8\u91cf\u300d\u662f\u6307\u6211\u4eec\u5728\u7f16\u5199\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u4e00\u76f4\u5faa\u5e8f\u4e0d\u53d8\u7684\u6027\u8d28\uff0c\u8fd9\u6837\u7684\u6027\u8d28\u662f\u6839\u636e\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u7531\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002\u300c\u5faa\u73af\u4e0d\u53d8\u91cf\u300d\u662f\u6211\u4eec\u5199\u5bf9\u4e00\u4e2a\u95ee\u9898\u7684\u57fa\u7840\uff0c\u4fdd\u8bc1\u4e86\u5728\u300c\u521d\u59cb\u5316\u300d\u300c\u5faa\u73af\u904d\u5386\u300d\u300c\u7ed3\u675f\u300d\u8fd9\u4e09\u4e2a\u9636\u6bb5\u76f8\u540c\u7684\u6027\u8d28\uff0c\u4f7f\u5f97\u4e00\u4e2a\u95ee\u9898\u80fd\u591f\u88ab\u6b63\u786e\u89e3\u51b3\u3002 \u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u91cf\u5199\u5bf9\u4ee3\u7801 \u8fd9\u4e00\u8282\u6211\u4eec\u8bb2\u89e3\u4e24\u4e2a\u975e\u5e38\u57fa\u7840\u4e14\u5e38\u8003\u7684\u95ee\u9898\uff0c\u5411\u5927\u5bb6\u5c55\u793a\uff1a\u6211\u4eec\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u660e\u786e\u81ea\u5df1\u5bf9\u53d8\u91cf\u4ee5\u53ca\u533a\u95f4\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff0c\u5e76\u4e14\u5728\u7f16\u5199\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u5b9a\u4e49\u4e0d\u53d8\u3002 import java.util.Arrays; public class Solution { public void sortColors(int[] nums) { int len = nums.length; if (len < 2) { return; } int zero = 0; int two = len; int i = 0; while (i < two) { if (nums[i] == 0) { swap(nums, i, zero); zero++; i++; } else if (nums[i] == 1) { i++; } else { two--; swap(nums, i, two); } } } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } public class Solution { public void sortColors(int[] nums) { int len = nums.length; if (len < 2) { return; } int zero = -1; int two = len - 1; int i = 0; while (i <= two) { if (nums[i] == 0) { zero++; swap(nums, i, zero); i++; } else if (nums[i] == 1) { i++; } else { swap(nums, i, two); two--; } } } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } import java.util.Arrays; import java.util.Random; public class Solution { private static Random random = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; // \u7b2c k \u5927\u5143\u7d20\u7684\u4e0b\u6807\u662f len - k int target = len - k; int left = 0; int right = len - 1; while (true) { int pIndex = partition(nums, left, right); if (pIndex == target) { return nums[pIndex]; } else if (pIndex < target) { // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [pIndex + 1..right] left = pIndex + 1; } else { // pIndex > target // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [left..pIndex - 1] right = pIndex - 1; } } } private int partition(int[] nums, int left, int right) { // \u6ce8\u610f\uff1a\u5fc5\u987b\u968f\u673a\u5316 int randomIndex = left + random.nextInt(right - left + 1); swap(nums, left, randomIndex); int pivot = nums[left]; // [left + 1 .. le] <= pivot // (le..i] > pivot // \u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u8bbe\u7f6e\u6210 left \uff0c\u5426\u5219\u4ea4\u6362\u4f1a\u51fa\u9519 int le = left; for (int i = left + 1; i <= right; i++) { // \u8fd9\u91cc\u5199 < \u6216\u8005 <= \u90fd\u53ef\u4ee5 if (nums[i] <= pivot) { le++; swap(nums, le, i); } } swap(nums, left, le); return le; } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } import java.util.Random; public class Solution { private static Random random = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; int left = 0; int right = len - 1; // \u7b2c k \u5927\u5143\u7d20\u7684\u4e0b\u6807\u662f len - k int target = len - k; while (true) { int index = partition(nums, left, right); if (index == target) { return nums[index]; } else if (index < target) { left = index + 1; } else { right = index - 1; } } } public int partition(int[] nums, int left, int right) { // \u5728\u533a\u95f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u6807\u5b9a\u70b9 int randomIndex = left + random.nextInt(right - left + 1 ); swap(nums, left, randomIndex); int pivot = nums[left]; // \u5c06\u7b49\u4e8e pivot \u7684\u5143\u7d20\u5206\u6563\u5230\u4e24\u8fb9 // [left..le) <= pivot // (ge..right] >= pivot int le = left + 1; int ge = right; while (true) { // \u9047\u5230 nums[le] >= pivot \u7684\u65f6\u5019\u505c\u4e0b\u6765 // \u9047\u5230\u4e0e pivot \u76f8\u7b49\u7684\u5143\u7d20\uff0c\u662f\u901a\u8fc7\u4ea4\u6362\u88ab\u7b49\u6982\u7387\u5206\u5230\u4e24\u8fb9\u7684 while (le <= ge && nums[le] < pivot) { le++; } while (le <= ge && nums[ge] > pivot) { ge--; } if (le > ge) { break; } swap(nums, le, ge); le++; ge--; } // \u8fd9\u91cc\u8fd8\u8981\u4ea4\u6362\uff0c\u6ce8\u610f\u662f ge swap(nums, left, ge); return ge; } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } import java.util.Random; public class Solution { private static Random RANDOM = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; int target = len - k; int left = 0; int right = len - 1; while (true) { int[] pIndex = partition(nums, left, right); int index1 = pIndex[0]; int index2 = pIndex[1]; if (target < index1) { // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [left..index1 - 1] right = index1 - 1; } else if (target == index1) { return nums[index1]; } else if (target < index2) { left = index1 + 1; right = index2 - 1; } else if (target == index2) { return nums[index2]; } else { // pIndex > target // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [index2 + 1..right] left = index2 + 1; } } } private int[] partition(int[] nums, int left, int right) { int randomIndex = left + RANDOM.nextInt(right - left + 1); swap(nums, randomIndex, left); // \u5faa\u73af\u4e0d\u53d8\u91cf\uff1a // all in [left + 1..lt] < pivot // all in [lt + 1..i) = pivot // all in [gt..right] > pivot int pivot = nums[left]; int lt = left; int gt = right + 1; int i = left + 1; while (i < gt) { if (nums[i] < pivot) { lt++; swap(nums, i, lt); i++; } else if (nums[i] == pivot) { i++; } else { gt--; swap(nums, i, gt); } } swap(nums, left, lt); // \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3 return new int[]{lt, gt - 1}; } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } \u6ed1\u52a8\u7a97\u53e3 1\uff1a\u540c\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf \u540c\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf \u6709\u4e00\u7c7b\u6570\u7ec4\u4e0a\u7684\u95ee\u9898\uff0c\u95ee\u6211\u4eec\u56fa\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u6027\u8d28\uff0c\u8fd9\u4e00\u7c7b\u95ee\u9898\u5728\u601d\u7ef4\u5c42\u9762\u4e0a\u76f8\u5bf9\u7b80\u5355\u3002\u6211\u4eec\u901a\u8fc7\u4e24\u9053\u7b80\u5355\u7684\u4f8b\u9898\u5411\u5927\u5bb6\u5c55\u793a\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5199\u6cd5\u3002 public class Solution { public double findMaxAverage(int[] nums, int k) { int len = nums.length; // \u7531\u4e8e\u9898\u76ee\u9650\u5236\u4e86 k <= len\uff0c\u56e0\u6b64\u4e0d\u7528\u505a\u7279\u5224 int windowSum = 0; // \u7b2c 1 \u6b65\uff1a\u5148\u6c42\u51fa\u7b2c 1 \u4e2a\u7a97\u53e3\u7684\u548c for (int i = 0; i < k; i++) { windowSum += nums[i]; } // \u7b2c 2 \u6b65\uff1a\u901a\u8fc7\u904d\u5386\u6c42\u51fa\u9664\u4e86\u7b2c 1 \u4e2a\u7a97\u53e3\u7684\u548c int res = windowSum; // \u5faa\u73af\u4e0d\u53d8\u91cf\u5b9a\u4e49\uff1a[left..right) \u662f\u957f\u5ea6\u4e3a k \u7684\u7a97\u53e3 for (int right = k; right < len; right++) { // \u52a0\u4e0a\u4e00\u4e2a\u6570\u518d\u51cf\u53bb\u4e00\u4e2a\u6570 windowSum = windowSum + nums[right] - nums[right - k]; res = Math.max(res, windowSum); } return (double) res / k; } } public class Solution { public int maxSatisfied(int[] customers, int[] grumpy, int X) { int len = grumpy.length; // \u524d\u7f00\u548c preSum[i] \u8868\u793a [0..i) \u91cc\u56e0\u4e3a\u8001\u677f\u751f\u6c14\u800c\u611f\u5230\u4e0d\u5f00\u5fc3\u7684\u987e\u5ba2\u6570 int[] preSum = new int[len + 1]; // \u7edf\u8ba1 1. \u6240\u6709\u672c\u6765\u5c31\u4e0d\u751f\u6c14\u7684\u987e\u5ba2\u6570\u91cf\uff1b2. \u524d\u7f00\u548c\u6570\u7ec4 int originCount = 0; for (int i = 0; i < len; i++) { if (grumpy[i] == 0) { // \u4e0d\u751f\u6c14 originCount += customers[i]; preSum[i + 1] = preSum[i]; } else { // \u751f\u6c14\u65f6\u5019\u524d\u7f00\u548c preSum[i + 1] = preSum[i] + customers[i]; } } int maxAngryCount = 0; // \u56fa\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\uff1a[i..i + X) for (int left = 0; left < len - X + 1; left++) { maxAngryCount = Math.max(maxAngryCount, preSum[left + X] - preSum[left]); } // \u6240\u6709\u672c\u6765\u5c31\u4e0d\u751f\u6c14\u7684\u987e\u5ba2 return originCount + maxAngryCount; } } \u6ed1\u52a8\u7a97\u53e3 2\uff1a\u4e0d\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3 \u6709\u4e00\u7c7b\u6570\u7ec4\u4e0a\u7684\u95ee\u9898\uff0c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u53d8\u91cf\uff08\u6211\u4eec\u79f0\u4e3a\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\uff09\uff0c\u540c\u5411\u3001\u4ea4\u66ff\u5411\u53f3\u79fb\u52a8\u5b8c\u6210\u4efb\u52a1\u3002\u8fd9\u6837\u7684\u8fc7\u7a0b\u50cf\u6781\u4e86\u4e00\u4e2a\u7a97\u53e3\u5728\u5e73\u9762\u4e0a\u6ed1\u52a8\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u7b97\u6cd5\u79f0\u4e3a\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u95ee\u9898\u3002 \u638c\u63e1\u597d\u8fd9\u4e00\u7c7b\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u7684\u95ee\u9898\uff0c\u9700\u8981\u5148\u4ece\u300c\u66b4\u529b\u89e3\u6cd5\u300d\u5f00\u59cb\u5206\u6790\uff0c\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u5229\u7528\u4e86\u95ee\u9898\u672c\u8eab\u7684\u7279\u70b9\uff0c\u5728\u4e24\u4e2a\u6307\u9488\u540c\u5411\u3001\u4ea4\u66ff\u5411\u53f3\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c11\u8003\u8651\u4e86\u5f88\u591a\u300c\u66b4\u529b\u89e3\u6cd5\u300d\u9700\u8981\u8003\u5bdf\u4e86\u60c5\u51b5\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230\u4e86\u7ebf\u6027\u7ea7\u522b O(N)\uff08\u8fd9\u91cc\ud835\udc41\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 public class Solution { public String minWindow(String s, String t) { int[] window = new int[128]; int[] pattern = new int[128]; final int A = 'A'; for (Character c : t.toCharArray()) { pattern[c - A]++; } int distance = 0; for (int i = 0; i < 128; i++) { if (pattern[i] > 0) { distance++; } } int sLen = s.length(); int start = 0; int left = 0; int right = 0; int match = 0; int minLen = sLen + 1; while (right < sLen) { Character curChar = s.charAt(right); if (pattern[curChar - A] > 0) { window[curChar - A]++; if (window[curChar - A] == pattern[curChar - A]) { match++; } } right++; while (match == distance) { if (right - left < minLen) { start = left; minLen = right - left; } // \u8003\u8651\u5de6\u8fb9\u754c\u5411\u53f3\u8fb9\u8d70 Character leftChar = s.charAt(left); if (pattern[leftChar - A] > 0) { window[leftChar - A]--; if (window[leftChar - A] < pattern[leftChar - A]) { match--; } } left++; } } return minLen == sLen + 1 ? \"\" : s.substring(start, start + minLen); } } public class Solution { public int characterReplacement(String s, int k) { int len = s.length(); if (len < 2) { return len; } char[] charArray = s.toCharArray(); int left = 0; int right = 0; int res = 0; int maxCount = 0; int[] freq = new int[26]; // [left, right) \u5185\u6700\u591a\u66ff\u6362 k \u4e2a\u5b57\u7b26\u53ef\u4ee5\u5f97\u5230\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u7684\u5b50\u4e32 while (right < len){ freq[charArray[right] - 'A']++; // \u5728\u8fd9\u91cc\u7ef4\u62a4 maxCount\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u53f3\u8fb9\u754c\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5b57\u7b26\u9891\u6570\u589e\u52a0\uff0c\u624d\u4f1a\u4f7f\u5f97 maxCount \u589e\u52a0 maxCount = Math.max(maxCount, freq[charArray[right] - 'A']); right++; if (right - left > maxCount + k){ // \u8bf4\u660e\u6b64\u65f6 k \u4e0d\u591f\u7528 // \u628a\u5176\u5b83\u4e0d\u662f\u6700\u591a\u51fa\u73b0\u7684\u5b57\u7b26\u66ff\u6362\u4ee5\u540e\uff0c\u90fd\u4e0d\u80fd\u586b\u6ee1\u8fd9\u4e2a\u6ed1\u52a8\u7684\u7a97\u53e3\uff0c\u8fd9\u4e2a\u65f6\u5019\u987b\u8981\u8003\u8651\u5de6\u8fb9\u754c\u5411\u53f3\u79fb\u52a8 // \u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u9891\u6570\u6570\u7ec4\u987b\u8981\u76f8\u5e94\u5730\u505a\u51cf\u6cd5 freq[charArray[left] - 'A']--; left++; } res = Math.max(res, right - left); } return res; } } \u6ed1\u52a8\u7a97\u53e3 3\uff1a\u8ba1\u6570\u95ee\u9898\u9009\u8bb2 \u8fd9\u4e00\u8282\u6211\u4eec\u5411\u5927\u5bb6\u4ecb\u7ecd\u51e0\u4e2a\u5173\u4e8e\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u7684\u8ba1\u6570\u95ee\u9898\uff0c\u5199\u5bf9\u8ba1\u6570\u95ee\u9898\u7684\u6807\u51c6\u662f\uff1a\u4e0d\u91cd\u4e0d\u6f0f\u3002 public class Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { int len = s.length(); if (len < 3) { return len; } char[] charArray = s.toCharArray(); int[] freq = new int[128]; // \u6ed1\u52a8\u7a97\u53e3\u91cc\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570 int count = 0; int res = 2; int left = 0; int right = 0; while (right < len) { freq[charArray[right]]++; if (freq[charArray[right]] == 1) { count++; } right++; while (count == 3) { freq[charArray[left]]--; if (freq[charArray[left]] == 0) { count--; } left++; } // \u9000\u51fa\u5faa\u73af\u4ee5\u540e\u6709 count = 2\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u9009\u51fa\u6700\u5927\u503c res = Math.max(res, right - left); } return res; } } public class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { int len = s.length(); if (len <= k) { return len; } char[] charArray = s.toCharArray(); int[] freq = new int[128]; int count = 0; int left = 0; int right = 0; int res = k; while (right < len) { freq[charArray[right]]++; if (freq[charArray[right]] == 1) { count++; } right++; while (count == k + 1) { freq[charArray[left]]--; if (freq[charArray[left]] == 0) { count--; } left++; } res = Math.max(res, right - left); } return res; } } public class Solution { public int numSubarrayBoundedMax(int[] nums, int left, int right) { return lessEqualsThan(nums, right) - lessEqualsThan(nums, left - 1); } private int lessEqualsThan(int[] nums, int k) { int len = nums.length; int res = 0; // \u5faa\u73af\u4e0d\u53d8\u91cf\uff1anums[left..right] \u91cc\u7684\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u4e8e\u7b49\u4e8e k for (int left = 0, right = 0; right < len; right++) { if (nums[right] > k) { left = right + 1; } res += right - left; } return res; } } public class Solution { public int subarraysWithKDistinct(int[] A, int K) { return atMostKDistinct(A, K) - atMostKDistinct(A, K - 1); } /** * @param A * @param K * @return \u6700\u591a\u5305\u542b K \u4e2a\u4e0d\u540c\u6574\u6570\u7684\u5b50\u533a\u95f4\u7684\u4e2a\u6570 */ private int atMostKDistinct(int[] A, int K) { int len = A.length; int[] freq = new int[len + 1]; int left = 0; int right = 0; // [left, right) \u91cc\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570 int count = 0; int res = 0; // [left, right) \u5305\u542b\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e K while (right < len) { if (freq[A[right]] == 0) { count++; } freq[A[right]]++; right++; while (count > K) { freq[A[left]]--; if (freq[A[left]] == 0) { count--; } left++; } // [left, right) \u533a\u95f4\u7684\u957f\u5ea6\u5c31\u662f\u5bf9\u7ed3\u679c\u7684\u8d21\u732e res += right - left; } return res; } } \u6ed1\u52a8\u7a97\u53e3 4\uff1a\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7a97\u53e3\u6027\u8d28 \u6709\u4e00\u7c7b\u95ee\u9898\u53ea\u662f\u540d\u5b57\u4e0a\u53eb\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\uff0c\u4f46\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u9700\u8981\u7528\u5230\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e00\u8282\u7ed9\u51fa\u7684\u95ee\u9898\u53ef\u4ee5\u5f53\u505a\u4f8b\u9898\u8fdb\u884c\u5b66\u4e60\uff0c\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u95ee\u9898\u662f\u57fa\u4e8e\u8fd9\u4e9b\u95ee\u9898\u884d\u751f\u51fa\u6765\u7684\u3002 class Solution { public: vector<int> maxSlidingWindow(vector<int>& nums, int k) { int n = nums.size(); priority_queue<pair<int, int>> q; for (int i = 0; i < k; ++i) { q.emplace(nums[i], i); } vector<int> ans = {q.top().first}; for (int i = k; i < n; ++i) { q.emplace(nums[i], i); while (q.top().second <= i - k) { q.pop(); } ans.push_back(q.top().first); } return ans; } }; class Solution { public: vector<int> maxSlidingWindow(vector<int>& nums, int k) { int n = nums.size(); deque<int> q; for (int i = 0; i < k; ++i) { while (!q.empty() && nums[i] >= nums[q.back()]) { q.pop_back(); } q.push_back(i); } vector<int> ans = {nums[q.front()]}; for (int i = k; i < n; ++i) { while (!q.empty() && nums[i] >= nums[q.back()]) { q.pop_back(); } q.push_back(i); while (q.front() <= i - k) { q.pop_front(); } ans.push_back(nums[q.front()]); } return ans; } }; class DualHeap { private: // \u5927\u6839\u5806\uff0c\u7ef4\u62a4\u8f83\u5c0f\u7684\u4e00\u534a\u5143\u7d20 priority_queue<int> small; // \u5c0f\u6839\u5806\uff0c\u7ef4\u62a4\u8f83\u5927\u7684\u4e00\u534a\u5143\u7d20 priority_queue<int, vector<int>, greater<int>> large; // \u54c8\u5e0c\u8868\uff0c\u8bb0\u5f55\u300c\u5ef6\u8fdf\u5220\u9664\u300d\u7684\u5143\u7d20\uff0ckey \u4e3a\u5143\u7d20\uff0cvalue \u4e3a\u9700\u8981\u5220\u9664\u7684\u6b21\u6570 unordered_map<int, int> delayed; int k; // small \u548c large \u5f53\u524d\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u9700\u8981\u6263\u9664\u88ab\u300c\u5ef6\u8fdf\u5220\u9664\u300d\u7684\u5143\u7d20 int smallSize, largeSize; public: DualHeap(int _k): k(_k), smallSize(0), largeSize(0) {} private: // \u4e0d\u65ad\u5730\u5f39\u51fa heap \u7684\u5806\u9876\u5143\u7d20\uff0c\u5e76\u4e14\u66f4\u65b0\u54c8\u5e0c\u8868 template<typename T> void prune(T& heap) { while (!heap.empty()) { int num = heap.top(); if (delayed.count(num)) { --delayed[num]; if (!delayed[num]) { delayed.erase(num); } heap.pop(); } else { break; } } } // \u8c03\u6574 small \u548c large \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4f7f\u5f97\u4e8c\u8005\u7684\u5143\u7d20\u4e2a\u6570\u6ee1\u8db3\u8981\u6c42 void makeBalance() { if (smallSize > largeSize + 1) { // small \u6bd4 large \u5143\u7d20\u591a 2 \u4e2a large.push(small.top()); small.pop(); --smallSize; ++largeSize; // small \u5806\u9876\u5143\u7d20\u88ab\u79fb\u9664\uff0c\u9700\u8981\u8fdb\u884c prune prune(small); } else if (smallSize < largeSize) { // large \u6bd4 small \u5143\u7d20\u591a 1 \u4e2a small.push(large.top()); large.pop(); ++smallSize; --largeSize; // large \u5806\u9876\u5143\u7d20\u88ab\u79fb\u9664\uff0c\u9700\u8981\u8fdb\u884c prune prune(large); } } public: void insert(int num) { if (small.empty() || num <= small.top()) { small.push(num); ++smallSize; } else { large.push(num); ++largeSize; } makeBalance(); } void erase(int num) { ++delayed[num]; if (num <= small.top()) { --smallSize; if (num == small.top()) { prune(small); } } else { --largeSize; if (num == large.top()) { prune(large); } } makeBalance(); } double getMedian() { return k & 1 ? small.top() : ((double)small.top() + large.top()) / 2; } }; class Solution { public: vector<double> medianSlidingWindow(vector<int>& nums, int k) { DualHeap dh(k); for (int i = 0; i < k; ++i) { dh.insert(nums[i]); } vector<double> ans = {dh.getMedian()}; for (int i = k; i < nums.size(); ++i) { dh.insert(nums[i]); dh.erase(nums[i - k]); ans.push_back(dh.getMedian()); } return ans; } }; \u7531\u4e8e small small \u662f\u5927\u6839\u5806\uff0c large large \u662f\u5c0f\u6839\u5806\uff0c\u56e0\u6b64\u6839\u672c\u5c31\u4e0d\u5b58\u5728\u4e0e num num \u503c\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4e5f\u5c31\u4e0d\u53ef\u80fd\u4f1a\u88ab\u5ef6\u8fdf\u5220\u9664\u4e86\u3002 \u94fe\u8868\u4e2d\u7684\u53cc\u6307\u9488\u95ee\u9898 \u89e3\u51b3\u94fe\u8868\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u6709\u4e9b\u65f6\u5019\u9700\u8981\u4e00\u4e9b\u8111\u6d1e\uff0c\u5e76\u6ca1\u6709\u90a3\u4e48\u5bb9\u6613\u60f3\u5230\u3002\u597d\u5728\u8fd9\u4e9b\u95ee\u9898\u53ea\u9700\u8981\u638c\u63e1\u8fd9\u4e9b\u5e38\u89c1\u7684\u6280\u5de7\u5c31\u53ef\u4ee5\u4e86\u3002\u5176\u4e2d\u6700\u5178\u578b\u7684\u6280\u5de7\u5c31\u662f\u300c\u5feb\u6162\u6307\u9488\u300d\uff0c\u4e5f\u79f0\u4e3a\u300c\u540c\u6b65\u6307\u9488\u300d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u89e3\u51b3\u5b83\u4eec\u90fd\u662f\u5728\u94fe\u8868\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0c\u56e0\u6b64\u4e5f\u79f0\u4e3a\u300c\u53cc\u6307\u9488\u300d\u6280\u5de7\u3002 class Solution { public: bool hasCycle(ListNode *head) { unordered_set<ListNode*> seen; while (head != nullptr) { if (seen.count(head)) { return true; } seen.insert(head); head = head->next; } return false; } }; class Solution { public: bool hasCycle(ListNode* head) { if (head == nullptr || head->next == nullptr) { return false; } ListNode* slow = head; ListNode* fast = head->next; while (slow != fast) { if (fast == nullptr || fast->next == nullptr) { return false; } slow = slow->next; fast = fast->next->next; } return true; } }; class Solution { public: int getLength(ListNode* head) { int length = 0; while (head) { ++length; head = head->next; } return length; } ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(0, head); int length = getLength(head); ListNode* cur = dummy; for (int i = 1; i < length - n + 1; ++i) { cur = cur->next; } cur->next = cur->next->next; ListNode* ans = dummy->next; delete dummy; return ans; } }; class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(0, head); stack<ListNode*> stk; ListNode* cur = dummy; while (cur) { stk.push(cur); cur = cur->next; } for (int i = 0; i < n; ++i) { stk.pop(); } ListNode* prev = stk.top(); prev->next = prev->next->next; ListNode* ans = dummy->next; delete dummy; return ans; } }; class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(0, head); ListNode* first = head; ListNode* second = dummy; for (int i = 0; i < n; ++i) { first = first->next; } while (first) { first = first->next; second = second->next; } second->next = second->next->next; ListNode* ans = dummy->next; delete dummy; return ans; } }; class Solution { public: ListNode* middleNode(ListNode* head) { int n = 0; ListNode* cur = head; while (cur != nullptr) { ++n; cur = cur->next; } int k = 0; cur = head; while (k < n / 2) { ++k; cur = cur->next; } return cur; } }; class Solution { public: ListNode* middleNode(ListNode* head) { ListNode* slow = head; ListNode* fast = head; while (fast != NULL && fast->next != NULL) { slow = slow->next; fast = fast->next->next; } return slow; } }; \u53cc\u6307\u9488\uff1a\u76f8\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf \u76f8\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf \u300c\u53cc\u6307\u9488\u300d\u662f\u6307\u901a\u8fc7\u4e24\u4e2a\u53d8\u91cf\u4ea4\u66ff\u76f8\u5411\u79fb\u52a8\u5b8c\u6210\u4efb\u52a1\u7684\u7b97\u6cd5\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf i \u548c j \uff0c\u521d\u59cb\u7684\u65f6\u5019\uff0ci \u548c j \u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u6307\u9488 i \u4e0d\u65ad\u5411\u53f3\u79fb\u52a8\uff0c \u6307\u9488 j \u4e0d\u65ad\u5411\u5de6\u79fb\u52a8\uff0c\u76f4\u5230\u5b83\u4eec\u76f8\u9047\u3002\u8fd9\u6837\u8bbe\u8ba1\u7684\u7b97\u6cd5\u5c11\u8003\u8651\u4e86\u5f88\u591a\u66b4\u529b\u89e3\u6cd5\u9700\u8981\u8003\u8651\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u8d2a\u5fc3\u7b97\u6cd5 \u8d2a\u5fc3\u7b97\u6cd5\u662f\u5bf9\u5b8c\u6210\u4e00\u4ef6\u4e8b\u60c5\u7684\u65b9\u6cd5\u7684\u63cf\u8ff0\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u6bcf\u4e00\u6b21\u90fd\u505a\u51fa\u5f53\u524d\u770b\u8d77\u6765\u6700\u597d\u7684\u9009\u62e9\uff0c\u800c\u4e0d\u7528\u8003\u8651\u5176\u5b83\u53ef\u80fd\u7684\u9009\u62e9\u3002 \u8d2a\u5fc3\u7b97\u6cd5\u7684\u5b66\u4e60\u53ef\u4ee5\u4e0e\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u770b\u5b83\u5230\u5e95\u6bd4\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u5c11\u8003\u8651\u4e86\u54ea\u4e9b\u5b50\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u5c11\u8003\u8651\u90a3\u4e9b\u5b50\u95ee\u9898\uff0c\u800c\u6bcf\u6b21\u53ea\u4e13\u6ce8\u4e8e\u6c42\u89e3\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u901a\u8fc7\u9010\u6b65\u9012\u63a8\u5f97\u5230\u539f\u95ee\u9898\u7684\u7b54\u6848\u3002","title":"\u52a8\u6001\u89c4\u5212\uff1a\u7ebf\u6027 &amp; \u533a\u95f4\u52a8\u6001"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_1","text":"\u7406\u89e3\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3 \u4e86\u89e3\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u4f18\u7f3a\u70b9\u548c\u95ee\u9898\u5206\u7c7b \u638c\u63e1\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def \u80fd\u591f\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7ebf\u6027\u3001\u524d\u7f00\u548c\u3001\u533a\u95f4\u8fd9\u4e09\u7c7b\u95ee\u9898","title":"\u52a8\u6001\u89c4\u5212\uff1a\u7ebf\u6027 &amp; \u533a\u95f4\u52a8\u6001"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_2","text":"","title":"\u7b80\u4ecb"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_3","text":"","title":"\u7ebf\u6027\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_4","text":"","title":"\u5355\u4e32"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#dpik","text":"","title":"\u5e26\u7ef4\u5ea6\u5355\u4e32 dp[i][k]"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_5","text":"","title":"\u53cc\u4e32"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_6","text":"\u77e9\u9635\u76f8\u5173\u7ec3\u4e60\u9898 \u77e9\u9635 dp[i][j] \u77e9\u9635 dp[i][j][k] \u7ebf\u6027\u52a8\u6001\u89c4\u5212\u662f\u52a8\u6001\u89c4\u5212\u4e2d\u6700\u57fa\u7840\u7684\u4e00\u7c7b\uff0c\u5b83\u7684\u72b6\u6001\u4e00\u822c\u7269\u7406\u610f\u4e49\u5f88\u660e\u786e\uff0c\u6613\u4e8e\u5206\u6790\u3002\u5728\u521d\u5b66\u52a8\u6001\u89c4\u5212\u65f6\uff0c\u901a\u8fc7\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u5927\u91cf\u7ec3\u4e60\uff0c\u53ef\u4ee5\u4e0d\u65ad\u52a0\u6df1\u52a8\u6001\u89c4\u5212\u7684\u6982\u5ff5\u7406\u89e3\uff0c\u4f8b\u5982\u52a8\u6001\u89c4\u5212\u4e2d\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u6982\u5ff5\uff1a\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u91cd\u590d\u5b50\u95ee\u9898\uff0c\u65e0\u540e\u6548\u6027\u3002\u4e0b\u9762\u5bf9\u52a8\u6001\u89c4\u5212\u7684\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5\u505a\u4e2a\u7b80\u8981\u56de\u987e\uff0c\u5728\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u9898\u76ee\u7ec3\u4e60\u4e2d\u53ef\u4ee5\u4e0d\u65ad\u5730\u52a0\u6df1\u7406\u89e3\uff0c\u4e4b\u540e\u518d\u5b66\u4e60\u5176\u5b83\u7684\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u5c31\u4f1a\u5bb9\u6613\u5f88\u591a\u3002 \u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5982\u679c\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6240\u5305\u542b\u7684\u5b50\u95ee\u9898\u7684\u89e3\u4e5f\u662f\u6700\u4f18\u7684\uff0c\u5c31\u79f0\u8be5\u95ee\u9898\u5177\u6709\u6700\u4f18\u5b50\u7ed3\u6784\u3002 \u65e0\u540e\u6548\u6027\uff1a\u5373\u67d0\u9636\u6bb5\u72b6\u6001\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u4e0d\u53d7\u8fd9\u4e2a\u72b6\u6001\u4ee5\u540e\u51b3\u7b56\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u67d0\u72b6\u6001\u4ee5\u540e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u5f71\u54cd\u4ee5\u524d\u7684\u72b6\u6001\uff0c\u53ea\u4e0e\u5f53\u524d\u72b6\u6001\u6709\u5173\u3002 \u91cd\u590d\u5b50\u95ee\u9898\uff1a\u5373\u5b50\u95ee\u9898\u4e4b\u95f4\u662f\u4e0d\u72ec\u7acb\u7684\uff0c\u4e00\u4e2a\u5b50\u95ee\u9898\u5728\u4e0b\u4e00\u9636\u6bb5\u51b3\u7b56\u4e2d\u53ef\u80fd\u88ab\u591a\u6b21\u4f7f\u7528\u5230\u3002\uff08\u8be5\u6027\u8d28\u5e76\u4e0d\u662f\u52a8\u6001\u89c4\u5212\u9002\u7528\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u8fd9\u6761\u6027\u8d28\uff0c\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u540c\u5176\u4ed6\u7b97\u6cd5\u76f8\u6bd4\u5c31\u4e0d\u5177\u5907\u4f18\u52bf\uff09 \u7ebf\u6027\u52a8\u6001\u89c4\u5212\u662f\u52a8\u6001\u89c4\u5212\u4e2d\u53d8\u5316\u6700\u591a\u7684\u4e00\u7c7b\u3002 \u9996\u5148\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u9488\u5bf9\u7684\u95ee\u9898\u662f\u6700\u5e38\u89c1\u7684\u6570\u7ec4\uff0c\u5b57\u7b26\u4e32\uff0c\u77e9\u9635\u7b49\uff0c\u8fd9\u4e09\u79cd\u6570\u636e\u7ed3\u6784\u672c\u8eab\u5c31\u662f\u7ebf\u6027\u7684\uff0c\u56e0\u6b64\u51fa\u73b0\u8fd9\u4e9b\u7c7b\u578b\u7684\u8f93\u5165\u7684\u65f6\u5019\uff0c\u5982\u679c\u8981\u7528\u5230\u52a8\u6001\u89c4\u5212\uff0c\u9996\u5148\u8003\u8651\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u5c31\u5f88\u5408\u7406\u4e86\uff0c\u56e0\u6b64\u5f88\u591a\u95ee\u9898\u4e0d\u8bba\u6700\u540e\u6b63\u89e3\u662f\u4e0d\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\uff0c\u90fd\u4f1a\u9996\u5148\u60f3\u4e00\u4e0b\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u662f\u5426\u53ef\u884c\u3002 \u5176\u6b21\u7531\u4e8e\u5927\u90e8\u5206\u95ee\u9898\u7684\u6570\u636e\u90fd\u662f\u4ee5\u8fd9\u4e09\u79cd\u5f62\u5f0f\u7ed9\u51fa\u7684\uff0c\u56e0\u6b64\u9898\u76ee\u7684\u53d8\u5316\u4f1a\u975e\u5e38\u591a\uff0c\u5f88\u591a\u5e38\u89c1\u7684\u8f93\u5165\u5f62\u5f0f\u4ee5\u53ca\u95ee\u9898\u90fd\u975e\u5e38\u7ecf\u5178\uff0c\u90fd\u5b58\u5728\u7ecf\u5178\u7684\u72b6\u6001\u8bbe\u8ba1\u3002\u56e0\u6b64\u4e0d\u8003\u8651\u4e00\u4e9b\u6bd4\u8f83 Trick \u7684\u89e3\u6cd5\uff0c\u4ec5\u4ec5\u662f\u7ecf\u5178\u95ee\u9898\u7684\u7ecf\u5178\u72b6\u6001\u8bbe\u8ba1\uff0c\u5c31\u6bd4\u5176\u5b83\u79cd\u7c7b\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u591a\u5f88\u591a\u4e86\u3002 \u4f8b\u5982\u5355\u4e2a\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u4e0a\u8bbe\u8ba1\u4e00\u7ef4\u72b6\u6001\uff0c\u4e24\u4e2a\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u4e0a\u8bbe\u8ba1\u4e24\u7ef4\u72b6\u6001\uff0c\u4ee5\u53ca\u77e9\u9635\u4e0a\u8bbe\u8ba1\u4e24\u7ef4\u72b6\u6001\u7b49\u7b49\uff0c\u540c\u65f6\u4ee5\u4e0a\u4e09\u79cd\u60c5\u51b5\u7684\u72b6\u6001\u8bbe\u8ba1\u90fd\u6709\u53ef\u80fd\u518d\u52a0\u4e0a\u989d\u5916\u7684\u6307\u6807\u7684\u72b6\u6001\uff0c\u5c31\u662f\u524d\u9762\u4f8b\u9898\u4e2d\u7684 k\uff0c\u8fd9\u91cc\u9762\u53d8\u5316\u5c31\u5f88\u591a\u4e86\uff0c\u6bd4\u5982\u6709\u7684\u9898\u76ee\u5728 k \u8fd9\u4e00\u7ef4\u4e0a\u8981\u4f7f\u7528\u4e8c\u5206\uff0c\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u6709\u7684\u9898\u76ee\u9700\u8981 DP \u72b6\u6001\u4e0e\u6570\u636e\u7ed3\u6784\u914d\u5408\u6765\u89e3\u51b3\u95ee\u9898\u3002 \u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u7c7b\u95ee\u9898\u6ca1\u6709\u663e\u5f0f\u7684\u6570\u7ec4\uff0c\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5728\u6c42\u89e3\u7684\u65f6\u5019\u4f9d\u7136\u6ee1\u8db3\u524d\u9762\u63d0\u5230\u7684\u52a8\u6001\u89c4\u5212\u4e09\u6761\u57fa\u672c\u6982\u5ff5\uff0c\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\uff0c\u8fd9\u79cd\u95ee\u9898\u901a\u5e38\u4e5f\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u3002\u5982\u6b64\u591a\u7684\u53d8\u5316\u4ec5\u4ec5\u672c\u5c0f\u8282\u4f8b\u4e3e\u7684\u9898\u76ee\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\uff0c\u4e0b\u4e00\u5c0f\u8282\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u7ec3\u4e60\u9898\uff0c\u6d89\u53ca\u5230\u5bf9\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u7684\u66f4\u591a\u7684\u53d8\u5316\u3002","title":"\u77e9\u9635"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_7","text":"\u524d\u7f00\u548c\u662f\u4e00\u79cd\u67e5\u8be2\u6570\u7ec4\u4e2d\u4efb\u610f\u533a\u95f4\u7684\u5143\u7d20\u7684\u548c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u6570\u7ec4\u7ed9\u5b9a\u4e4b\u540e\u5c31\u4e0d\u53d8\u4e86\u3002\u9488\u5bf9\u8fd9\u4e2a\u4e0d\u53d8\u7684\u6570\u7ec4\uff0c\u524d\u7f00\u548c\u7528\u4e8e\u591a\u6b21\u67e5\u8be2\u533a\u95f4 [i, j] \u4e0a\u5143\u7d20\u7684\u548c\u3002 \u5bf9\u4e8e\u52a8\u6001\u89c4\u5212\u800c\u8a00\uff0c\u524d\u7f00\u548c\u7684\u610f\u4e49\u4e3b\u8981\u6709\u4e24\u70b9\uff1a \u4e00\u7ef4\u548c\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u63a8\u5bfc\uff0c\u5206\u522b\u7528\u5230\u4e86\u5355\u4e32\u548c\u77e9\u9635\u4e2d\u6700\u7ecf\u5178\u7684\u72b6\u6001\u8bbe\u8ba1\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\uff1b \u5728\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u4e2d\uff0c\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u9700\u8981\u4f9d\u8d56\u533a\u95f4\u548c\uff0c\u56e0\u4e3a\u72b6\u6001\u8f6c\u79fb\u662f\u975e\u5e38\u9891\u7e41\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u5fc5\u987b\u9ad8\u6548\u5730\u6c42\u533a\u95f4\u548c\u624d\u80fd\u4f7f\u5f97\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u63a5\u53d7\uff0c\u6b64\u65f6\u5c31\u5fc5\u987b\u7528\u5230\u524d\u7f00\u548c\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u4e00\u4e9b\u95ee\u9898\u9700\u8981\u524d\u7f00\u548c\u4e0e\u5176\u5b83\u6570\u636e\u7ed3\u6784\u914d\u5408\u6765\u89e3\u51b3\uff0c\u4e5f\u6709\u4e24\u7c7b\uff1a \u5148\u9884\u5904\u7406\u51fa\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u8fd9\u4e00\u6b65\u662f\u52a8\u6001\u89c4\u5212\uff0c\u7136\u540e\u5728\u524d\u7f00\u548c\u6570\u7ec4\u4e0a\u7528\u5176\u5b83\u6570\u636e\u7ed3\u6784\u89e3\u51b3\uff1b \u8fd8\u662f\u6309\u7167\u52a8\u6001\u89c4\u5212\u7684\u65b9\u5f0f\u6c42\u524d\u7f00\u548c\uff0c\u4e5f\u9700\u8981\u989d\u5916\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u4f46\u4e0d\u662f\u9884\u5904\u7406\u597d\u524d\u7f00\u548c\u6570\u7ec4\u4e4b\u540e\u518d\u7528\u6570\u636e\u7ed3\u6784\u8ba1\u7b97\uff0c\u800c\u662f\u6bcf\u6c42\u51fa\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u5c31\u66f4\u65b0\u4e00\u6b21\u6570\u636e\u7ed3\u6784\u5e76\u7ef4\u62a4\u7b54\u6848\u3002 \u524d\u7f00\u548c\u7684\u63a8\u5bfc\u548c\u8ba1\u7b97\u9690\u542b\u7740\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\uff0c\u540c\u65f6\u5b83\u7684\u72b6\u6001\u8bbe\u8ba1\u662f\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u4e2d\u6bd4\u8f83\u7b80\u5355\u7684\u90a3\u4e00\u7c7b\u3002\u4e0e\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u4e00\u6837\uff0c\u524d\u7f00\u548c\u4e5f\u6709\u4e00\u7ef4\u548c\u4e8c\u7ef4\u4e24\u79cd\u573a\u666f\u3002 \u867d\u7136\u524d\u7f00\u548c\u672c\u8eab\u5f88\u7b80\u5355\uff0c\u4f46\u9700\u8981\u7528\u5230\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u975e\u5e38\u591a\uff0c\u4e0e\u5176\u5b83\u6570\u636e\u7ed3\u6784\u914d\u5408\u7684\u53d8\u5316\u4e5f\u5f88\u591a\uff0c\u56e0\u6b64\u9700\u8981\u4ece\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u4e2d\u5265\u79bb\u51fa\u6765\u5355\u72ec\u5b66\u4e60\u3002","title":"\u524d\u7f00\u548c"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_8","text":"","title":"\u6c42\u533a\u95f4\u548c"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_9","text":"","title":"\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u524d\u7f00\u548c"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_10","text":"","title":"\u8fd0\u7b97\u63a8\u5e7f"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_11","text":"","title":"\u5dee\u5206"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_12","text":"\u5728\u8f93\u5165\u4e3a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\u65f6\uff0c\u5b50\u95ee\u9898\u7528\u533a\u95f4 [i..j] \u8868\u793a\u3002 \u72b6\u6001\u7684\u5b9a\u4e49\u548c\u8f6c\u79fb\u90fd\u4e0e\u533a\u95f4\u6709\u5173\uff0c\u79f0\u4e3a\u533a\u95f4\u52a8\u6001\u89c4\u5212","title":"\u533a\u95f4\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_13","text":"","title":"\u52a8\u6001\u89c4\u5212\uff1a\u72b6\u538b\u3001\u8ba1\u6570 &amp; \u6570\u4f4d\u52a8\u6001"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_14","text":"","title":"\u80cc\u5305\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_15","text":"\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212\u662f\u4e00\u7c7b\u975e\u5e38\u5178\u578b\u7684\u52a8\u6001\u89c4\u5212\uff0c\u901a\u5e38\u4f7f\u7528\u5728 NP \u95ee\u9898\u7684\u5c0f\u89c4\u6a21\u6c42\u89e3\u4e2d\uff0c\u867d\u7136\u662f\u6307\u6570\u7ea7\u522b\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u901f\u5ea6\u6bd4\u641c\u7d22\u5feb\u3002","title":"\u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_16","text":"\u52a8\u6001\u89c4\u5212\u4e2d\u7684\u8ba1\u6570\u578b\u95ee\u9898\u5c31\u662f\u5229\u7528\u52a8\u6001\u89c4\u5212\u7684\u7b97\u6cd5\u601d\u60f3\u53bb\u8ba1\u7b97\u51fa\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u3002 \u6bd4\u5982\uff0c\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u53ef\u4ee5\u6709\u591a\u5c11\u6761\u8def\u5f84\uff0c\u6ce8\u610f\uff0c\u662f\u591a\u5c11\u6761\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u8def\u7ebf\u7684\u63cf\u8ff0\u3002 \u5f53\u7136\u4e5f\u6709\u5177\u4f53\u6bcf\u4e00\u6761\u8def\u7ebf\u7684\u95ee\u6cd5\uff0c\u8fd9\u662f dfs \u7684\u95ee\u9898\u4e86\u3002 \u8ba1\u6570\u95ee\u9898\u76f8\u5173\u7ec3\u4e60\u9898 \u8def\u5f84\u95ee\u9898 \u5361\u7279\u5170\u6570 \u94fa\u7816\u95ee\u9898 \u6590\u6ce2\u90a3\u5951 \u9690\u6666\u7684\u9012\u63a8\u5173\u7cfb","title":"\u8ba1\u6570\u95ee\u9898"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_17","text":"\u662f\u4e00\u79cd\u57fa\u7840\u7b97\u6cd5\uff0c\u672c\u8eab\u4e0e\u52a8\u6001\u89c4\u5212\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u5b83\u53ef\u4ee5\u7528\u4e8e\u4f18\u5316\u7ebf\u6027\u9012\u63a8\u5173\u7cfb\u7684\u8ba1\u7b97\uff0c\u5e76\u4e14\u5176\u601d\u8def\u6bd4\u8f83\u56fa\u5b9a\uff0c\u56e0\u6b64\u5728\u8ba1\u6570\u95ee\u9898\u7ae0\u8282\u4e4b\u540e\uff0c\u5728\u672c\u7ae0\u5c06\u77e9\u9635\u5feb\u901f\u5e42\u505a\u57fa\u7840\u4ecb\u7ecd\u3002 using ll = long long; const int M = 2; struct Ma { int a[M][M]; Ma() { memset(a, 0, sizeof(a)); } void init() // \u590d\u4f4d\u4e3a\u5355\u4f4d\u9635 { a[0][0] = a[1][1] = 1; a[0][1] = a[1][1] = 0; } Ma operator*(const Ma& B) const { Ma ans; for(int i = 0; i < M; ++i) for(int j = 0; j < M; ++j) for(int k = 0; k < M; ++k) ans.a[i][j] += a[i][k] * B.a[k][j]; return ans; } Ma operator^(int n) const { Ma ans; ans.init(); Ma A = *this; // \u62f7\u8d1d\u4e00\u4e2a\u51fa\u6765\u7528\u4e8e\u81ea\u4e58 while(n) { if(n & 1) ans = ans * A; A = A * A; n >>= 1; } return ans; } }; \u5728\u4e0a\u4e00\u7ae0\u4e2d\u7684 16 \u9053\u7ec3\u4e60\u9898\u4e2d\uff0c\u90e8\u5206\u9898\u76ee\u7684\u9012\u63a8\u5173\u7cfb\u662f\u7ebf\u6027\u7684\uff0c\u8fdb\u800c\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u505a\uff0c\u5c1d\u8bd5\u5224\u65ad\u54ea\u4e9b\u9898\u76ee\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42\u505a\uff0c\u5e76\u7528\u77e9\u9635\u5feb\u901f\u5e42\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u52a0\u6df1\u5bf9\u672c\u8282\u7684\u7406\u89e3\u3002","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#dp","text":"\u5728\u57fa\u7840\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u5f53\u4e2d\u7b97\u662f\u6bd4\u8f83\u96be\u7684\u4e00\u7c7b\uff0c\u56e0\u4e3a\u6570\u4f4d DP \u7684\u72b6\u6001\u7684\u7269\u7406\u610f\u4e49\u4e0d\u592a\u597d\u7406\u89e3\u3002\u5176\u5b83\u7684\u52a8\u6001\u89c4\u5212\uff0c\u6bd4\u5982\u533a\u95f4 DP \u72b6\u6001\u7684\u7269\u7406\u610f\u4e49\u5c31\u662f\u533a\u95f4\uff0c\u72b6\u6001\u538b\u7f29 DP \u4e2d\u72b6\u6001\u7684\u7269\u7406\u610f\u4e49\u5c31\u662f\u96c6\u5408\uff0c\u8fd9\u90fd\u6bd4\u8f83\u597d\u7406\u89e3\u3002 \u4f46\u662f\u6570\u4f4d DP \u6bd4\u5176\u5b83 DP \u597d\u7684\u4e00\u9762\u662f\u6570\u4f4d DP \u7684\u601d\u7ef4\u76f8\u5bf9\u6bd4\u8f83\u56fa\u5b9a\u3002 \u4e00\u4e2a\u662f\u89e3\u51b3\u7684\u95ee\u9898\u6a21\u5f0f\u6bd4\u8f83\u56fa\u5b9a\uff0c\u4e00\u4e2a\u662f\u72b6\u6001\u8bbe\u8ba1\u4e5f\u6bd4\u8f83\u56fa\u5b9a\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\u628a\u6570\u4f4d DP \u7684\u5957\u8def\u4e86\u89e3\u4e2a\u5927\u6982\u3002 \u529b\u6263\u4e0a\u6709\u51e0\u9053\u6570\u4f4d DP \u7684\u9898\u76ee\uff0c\u901a\u8fc7\u8fd9\u4e9b\u9898\u76ee\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u4e86\u89e3\u6570\u4f4d DP \u7684\u601d\u8003\u8fc7\u7a0b\u548c\u505a\u6cd5\u3002 int getdp(int pos, int lim, const vector<int>& digits, const set<int>& num_set, vector<vector<int>>& dp) { if(pos == -1) return 1; if(dp[pos][lim] != -1) return dp[pos][lim]; dp[pos][lim] = 0; int up = lim ? digits[pos] : 9; // \u5f53\u524d\u8981\u679a\u4e3e\u5230\u7684\u4e0a\u754c for(int i: num_set) // \u679a\u4e3e\u5f53\u524d\u4f4d\u6240\u6709\u53ef\u80fd\u6570\u5b57 { if(i > up) break; dp[pos][lim] += getdp(pos - 1, lim && i == up, digits, num_set, dp); // \u672c\u4f4d\u88ab\u9650\u5236\u4e14\u9009\u9876\u5230\u4e0a\u754c\u7684\u6570\u5b57,\u4e0b\u4e00\u4f4d\u624d\u88ab\u9650\u5236 } return dp[pos][lim]; } \u524d\u5bfc\u96f6\u7684\u5206\u6790 \u589e\u52a0 zero \u72b6\u6001, \u8868\u793a\u9ad8\u4f4d\u662f\u5426\u662f\u524d\u5bfc\u96f6\u3002 \u5982\u679c\u9ad8\u4f4d\u9009\u4e86\u524d\u5bfc\u96f6\uff0c\u5219\u5f53\u524d\u4f4d\u65e0\u9650\u5236\uff0c\u4e14\u8fd8\u53ef\u4ee5\u9009\u524d\u5bfc\u96f6\u3002 \u5982\u679c\u9ad8\u4f4d\u6ca1\u6709\u9009\u524d\u5bfc\u96f6\u4e14\u672a\u9876\u5230\u4e0a\u754c\uff0c\u5219\u5f53\u524d\u4f4d\u5728\u53ef\u9009\u6570\u5b57\u96c6\u5408\u7684\u8303\u56f4\u5185\u65e0\u9650\u5236\u3002 \u5982\u679c\u9ad8\u4f4d\u9876\u5230\u4e86\u4e0a\u754c\uff0c\u5219\u5f53\u524d\u4f4d\u7684\u9009\u62e9\u88ab\u9650\u5236\u3002 \u529b\u6263\u4e0a\u6570\u4f4d DP \u7684\u9898\u76ee\u4e0d\u591a\uff0c\u4e0b\u4e00\u8282\u63d0\u4f9b\u4e86 9 \u9053\u7ec3\u4e60\u9898\uff0c\u53ef\u4ee5\u5de9\u56fa\u6570\u4f4d DP \u7684\u601d\u7ef4\u65b9\u5f0f\u3002","title":"\u6570\u4f4d DP"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_18","text":"","title":"\u52a8\u6001\u89c4\u5212\uff1a\u6811\u5f62\u3001\u56fe\u4e0a\u3001\u6982\u7387 &amp; \u535a\u5f08\u52a8\u6001"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#1-2","text":"\u300c\u5355\u4e32 DP\u300d \u5bf9\u4e8e\u300c\u5355\u4e32\u7ebf\u6027 DP\u300d\u95ee\u9898\uff0ci \u662f\u5355\u4e32 s \u4e0a\u7684\u4f4d\u7f6e\u3002\u4f5c\u4e3a\u9636\u6bb5\u5177\u6709\u65f6\u95f4\u6216\u8005\u4f4d\u7f6e\u7b49\u542b\u4e49\u3002\u6709\u65f6\u53ea\u6709\u5355\u4e32\u4e0a\u7684\u4f4d\u7f6e\u4e0d\u8db3\u4ee5\u8868\u793a\u72b6\u6001\uff0c\u9700\u8981\u540c\u65f6\u9644\u52a0\u4e00\u4e2a\u7ef4\u5ea6 k\uff0c\u4e00\u822c k \u6709\u957f\u5ea6\u3001\u4e2a\u6570\u3001\u6b21\u6570\u3001\u989c\u8272\u7b49\u542b\u4e49\u3002\u53e6\uff0c\u6240\u9644\u52a0\u7684\u7ef4\u5ea6\u6709\u65f6\u5019\u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u5982 k1, k2, ... \u672c\u7ae0\u6211\u4eec\u4ecb\u7ecd\u300c\u7ebf\u6027 DP\u300d\u4e2d\u6bd4\u8f83\u91cd\u8981\uff0c\u540c\u65f6\u5728\u524d\u4e24\u671f\u6ca1\u6709\u8be6\u7ec6\u4ecb\u7ecd\u7684\u4e24\u5757\u5185\u5bb9\uff0c\u4e00\u4e2a\u662f\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u4e00\u4e2a\u662f\u300c\u68cb\u76d8 DP\u300d\u3002 \u5728\u52a8\u6001\u89c4\u5212\u7cbe\u8bb2\u7b2c\u4e00\u671f\u4e2d\uff0c\u6211\u4eec\u6709\u4ecb\u7ecd\u8fc7\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u5e76\u7528\u52a8\u6001\u89c4\u5212\u7684\u65b9\u6cd5\u8fdb\u884c\u89e3\u51b3\u3002\u5b9e\u9645\u4e0a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u8fd8\u6709\u5176\u5b83\u89e3\u6cd5\uff0c\u4ee5\u53ca\u529b\u6263\u4e0a\u6709\u5f88\u591a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u53d8\u79cd\u95ee\u9898\u4ee5\u53ca\u5305\u88c5\u4e4b\u540e\u7684\u95ee\u9898\u3002\u6211\u4eec\u5728\u8fd9\u4e00\u5c0f\u8282\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u57fa\u4e8e\u4e8c\u5206\u7684\u89e3\u6cd5\uff0c\u8fd9\u662f LIS \u95ee\u9898\u7684\u6700\u597d\u7684\u89e3\u6cd5\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u7528\u7ebf\u6bb5\u6811\u4f18\u5316DP\u7684\u65b9\u5f0f\u7684\u89e3\u6cd5\uff0c\u8fd9\u90e8\u5206\u5728\u52a8\u6001\u89c4\u5212\u7cbe\u8bb2\u7b2c\u56db\u671f\u5173\u4e8eDP\u7684\u4f18\u5316\u65b9\u6cd5\u4e2d\u4ecb\u7ecd\u3002 \u7136\u540e\u6211\u4eec\u4ecb\u7ecd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u53d8\u5f62\u95ee\u9898\uff0c\u4e00\u4e2a\u662f\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u4e00\u4e2a\u662f\u6700\u957f\u4e0a\u5347\u5b50\u4e32\u3002 \u7136\u540e\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u529b\u6263\u4e0a\u7684\u4e00\u4e9b\u591a\u7ef4\u5c5e\u6027\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u3002 \u6700\u540e\u6211\u95e8\u4ecb\u7ecd\u9700\u8981\u81ea\u5b9a\u4e49 LIS \u4e2d\u7684\u5c0f\u4e8e\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ea\u8981\u80fd\u6b63\u786e\u5b9a\u4e49\u5c0f\u4e8e\uff0c\u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u95ee\u9898\u3002 \u5728\u52a8\u6001\u89c4\u5212\u7cbe\u8bb2\u7b2c\u4e00\u671f\u4e2d\uff0c\u6211\u4eec\u6709\u4ecb\u7ecd\u8fc7\u5728\u77e9\u9635\u4e0a\u8fdb\u884c\u7ebf\u6027\u63a8\u5bfc\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u4f46\u662f\u6ca1\u6709\u7cfb\u7edf\u5730\u4ecb\u7ecd\uff0c\u672c\u5c0f\u8282\u5c06\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u8865\u5145\u4e00\u4e0b\u3002 \u300c\u68cb\u76d8 DP\u300d\u662f\u4e00\u79cd\u5728\u77e9\u9635\u4e0a\u8fdb\u884c\u72b6\u6001\u63a8\u5bfc\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002i, j \u5206\u522b\u662f\u68cb\u76d8(\u77e9\u9635)\u7684\u6a2a\u7eb5\u5750\u6807\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u8981\u5171\u540c\u4f5c\u4e3a\u9636\u6bb5\u3002\u9636\u6bb5\u5212\u5206\u6709\u4e24\u79cd\u60c5\u51b5\u90fd\u6bd4\u8f83\u5e38\u89c1\uff1a \u4ec5 i \u4f5c\u4e3a\u9636\u6bb5\uff0c\u5177\u6709\u4f4d\u7f6e\u7b49\u542b\u4e49\u3002\u540c\u65f6 j \u662f\u9644\u52a0\u72b6\u6001\u3002 i, j \u5171\u540c\u4f5c\u4e3a\u9636\u6bb5\uff0c\u5177\u6709\u4f4d\u7f6e\u7b49\u542b\u4e49\u3002\u6ca1\u6709\u9644\u52a0\u7ef4\u5ea6\u3002 \u8fd9\u4e24\u79cd\u9636\u6bb5\u5212\u5206\u65b9\u5f0f\u7684\u601d\u8def\u6709\u533a\u522b\uff0c\u7b2c\u4e00\u79cd\u662f\u4e00\u884c\u4e00\u884c\u5730\u8003\u8651\uff0c\u7b2c\u4e8c\u79cd\u662f\u4e00\u4e2a\u4f4d\u7f6e\u4e00\u4e2a\u4f4d\u7f6e\u5730\u8003\u8651\u3002","title":"1 2\u671f\u56de\u987e"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_19","text":"\u6ce8\u610f\u5230\u5728\u8282\u70b9 u \u65f6\uff0c\u72b6\u6001\u8f6c\u79fb\u8fc7\u7a0b\u53ea\u9700\u8981 dp[v][0]\uff0c\u800c\u4e0d\u9700\u8981 dp[v][1]\uff0c\u56e0\u6b64 dfs \u4ec5\u8fd4\u56de dp[v][0] \u5373\u53ef\u3002 \u4ee3\u7801\u4e2d max1 \u8868\u793a dp[u][0], max2 \u8868\u793a dp[u][1]\u3002 class Solution { public: int treeDiameter(vector<vector<int>>& edges) { int n = edges.size(); vector<vector<int> > g(n + 1); for(const auto &e: edges) { g[e[0]].push_back(e[1]); g[e[1]].push_back(e[0]); } int ans = 0; dfs(0, -1, g, ans); return ans; } private: int dfs(int u, int fa, const vector<vector<int> >& g, int& ans) { int max1 = 0, max2 = 0; for(int v: g[u]) { if(v != fa) { int t = dfs(v, u, g, ans) + 1; if(max1 < t) { max2 = max1; max1 = t; } else if(max2 < t) max2 = t; } } ans = max(ans, (max1 + max2)); return max1; } }; class Solution { public: vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) { vector<vector<int> > g(n); // \u90bb\u63a5\u8868 for(vector<int> &edge: edges) { g[edge[0]].push_back(edge[1]); g[edge[1]].push_back(edge[0]); } vector<int> dpdown(n, 0), dpup(n, 0); // \u7b2c\u4e00\u6b21DFS\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u5728\u4f5c\u4e3a\u5b50\u6811\u6839\u7ed3\u70b9\u7684\u6700\u5927\u9ad8\u5ea6\u3002 dfs_1(0, -1, dpdown, g); // \u7b2c\u4e8c\u6b21DFS\u8865\u5168\u6bcf\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u603b\u6839\u7ed3\u70b9\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u5dee\u8ddd\u5c31\u5728\u4e8e\u9700\u8981\u7edf\u8ba1\u4e0a\u4ece\u7236\u7ed3\u70b9\u4f20\u9012\u8fc7\u6765\u7684\u5b50\u6811\u5206\u652f\u3002 dfs_2(0, -1, dpdown, dpup, g); int min_ans = n; vector<int> ans; for(int i = 0; i < n; ++i) { if(min_ans > dpdown[i]) { min_ans = dpdown[i]; ans.clear(); ans.push_back(i); } else if(min_ans == dpdown[i]) ans.push_back(i); } return ans; } private: void dfs_1(int u, int fa, vector<int>& dpdown, vector<vector<int> >& g) { dpdown[u] = 0; for(auto &v: g[u]) { if(v == fa) continue; dfs_1(v, u, dpdown, g); dpdown[u] = max(dpdown[u], dpdown[v] + 1); } } void dfs_2(int u, int fa, vector<int>& dpdown, vector<int>& dpup, vector<vector<int> >& g) { dpdown[u] = max(dpdown[u], dpup[u]); int max_1 = 0, max_2 = 0; // \u8fd9\u91cc\u9700\u8981\u6700\u5927\u9ad8\u5ea6\u548c\u6b21\u5927\u9ad8\u5ea6 for(auto &v: g[u]) { if(v == fa) continue; if(max_1 < dpdown[v] + 1) { max_2 = max_1; max_1 = dpdown[v] + 1; } else if(max_2 < dpdown[v] + 1) max_2 = dpdown[v] + 1; } for(auto &v: g[u]) { if(v == fa) continue; if (max_1 == dpdown[v] + 1) { // u \u5728 fa \u7684\u6700\u957f\u94fe\u4e0a dpup[v] = max(dpup[u], max_2) + 1; dfs_2(v, u, dpdown, dpup, g); } else { dpup[v] = max(dpup[u], max_1) + 1; dfs_2(v, u, dpdown, dpup, g); } } } }; 834. \u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c 1569. \u5c06\u5b50\u6570\u7ec4\u91cd\u65b0\u6392\u5e8f\u5f97\u5230\u540c\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u65b9\u6848\u6570 124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c 543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84 333. \u6700\u5927 BST \u5b50\u6811 337. \u6253\u5bb6\u52ab\u820d III 1373. \u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u6700\u5927\u952e\u503c\u548c 1372. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u957f\u4ea4\u9519\u8def\u5f84 968. \u76d1\u63a7\u4e8c\u53c9\u6811 1273. \u5220\u9664\u6811\u8282\u70b9 1519. \u5b50\u6811\u4e2d\u6807\u7b7e\u76f8\u540c\u7684\u8282\u70b9\u6570 1617. \u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u4e4b\u95f4\u6700\u5927\u8ddd\u79bb","title":"\u6811\u5f62\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_20","text":"\u300c\u56fe\u4e0a DP\u300d\u5c31\u662f\u5728\u56fe\u7ed3\u6784\u4e0a\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002\u4e00\u822c\u56fe\u8282\u70b9\u672c\u8eab\u4e0d\u4f5c\u4e3a\u9636\u6bb5\uff0c\u800c\u662f\u4f5c\u4e3a\u9636\u6bb5\u6301\u6709\u7684\u72b6\u6001\u3002\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u5982\u679c\u662f\u65e0\u73af\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u8282\u70b9\u672c\u8eab\u4f5c\u4e3a\u9636\u6bb5\uff0c\u6b64\u65f6\u4e00\u822c\u7528\u62d3\u6251\u5e8f\u8fdb\u884c\u63a8\u5bfc\u3002 class Solution { public: vector<int> mostSimilar(int n, vector<vector<int>>& roads, vector<string>& names, vector<string>& targetPath) { vector<vector<int>> g(n); for(vector<int> &e: roads) { g[e[0]].push_back(e[1]); g[e[1]].push_back(e[0]); } int m = targetPath.size(); vector<vector<int>> ed(n, vector<int>(m, -1)); for(int v = 0; v < n; ++v) { for(int i = 0; i < m; ++i) ed[v][i] = names[v] != targetPath[i]; } vector<vector<int>> dp(n, vector<int>(m + 1, INT_MAX / 2)); for(int v = 0; v < n; ++v) dp[v][0] = ed[v][0]; for(int i = 1; i < m; ++i) for(int v = 0; v < n; ++v) { for(int u: g[v]) dp[v][i] = min(dp[v][i], ed[v][i] + dp[u][i - 1]); } int end = -1; int min_ed = INT_MAX / 2; for(int v = 0; v < n; ++v) { if(dp[v][m - 1] < min_ed) { end = v; min_ed = dp[v][m - 1]; } } vector<int> result(m); result[m - 1] = end; int next = end; for(int i = m - 2; i >= 0; --i) { int u = -1; for(int v: g[next]) if(dp[v][i] == dp[next][i + 1] - ed[next][i + 1]) { u = v; break; } result[i] = u; next = u; } return result; } }; class Solution { public: int maxVacationDays(vector<vector<int>>& flights, vector<vector<int>>& days) { int N = days.size(); int K = days[0].size(); // days : N * K vector<vector<int>> dp(N, vector<int>(K, 0)); vector<vector<int>> &adj = flights; for(int i = 0; i < N; ++i) dp[i][K - 1] = days[i][K - 1]; for(int k = K - 2; k >= 0; --k) for(int i = 0; i < N; ++i) { dp[i][k] = dp[i][k + 1]; // \u4e0d\u5750\u822a\u73ed for(int j = 0; j < N; ++j) { if(adj[i][j] == 1) dp[i][k] = max(dp[i][k], dp[j][k + 1]); } dp[i][k] += days[i][k]; } int ans = dp[0][0]; for(int start = 1; start < N; ++start) { if(adj[0][start] == 1) ans = max(ans, dp[start][0]); } return ans; } }; class Solution { public: int maxJumps(vector<int>& arr, int d) { if(arr.empty()) return 0; int n = arr.size(); dp = vector<int>(n, -1); int ans = 1; for(int i = 0; i < n; ++i) if(dp[i] == -1) ans = max(ans, solve(arr, d, i)); return ans; } private: // dp[i] := \u4ee5 i \u5f00\u5934\u7684\u6700\u957f\u8def\u5f84 vector<int> dp; int solve(const vector<int>& arr, const int d, int pos) { if(dp[pos] != -1) return dp[pos]; dp[pos] = 0; int n = arr.size(); for(int k = 1; k <= d; ++k) { int nxt = pos + k; if(nxt >= n || arr[pos] <= arr[nxt]) break; dp[pos] = max(dp[pos], 1 + solve(arr, d, nxt)); } for(int k = 1; k <= d; ++k) { int nxt = pos - k; if(nxt < 0 || arr[pos] <= arr[nxt]) break; dp[pos] = max(dp[pos], 1 + solve(arr, d, nxt)); } dp[pos] = max(1, dp[pos]); return dp[pos]; } };","title":"\u56fe\u4e0a\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_21","text":"\u300c\u6982\u7387 DP\u300d\u3001\u300c\u671f\u671b DP\u300d \u662f\u4e00\u79cd\u5e94\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u6c42\u6982\u7387\u3001\u671f\u671b\u95ee\u9898\u7684\u4e00\u7c7b\u65b9\u6cd5\u3002 \u672c\u7ae0\u5206\u4e3a\u300c\u6982\u7387 DP\u300d \u548c \u300c\u671f\u671b DP\u300d \u4e24\u90e8\u5206\u3002\u9996\u5148\u7ed9\u51fa\u5176\u7406\u8bba\u57fa\u7840\u4ee5\u53ca\u5bf9\u5e94\u7684 DP \u8f6c\u79fb\u65b9\u7a0b\u7684\u5f62\u5f0f\uff1b\u7136\u540e\u901a\u8fc7\u62c6\u89e3\u4e24\u9053\u4f8b\u9898\u5e2e\u52a9\u5404\u4f4d\u52a0\u6df1\u7406\u89e3\uff1b\u6700\u540e\u5217\u51fa\u540c\u7c7b\u578b\u9898\u76ee\u6e05\u5355\uff0c\u5e2e\u52a9\u5927\u5bb6\u5de9\u56fa\u5b66\u4e60\u3002 \u72b6\u6001\u5b9a\u4e49 dp[i][j] := \u7b2c j \u8f6e i \u83b7\u80dc \u7b54\u6848 max(dp[n - 1][i]) \u521d\u59cb\u5316 dp[i][0] = p[i][k], if check(i, 0, k) \u72b6\u6001\u8f6c\u79fb dp[i][j] = sum(dp[i][j - 1] * dp[k]dp[j - 1] * p[i][k]) #include <cmath> #include <iostream> #include <vector> using namespace std; bool check(int i, int j, int k) { // \u5224\u65ad i, k \u662f\u5426\u53ef\u80fd\u5728\u7b2c j \u8f6e\u6210\u4e3a\u5bf9\u624b i >>= j; k >>= j; return i ^ k == 1; } int main() { int n; cin >> n; int N = pow(2, n); vector<vector<double>> P(N, vector<double>(N, -1.0)); for(int i = 0; i < N; ++i) for(int j = 0; j < N; ++j) cin >> P[i][j]; vector<vector<double>> dp(N, vector<double>(n, -1.0)); for(int i = 0; i < N; ++i) { if(i & 1) dp[i][0] = P[i][i - 1]; else dp[i][0] = P[i][i + 1]; } for(int j = 1; j < n; ++j) { for(int i = 0; i < N; ++i) for(int k = 0; k < N; ++k) if(check(i, j, k)) dp[i][j] += dp[i][j - 1] * dp[k][j - 1] * P[i][k]; } double max_p = -1.0; int ans = -1; for(int i = 0; i < n; ++i) if(dp[i][n - 1] > max_p) { max_p = dp[i][n - 1]; ans = i; } cout << ans + 1 << endl; } #include <vector> #include <iostream> #include <iomanip> using namespace std; int main() { int M, T, N; cin >> M >> T >> N; vector<vector<double>> P(T, vector<double>(M, -1.0)); for(int i = 0; i < T; ++i) for(int j = 0; j < M; ++j) cin >> P[i][j]; vector<vector<double>> dp(M, vector<double>(M + 1, -1.0)); double pa = 1.0; double pb_a = 1.0; for(int t = 0; t < T; ++t) { dp.assign(N, vector<double>(M + 1, -1.0)); dp[0][0] = (1 - P[t][0]); dp[0][1] = P[t][0]; for(int i = 1; i < M; ++i) { dp[i][0] = (1 - P[t][0]) * dp[i - 1][0]; for(int j = 1; j <= i; ++j) dp[i][j] = P[t][i] * dp[i - 1][j - 1] + (1 - P[t][i]) * dp[i - 1][j]; } pa *= 1 - dp[M - 1][0]; double tmp = 0.0; for(int j = 1; j < N; ++j) tmp += dp[M - 1][j]; pb_a *= tmp / (1 - dp[M - 1][0]); } pb_a = 1 - pb_a; double ans = pa * pb_a; cout << std::fixed << std::setprecision(4); cout << ans << endl; } \u672c\u8282\u4e3a\u5927\u5bb6\u6c47\u603b\u4e86\u529b\u6263\u4e0a 8 \u9053\u300c\u6982\u7387 DP\u300d\u7684\u9898\u76ee\uff0c\u5927\u5bb6\u53ef\u4ee5\u96c6\u4e2d\u7ec3\u4e60\u3002 \u5206\u6c64 \u65b021\u70b9 \u629b\u63b7\u786c\u5e01 \u201c\u9a6c\u201d\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387 \u4e24\u4e2a\u76d2\u5b50\u4e2d\u7403\u7684\u989c\u8272\u6570\u76f8\u540c\u7684\u6982\u7387 \u5251\u6307 Offer 60. n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \u98de\u673a\u5ea7\u4f4d\u5206\u914d\u6982\u7387 T \u79d2\u540e\u9752\u86d9\u7684\u4f4d\u7f6e #include <vector> #include <fstream> #include <iostream> using namespace std; double solve(int i, const int n, const int m, vector<double>& dp) { if(dp[i] > -0.5) return dp[i]; if(i == m) return dp[i] = 0.0; return dp[i] = (n + (n - i) * solve(i + 1, n, m, dp)) / (n - i); } int main() { ifstream fin(\"data.txt\"); vector<double> dp; int n, m; while((fin >> n) && (fin >> m)) { cout << \"n: \" << n << \", m: \" << m << endl; dp.assign(m + 1, -1.0); double ans = solve(0, n, m, dp); cout << ans << endl; } } \u6a21\u62df\u4ee3\u7801 import numpy as np from multiprocessing import Pool class Simulater: def __init__(self, n, m): self.n = n self.m = m def test(self, T): np.random.seed() N = 0 for _ in range(T): i = 0 j = 0 visited = [False] * self.n while j < self.m: i += 1 x = np.random.randint(0, self.n) if not visited[x]: visited[x] = True j += 1 N += i return N / T with open(\"data.txt\") as f: for line in f.readlines(): line = line.strip().split(\" \") n = int(line[0]) m = int(line[1]) s = Simulater(n, m) T = int(5e5) pool = Pool(8) ts = pool.map(s.test, [T] * 8) print(sum(ts) / 8) #include <vector> #include <fstream> #include <iostream> using namespace std; double solve(int i, int j, const int n, const int m, vector<vector<double>>& dp) { if(dp[i][j] > -0.5) return dp[i][j]; if(i == m) return dp[i][j] = 0.0; double ans = 0.0; ans += j / (double)n * solve(i + 1, j, n, m, dp); ans += (n - j) / (double)n * (1 + solve(i + 1, j + 1, n, m, dp)); return dp[i][j] = ans; } int main() { ifstream fin(\"data.txt\"); vector<vector<double>> dp; int n, m; while((fin >> n) && (fin >> m)) { cout << \"n: \" << n << \", m: \" << m << endl; dp.assign(m + 1, vector<double>(m + 1, -1.0)); double ans = solve(0, 0, n, m, dp); cout << ans << endl; } } \u601d\u8def2 #include <vector> #include <fstream> #include <iostream> using namespace std; double solve(int i, const int n, const int m, vector<double>& dp) { if(dp[i] > -0.5) return dp[i]; if(i == 0) return dp[i] = 0.0; return dp[i] = 1 + (n - 1) / (double)n * solve(i - 1, n, m, dp); } int main() { ifstream fin(\"data.txt\"); vector<double> dp; int n, m; while((fin >> n) && (fin >> m)) { cout << \"n: \" << n << \", m: \" << m << endl; dp.assign(m + 1, -1.0); double ans = solve(m, n, m, dp); cout << ans << endl; } }","title":"\u6982\u7387\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_22","text":"\u535a\u5f08\u52a8\u6001\u89c4\u5212 \u300c\u535a\u5f08 DP\u300d\uff0c\u4e00\u79cd\u5e94\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u535a\u5f08\u95ee\u9898\u7684\u7b97\u6cd5\u3002\u672c\u7ae0\u9996\u5148\u7ed9\u51fa\u7406\u8bba\u57fa\u7840\uff08minimax\uff09\u4ee5\u53ca\u5bf9\u5e94\u7684 DP \u8f6c\u79fb\u65b9\u7a0b\u5f62\u5f0f\uff1b\u7136\u540e\u901a\u8fc7\u8be6\u7ec6\u62c6\u89e3 Leetcode \u4e0a 4 \u9053\u9898\u6765\u5b66\u4e60\u8fd9\u7c7b\u95ee\u9898\u7684\u89e3\u51b3\u601d\u8def\u3002\u300c\u535a\u5f08 DP\u300d\u5728 Leetocde \u4e0a\u6709\u4e0d\u5c11\u9898\u76ee\uff0c\u7ae0\u8282\u672b\u5c3e\u5c06\u96c6\u4e2d\u5217\u51fa\u6765\uff0c\u5927\u5bb6\u53ef\u4ee5\u8fdb\u884c\u9488\u5bf9\u6027\u7ec3\u4e60\u3002 class Solution { public: bool stoneGame(vector<int>& piles) { int n = piles.size(); vector<vector<int>> dp(n, vector<int>(n)); int all = 0; for(int i = 0; i < n; ++i) { all += piles[i]; dp[i][i] = piles[i]; } for(int i = 0; i < n - 1; ++i) dp[i][i + 1] = max(piles[i], piles[i + 1]); for(int l = 3; l <= n; ++l) { // l \u4e3a\u533a\u95f4\u957f\u5ea6 for(int i = 0; i + l <= n; ++i) { int j = i + l - 1; dp[i][j] = max(piles[i] + min(dp[i + 2][j], dp[i + 1][j - 1]) ,piles[j] + min(dp[i + 1][j - 1], dp[i][j - 2]) ); } } return dp[0][n - 1] * 2 > all; } }; class Solution { public: bool nimGame(vector<int>& piles) { int n = piles.size(); vector<int> dp(1 << (n * 3), -1); dp[0] = 0; int t = 0; for(int i = 0; i < n; ++i) t += (piles[i] << (3 * i)); return solve(t, n, dp) == 1; } private: int solve(int s, const int n, vector<int>& dp) { if(dp[s] != -1) return dp[s]; for(int i = 0; i < n; ++i) { int m = ((s >> (i * 3)) & 7); for(int j = 0; j < m; ++j) { int t = s & (~(7 << (i * 3))); t += j << (i * 3); if(solve(t, n, dp) == 0) return dp[s] = 1; } } return dp[s] = 0; } }; class Solution { public: int getMoneyAmount(int n) { vector<vector<int> > dp(n + 1, vector<int>(n + 1, INT_MAX)); for(int i = 1; i <= n; ++i) dp[i][i] = 0; for(int j = 2; j <= n; ++j) for(int i = j - 1; i >= 1; --i) { dp[i][j] = min(dp[i + 1][j] + i, dp[i][j - 1] + j); for(int k = i + 1; k <= j - 1; ++k) dp[i][j] = min(dp[i][j], max(dp[k + 1][j], dp[i][k - 1]) + k); } return dp[1][n]; } }; class Solution { public: bool canWin(string s) { int n = s.size(); if(n < 2) return false; unordered_map<string, bool> dp; return solve(s, dp); } private: bool solve(string& s, unordered_map<string, bool>& dp) { int n = s.size(); if(dp.find(s) != dp.end()) // \u8be5\u72b6\u6001\u5df2\u7ecf\u7b97\u8fc7 return dp[s]; for(int i = 0; i < n - 1; ++i) // \u679a\u4e3e\u6240\u6709\u6b21\u6001 { if(s[i] == '+' && s[i + 1] == '+') { s[i] = '-'; s[i + 1] = '-'; bool f = solve(s, dp); s[i] = '+'; s[i + 1] = '+'; if(!f) return dp[s] = true; } } return dp[s] = false; } }; \u672c\u5c0f\u8282\u4e3a\u5927\u5bb6\u6c47\u603b\u4e86\u529b\u6263\u4e0a 12 \u9053\u5173\u4e8e\u300c\u535a\u5f08 DP\u300d\u7684\u9898\u76ee\uff0c\u5927\u5bb6\u53ef\u4ee5\u96c6\u4e2d\u7ec3\u4e60\u3002 \u7ffb\u8f6c\u6e38\u620f 293. \u7ffb\u8f6c\u6e38\u620f Nim \u6e38\u620f 292. Nim \u6e38\u620f \u77f3\u5b50\u6e38\u620f 1140. \u77f3\u5b50\u6e38\u620f II 1406. \u77f3\u5b50\u6e38\u620f III 1510. \u77f3\u5b50\u6e38\u620f IV \u4e95\u5b57\u6e38\u620f 348. \u5224\u5b9a\u4e95\u5b57\u68cb\u80dc\u8d1f 794. \u6709\u6548\u7684\u4e95\u5b57\u6e38\u620f 1275. \u627e\u51fa\u4e95\u5b57\u68cb\u7684\u83b7\u80dc\u8005 \u5176\u5b83 486. \u9884\u6d4b\u8d62\u5bb6 464. \u6211\u80fd\u8d62\u5417 1025. \u9664\u6570\u535a\u5f08 913. \u732b\u548c\u8001\u9f20","title":"\u535a\u5f08\u52a8\u6001\u89c4\u5212"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_23","text":"\u6ed1\u52a8\u7a97\u53e3\u548c\u53cc\u6307\u9488\u662f\u89e3\u51b3\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u7b49\u95ee\u9898\u7684\u5e38\u7528\u6280\u5de7\u3002\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u7a97\u53e3\u6216\u4e24\u4e2a\u6307\u9488\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u904d\u5386\u6570\u636e\u7ed3\u6784\uff0c\u8fbe\u5230\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u76ee\u7684\u3002 \u6ed1\u52a8\u7a97\u53e3\u901a\u5e38\u7528\u4e8e\u5904\u7406\u8fde\u7eed\u5b50\u6570\u7ec4\u6216\u5b50\u5b57\u7b26\u4e32\u7684\u95ee\u9898\u3002\u901a\u8fc7\u52a8\u6001\u8c03\u6574\u7a97\u53e3\u7684\u5de6\u53f3\u8fb9\u754c\uff0c\u53ef\u4ee5\u5728 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\u6216\u5b50\u5b57\u7b26\u4e32\u3002 \u53cc\u6307\u9488\u5219\u5e38\u7528\u4e8e\u6392\u5e8f\u6570\u7ec4\u6216\u94fe\u8868\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u904d\u5386\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u89e3\u51b3\u67e5\u627e\u3001\u5408\u5e76\u7b49\u95ee\u9898\u3002","title":"\u6ed1\u52a8\u7a97\u53e3\u548c\u53cc\u6307\u9488"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_24","text":"\u5faa\u73af\u524d\u3001\u4e2d\u3001\u540e\u4fdd\u6301\u4e0d\u53d8 \u300c\u5faa\u73af\u4e0d\u53d8\u91cf\u300d\u4e0d\u662f\u5f88\u9ad8\u6df1\u7684\u6982\u5ff5\uff0c\u5728\u300c\u7b97\u6cd5\u300d\u548c\u300c\u6570\u636e\u7ed3\u6784\u300d\u7684\u4e16\u754c\u91cc\uff0c\u5230\u5904\u90fd\u6709\u5b83\u7684\u8eab\u5f71\u3002 \u300c\u5faa\u73af\u4e0d\u53d8\u91cf\u300d\u662f\u6307\u6211\u4eec\u5728\u7f16\u5199\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u4e00\u76f4\u5faa\u5e8f\u4e0d\u53d8\u7684\u6027\u8d28\uff0c\u8fd9\u6837\u7684\u6027\u8d28\u662f\u6839\u636e\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u7531\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002\u300c\u5faa\u73af\u4e0d\u53d8\u91cf\u300d\u662f\u6211\u4eec\u5199\u5bf9\u4e00\u4e2a\u95ee\u9898\u7684\u57fa\u7840\uff0c\u4fdd\u8bc1\u4e86\u5728\u300c\u521d\u59cb\u5316\u300d\u300c\u5faa\u73af\u904d\u5386\u300d\u300c\u7ed3\u675f\u300d\u8fd9\u4e09\u4e2a\u9636\u6bb5\u76f8\u540c\u7684\u6027\u8d28\uff0c\u4f7f\u5f97\u4e00\u4e2a\u95ee\u9898\u80fd\u591f\u88ab\u6b63\u786e\u89e3\u51b3\u3002","title":"\u5faa\u73af\u4e0d\u53d8\u91cf"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_25","text":"\u8fd9\u4e00\u8282\u6211\u4eec\u8bb2\u89e3\u4e24\u4e2a\u975e\u5e38\u57fa\u7840\u4e14\u5e38\u8003\u7684\u95ee\u9898\uff0c\u5411\u5927\u5bb6\u5c55\u793a\uff1a\u6211\u4eec\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u660e\u786e\u81ea\u5df1\u5bf9\u53d8\u91cf\u4ee5\u53ca\u533a\u95f4\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff0c\u5e76\u4e14\u5728\u7f16\u5199\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u5b9a\u4e49\u4e0d\u53d8\u3002 import java.util.Arrays; public class Solution { public void sortColors(int[] nums) { int len = nums.length; if (len < 2) { return; } int zero = 0; int two = len; int i = 0; while (i < two) { if (nums[i] == 0) { swap(nums, i, zero); zero++; i++; } else if (nums[i] == 1) { i++; } else { two--; swap(nums, i, two); } } } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } public class Solution { public void sortColors(int[] nums) { int len = nums.length; if (len < 2) { return; } int zero = -1; int two = len - 1; int i = 0; while (i <= two) { if (nums[i] == 0) { zero++; swap(nums, i, zero); i++; } else if (nums[i] == 1) { i++; } else { swap(nums, i, two); two--; } } } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } import java.util.Arrays; import java.util.Random; public class Solution { private static Random random = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; // \u7b2c k \u5927\u5143\u7d20\u7684\u4e0b\u6807\u662f len - k int target = len - k; int left = 0; int right = len - 1; while (true) { int pIndex = partition(nums, left, right); if (pIndex == target) { return nums[pIndex]; } else if (pIndex < target) { // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [pIndex + 1..right] left = pIndex + 1; } else { // pIndex > target // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [left..pIndex - 1] right = pIndex - 1; } } } private int partition(int[] nums, int left, int right) { // \u6ce8\u610f\uff1a\u5fc5\u987b\u968f\u673a\u5316 int randomIndex = left + random.nextInt(right - left + 1); swap(nums, left, randomIndex); int pivot = nums[left]; // [left + 1 .. le] <= pivot // (le..i] > pivot // \u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u8bbe\u7f6e\u6210 left \uff0c\u5426\u5219\u4ea4\u6362\u4f1a\u51fa\u9519 int le = left; for (int i = left + 1; i <= right; i++) { // \u8fd9\u91cc\u5199 < \u6216\u8005 <= \u90fd\u53ef\u4ee5 if (nums[i] <= pivot) { le++; swap(nums, le, i); } } swap(nums, left, le); return le; } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } import java.util.Random; public class Solution { private static Random random = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; int left = 0; int right = len - 1; // \u7b2c k \u5927\u5143\u7d20\u7684\u4e0b\u6807\u662f len - k int target = len - k; while (true) { int index = partition(nums, left, right); if (index == target) { return nums[index]; } else if (index < target) { left = index + 1; } else { right = index - 1; } } } public int partition(int[] nums, int left, int right) { // \u5728\u533a\u95f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u6807\u5b9a\u70b9 int randomIndex = left + random.nextInt(right - left + 1 ); swap(nums, left, randomIndex); int pivot = nums[left]; // \u5c06\u7b49\u4e8e pivot \u7684\u5143\u7d20\u5206\u6563\u5230\u4e24\u8fb9 // [left..le) <= pivot // (ge..right] >= pivot int le = left + 1; int ge = right; while (true) { // \u9047\u5230 nums[le] >= pivot \u7684\u65f6\u5019\u505c\u4e0b\u6765 // \u9047\u5230\u4e0e pivot \u76f8\u7b49\u7684\u5143\u7d20\uff0c\u662f\u901a\u8fc7\u4ea4\u6362\u88ab\u7b49\u6982\u7387\u5206\u5230\u4e24\u8fb9\u7684 while (le <= ge && nums[le] < pivot) { le++; } while (le <= ge && nums[ge] > pivot) { ge--; } if (le > ge) { break; } swap(nums, le, ge); le++; ge--; } // \u8fd9\u91cc\u8fd8\u8981\u4ea4\u6362\uff0c\u6ce8\u610f\u662f ge swap(nums, left, ge); return ge; } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } import java.util.Random; public class Solution { private static Random RANDOM = new Random(System.currentTimeMillis()); public int findKthLargest(int[] nums, int k) { int len = nums.length; int target = len - k; int left = 0; int right = len - 1; while (true) { int[] pIndex = partition(nums, left, right); int index1 = pIndex[0]; int index2 = pIndex[1]; if (target < index1) { // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [left..index1 - 1] right = index1 - 1; } else if (target == index1) { return nums[index1]; } else if (target < index2) { left = index1 + 1; right = index2 - 1; } else if (target == index2) { return nums[index2]; } else { // pIndex > target // \u4e0b\u4e00\u8f6e\u641c\u7d22\u533a\u95f4 [index2 + 1..right] left = index2 + 1; } } } private int[] partition(int[] nums, int left, int right) { int randomIndex = left + RANDOM.nextInt(right - left + 1); swap(nums, randomIndex, left); // \u5faa\u73af\u4e0d\u53d8\u91cf\uff1a // all in [left + 1..lt] < pivot // all in [lt + 1..i) = pivot // all in [gt..right] > pivot int pivot = nums[left]; int lt = left; int gt = right + 1; int i = left + 1; while (i < gt) { if (nums[i] < pivot) { lt++; swap(nums, i, lt); i++; } else if (nums[i] == pivot) { i++; } else { gt--; swap(nums, i, gt); } } swap(nums, left, lt); // \u8fd9\u91cc\u8981\u7279\u522b\u5c0f\u5fc3 return new int[]{lt, gt - 1}; } private void swap(int[] nums, int index1, int index2) { int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } }","title":"\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u91cf\u5199\u5bf9\u4ee3\u7801"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#1","text":"\u540c\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf \u6709\u4e00\u7c7b\u6570\u7ec4\u4e0a\u7684\u95ee\u9898\uff0c\u95ee\u6211\u4eec\u56fa\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u6027\u8d28\uff0c\u8fd9\u4e00\u7c7b\u95ee\u9898\u5728\u601d\u7ef4\u5c42\u9762\u4e0a\u76f8\u5bf9\u7b80\u5355\u3002\u6211\u4eec\u901a\u8fc7\u4e24\u9053\u7b80\u5355\u7684\u4f8b\u9898\u5411\u5927\u5bb6\u5c55\u793a\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5199\u6cd5\u3002 public class Solution { public double findMaxAverage(int[] nums, int k) { int len = nums.length; // \u7531\u4e8e\u9898\u76ee\u9650\u5236\u4e86 k <= len\uff0c\u56e0\u6b64\u4e0d\u7528\u505a\u7279\u5224 int windowSum = 0; // \u7b2c 1 \u6b65\uff1a\u5148\u6c42\u51fa\u7b2c 1 \u4e2a\u7a97\u53e3\u7684\u548c for (int i = 0; i < k; i++) { windowSum += nums[i]; } // \u7b2c 2 \u6b65\uff1a\u901a\u8fc7\u904d\u5386\u6c42\u51fa\u9664\u4e86\u7b2c 1 \u4e2a\u7a97\u53e3\u7684\u548c int res = windowSum; // \u5faa\u73af\u4e0d\u53d8\u91cf\u5b9a\u4e49\uff1a[left..right) \u662f\u957f\u5ea6\u4e3a k \u7684\u7a97\u53e3 for (int right = k; right < len; right++) { // \u52a0\u4e0a\u4e00\u4e2a\u6570\u518d\u51cf\u53bb\u4e00\u4e2a\u6570 windowSum = windowSum + nums[right] - nums[right - k]; res = Math.max(res, windowSum); } return (double) res / k; } } public class Solution { public int maxSatisfied(int[] customers, int[] grumpy, int X) { int len = grumpy.length; // \u524d\u7f00\u548c preSum[i] \u8868\u793a [0..i) \u91cc\u56e0\u4e3a\u8001\u677f\u751f\u6c14\u800c\u611f\u5230\u4e0d\u5f00\u5fc3\u7684\u987e\u5ba2\u6570 int[] preSum = new int[len + 1]; // \u7edf\u8ba1 1. \u6240\u6709\u672c\u6765\u5c31\u4e0d\u751f\u6c14\u7684\u987e\u5ba2\u6570\u91cf\uff1b2. \u524d\u7f00\u548c\u6570\u7ec4 int originCount = 0; for (int i = 0; i < len; i++) { if (grumpy[i] == 0) { // \u4e0d\u751f\u6c14 originCount += customers[i]; preSum[i + 1] = preSum[i]; } else { // \u751f\u6c14\u65f6\u5019\u524d\u7f00\u548c preSum[i + 1] = preSum[i] + customers[i]; } } int maxAngryCount = 0; // \u56fa\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u5de6\u8fb9\u754c\uff1a[i..i + X) for (int left = 0; left < len - X + 1; left++) { maxAngryCount = Math.max(maxAngryCount, preSum[left + X] - preSum[left]); } // \u6240\u6709\u672c\u6765\u5c31\u4e0d\u751f\u6c14\u7684\u987e\u5ba2 return originCount + maxAngryCount; } }","title":"\u6ed1\u52a8\u7a97\u53e3 1\uff1a\u540c\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#2","text":"\u6709\u4e00\u7c7b\u6570\u7ec4\u4e0a\u7684\u95ee\u9898\uff0c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u53d8\u91cf\uff08\u6211\u4eec\u79f0\u4e3a\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\uff09\uff0c\u540c\u5411\u3001\u4ea4\u66ff\u5411\u53f3\u79fb\u52a8\u5b8c\u6210\u4efb\u52a1\u3002\u8fd9\u6837\u7684\u8fc7\u7a0b\u50cf\u6781\u4e86\u4e00\u4e2a\u7a97\u53e3\u5728\u5e73\u9762\u4e0a\u6ed1\u52a8\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u7b97\u6cd5\u79f0\u4e3a\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u95ee\u9898\u3002 \u638c\u63e1\u597d\u8fd9\u4e00\u7c7b\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u7684\u95ee\u9898\uff0c\u9700\u8981\u5148\u4ece\u300c\u66b4\u529b\u89e3\u6cd5\u300d\u5f00\u59cb\u5206\u6790\uff0c\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u5229\u7528\u4e86\u95ee\u9898\u672c\u8eab\u7684\u7279\u70b9\uff0c\u5728\u4e24\u4e2a\u6307\u9488\u540c\u5411\u3001\u4ea4\u66ff\u5411\u53f3\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c11\u8003\u8651\u4e86\u5f88\u591a\u300c\u66b4\u529b\u89e3\u6cd5\u300d\u9700\u8981\u8003\u5bdf\u4e86\u60c5\u51b5\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230\u4e86\u7ebf\u6027\u7ea7\u522b O(N)\uff08\u8fd9\u91cc\ud835\udc41\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 public class Solution { public String minWindow(String s, String t) { int[] window = new int[128]; int[] pattern = new int[128]; final int A = 'A'; for (Character c : t.toCharArray()) { pattern[c - A]++; } int distance = 0; for (int i = 0; i < 128; i++) { if (pattern[i] > 0) { distance++; } } int sLen = s.length(); int start = 0; int left = 0; int right = 0; int match = 0; int minLen = sLen + 1; while (right < sLen) { Character curChar = s.charAt(right); if (pattern[curChar - A] > 0) { window[curChar - A]++; if (window[curChar - A] == pattern[curChar - A]) { match++; } } right++; while (match == distance) { if (right - left < minLen) { start = left; minLen = right - left; } // \u8003\u8651\u5de6\u8fb9\u754c\u5411\u53f3\u8fb9\u8d70 Character leftChar = s.charAt(left); if (pattern[leftChar - A] > 0) { window[leftChar - A]--; if (window[leftChar - A] < pattern[leftChar - A]) { match--; } } left++; } } return minLen == sLen + 1 ? \"\" : s.substring(start, start + minLen); } } public class Solution { public int characterReplacement(String s, int k) { int len = s.length(); if (len < 2) { return len; } char[] charArray = s.toCharArray(); int left = 0; int right = 0; int res = 0; int maxCount = 0; int[] freq = new int[26]; // [left, right) \u5185\u6700\u591a\u66ff\u6362 k \u4e2a\u5b57\u7b26\u53ef\u4ee5\u5f97\u5230\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u7684\u5b50\u4e32 while (right < len){ freq[charArray[right] - 'A']++; // \u5728\u8fd9\u91cc\u7ef4\u62a4 maxCount\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u53f3\u8fb9\u754c\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5b57\u7b26\u9891\u6570\u589e\u52a0\uff0c\u624d\u4f1a\u4f7f\u5f97 maxCount \u589e\u52a0 maxCount = Math.max(maxCount, freq[charArray[right] - 'A']); right++; if (right - left > maxCount + k){ // \u8bf4\u660e\u6b64\u65f6 k \u4e0d\u591f\u7528 // \u628a\u5176\u5b83\u4e0d\u662f\u6700\u591a\u51fa\u73b0\u7684\u5b57\u7b26\u66ff\u6362\u4ee5\u540e\uff0c\u90fd\u4e0d\u80fd\u586b\u6ee1\u8fd9\u4e2a\u6ed1\u52a8\u7684\u7a97\u53e3\uff0c\u8fd9\u4e2a\u65f6\u5019\u987b\u8981\u8003\u8651\u5de6\u8fb9\u754c\u5411\u53f3\u79fb\u52a8 // \u79fb\u51fa\u6ed1\u52a8\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u9891\u6570\u6570\u7ec4\u987b\u8981\u76f8\u5e94\u5730\u505a\u51cf\u6cd5 freq[charArray[left] - 'A']--; left++; } res = Math.max(res, right - left); } return res; } }","title":"\u6ed1\u52a8\u7a97\u53e3 2\uff1a\u4e0d\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#3","text":"\u8fd9\u4e00\u8282\u6211\u4eec\u5411\u5927\u5bb6\u4ecb\u7ecd\u51e0\u4e2a\u5173\u4e8e\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\u7684\u8ba1\u6570\u95ee\u9898\uff0c\u5199\u5bf9\u8ba1\u6570\u95ee\u9898\u7684\u6807\u51c6\u662f\uff1a\u4e0d\u91cd\u4e0d\u6f0f\u3002 public class Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { int len = s.length(); if (len < 3) { return len; } char[] charArray = s.toCharArray(); int[] freq = new int[128]; // \u6ed1\u52a8\u7a97\u53e3\u91cc\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570 int count = 0; int res = 2; int left = 0; int right = 0; while (right < len) { freq[charArray[right]]++; if (freq[charArray[right]] == 1) { count++; } right++; while (count == 3) { freq[charArray[left]]--; if (freq[charArray[left]] == 0) { count--; } left++; } // \u9000\u51fa\u5faa\u73af\u4ee5\u540e\u6709 count = 2\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u9009\u51fa\u6700\u5927\u503c res = Math.max(res, right - left); } return res; } } public class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { int len = s.length(); if (len <= k) { return len; } char[] charArray = s.toCharArray(); int[] freq = new int[128]; int count = 0; int left = 0; int right = 0; int res = k; while (right < len) { freq[charArray[right]]++; if (freq[charArray[right]] == 1) { count++; } right++; while (count == k + 1) { freq[charArray[left]]--; if (freq[charArray[left]] == 0) { count--; } left++; } res = Math.max(res, right - left); } return res; } } public class Solution { public int numSubarrayBoundedMax(int[] nums, int left, int right) { return lessEqualsThan(nums, right) - lessEqualsThan(nums, left - 1); } private int lessEqualsThan(int[] nums, int k) { int len = nums.length; int res = 0; // \u5faa\u73af\u4e0d\u53d8\u91cf\uff1anums[left..right] \u91cc\u7684\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u4e8e\u7b49\u4e8e k for (int left = 0, right = 0; right < len; right++) { if (nums[right] > k) { left = right + 1; } res += right - left; } return res; } } public class Solution { public int subarraysWithKDistinct(int[] A, int K) { return atMostKDistinct(A, K) - atMostKDistinct(A, K - 1); } /** * @param A * @param K * @return \u6700\u591a\u5305\u542b K \u4e2a\u4e0d\u540c\u6574\u6570\u7684\u5b50\u533a\u95f4\u7684\u4e2a\u6570 */ private int atMostKDistinct(int[] A, int K) { int len = A.length; int[] freq = new int[len + 1]; int left = 0; int right = 0; // [left, right) \u91cc\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570 int count = 0; int res = 0; // [left, right) \u5305\u542b\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e K while (right < len) { if (freq[A[right]] == 0) { count++; } freq[A[right]]++; right++; while (count > K) { freq[A[left]]--; if (freq[A[left]] == 0) { count--; } left++; } // [left, right) \u533a\u95f4\u7684\u957f\u5ea6\u5c31\u662f\u5bf9\u7ed3\u679c\u7684\u8d21\u732e res += right - left; } return res; } }","title":"\u6ed1\u52a8\u7a97\u53e3 3\uff1a\u8ba1\u6570\u95ee\u9898\u9009\u8bb2"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#4","text":"\u6709\u4e00\u7c7b\u95ee\u9898\u53ea\u662f\u540d\u5b57\u4e0a\u53eb\u300c\u6ed1\u52a8\u7a97\u53e3\u300d\uff0c\u4f46\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u9700\u8981\u7528\u5230\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e00\u8282\u7ed9\u51fa\u7684\u95ee\u9898\u53ef\u4ee5\u5f53\u505a\u4f8b\u9898\u8fdb\u884c\u5b66\u4e60\uff0c\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u95ee\u9898\u662f\u57fa\u4e8e\u8fd9\u4e9b\u95ee\u9898\u884d\u751f\u51fa\u6765\u7684\u3002 class Solution { public: vector<int> maxSlidingWindow(vector<int>& nums, int k) { int n = nums.size(); priority_queue<pair<int, int>> q; for (int i = 0; i < k; ++i) { q.emplace(nums[i], i); } vector<int> ans = {q.top().first}; for (int i = k; i < n; ++i) { q.emplace(nums[i], i); while (q.top().second <= i - k) { q.pop(); } ans.push_back(q.top().first); } return ans; } }; class Solution { public: vector<int> maxSlidingWindow(vector<int>& nums, int k) { int n = nums.size(); deque<int> q; for (int i = 0; i < k; ++i) { while (!q.empty() && nums[i] >= nums[q.back()]) { q.pop_back(); } q.push_back(i); } vector<int> ans = {nums[q.front()]}; for (int i = k; i < n; ++i) { while (!q.empty() && nums[i] >= nums[q.back()]) { q.pop_back(); } q.push_back(i); while (q.front() <= i - k) { q.pop_front(); } ans.push_back(nums[q.front()]); } return ans; } }; class DualHeap { private: // \u5927\u6839\u5806\uff0c\u7ef4\u62a4\u8f83\u5c0f\u7684\u4e00\u534a\u5143\u7d20 priority_queue<int> small; // \u5c0f\u6839\u5806\uff0c\u7ef4\u62a4\u8f83\u5927\u7684\u4e00\u534a\u5143\u7d20 priority_queue<int, vector<int>, greater<int>> large; // \u54c8\u5e0c\u8868\uff0c\u8bb0\u5f55\u300c\u5ef6\u8fdf\u5220\u9664\u300d\u7684\u5143\u7d20\uff0ckey \u4e3a\u5143\u7d20\uff0cvalue \u4e3a\u9700\u8981\u5220\u9664\u7684\u6b21\u6570 unordered_map<int, int> delayed; int k; // small \u548c large \u5f53\u524d\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u9700\u8981\u6263\u9664\u88ab\u300c\u5ef6\u8fdf\u5220\u9664\u300d\u7684\u5143\u7d20 int smallSize, largeSize; public: DualHeap(int _k): k(_k), smallSize(0), largeSize(0) {} private: // \u4e0d\u65ad\u5730\u5f39\u51fa heap \u7684\u5806\u9876\u5143\u7d20\uff0c\u5e76\u4e14\u66f4\u65b0\u54c8\u5e0c\u8868 template<typename T> void prune(T& heap) { while (!heap.empty()) { int num = heap.top(); if (delayed.count(num)) { --delayed[num]; if (!delayed[num]) { delayed.erase(num); } heap.pop(); } else { break; } } } // \u8c03\u6574 small \u548c large \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4f7f\u5f97\u4e8c\u8005\u7684\u5143\u7d20\u4e2a\u6570\u6ee1\u8db3\u8981\u6c42 void makeBalance() { if (smallSize > largeSize + 1) { // small \u6bd4 large \u5143\u7d20\u591a 2 \u4e2a large.push(small.top()); small.pop(); --smallSize; ++largeSize; // small \u5806\u9876\u5143\u7d20\u88ab\u79fb\u9664\uff0c\u9700\u8981\u8fdb\u884c prune prune(small); } else if (smallSize < largeSize) { // large \u6bd4 small \u5143\u7d20\u591a 1 \u4e2a small.push(large.top()); large.pop(); ++smallSize; --largeSize; // large \u5806\u9876\u5143\u7d20\u88ab\u79fb\u9664\uff0c\u9700\u8981\u8fdb\u884c prune prune(large); } } public: void insert(int num) { if (small.empty() || num <= small.top()) { small.push(num); ++smallSize; } else { large.push(num); ++largeSize; } makeBalance(); } void erase(int num) { ++delayed[num]; if (num <= small.top()) { --smallSize; if (num == small.top()) { prune(small); } } else { --largeSize; if (num == large.top()) { prune(large); } } makeBalance(); } double getMedian() { return k & 1 ? small.top() : ((double)small.top() + large.top()) / 2; } }; class Solution { public: vector<double> medianSlidingWindow(vector<int>& nums, int k) { DualHeap dh(k); for (int i = 0; i < k; ++i) { dh.insert(nums[i]); } vector<double> ans = {dh.getMedian()}; for (int i = k; i < nums.size(); ++i) { dh.insert(nums[i]); dh.erase(nums[i - k]); ans.push_back(dh.getMedian()); } return ans; } }; \u7531\u4e8e small small \u662f\u5927\u6839\u5806\uff0c large large \u662f\u5c0f\u6839\u5806\uff0c\u56e0\u6b64\u6839\u672c\u5c31\u4e0d\u5b58\u5728\u4e0e num num \u503c\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4e5f\u5c31\u4e0d\u53ef\u80fd\u4f1a\u88ab\u5ef6\u8fdf\u5220\u9664\u4e86\u3002","title":"\u6ed1\u52a8\u7a97\u53e3 4\uff1a\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7a97\u53e3\u6027\u8d28"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_26","text":"\u89e3\u51b3\u94fe\u8868\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u6709\u4e9b\u65f6\u5019\u9700\u8981\u4e00\u4e9b\u8111\u6d1e\uff0c\u5e76\u6ca1\u6709\u90a3\u4e48\u5bb9\u6613\u60f3\u5230\u3002\u597d\u5728\u8fd9\u4e9b\u95ee\u9898\u53ea\u9700\u8981\u638c\u63e1\u8fd9\u4e9b\u5e38\u89c1\u7684\u6280\u5de7\u5c31\u53ef\u4ee5\u4e86\u3002\u5176\u4e2d\u6700\u5178\u578b\u7684\u6280\u5de7\u5c31\u662f\u300c\u5feb\u6162\u6307\u9488\u300d\uff0c\u4e5f\u79f0\u4e3a\u300c\u540c\u6b65\u6307\u9488\u300d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u89e3\u51b3\u5b83\u4eec\u90fd\u662f\u5728\u94fe\u8868\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0c\u56e0\u6b64\u4e5f\u79f0\u4e3a\u300c\u53cc\u6307\u9488\u300d\u6280\u5de7\u3002 class Solution { public: bool hasCycle(ListNode *head) { unordered_set<ListNode*> seen; while (head != nullptr) { if (seen.count(head)) { return true; } seen.insert(head); head = head->next; } return false; } }; class Solution { public: bool hasCycle(ListNode* head) { if (head == nullptr || head->next == nullptr) { return false; } ListNode* slow = head; ListNode* fast = head->next; while (slow != fast) { if (fast == nullptr || fast->next == nullptr) { return false; } slow = slow->next; fast = fast->next->next; } return true; } }; class Solution { public: int getLength(ListNode* head) { int length = 0; while (head) { ++length; head = head->next; } return length; } ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(0, head); int length = getLength(head); ListNode* cur = dummy; for (int i = 1; i < length - n + 1; ++i) { cur = cur->next; } cur->next = cur->next->next; ListNode* ans = dummy->next; delete dummy; return ans; } }; class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(0, head); stack<ListNode*> stk; ListNode* cur = dummy; while (cur) { stk.push(cur); cur = cur->next; } for (int i = 0; i < n; ++i) { stk.pop(); } ListNode* prev = stk.top(); prev->next = prev->next->next; ListNode* ans = dummy->next; delete dummy; return ans; } }; class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(0, head); ListNode* first = head; ListNode* second = dummy; for (int i = 0; i < n; ++i) { first = first->next; } while (first) { first = first->next; second = second->next; } second->next = second->next->next; ListNode* ans = dummy->next; delete dummy; return ans; } }; class Solution { public: ListNode* middleNode(ListNode* head) { int n = 0; ListNode* cur = head; while (cur != nullptr) { ++n; cur = cur->next; } int k = 0; cur = head; while (k < n / 2) { ++k; cur = cur->next; } return cur; } }; class Solution { public: ListNode* middleNode(ListNode* head) { ListNode* slow = head; ListNode* fast = head; while (fast != NULL && fast->next != NULL) { slow = slow->next; fast = fast->next->next; } return slow; } };","title":"\u94fe\u8868\u4e2d\u7684\u53cc\u6307\u9488\u95ee\u9898"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_27","text":"\u76f8\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf \u300c\u53cc\u6307\u9488\u300d\u662f\u6307\u901a\u8fc7\u4e24\u4e2a\u53d8\u91cf\u4ea4\u66ff\u76f8\u5411\u79fb\u52a8\u5b8c\u6210\u4efb\u52a1\u7684\u7b97\u6cd5\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf i \u548c j \uff0c\u521d\u59cb\u7684\u65f6\u5019\uff0ci \u548c j \u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u6307\u9488 i \u4e0d\u65ad\u5411\u53f3\u79fb\u52a8\uff0c \u6307\u9488 j \u4e0d\u65ad\u5411\u5de6\u79fb\u52a8\uff0c\u76f4\u5230\u5b83\u4eec\u76f8\u9047\u3002\u8fd9\u6837\u8bbe\u8ba1\u7684\u7b97\u6cd5\u5c11\u8003\u8651\u4e86\u5f88\u591a\u66b4\u529b\u89e3\u6cd5\u9700\u8981\u8003\u8651\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a","title":"\u53cc\u6307\u9488\uff1a\u76f8\u5411\u4ea4\u66ff\u79fb\u52a8\u7684\u4e24\u4e2a\u53d8\u91cf"},{"location":"thu/d3/d3s/oi/oj/lc/other/algo_jinjie/#_28","text":"\u8d2a\u5fc3\u7b97\u6cd5\u662f\u5bf9\u5b8c\u6210\u4e00\u4ef6\u4e8b\u60c5\u7684\u65b9\u6cd5\u7684\u63cf\u8ff0\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u6bcf\u4e00\u6b21\u90fd\u505a\u51fa\u5f53\u524d\u770b\u8d77\u6765\u6700\u597d\u7684\u9009\u62e9\uff0c\u800c\u4e0d\u7528\u8003\u8651\u5176\u5b83\u53ef\u80fd\u7684\u9009\u62e9\u3002 \u8d2a\u5fc3\u7b97\u6cd5\u7684\u5b66\u4e60\u53ef\u4ee5\u4e0e\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u8fdb\u884c\u6bd4\u8f83\uff0c\u770b\u770b\u5b83\u5230\u5e95\u6bd4\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u5c11\u8003\u8651\u4e86\u54ea\u4e9b\u5b50\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u5c11\u8003\u8651\u90a3\u4e9b\u5b50\u95ee\u9898\uff0c\u800c\u6bcf\u6b21\u53ea\u4e13\u6ce8\u4e8e\u6c42\u89e3\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u901a\u8fc7\u9010\u6b65\u9012\u63a8\u5f97\u5230\u539f\u95ee\u9898\u7684\u7b54\u6848\u3002","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"thu/d3/d3s/oi/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3s/quant/quant/","text":"quant for future","title":"Quant"},{"location":"thu/d3/d3s/quant/problem/p/","text":"\u600e\u4e48\u753b\u7535\u8def\u56fe\uff0c\u8bbe\u8ba1\u56fe","title":"P"},{"location":"thu/d3/d3x/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/szfx/","text":"\u6570\u503c\u5206\u6790\u8bfe\u7a0b","title":"Szfx"},{"location":"thu/d3/d3x/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/class/class01/","text":"\u53ef\u5bfc\u7684\u8868\u793a","title":"Class01"},{"location":"thu/d3/d3x/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/class/class06/","text":"\u8fed\u4ee3\u6cd5","title":"Class06"},{"location":"thu/d3/d3x/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/class/class06/#_1","text":"","title":"\u8fed\u4ee3\u6cd5"},{"location":"thu/d3/d3x/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/deepL/","text":"\u6df1\u5ea6\u5b66\u4e60 \u4e3b\u9875","title":"deepL"},{"location":"thu/d3/d3x/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/deepRL/","text":"\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60by Huazhe Xu \u4e2a\u4eba\u4e3b\u9875 textbooks cmu\u8bfe\u7a0b","title":"deepRL"},{"location":"thu/d3/d3x/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/textbook/","text":"1.Sutton & Barto - \"Reinforcement Learning: An Introduction\" (2nd Edition) Authors: Richard S. Sutton and Andrew G. Barto Level: Classic, Fundamental \u2705 Why Read: The bible of RL \u2014 covers all core RL concepts including Markov Decision Processes (MDP), Policy Gradient, Q-Learning. Though not \"deep\" RL focused, it's the essential foundation for understanding Deep RL. \u2705 Free PDF: pdf 2.\"Algorithms for Reinforcement Learning\" \u2014 Csaba Szepesv\u00e1ri (Free PDF) \u2705 Why Read: Good for theoretical background and understanding RL convergence and algorithms. Compact but rigorous \u2014 focuses on algorithmic details. \u2705 Free PDF: pdf 3.Bonus Online Resource \u2014 OpenAI Spinning Up Website: https://spinningup.openai.com/ \u2705 Why Use: OpenAI's free, practical guide to Deep RL. Covers PPO, DDPG, TD3, SAC with clear explanations and Python implementations. Great for self-learners and coders.","title":"Textbook"},{"location":"thu/d4/d4/","text":"\u5927\u56db \u5927\u56db\u4e0a\u8bfe\u7a0b \u5927\u56db\u4e0b\u8bfe\u7a0b","title":"\u5927\u56db"}]}